<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" /><meta name="viewport" content="width=device-width, initial-scale=1" />
<meta property="og:title" content="wave --- Read and write WAV files" />
<meta property="og:type" content="website" />
<meta property="og:url" content="https://docs.python.org/3/library/wave.xhtml" />
<meta property="og:site_name" content="Python documentation" />
<meta property="og:description" content="源代码: Lib/wave.py[https://github.com/python/cpython/tree/3.12/Lib/wave.py] wave 模块提供了一个处理 Waveform Audio &quot;WAVE&quot; (或称 &quot;WAV&quot;) 文件格式的便利接口。 仅支持未压缩的 PCM 编码波形文件。 wave 模块定义了以下函数和异常: Wave_read对象: Wave_write 对象:" />
<meta property="og:image" content="https://docs.python.org/3/_static/og-image.png" />
<meta property="og:image:alt" content="Python documentation" />
<meta name="description" content="源代码: Lib/wave.py[https://github.com/python/cpython/tree/3.12/Lib/wave.py] wave 模块提供了一个处理 Waveform Audio &quot;WAVE&quot; (或称 &quot;WAV&quot;) 文件格式的便利接口。 仅支持未压缩的 PCM 编码波形文件。 wave 模块定义了以下函数和异常: Wave_read对象: Wave_write 对象:" />
<meta property="og:image:width" content="200" />
<meta property="og:image:height" content="200" />
<meta name="theme-color" content="#3776ab" />

    <title>wave --- Read and write WAV files</title>
    <link rel="stylesheet" type="text/css" href="../_static/pygments.css" />
    <link rel="stylesheet" type="text/css" href="../_static/epub.css" />
    <link rel="canonical" href="https://docs.python.org/3/library/wave.html" />
    
      
    

    
    <style>
      @media only screen {
        table.full-width-table {
            width: 100%;
        }
      }
    </style>
 

  </head><body>


    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <section id="module-wave">
<span id="wave-read-and-write-wav-files"></span><h1><code class="xref py py-mod docutils literal notranslate"><span class="pre">wave</span></code> --- Read and write WAV files</h1>
<p><strong>源代码:</strong> <a class="reference external" href="https://github.com/python/cpython/tree/3.12/Lib/wave.py">Lib/wave.py</a><span class="link-target"> [https://github.com/python/cpython/tree/3.12/Lib/wave.py]</span></p>
<hr class="docutils" />
<p><a class="reference internal" href="#module-wave" title="wave: Provide an interface to the WAV sound format."><code class="xref py py-mod docutils literal notranslate"><span class="pre">wave</span></code></a> 模块提供了一个处理 Waveform Audio &quot;WAVE&quot; (或称 &quot;WAV&quot;) 文件格式的便利接口。 仅支持未压缩的 PCM 编码波形文件。</p>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.12 版本发生变更: </span>增加了对 <code class="docutils literal notranslate"><span class="pre">WAVE_FORMAT_EXTENSIBLE</span></code> 标头的支持，要求扩展格式为 <code class="docutils literal notranslate"><span class="pre">KSDATAFORMAT_SUBTYPE_PCM</span></code>。</p>
</div>
<p><a class="reference internal" href="#module-wave" title="wave: Provide an interface to the WAV sound format."><code class="xref py py-mod docutils literal notranslate"><span class="pre">wave</span></code></a> 模块定义了以下函数和异常:</p>
<dl class="py function">
<dt class="sig sig-object py" id="wave.open">
<span class="sig-prename descclassname"><span class="pre">wave.</span></span><span class="sig-name descname"><span class="pre">open</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">file</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">mode</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>如果 <em>file</em> 是一个字符串，打开对应文件名的文件。否则就把它作为文件型对象来处理。<em>mode</em> 可以为以下值：</p>
<dl class="simple">
<dt><code class="docutils literal notranslate"><span class="pre">'rb'</span></code></dt><dd><p>只读模式。</p>
</dd>
<dt><code class="docutils literal notranslate"><span class="pre">'wb'</span></code></dt><dd><p>只写模式。</p>
</dd>
</dl>
<p>注意不支持同时读写WAV文件。</p>
<p><em>mode</em> 设为 <code class="docutils literal notranslate"><span class="pre">'rb'</span></code> 时返回一个 <a class="reference internal" href="#wave.Wave_read" title="wave.Wave_read"><code class="xref py py-class docutils literal notranslate"><span class="pre">Wave_read</span></code></a> 对象，而 <em>mode</em> 设为 <code class="docutils literal notranslate"><span class="pre">'wb'</span></code> 时返回一个 <a class="reference internal" href="#wave.Wave_write" title="wave.Wave_write"><code class="xref py py-class docutils literal notranslate"><span class="pre">Wave_write</span></code></a> 对象。如果省略 <em>mode</em> 并指定 <em>file</em> 来传入一个文件型对象，则 <code class="docutils literal notranslate"><span class="pre">file.mode</span></code> 会被用作 <em>mode</em> 的默认值。</p>
<p>如果你传入一个文件型对象，当调用 wave 对象的 <code class="docutils literal notranslate"><span class="pre">close()</span></code> 方法时并不会真正关闭它；调用者需要负责关闭文件对象。</p>
<p><a class="reference internal" href="#wave.open" title="wave.open"><code class="xref py py-func docutils literal notranslate"><span class="pre">open()</span></code></a> 函数可以在 <a class="reference internal" href="../reference/compound_stmts.xhtml#with"><code class="xref std std-keyword docutils literal notranslate"><span class="pre">with</span></code></a> 语句中使用。 当 <code class="xref std std-keyword docutils literal notranslate"><span class="pre">with</span></code> 阻塞结束时，<a class="reference internal" href="#wave.Wave_read.close" title="wave.Wave_read.close"><code class="xref py py-meth docutils literal notranslate"><span class="pre">Wave_read.close()</span></code></a> 或 <a class="reference internal" href="#wave.Wave_write.close" title="wave.Wave_write.close"><code class="xref py py-meth docutils literal notranslate"><span class="pre">Wave_write.close()</span></code></a> 方法会被调用。</p>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.4 版本发生变更: </span>添加了对不可搜索文件的支持。</p>
</div>
</dd></dl>

<dl class="py exception">
<dt class="sig sig-object py" id="wave.Error">
<em class="property"><span class="pre">exception</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">wave.</span></span><span class="sig-name descname"><span class="pre">Error</span></span></dt>
<dd><p>当不符合WAV格式或无法操作时引发的错误。</p>
</dd></dl>

<section id="wave-read-objects">
<span id="id1"></span><h2>Wave_read对象</h2>
<dl class="py class">
<dt class="sig sig-object py" id="wave.Wave_read">
<em class="property"><span class="pre">class</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">wave.</span></span><span class="sig-name descname"><span class="pre">Wave_read</span></span></dt>
<dd><p>读取一个 WAV 文件。</p>
<p>由 <a class="reference internal" href="#wave.open" title="wave.open"><code class="xref py py-func docutils literal notranslate"><span class="pre">open()</span></code></a> 返回的 Wave_read 对象，有以下几种方法:</p>
<dl class="py method">
<dt class="sig sig-object py" id="wave.Wave_read.close">
<span class="sig-name descname"><span class="pre">close</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>关闭 <a class="reference internal" href="#module-wave" title="wave: Provide an interface to the WAV sound format."><code class="xref py py-mod docutils literal notranslate"><span class="pre">wave</span></code></a> 打开的数据流并使对象不可用。当对象销毁时会自动调用。</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="wave.Wave_read.getnchannels">
<span class="sig-name descname"><span class="pre">getnchannels</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>返回声道数量（<code class="docutils literal notranslate"><span class="pre">1</span></code> 为单声道，<code class="docutils literal notranslate"><span class="pre">2</span></code> 为立体声）</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="wave.Wave_read.getsampwidth">
<span class="sig-name descname"><span class="pre">getsampwidth</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>返回采样字节长度。</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="wave.Wave_read.getframerate">
<span class="sig-name descname"><span class="pre">getframerate</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>返回采样频率。</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="wave.Wave_read.getnframes">
<span class="sig-name descname"><span class="pre">getnframes</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>返回音频总帧数。</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="wave.Wave_read.getcomptype">
<span class="sig-name descname"><span class="pre">getcomptype</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>返回压缩类型（只支持 <code class="docutils literal notranslate"><span class="pre">'NONE'</span></code> 类型）</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="wave.Wave_read.getcompname">
<span class="sig-name descname"><span class="pre">getcompname</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p><a class="reference internal" href="#wave.Wave_read.getcomptype" title="wave.Wave_read.getcomptype"><code class="xref py py-meth docutils literal notranslate"><span class="pre">getcomptype()</span></code></a> 的通俗版本。使用 <code class="docutils literal notranslate"><span class="pre">'not</span> <span class="pre">compressed'</span></code> 代替 <code class="docutils literal notranslate"><span class="pre">'NONE'</span></code>。</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="wave.Wave_read.getparams">
<span class="sig-name descname"><span class="pre">getparams</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>返回一个 <a class="reference internal" href="collections.xhtml#collections.namedtuple" title="collections.namedtuple"><code class="xref py py-func docutils literal notranslate"><span class="pre">namedtuple()</span></code></a> <code class="docutils literal notranslate"><span class="pre">(nchannels,</span> <span class="pre">sampwidth,</span> <span class="pre">framerate,</span> <span class="pre">nframes,</span> <span class="pre">comptype,</span> <span class="pre">compname)</span></code>，等价于 <code class="docutils literal notranslate"><span class="pre">get*()</span></code> 方法的输出。</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="wave.Wave_read.readframes">
<span class="sig-name descname"><span class="pre">readframes</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">n</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>读取并返回以 <a class="reference internal" href="stdtypes.xhtml#bytes" title="bytes"><code class="xref py py-class docutils literal notranslate"><span class="pre">bytes</span></code></a> 对象表示的最多 <em>n</em> 帧音频。</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="wave.Wave_read.rewind">
<span class="sig-name descname"><span class="pre">rewind</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>重置文件指针至音频开头.</p>
</dd></dl>

<p>以下两个方法是为了和 <a class="reference internal" href="aifc.xhtml#module-aifc" title="aifc: Read and write audio files in AIFF or AIFC format.（已弃用）"><code class="xref py py-mod docutils literal notranslate"><span class="pre">aifc</span></code></a> 保持兼容，实际不做任何事情。</p>
<dl class="py method">
<dt class="sig sig-object py" id="wave.Wave_read.getmarkers">
<span class="sig-name descname"><span class="pre">getmarkers</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>返回 <code class="docutils literal notranslate"><span class="pre">None</span></code>。</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="wave.Wave_read.getmark">
<span class="sig-name descname"><span class="pre">getmark</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">id</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>引发错误异常。</p>
</dd></dl>

<p>以下两个方法都使用指针，具体实现由其底层决定。</p>
<dl class="py method">
<dt class="sig sig-object py" id="wave.Wave_read.setpos">
<span class="sig-name descname"><span class="pre">setpos</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">pos</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>设置文件指针到指定位置。</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="wave.Wave_read.tell">
<span class="sig-name descname"><span class="pre">tell</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>返回当前文件指针位置。</p>
</dd></dl>

</dd></dl>

</section>
<section id="wave-write-objects">
<span id="id2"></span><h2>Wave_write 对象</h2>
<dl class="py class">
<dt class="sig sig-object py" id="wave.Wave_write">
<em class="property"><span class="pre">class</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">wave.</span></span><span class="sig-name descname"><span class="pre">Wave_write</span></span></dt>
<dd><p>写入一个 WAV 文件。</p>
<p>Wave_write 对象，由 <a class="reference internal" href="#wave.open" title="wave.open"><code class="xref py py-func docutils literal notranslate"><span class="pre">open()</span></code></a> 返回。</p>
<p>对于可查找的输出流，<code class="docutils literal notranslate"><span class="pre">wave</span></code> 头将自动更新以反映实际写入的帧数。 对于不可查找的流，当写入第一帧时 <em>nframes</em> 值必须是准确的。 要获取准确的 <em>nframes</em> 值可以通过调用 <a class="reference internal" href="#wave.Wave_write.setnframes" title="wave.Wave_write.setnframes"><code class="xref py py-meth docutils literal notranslate"><span class="pre">setnframes()</span></code></a> 或 <a class="reference internal" href="#wave.Wave_write.setparams" title="wave.Wave_write.setparams"><code class="xref py py-meth docutils literal notranslate"><span class="pre">setparams()</span></code></a> 并附带 <a class="reference internal" href="#wave.Wave_write.close" title="wave.Wave_write.close"><code class="xref py py-meth docutils literal notranslate"><span class="pre">close()</span></code></a> 被调用之前将要写入的帧数然后使用 <a class="reference internal" href="#wave.Wave_write.writeframesraw" title="wave.Wave_write.writeframesraw"><code class="xref py py-meth docutils literal notranslate"><span class="pre">writeframesraw()</span></code></a> 来写入帧数据，或者通过调用 <a class="reference internal" href="#wave.Wave_write.writeframes" title="wave.Wave_write.writeframes"><code class="xref py py-meth docutils literal notranslate"><span class="pre">writeframes()</span></code></a> 并附带所有要写入的帧。 在后一种情况下 <a class="reference internal" href="#wave.Wave_write.writeframes" title="wave.Wave_write.writeframes"><code class="xref py py-meth docutils literal notranslate"><span class="pre">writeframes()</span></code></a> 将计算数据中的帧数并在写入帧数据之前相应地设置 <em>nframes</em>。</p>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.4 版本发生变更: </span>添加了对不可搜索文件的支持。</p>
</div>
<p>Wave_write 对象具有以下方法:</p>
<dl class="py method">
<dt class="sig sig-object py" id="wave.Wave_write.close">
<span class="sig-name descname"><span class="pre">close</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>确保 <em>nframes</em> 是正确的，并在文件被 <a class="reference internal" href="#module-wave" title="wave: Provide an interface to the WAV sound format."><code class="xref py py-mod docutils literal notranslate"><span class="pre">wave</span></code></a> 打开时关闭它。 此方法会在对象收集时被调用。 如果输出流不可查找且 <em>nframes</em> 与实际写入的帧数不匹配时引发异常。</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="wave.Wave_write.setnchannels">
<span class="sig-name descname"><span class="pre">setnchannels</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">n</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>设置声道数。</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="wave.Wave_write.setsampwidth">
<span class="sig-name descname"><span class="pre">setsampwidth</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">n</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>设置采样字节长度为 <em>n</em>。</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="wave.Wave_write.setframerate">
<span class="sig-name descname"><span class="pre">setframerate</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">n</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>设置采样频率为 <em>n</em>。</p>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.2 版本发生变更: </span>对此方法的非整数输入会被舍入到最接近的整数。</p>
</div>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="wave.Wave_write.setnframes">
<span class="sig-name descname"><span class="pre">setnframes</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">n</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>设置总帧数为 <em>n</em>。 如果与之后实际写入的帧数不一致此值将会被更改（ 如果输出流不可查找则此更改尝试将引发错误）。</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="wave.Wave_write.setcomptype">
<span class="sig-name descname"><span class="pre">setcomptype</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">type</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">name</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>设置压缩格式。目前只支持 <code class="docutils literal notranslate"><span class="pre">NONE</span></code> 即无压缩格式。</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="wave.Wave_write.setparams">
<span class="sig-name descname"><span class="pre">setparams</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">tuple</span></span></em><span class="sig-paren">)</span></dt>
<dd><p><em>tuple</em> 应该是 <code class="docutils literal notranslate"><span class="pre">(nchannels,</span> <span class="pre">sampwidth,</span> <span class="pre">framerate,</span> <span class="pre">nframes,</span> <span class="pre">comptype,</span> <span class="pre">compname)</span></code>，每项的值可用于 <code class="docutils literal notranslate"><span class="pre">set*()</span></code> 方法。 设置所有形参。</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="wave.Wave_write.tell">
<span class="sig-name descname"><span class="pre">tell</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>返回当前文件指针，其指针含义和 <a class="reference internal" href="#wave.Wave_read.tell" title="wave.Wave_read.tell"><code class="xref py py-meth docutils literal notranslate"><span class="pre">Wave_read.tell()</span></code></a> 以及 <a class="reference internal" href="#wave.Wave_read.setpos" title="wave.Wave_read.setpos"><code class="xref py py-meth docutils literal notranslate"><span class="pre">Wave_read.setpos()</span></code></a> 是一致的。</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="wave.Wave_write.writeframesraw">
<span class="sig-name descname"><span class="pre">writeframesraw</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">data</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>写入音频数据但不更新 <em>nframes</em>。</p>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.4 版本发生变更: </span>现在可接受任意 <a class="reference internal" href="../glossary.xhtml#term-bytes-like-object"><span class="xref std std-term">bytes-like object</span></a>。</p>
</div>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="wave.Wave_write.writeframes">
<span class="sig-name descname"><span class="pre">writeframes</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">data</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>写入音频帧并确保 <em>nframes</em> 是正确的。 如果输出流不可查找且在 <em>data</em> 被写入之后写入的总帧数与之前设定的 <em>nframes</em> 值不匹配将会引发错误。</p>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.4 版本发生变更: </span>现在可接受任意 <a class="reference internal" href="../glossary.xhtml#term-bytes-like-object"><span class="xref std std-term">bytes-like object</span></a>。</p>
</div>
<p>注意在调用 <a class="reference internal" href="#wave.Wave_write.writeframes" title="wave.Wave_write.writeframes"><code class="xref py py-meth docutils literal notranslate"><span class="pre">writeframes()</span></code></a> 或 <a class="reference internal" href="#wave.Wave_write.writeframesraw" title="wave.Wave_write.writeframesraw"><code class="xref py py-meth docutils literal notranslate"><span class="pre">writeframesraw()</span></code></a> 之后再设置任何格式参数是无效的，而且任何这样的尝试将引发 <a class="reference internal" href="#wave.Error" title="wave.Error"><code class="xref py py-exc docutils literal notranslate"><span class="pre">wave.Error</span></code></a>。</p>
</dd></dl>

</dd></dl>

</section>
</section>


            <div class="clearer"></div>
          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>