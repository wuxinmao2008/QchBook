<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" /><meta name="viewport" content="width=device-width, initial-scale=1" />
<meta property="og:title" content="faulthandler --- 转储 Python 回溯信息" />
<meta property="og:type" content="website" />
<meta property="og:url" content="https://docs.python.org/3/library/faulthandler.xhtml" />
<meta property="og:site_name" content="Python documentation" />
<meta property="og:description" content="本模块包含当发生故障、超时或收到用户信号时可转储 Python 回溯信息的函数。 调用 faulthandler.enable() 可安装针对 SIGSEGV, SIGFPE, SIGABRT, SIGBUS 和 SIGILL 信号的故障处理器。 你还可以在启动时通过设置 PYTHONFAULTHANDLER 环境变量或使用-X faulthandler 命令行选项来启用它们。 故障处理器可..." />
<meta property="og:image" content="https://docs.python.org/3/_static/og-image.png" />
<meta property="og:image:alt" content="Python documentation" />
<meta name="description" content="本模块包含当发生故障、超时或收到用户信号时可转储 Python 回溯信息的函数。 调用 faulthandler.enable() 可安装针对 SIGSEGV, SIGFPE, SIGABRT, SIGBUS 和 SIGILL 信号的故障处理器。 你还可以在启动时通过设置 PYTHONFAULTHANDLER 环境变量或使用-X faulthandler 命令行选项来启用它们。 故障处理器可..." />
<meta property="og:image:width" content="200" />
<meta property="og:image:height" content="200" />
<meta name="theme-color" content="#3776ab" />

    <title>faulthandler --- 转储 Python 回溯信息</title>
    <link rel="stylesheet" type="text/css" href="../_static/pygments.css" />
    <link rel="stylesheet" type="text/css" href="../_static/epub.css" />
    <link rel="canonical" href="https://docs.python.org/3/library/faulthandler.html" />
    
      
    

    
    <style>
      @media only screen {
        table.full-width-table {
            width: 100%;
        }
      }
    </style>
 

  </head><body>


    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <section id="module-faulthandler">
<span id="faulthandler-dump-the-python-traceback"></span><h1><code class="xref py py-mod docutils literal notranslate"><span class="pre">faulthandler</span></code> --- 转储 Python 回溯信息</h1>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.3.</span></p>
</div>
<hr class="docutils" />
<p>本模块包含当发生故障、超时或收到用户信号时可转储 Python 回溯信息的函数。 调用 <a class="reference internal" href="#faulthandler.enable" title="faulthandler.enable"><code class="xref py py-func docutils literal notranslate"><span class="pre">faulthandler.enable()</span></code></a> 可安装针对 <a class="reference internal" href="signal.xhtml#signal.SIGSEGV" title="signal.SIGSEGV"><code class="xref py py-const docutils literal notranslate"><span class="pre">SIGSEGV</span></code></a>, <a class="reference internal" href="signal.xhtml#signal.SIGFPE" title="signal.SIGFPE"><code class="xref py py-const docutils literal notranslate"><span class="pre">SIGFPE</span></code></a>, <a class="reference internal" href="signal.xhtml#signal.SIGABRT" title="signal.SIGABRT"><code class="xref py py-const docutils literal notranslate"><span class="pre">SIGABRT</span></code></a>, <a class="reference internal" href="signal.xhtml#signal.SIGBUS" title="signal.SIGBUS"><code class="xref py py-const docutils literal notranslate"><span class="pre">SIGBUS</span></code></a> 和 <a class="reference internal" href="signal.xhtml#signal.SIGILL" title="signal.SIGILL"><code class="xref py py-const docutils literal notranslate"><span class="pre">SIGILL</span></code></a> 信号的故障处理器。 你还可以在启动时通过设置 <span class="target" id="index-2"></span><a class="reference internal" href="../using/cmdline.xhtml#envvar-PYTHONFAULTHANDLER"><code class="xref std std-envvar docutils literal notranslate"><span class="pre">PYTHONFAULTHANDLER</span></code></a> 环境变量或使用 <a class="reference internal" href="../using/cmdline.xhtml#cmdoption-X"><code class="xref std std-option docutils literal notranslate"><span class="pre">-X</span></code></a> <code class="docutils literal notranslate"><span class="pre">faulthandler</span></code> 命令行选项来启用它们。</p>
<p>故障处理器可兼容系统故障处理器如 Apport 或 Windows 故障处理器。 本模块会在 <code class="xref c c-func docutils literal notranslate"><span class="pre">sigaltstack()</span></code> 函数可用时为信号处理器使用备用栈。 这允许它即使在栈溢出的情况下也能转储回溯信息。</p>
<p>故障处理程序将在灾难性场合调用，因此只能使用信号安全的函数（比如不能在堆上分配内存）。由于这一限制，与正常的 Python 跟踪相比，转储量是最小的。</p>
<ul class="simple">
<li><p>只支持 ASCII 码。编码时会用到  <code class="docutils literal notranslate"><span class="pre">backslashreplace</span></code> 错误处理程序。</p></li>
<li><p>每个字符串限制在 500 个字符以内。</p></li>
<li><p>只会显式文件名、函数名和行号。（不显示源代码）</p></li>
<li><p>上限是 100 页内存帧和 100 个线程。</p></li>
<li><p>反序排列：最近的调用最先显示。</p></li>
</ul>
<p>默认情况下，Python 的跟踪信息会写入 <a class="reference internal" href="sys.xhtml#sys.stderr" title="sys.stderr"><code class="xref py py-data docutils literal notranslate"><span class="pre">sys.stderr</span></code></a>。为了能看到跟踪信息，应用程序必须运行于终端中。日志文件也可以传给 <a class="reference internal" href="#faulthandler.enable" title="faulthandler.enable"><code class="xref py py-func docutils literal notranslate"><span class="pre">faulthandler.enable()</span></code></a>。</p>
<p>本模块是用 C 语言实现的，所以才能在崩溃或 Python 死锁时转储跟踪信息。</p>
<p>在 Python 启动时， <a class="reference internal" href="devmode.xhtml#devmode"><span class="std std-ref">Python 开发模式</span></a> 会调用 <a class="reference internal" href="#faulthandler.enable" title="faulthandler.enable"><code class="xref py py-func docutils literal notranslate"><span class="pre">faulthandler.enable()</span></code></a>。</p>
<div class="admonition seealso">
<p class="admonition-title">参见</p>
<dl class="simple">
<dt>模块 <a class="reference internal" href="pdb.xhtml#module-pdb" title="pdb: The Python debugger for interactive interpreters."><code class="xref py py-mod docutils literal notranslate"><span class="pre">pdb</span></code></a></dt><dd><p>用于 Python 程序的交互式源代码调试器。</p>
</dd>
<dt>模块 <a class="reference internal" href="traceback.xhtml#module-traceback" title="traceback: Print or retrieve a stack traceback."><code class="xref py py-mod docutils literal notranslate"><span class="pre">traceback</span></code></a></dt><dd><p>提取、格式化和打印 Python 程序的栈回溯信息的标准接口。</p>
</dd>
</dl>
</div>
<section id="dumping-the-traceback">
<h2>转储跟踪信息</h2>
<dl class="py function">
<dt class="sig sig-object py" id="faulthandler.dump_traceback">
<span class="sig-prename descclassname"><span class="pre">faulthandler.</span></span><span class="sig-name descname"><span class="pre">dump_traceback</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">file</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">sys.stderr</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">all_threads</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">True</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>将所有线程的跟踪数据转储到 <em>file</em> 中。如果 <em>all_threads</em> 为 <code class="docutils literal notranslate"><span class="pre">False</span></code>，则只转储当前线程。</p>
<div class="admonition seealso">
<p class="admonition-title">参见</p>
<p><a class="reference internal" href="traceback.xhtml#traceback.print_tb" title="traceback.print_tb"><code class="xref py py-func docutils literal notranslate"><span class="pre">traceback.print_tb()</span></code></a>，可被用于打印回溯对象。</p>
</div>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.5 版本发生变更: </span>增加了向本函数传入文件描述符的支持。</p>
</div>
</dd></dl>

</section>
<section id="fault-handler-state">
<h2>故障处理程序的状态</h2>
<dl class="py function">
<dt class="sig sig-object py" id="faulthandler.enable">
<span class="sig-prename descclassname"><span class="pre">faulthandler.</span></span><span class="sig-name descname"><span class="pre">enable</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">file</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">sys.stderr</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">all_threads</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">True</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>启用默认的处理器：为 <a class="reference internal" href="signal.xhtml#signal.SIGSEGV" title="signal.SIGSEGV"><code class="xref py py-const docutils literal notranslate"><span class="pre">SIGSEGV</span></code></a>, <a class="reference internal" href="signal.xhtml#signal.SIGFPE" title="signal.SIGFPE"><code class="xref py py-const docutils literal notranslate"><span class="pre">SIGFPE</span></code></a>, <a class="reference internal" href="signal.xhtml#signal.SIGABRT" title="signal.SIGABRT"><code class="xref py py-const docutils literal notranslate"><span class="pre">SIGABRT</span></code></a>, <a class="reference internal" href="signal.xhtml#signal.SIGBUS" title="signal.SIGBUS"><code class="xref py py-const docutils literal notranslate"><span class="pre">SIGBUS</span></code></a> 和 <a class="reference internal" href="signal.xhtml#signal.SIGILL" title="signal.SIGILL"><code class="xref py py-const docutils literal notranslate"><span class="pre">SIGILL</span></code></a> 信号安装处理器来转储 Python 回溯信息。 如果 <em>all_threads</em> 为 <code class="docutils literal notranslate"><span class="pre">True</span></code>，则会为每个运行中的线程产生回溯信息。 在其他情况下，将只转储当前线程。</p>
<p><em>file</em> 必须保持打开状态，直至停用故障处理程序为止：参见 <a class="reference internal" href="#faulthandler-fd"><span class="std std-ref">文件描述符相关话题</span></a>。</p>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.5 版本发生变更: </span>增加了向本函数传入文件描述符的支持。</p>
</div>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.6 版本发生变更: </span>在 Windows 系统中，同时会安装一个 Windows 异常处理程序。</p>
</div>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.10 版本发生变更: </span>现在如果 <em>all_threads</em> 为 True，则转储信息会包含垃圾收集器是否正在运行。</p>
</div>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="faulthandler.disable">
<span class="sig-prename descclassname"><span class="pre">faulthandler.</span></span><span class="sig-name descname"><span class="pre">disable</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>停用故障处理程序：卸载由 <a class="reference internal" href="#faulthandler.enable" title="faulthandler.enable"><code class="xref py py-func docutils literal notranslate"><span class="pre">enable()</span></code></a> 安装的信号处理程序。</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="faulthandler.is_enabled">
<span class="sig-prename descclassname"><span class="pre">faulthandler.</span></span><span class="sig-name descname"><span class="pre">is_enabled</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>检查故障处理程序是否被启用。</p>
</dd></dl>

</section>
<section id="dumping-the-tracebacks-after-a-timeout">
<h2>一定时间后转储跟踪数据。</h2>
<dl class="py function">
<dt class="sig sig-object py" id="faulthandler.dump_traceback_later">
<span class="sig-prename descclassname"><span class="pre">faulthandler.</span></span><span class="sig-name descname"><span class="pre">dump_traceback_later</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">timeout</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">repeat</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">file</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">sys.stderr</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">exit</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>在 <em>timeout</em> 秒超时后，转储所有线程的回溯信息，或者如果 <em>repeat</em> 为 <code class="docutils literal notranslate"><span class="pre">True</span></code> 则每隔 <em>timeout</em> 秒执行一次转储。 如果 <em>exit</em> 为 <code class="docutils literal notranslate"><span class="pre">True</span></code>，则在转储回溯信息后调用 <code class="xref c c-func docutils literal notranslate"><span class="pre">_exit()</span></code> 并设置 status=1。 （请注意 <code class="xref c c-func docutils literal notranslate"><span class="pre">_exit()</span></code> 会立即关闭进程，这意味着不会做任何清理工作，如刷新文件缓冲区等。） 如果函数被调用两次，则新的调用将替代之前的形参并重置超时。 计时器的精度为亚秒级。</p>
<p><em>file</em> 必须保持打开状态，直至跟踪信息转储完毕，或调用了 <a class="reference internal" href="#faulthandler.cancel_dump_traceback_later" title="faulthandler.cancel_dump_traceback_later"><code class="xref py py-func docutils literal notranslate"><span class="pre">cancel_dump_traceback_later()</span></code></a>  ：参见 <a class="reference internal" href="#faulthandler-fd"><span class="std std-ref">文件描述符相关话题</span></a>。</p>
<p>本函数用一个看门狗线程实现。</p>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.5 版本发生变更: </span>增加了向本函数传入文件描述符的支持。</p>
</div>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.7 版本发生变更: </span>该函数现在总是可用。</p>
</div>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="faulthandler.cancel_dump_traceback_later">
<span class="sig-prename descclassname"><span class="pre">faulthandler.</span></span><span class="sig-name descname"><span class="pre">cancel_dump_traceback_later</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>取消 <a class="reference internal" href="#faulthandler.dump_traceback_later" title="faulthandler.dump_traceback_later"><code class="xref py py-func docutils literal notranslate"><span class="pre">dump_traceback_later()</span></code></a> 的最后一次调用。</p>
</dd></dl>

</section>
<section id="dumping-the-traceback-on-a-user-signal">
<h2>转储用户信号的跟踪信息。</h2>
<dl class="py function">
<dt class="sig sig-object py" id="faulthandler.register">
<span class="sig-prename descclassname"><span class="pre">faulthandler.</span></span><span class="sig-name descname"><span class="pre">register</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">signum</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">file</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">sys.stderr</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">all_threads</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">True</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">chain</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>注册一个用户信号：为 <em>signum</em> 信号安装一个处理程序，将所有线程或当前线程（<em>all_threads</em> 为 <code class="docutils literal notranslate"><span class="pre">False</span></code> 时）的跟踪信息转储到 <em>file</em> 中。如果 chain 为 <code class="docutils literal notranslate"><span class="pre">True</span></code>，则调用上一层处理程序。</p>
<p><em>file</em> 必须保持打开状态，直至该信号被 <a class="reference internal" href="#faulthandler.unregister" title="faulthandler.unregister"><code class="xref py py-func docutils literal notranslate"><span class="pre">unregister()</span></code></a> 注销：参见 <a class="reference internal" href="#faulthandler-fd"><span class="std std-ref">文件描述符相关话题</span></a>。</p>
<p>Windows 中不可用。</p>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.5 版本发生变更: </span>增加了向本函数传入文件描述符的支持。</p>
</div>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="faulthandler.unregister">
<span class="sig-prename descclassname"><span class="pre">faulthandler.</span></span><span class="sig-name descname"><span class="pre">unregister</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">signum</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>注销一个用户信号：卸载由 <a class="reference internal" href="#faulthandler.register" title="faulthandler.register"><code class="xref py py-func docutils literal notranslate"><span class="pre">register()</span></code></a> 安装的 <em>signum</em> 信号处理程序。如果信号已注册，返回 <code class="docutils literal notranslate"><span class="pre">True</span></code>，否则返回 <code class="docutils literal notranslate"><span class="pre">False</span></code>。</p>
<p>Windows 中不可用。</p>
</dd></dl>

</section>
<section id="issue-with-file-descriptors">
<span id="faulthandler-fd"></span><h2>文件描述符相关话题</h2>
<p><a class="reference internal" href="#faulthandler.enable" title="faulthandler.enable"><code class="xref py py-func docutils literal notranslate"><span class="pre">enable()</span></code></a> 、 <a class="reference internal" href="#faulthandler.dump_traceback_later" title="faulthandler.dump_traceback_later"><code class="xref py py-func docutils literal notranslate"><span class="pre">dump_traceback_later()</span></code></a> 和 <a class="reference internal" href="#faulthandler.register" title="faulthandler.register"><code class="xref py py-func docutils literal notranslate"><span class="pre">register()</span></code></a> 保留其 <em>file</em> 参数给出的文件描述符。 如果文件关闭，文件描述符将被一个新文件重新使用；或者用 <a class="reference internal" href="os.xhtml#os.dup2" title="os.dup2"><code class="xref py py-func docutils literal notranslate"><span class="pre">os.dup2()</span></code></a> 替换了文件描述符，则跟踪信息将被写入另一个文件。 每次文件被替换时，都会再次调用这些函数。</p>
</section>
<section id="example">
<h2>示例</h2>
<p>在 Linux 中启用和停用内存段故障的默认处理程序：</p>
<div class="highlight-shell-session notranslate"><div class="highlight"><pre><span></span><span class="gp">$ </span>python<span class="w"> </span>-c<span class="w"> </span><span class="s2">&quot;import ctypes; ctypes.string_at(0)&quot;</span>
<span class="go">Segmentation fault</span>

<span class="gp">$ </span>python<span class="w"> </span>-q<span class="w"> </span>-X<span class="w"> </span>faulthandler
<span class="go">&gt;&gt;&gt; import ctypes</span>
<span class="go">&gt;&gt;&gt; ctypes.string_at(0)</span>
<span class="go">Fatal Python error: Segmentation fault</span>

<span class="go">Current thread 0x00007fb899f39700 (most recent call first):</span>
<span class="go">  File &quot;/home/python/cpython/Lib/ctypes/__init__.py&quot;, line 486 in string_at</span>
<span class="go">  File &quot;&lt;stdin&gt;&quot;, line 1 in &lt;module&gt;</span>
<span class="go">Segmentation fault</span>
</pre></div>
</div>
</section>
</section>


            <div class="clearer"></div>
          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>