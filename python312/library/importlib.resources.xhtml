<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" /><meta name="viewport" content="width=device-width, initial-scale=1" />
<meta property="og:title" content="importlib.resources -- Package resource reading, opening and access" />
<meta property="og:type" content="website" />
<meta property="og:url" content="https://docs.python.org/3/library/importlib.resources.xhtml" />
<meta property="og:site_name" content="Python documentation" />
<meta property="og:description" content="源代码: Lib/importlib/resources/__init__.py[https://github.com/python/cpython/tree/3.12/Lib/importlib/resources/__init__.py] 此模块调整了 Python 的导入系统以便提供对 包 内部的 资源 的访问。 “资源”是指 Python 中与模块或包相关联的文件类资源。 资源可以直..." />
<meta property="og:image" content="https://docs.python.org/3/_static/og-image.png" />
<meta property="og:image:alt" content="Python documentation" />
<meta name="description" content="源代码: Lib/importlib/resources/__init__.py[https://github.com/python/cpython/tree/3.12/Lib/importlib/resources/__init__.py] 此模块调整了 Python 的导入系统以便提供对 包 内部的 资源 的访问。 “资源”是指 Python 中与模块或包相关联的文件类资源。 资源可以直..." />
<meta property="og:image:width" content="200" />
<meta property="og:image:height" content="200" />
<meta name="theme-color" content="#3776ab" />

    <title>importlib.resources -- Package resource reading, opening and access</title>
    <link rel="stylesheet" type="text/css" href="../_static/pygments.css" />
    <link rel="stylesheet" type="text/css" href="../_static/epub.css" />
    <link rel="canonical" href="https://docs.python.org/3/library/importlib.resources.html" />
    
      
    

    
    <style>
      @media only screen {
        table.full-width-table {
            width: 100%;
        }
      }
    </style>
 

  </head><body>


    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <section id="module-importlib.resources">
<span id="importlib-resources-package-resource-reading-opening-and-access"></span><h1><code class="xref py py-mod docutils literal notranslate"><span class="pre">importlib.resources</span></code> -- Package resource reading, opening and access</h1>
<p><strong>源代码:</strong> <a class="reference external" href="https://github.com/python/cpython/tree/3.12/Lib/importlib/resources/__init__.py">Lib/importlib/resources/__init__.py</a><span class="link-target"> [https://github.com/python/cpython/tree/3.12/Lib/importlib/resources/__init__.py]</span></p>
<hr class="docutils" />
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.7.</span></p>
</div>
<p>此模块调整了 Python 的导入系统以便提供对 <em>包</em> 内部的 <em>资源</em> 的访问。</p>
<p>“资源”是指 Python 中与模块或包相关联的文件类资源。 资源可以直接包含在某个包中，包含在某个包的子目录中，或是与某个包外部的模块相邻。 资源可以是文本或二进制数据。 因此，从技术上说 Python 包的模块源代码文件 (.py) 和编译结果文件 (pycache) 就是包实际所包含的资源。 但是，在实践中，资源主要是指包作者专门公开的非 Python 文件。</p>
<p>资源可以使用二进制或文本模式打开。</p>
<p>资源大致相当于目录内的文件，不过需要记住这只是一个比喻。 资源和包 <strong>不是</strong> 必须如文件系统上的物理文件和目录那样存在的：例如，一个包及其资源可使用 <a class="reference internal" href="zipimport.xhtml#module-zipimport" title="zipimport: Support for importing Python modules from ZIP archives."><code class="xref py py-mod docutils literal notranslate"><span class="pre">zipimport</span></code></a> 从一个 ZIP 文件导入。</p>
<div class="admonition note">
<p class="admonition-title">备注</p>
<p>本模块提供了类似于 <a class="reference external" href="https://setuptools.readthedocs.io/en/latest/pkg_resources.html">pkg_resources</a><span class="link-target"> [https://setuptools.readthedocs.io/en/latest/pkg_resources.html]</span> <a class="reference external" href="https://setuptools.readthedocs.io/en/latest/pkg_resources.html#basic-resource-access">Basic Resource Access</a><span class="link-target"> [https://setuptools.readthedocs.io/en/latest/pkg_resources.html#basic-resource-access]</span> 的功能而没有那样高的性能开销。 这使得读取包中的资源更为容易，并具有更为稳定和一致的语义。</p>
<p>此模块的独立向下移植版本在 <a class="reference external" href="https://importlib-resources.readthedocs.io/en/latest/using.html">using importlib.resources</a><span class="link-target"> [https://importlib-resources.readthedocs.io/en/latest/using.html]</span> 和 <a class="reference external" href="https://importlib-resources.readthedocs.io/en/latest/migration.html">migrating from pkg_resources to importlib.resources</a><span class="link-target"> [https://importlib-resources.readthedocs.io/en/latest/migration.html]</span> 中提供了更多信息。</p>
</div>
<p>想要支持资源读取的 <a class="reference internal" href="importlib.xhtml#importlib.abc.Loader" title="importlib.abc.Loader"><code class="xref py py-class docutils literal notranslate"><span class="pre">加载器</span></code></a> 应当实现 <a class="reference internal" href="importlib.resources.abc.xhtml#importlib.resources.abc.ResourceReader" title="importlib.resources.abc.ResourceReader"><code class="xref py py-class docutils literal notranslate"><span class="pre">importlib.resources.abc.ResourceReader</span></code></a> 中规定的 <code class="docutils literal notranslate"><span class="pre">get_resource_reader(fullname)</span></code> 方法。</p>
<dl class="py class">
<dt class="sig sig-object py" id="importlib.resources.Anchor">
<em class="property"><span class="pre">class</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">importlib.resources.</span></span><span class="sig-name descname"><span class="pre">Anchor</span></span></dt>
<dd><p>代表资源的锚点，可以是一个 <a class="reference internal" href="types.xhtml#types.ModuleType" title="types.ModuleType"><code class="xref py py-class docutils literal notranslate"><span class="pre">模块对象</span></code></a> 或字符串形式的模块名称不。 定义为 <code class="docutils literal notranslate"><span class="pre">Union[str,</span> <span class="pre">ModuleType]</span></code>。</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="importlib.resources.files">
<span class="sig-prename descclassname"><span class="pre">importlib.resources.</span></span><span class="sig-name descname"><span class="pre">files</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">anchor</span></span><span class="p"><span class="pre">:</span></span><span class="w"> </span><span class="n"><a class="reference internal" href="#importlib.resources.Anchor" title="importlib.resources.Anchor"><span class="pre">Anchor</span></a><span class="w"> </span><span class="p"><span class="pre">|</span></span><span class="w"> </span><a class="reference internal" href="constants.xhtml#None" title="None"><span class="pre">None</span></a></span><span class="w"> </span><span class="o"><span class="pre">=</span></span><span class="w"> </span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>返回一个代表资源容器（相当于目录）及其资源（相当于文件）的 <a class="reference internal" href="importlib.resources.abc.xhtml#importlib.resources.abc.Traversable" title="importlib.resources.abc.Traversable"><code class="xref py py-class docutils literal notranslate"><span class="pre">Traversable</span></code></a> 对象。 Traversable 可以包含其他容器（相当于子目录）。</p>
<p><em>anchor</em> 是一个可选的 <a class="reference internal" href="#importlib.resources.Anchor" title="importlib.resources.Anchor"><code class="xref py py-class docutils literal notranslate"><span class="pre">Anchor</span></code></a>。 如果 anchor 是一个包，则会从这个包获取资源。 如果是一个模块，则会从这个模块的相邻位置获取资源（在同一个包或包的根目录中）。 如果省略了 anchor,则会使用调用方的模块。</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.9.</span></p>
</div>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.12 版本发生变更: </span><em>package</em> 形参被重命名为 <em>anchor</em>。 <em>anchor</em> 现在可以是一个不为包的模块，如果被省略则默认为调用方的模块。 为保持兼容性 <em>package</em> 仍然被接受但会引发 <a class="reference internal" href="exceptions.xhtml#DeprecationWarning" title="DeprecationWarning"><code class="xref py py-exc docutils literal notranslate"><span class="pre">DeprecationWarning</span></code></a>。 请考虑以位置参数方式传入或使用 <code class="docutils literal notranslate"><span class="pre">importlib_resources</span> <span class="pre">&gt;=</span> <span class="pre">5.10</span></code> 作为针对旧版 Python 的兼容接口。</p>
</div>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="importlib.resources.as_file">
<span class="sig-prename descclassname"><span class="pre">importlib.resources.</span></span><span class="sig-name descname"><span class="pre">as_file</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">traversable</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>给定一个代表文件或目录的 <a class="reference internal" href="importlib.resources.abc.xhtml#importlib.resources.abc.Traversable" title="importlib.resources.abc.Traversable"><code class="xref py py-class docutils literal notranslate"><span class="pre">Traversable</span></code></a> 对象，通常是来自 <a class="reference internal" href="#importlib.resources.files" title="importlib.resources.files"><code class="xref py py-func docutils literal notranslate"><span class="pre">importlib.resources.files()</span></code></a>，返回一个上下文管理器以供 <a class="reference internal" href="../reference/compound_stmts.xhtml#with"><code class="xref std std-keyword docutils literal notranslate"><span class="pre">with</span></code></a> 语句使用。 该上下文管理器提供一个 <a class="reference internal" href="pathlib.xhtml#pathlib.Path" title="pathlib.Path"><code class="xref py py-class docutils literal notranslate"><span class="pre">pathlib.Path</span></code></a> 对象。</p>
<p>退出上下文管理器后会清除从 zip 文件等提取资源时创建的任何临时文件或目录。</p>
<p>当 Traversable 的方法（如 <code class="docutils literal notranslate"><span class="pre">read_text</span></code> 等）不足以满足需要而需要文件系统中的真实文件或目录时请使用 <code class="docutils literal notranslate"><span class="pre">as_file</span></code>。</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.9.</span></p>
</div>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.12 版本发生变更: </span>增加了对代表目录的 <em>traversable</em> 的支持。</p>
</div>
</dd></dl>

<section id="deprecated-functions">
<h2>弃用的函数</h2>
<p>一组旧式的，已被弃用的函数仍然可用，但预计会在未来的 Python 版本中被移除。 这些函数的主要缺点是它们不支持目录：它们假定所有资源都直接位于 <em>package</em> 之下。</p>
<dl class="py data">
<dt class="sig sig-object py" id="importlib.resources.Package">
<span class="sig-prename descclassname"><span class="pre">importlib.resources.</span></span><span class="sig-name descname"><span class="pre">Package</span></span></dt>
<dd><blockquote>
<div><p>只要一个函数接受 <code class="docutils literal notranslate"><span class="pre">Package</span></code> 参数，你就可以传入 <a class="reference internal" href="types.xhtml#types.ModuleType" title="types.ModuleType"><code class="xref py py-class docutils literal notranslate"><span class="pre">模块对象</span></code></a> 或字符串形式的模块名称。 你只能传入 <code class="docutils literal notranslate"><span class="pre">__spec__.submodule_search_locations</span></code> 不为 <code class="docutils literal notranslate"><span class="pre">None</span></code> 的模块对象。</p>
<p><code class="docutils literal notranslate"><span class="pre">Package</span></code> 类型是作为 <code class="docutils literal notranslate"><span class="pre">Union[str,</span> <span class="pre">ModuleType]</span></code> 定义的。</p>
</div></blockquote>
<div class="deprecated">
<p><span class="versionmodified deprecated">自 3.12 版本弃用.</span></p>
</div>
</dd></dl>

<dl class="py data">
<dt class="sig sig-object py" id="importlib.resources.Resource">
<span class="sig-prename descclassname"><span class="pre">importlib.resources.</span></span><span class="sig-name descname"><span class="pre">Resource</span></span></dt>
<dd><p>对于下列函数的 <em>resource</em> 参数，你可以传入字符串形式的资源名称或 <a class="reference internal" href="os.xhtml#os.PathLike" title="os.PathLike"><code class="xref py py-class docutils literal notranslate"><span class="pre">路径类对象</span></code></a>。</p>
<p><code class="docutils literal notranslate"><span class="pre">Resource</span></code> 类型是作为 <code class="docutils literal notranslate"><span class="pre">Union[str,</span> <span class="pre">os.PathLike]</span></code> 定义的。</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="importlib.resources.open_binary">
<span class="sig-prename descclassname"><span class="pre">importlib.resources.</span></span><span class="sig-name descname"><span class="pre">open_binary</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">package</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">resource</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>以二进制读方式打开 <em>package</em> 内的 <em>resource</em>。</p>
<p><em>package</em> 是包名或符合 <code class="docutils literal notranslate"><span class="pre">Package</span></code> 要求的模块对象。 <em>resource</em> 是要在 <em>package</em> 内打开的资源名；不能包含路径分隔符，也不能有子资源（即不能为目录）。本函数将返回一个 <code class="docutils literal notranslate"><span class="pre">typing.BinaryIO</span></code> 实例以供读取，即一个已打开的二进制 I/O 流。</p>
<div class="deprecated">
<p><span class="versionmodified deprecated">自 3.11 版本弃用: </span>对此函数的调用可以被替换为:</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="n">files</span><span class="p">(</span><span class="n">package</span><span class="p">)</span><span class="o">.</span><span class="n">joinpath</span><span class="p">(</span><span class="n">resource</span><span class="p">)</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s1">&#39;rb&#39;</span><span class="p">)</span>
</pre></div>
</div>
</div>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="importlib.resources.open_text">
<span class="sig-prename descclassname"><span class="pre">importlib.resources.</span></span><span class="sig-name descname"><span class="pre">open_text</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">package</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">resource</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">encoding</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">'utf-8'</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">errors</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">'strict'</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>以文本读方式打开 <em>package</em> 内的 <em>resource</em>。默认情况下，资源将以 UTF-8 格式打开以供读取。</p>
<p><em>package</em> 是包名或符合 <code class="docutils literal notranslate"><span class="pre">Package</span></code> 要求的模块对象。 <em>resource</em> 是要在 <em>package</em> 内打开的资源名；不能包含路径分隔符，也不能有子资源（即不能是目录）。<em>encoding</em> 和 <em>errors</em> 的含义与内置 <a class="reference internal" href="functions.xhtml#open" title="open"><code class="xref py py-func docutils literal notranslate"><span class="pre">open()</span></code></a> 的一样。</p>
<p>本函数返回一个 <code class="docutils literal notranslate"><span class="pre">typing.TextIO</span></code> 实例，即一个打开的文本 I/O  流对象以供读取。</p>
<div class="deprecated">
<p><span class="versionmodified deprecated">自 3.11 版本弃用: </span>对此函数的调用可以被替换为:</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="n">files</span><span class="p">(</span><span class="n">package</span><span class="p">)</span><span class="o">.</span><span class="n">joinpath</span><span class="p">(</span><span class="n">resource</span><span class="p">)</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s1">&#39;r&#39;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="n">encoding</span><span class="p">)</span>
</pre></div>
</div>
</div>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="importlib.resources.read_binary">
<span class="sig-prename descclassname"><span class="pre">importlib.resources.</span></span><span class="sig-name descname"><span class="pre">read_binary</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">package</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">resource</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>读取并返回 <em>package</em> 中的 <em>resource</em> 内容，格式为 <code class="docutils literal notranslate"><span class="pre">bytes</span></code>。</p>
<p><em>package</em> 是包名或符合 <code class="docutils literal notranslate"><span class="pre">Package</span></code> 要求的模块对象。 <em>resource</em> 是要在 <em>package</em> 内打开的资源名；不能包含路径分隔符，也不能有子资源（即不能是目录）。资源内容以 <a class="reference internal" href="stdtypes.xhtml#bytes" title="bytes"><code class="xref py py-class docutils literal notranslate"><span class="pre">bytes</span></code></a> 的形式返回。</p>
<div class="deprecated">
<p><span class="versionmodified deprecated">自 3.11 版本弃用: </span>对此函数的调用可以被替换为:</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="n">files</span><span class="p">(</span><span class="n">package</span><span class="p">)</span><span class="o">.</span><span class="n">joinpath</span><span class="p">(</span><span class="n">resource</span><span class="p">)</span><span class="o">.</span><span class="n">read_bytes</span><span class="p">()</span>
</pre></div>
</div>
</div>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="importlib.resources.read_text">
<span class="sig-prename descclassname"><span class="pre">importlib.resources.</span></span><span class="sig-name descname"><span class="pre">read_text</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">package</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">resource</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">encoding</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">'utf-8'</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">errors</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">'strict'</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>读取并返回 <em>package</em> 中 <em>resource</em> 的内容，格式为 <code class="docutils literal notranslate"><span class="pre">str</span></code>。默认情况下，资源内容将以严格的 UTF-8 格式读取。</p>
<p><em>package</em> 是包名或符合 <code class="docutils literal notranslate"><span class="pre">Package</span></code> 要求的模块对象。 <em>resource</em> 是要在 <em>package</em> 内打开的资源名；不能包含路径分隔符，也不能有子资源（即不能是目录）。<em>encoding</em> 和 <em>errors</em> 的含义与内置 <a class="reference internal" href="functions.xhtml#open" title="open"><code class="xref py py-func docutils literal notranslate"><span class="pre">open()</span></code></a> 的一样。资源内容将以 <a class="reference internal" href="stdtypes.xhtml#str" title="str"><code class="xref py py-class docutils literal notranslate"><span class="pre">str</span></code></a> 的形式返回。</p>
<div class="deprecated">
<p><span class="versionmodified deprecated">自 3.11 版本弃用: </span>对此函数的调用可以被替换为:</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="n">files</span><span class="p">(</span><span class="n">package</span><span class="p">)</span><span class="o">.</span><span class="n">joinpath</span><span class="p">(</span><span class="n">resource</span><span class="p">)</span><span class="o">.</span><span class="n">read_text</span><span class="p">(</span><span class="n">encoding</span><span class="o">=</span><span class="n">encoding</span><span class="p">)</span>
</pre></div>
</div>
</div>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="importlib.resources.path">
<span class="sig-prename descclassname"><span class="pre">importlib.resources.</span></span><span class="sig-name descname"><span class="pre">path</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">package</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">resource</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>返回 <em>resource</em> 实际的文件系统路径。本函数返回一个上下文管理器，以供 <a class="reference internal" href="../reference/compound_stmts.xhtml#with"><code class="xref std std-keyword docutils literal notranslate"><span class="pre">with</span></code></a> 语句中使用。上下文管理器提供一个 <a class="reference internal" href="pathlib.xhtml#pathlib.Path" title="pathlib.Path"><code class="xref py py-class docutils literal notranslate"><span class="pre">pathlib.Path</span></code></a> 对象。</p>
<p>退出上下文管理程序时，可以清理所有临时文件，比如从压缩文件中提取资源时创建的那些文件。</p>
<p><em>package</em> 是包名或符合 <code class="docutils literal notranslate"><span class="pre">Package</span></code> 要求的模块对象。 <em>resource</em> 是要在 <em>package</em> 内打开的资源名；不能包含路径分隔符，也不能有子资源（即不能是目录）。</p>
<div class="deprecated">
<p><span class="versionmodified deprecated">自 3.11 版本弃用: </span>对此函数的调用可以使用 <a class="reference internal" href="#importlib.resources.as_file" title="importlib.resources.as_file"><code class="xref py py-func docutils literal notranslate"><span class="pre">as_file()</span></code></a> 来替换:</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="n">as_file</span><span class="p">(</span><span class="n">files</span><span class="p">(</span><span class="n">package</span><span class="p">)</span><span class="o">.</span><span class="n">joinpath</span><span class="p">(</span><span class="n">resource</span><span class="p">))</span>
</pre></div>
</div>
</div>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="importlib.resources.is_resource">
<span class="sig-prename descclassname"><span class="pre">importlib.resources.</span></span><span class="sig-name descname"><span class="pre">is_resource</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">package</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">name</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>如果包中存在名为 <em>name</em> 的资源则返回 <code class="docutils literal notranslate"><span class="pre">True</span></code>，否则返回 <code class="docutils literal notranslate"><span class="pre">False</span></code>。 此函数不会将目录视为资源。 <em>package</em> 是包名或符合 <code class="docutils literal notranslate"><span class="pre">Package</span></code> 要求的模块对象。</p>
<div class="deprecated">
<p><span class="versionmodified deprecated">自 3.11 版本弃用: </span>对此函数的调用可以被替换为:</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="n">files</span><span class="p">(</span><span class="n">package</span><span class="p">)</span><span class="o">.</span><span class="n">joinpath</span><span class="p">(</span><span class="n">resource</span><span class="p">)</span><span class="o">.</span><span class="n">is_file</span><span class="p">()</span>
</pre></div>
</div>
</div>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="importlib.resources.contents">
<span class="sig-prename descclassname"><span class="pre">importlib.resources.</span></span><span class="sig-name descname"><span class="pre">contents</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">package</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>返回一个用于遍历包内各命名项的可迭代对象。该可迭代对象将返回 <a class="reference internal" href="stdtypes.xhtml#str" title="str"><code class="xref py py-class docutils literal notranslate"><span class="pre">str</span></code></a> 资源（如文件）及非资源（如目录）。该迭代器不会递归进入子目录。</p>
<p><em>package</em> 是包名或符合 <code class="docutils literal notranslate"><span class="pre">Package</span></code> 要求的模块对象。</p>
<div class="deprecated">
<p><span class="versionmodified deprecated">自 3.11 版本弃用: </span>对此函数的调用可以被替换为:</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="p">(</span><span class="n">resource</span><span class="o">.</span><span class="n">name</span> <span class="k">for</span> <span class="n">resource</span> <span class="ow">in</span> <span class="n">files</span><span class="p">(</span><span class="n">package</span><span class="p">)</span><span class="o">.</span><span class="n">iterdir</span><span class="p">()</span> <span class="k">if</span> <span class="n">resource</span><span class="o">.</span><span class="n">is_file</span><span class="p">())</span>
</pre></div>
</div>
</div>
</dd></dl>

</section>
</section>


            <div class="clearer"></div>
          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>