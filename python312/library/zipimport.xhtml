<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" /><meta name="viewport" content="width=device-width, initial-scale=1" />
<meta property="og:title" content="zipimport --- Import modules from Zip archives" />
<meta property="og:type" content="website" />
<meta property="og:url" content="https://docs.python.org/3/library/zipimport.xhtml" />
<meta property="og:site_name" content="Python documentation" />
<meta property="og:description" content="源代码： Lib/zipimport.py[https://github.com/python/cpython/tree/3.12/Lib/zipimport.py] 此模块添加了从 ZIP 格式档案中导入 Python 模块（*.py ，*.pyc ）和包的能力。通常不需要明确地使用 zipimport 模块，内置的 import 机制会自动将此模块用于 ZIP 档案路径的 sys.pat..." />
<meta property="og:image" content="https://docs.python.org/3/_static/og-image.png" />
<meta property="og:image:alt" content="Python documentation" />
<meta name="description" content="源代码： Lib/zipimport.py[https://github.com/python/cpython/tree/3.12/Lib/zipimport.py] 此模块添加了从 ZIP 格式档案中导入 Python 模块（*.py ，*.pyc ）和包的能力。通常不需要明确地使用 zipimport 模块，内置的 import 机制会自动将此模块用于 ZIP 档案路径的 sys.pat..." />
<meta property="og:image:width" content="200" />
<meta property="og:image:height" content="200" />
<meta name="theme-color" content="#3776ab" />

    <title>zipimport --- Import modules from Zip archives</title>
    <link rel="stylesheet" type="text/css" href="../_static/pygments.css" />
    <link rel="stylesheet" type="text/css" href="../_static/epub.css" />
    <link rel="canonical" href="https://docs.python.org/3/library/zipimport.html" />
    
      
    

    
    <style>
      @media only screen {
        table.full-width-table {
            width: 100%;
        }
      }
    </style>
 

  </head><body>


    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <section id="module-zipimport">
<span id="zipimport-import-modules-from-zip-archives"></span><h1><code class="xref py py-mod docutils literal notranslate"><span class="pre">zipimport</span></code> --- Import modules from Zip archives</h1>
<p><strong>源代码：</strong> <a class="reference external" href="https://github.com/python/cpython/tree/3.12/Lib/zipimport.py">Lib/zipimport.py</a><span class="link-target"> [https://github.com/python/cpython/tree/3.12/Lib/zipimport.py]</span></p>
<hr class="docutils" />
<p>此模块添加了从 ZIP 格式档案中导入 Python 模块（ <code class="file docutils literal notranslate"><span class="pre">*.py</span></code> ， <code class="file docutils literal notranslate"><span class="pre">*.pyc</span></code> ）和包的能力。通常不需要明确地使用 <a class="reference internal" href="#module-zipimport" title="zipimport: Support for importing Python modules from ZIP archives."><code class="xref py py-mod docutils literal notranslate"><span class="pre">zipimport</span></code></a> 模块，内置的 <a class="reference internal" href="../reference/simple_stmts.xhtml#import"><code class="xref std std-keyword docutils literal notranslate"><span class="pre">import</span></code></a> 机制会自动将此模块用于 ZIP 档案路径的 <a class="reference internal" href="sys.xhtml#sys.path" title="sys.path"><code class="xref py py-data docutils literal notranslate"><span class="pre">sys.path</span></code></a> 项目上。</p>
<p>通常， <a class="reference internal" href="sys.xhtml#sys.path" title="sys.path"><code class="xref py py-data docutils literal notranslate"><span class="pre">sys.path</span></code></a> 是字符串的目录名称列表。此模块同样允许 <a class="reference internal" href="sys.xhtml#sys.path" title="sys.path"><code class="xref py py-data docutils literal notranslate"><span class="pre">sys.path</span></code></a> 的一项成为命名 ZIP 文件档案的字符串。 ZIP 档案可以容纳子目录结构去支持包的导入，并且可以将归档文件中的路径指定为仅从子目录导入。比如说，路径 <code class="file docutils literal notranslate"><span class="pre">example.zip/lib/</span></code> 将只会从档案中的 <code class="file docutils literal notranslate"><span class="pre">lib/</span></code> 子目录导入。</p>
<p>任何文件都可以放到 ZIP 档案中，但只有 <code class="file docutils literal notranslate"><span class="pre">.py</span></code> 和 <code class="file docutils literal notranslate"><span class="pre">.pyc</span></code> 文件会触发导入器操作。 动态模块 (<code class="file docutils literal notranslate"><span class="pre">.pyd</span></code>, <code class="file docutils literal notranslate"><span class="pre">.so</span></code>) 的 ZIP 导入是不被允许的。 请注意如果一个档案只包含有 <code class="file docutils literal notranslate"><span class="pre">.py</span></code> 文件，那么 Python 将不会尝试通过添加对应的 <code class="file docutils literal notranslate"><span class="pre">.pyc</span></code> 文件来修改档案，这意味着如果一个 ZIP 档案不包含 <code class="file docutils literal notranslate"><span class="pre">.pyc</span></code> 文件，则导入速度可能会相当慢。</p>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.8 版本发生变更: </span>以前，不支持带有档案注释的 ZIP 档案。</p>
</div>
<div class="admonition seealso">
<p class="admonition-title">参见</p>
<dl class="simple">
<dt><a class="reference external" href="https://pkware.cachefly.net/webdocs/casestudies/APPNOTE.TXT">PKZIP Application Note</a><span class="link-target"> [https://pkware.cachefly.net/webdocs/casestudies/APPNOTE.TXT]</span></dt><dd><p>Phil Katz 编写的 ZIP 文件格式文档，此格式和使用的算法的创建者。</p>
</dd>
<dt><span class="target" id="index-6"></span><a class="pep reference external" href="https://peps.python.org/pep-0273/"><strong>PEP 273</strong></a><span class="link-target"> [https://peps.python.org/pep-0273/]</span> - 从 ZIP 压缩包导入模块</dt><dd><p>由 James C. Ahlstrom 编写，他也提供了实现。 Python 2.3 遵循 <span class="target" id="index-7"></span><a class="pep reference external" href="https://peps.python.org/pep-0273/"><strong>PEP 273</strong></a><span class="link-target"> [https://peps.python.org/pep-0273/]</span> 的规范，但是使用 Just van Rossum 编写的使用了 <span class="target" id="index-8"></span><a class="pep reference external" href="https://peps.python.org/pep-0302/"><strong>PEP 302</strong></a><span class="link-target"> [https://peps.python.org/pep-0302/]</span> 中描述的导入钩的实现。</p>
</dd>
<dt><a class="reference internal" href="importlib.xhtml#module-importlib" title="importlib: The implementation of the import machinery."><code class="xref py py-mod docutils literal notranslate"><span class="pre">importlib</span></code></a> - 导入机制的实现</dt><dd><p>为所有导入器的实现提供相关协议的包。</p>
</dd>
</dl>
</div>
<p>此模块定义了一个异常：</p>
<dl class="py exception">
<dt class="sig sig-object py" id="zipimport.ZipImportError">
<em class="property"><span class="pre">exception</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">zipimport.</span></span><span class="sig-name descname"><span class="pre">ZipImportError</span></span></dt>
<dd><p>异常由 zipimporter 对象引发。这是 <a class="reference internal" href="exceptions.xhtml#ImportError" title="ImportError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">ImportError</span></code></a> 的子类，因此，也可以捕获为 <a class="reference internal" href="exceptions.xhtml#ImportError" title="ImportError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">ImportError</span></code></a> 。</p>
</dd></dl>

<section id="zipimporter-objects">
<span id="id1"></span><h2>zipimporter 对象</h2>
<p><a class="reference internal" href="#zipimport.zipimporter" title="zipimport.zipimporter"><code class="xref py py-class docutils literal notranslate"><span class="pre">zipimporter</span></code></a> 是用于导入 ZIP 文件的类。</p>
<dl class="py class">
<dt class="sig sig-object py" id="zipimport.zipimporter">
<em class="property"><span class="pre">class</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">zipimport.</span></span><span class="sig-name descname"><span class="pre">zipimporter</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">archivepath</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>创建新的 zipimporter 实例。 <em>archivepath</em> 必须是指向 ZIP 文件的路径，或者 ZIP 文件中的特定路径。例如， <code class="file docutils literal notranslate"><span class="pre">foo/bar.zip/lib</span></code> 的 <em>archivepath</em> 将在 ZIP 文件 <code class="file docutils literal notranslate"><span class="pre">foo/bar.zip</span></code> 中的 <code class="file docutils literal notranslate"><span class="pre">lib</span></code> 目录中查找模块（只要它存在）。</p>
<p>如果 <em>archivepath</em> 没有指向一个有效的 ZIP 档案，引发 <a class="reference internal" href="#zipimport.ZipImportError" title="zipimport.ZipImportError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">ZipImportError</span></code></a> 。</p>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.12 版本发生变更: </span>在 3.10 中已弃用的 <code class="docutils literal notranslate"><span class="pre">find_loader()</span></code> 和 <code class="docutils literal notranslate"><span class="pre">find_module()</span></code> 方法现在已被移除。 请改用 <a class="reference internal" href="#zipimport.zipimporter.find_spec" title="zipimport.zipimporter.find_spec"><code class="xref py py-meth docutils literal notranslate"><span class="pre">find_spec()</span></code></a>。</p>
</div>
<dl class="py method">
<dt class="sig sig-object py" id="zipimport.zipimporter.create_module">
<span class="sig-name descname"><span class="pre">create_module</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">spec</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>返回 <a class="reference internal" href="constants.xhtml#None" title="None"><code class="xref py py-const docutils literal notranslate"><span class="pre">None</span></code></a> 来显式地请求默认语义的 <a class="reference internal" href="importlib.xhtml#importlib.abc.Loader.create_module" title="importlib.abc.Loader.create_module"><code class="xref py py-meth docutils literal notranslate"><span class="pre">importlib.abc.Loader.create_module()</span></code></a> 实现。</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.10.</span></p>
</div>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="zipimport.zipimporter.exec_module">
<span class="sig-name descname"><span class="pre">exec_module</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">module</span></span></em><span class="sig-paren">)</span></dt>
<dd><p><a class="reference internal" href="importlib.xhtml#importlib.abc.Loader.exec_module" title="importlib.abc.Loader.exec_module"><code class="xref py py-meth docutils literal notranslate"><span class="pre">importlib.abc.Loader.exec_module()</span></code></a> 的实现。</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.10.</span></p>
</div>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="zipimport.zipimporter.find_spec">
<span class="sig-name descname"><span class="pre">find_spec</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">fullname</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">target</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p><a class="reference internal" href="importlib.xhtml#importlib.abc.PathEntryFinder.find_spec" title="importlib.abc.PathEntryFinder.find_spec"><code class="xref py py-meth docutils literal notranslate"><span class="pre">importlib.abc.PathEntryFinder.find_spec()</span></code></a> 的实现。</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.10.</span></p>
</div>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="zipimport.zipimporter.get_code">
<span class="sig-name descname"><span class="pre">get_code</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">fullname</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>返回指定模块的代码对象。 如果模块无法被导入则引发 <a class="reference internal" href="#zipimport.ZipImportError" title="zipimport.ZipImportError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">ZipImportError</span></code></a>。</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="zipimport.zipimporter.get_data">
<span class="sig-name descname"><span class="pre">get_data</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">pathname</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>返回与 <em>pathname</em> 相关联的数据。如果不能找到文件则引发 <a class="reference internal" href="exceptions.xhtml#OSError" title="OSError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">OSError</span></code></a> 错误。</p>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.3 版本发生变更: </span>过去触发的 <a class="reference internal" href="exceptions.xhtml#IOError" title="IOError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">IOError</span></code></a>，现在是 <a class="reference internal" href="exceptions.xhtml#OSError" title="OSError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">OSError</span></code></a> 的别名。</p>
</div>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="zipimport.zipimporter.get_filename">
<span class="sig-name descname"><span class="pre">get_filename</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">fullname</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>返回如果指定模块被导入则应当要设置的 <code class="docutils literal notranslate"><span class="pre">__file__</span></code> 值。 如果模块无法被导入则引发 <a class="reference internal" href="#zipimport.ZipImportError" title="zipimport.ZipImportError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">ZipImportError</span></code></a>。</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.1.</span></p>
</div>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="zipimport.zipimporter.get_source">
<span class="sig-name descname"><span class="pre">get_source</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">fullname</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>返回指定模块的源代码。如果没有找到模块则引发 <a class="reference internal" href="#zipimport.ZipImportError" title="zipimport.ZipImportError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">ZipImportError</span></code></a> ，如果档案包含模块但是没有源代码，返回 <a class="reference internal" href="constants.xhtml#None" title="None"><code class="xref py py-const docutils literal notranslate"><span class="pre">None</span></code></a> 。</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="zipimport.zipimporter.is_package">
<span class="sig-name descname"><span class="pre">is_package</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">fullname</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>如果由 <em>fullname</em> 指定的模块是一个包则返回 <code class="docutils literal notranslate"><span class="pre">True</span></code> 。如果不能找到模块则引发 <a class="reference internal" href="#zipimport.ZipImportError" title="zipimport.ZipImportError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">ZipImportError</span></code></a> 错误。</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="zipimport.zipimporter.load_module">
<span class="sig-name descname"><span class="pre">load_module</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">fullname</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>导入由 <em>fullname</em> 所指定的模块。 <em>fullname</em> 必须为（带点号的）完整限定名称。 成功时返回导入的模块，失败时引发 <a class="reference internal" href="#zipimport.ZipImportError" title="zipimport.ZipImportError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">ZipImportError</span></code></a>。</p>
<div class="deprecated">
<p><span class="versionmodified deprecated">自 3.10 版本弃用: </span>使用 <a class="reference internal" href="#zipimport.zipimporter.exec_module" title="zipimport.zipimporter.exec_module"><code class="xref py py-meth docutils literal notranslate"><span class="pre">exec_module()</span></code></a> 来代替。</p>
</div>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="zipimport.zipimporter.invalidate_caches">
<span class="sig-name descname"><span class="pre">invalidate_caches</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>清除在 ZIP 归档文件中找到的相关文件信息的内部缓存。</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.10.</span></p>
</div>
</dd></dl>

<dl class="py attribute">
<dt class="sig sig-object py" id="zipimport.zipimporter.archive">
<span class="sig-name descname"><span class="pre">archive</span></span></dt>
<dd><p>导入器关联的 ZIP 文件的文件名，没有可能的子路径。</p>
</dd></dl>

<dl class="py attribute">
<dt class="sig sig-object py" id="zipimport.zipimporter.prefix">
<span class="sig-name descname"><span class="pre">prefix</span></span></dt>
<dd><p>ZIP 文件中搜索的模块的子路径。这是一个指向 ZIP 文件根目录的 zipimporter 对象的空字符串。</p>
</dd></dl>

<p>当与斜杠结合使用时， <a class="reference internal" href="#zipimport.zipimporter.archive" title="zipimport.zipimporter.archive"><code class="xref py py-attr docutils literal notranslate"><span class="pre">archive</span></code></a> 和 <a class="reference internal" href="#zipimport.zipimporter.prefix" title="zipimport.zipimporter.prefix"><code class="xref py py-attr docutils literal notranslate"><span class="pre">prefix</span></code></a> 属性等价于赋予 <a class="reference internal" href="#zipimport.zipimporter" title="zipimport.zipimporter"><code class="xref py py-class docutils literal notranslate"><span class="pre">zipimporter</span></code></a> 构造器的原始 <em>archivepath</em> 参数。</p>
</dd></dl>

</section>
<section id="examples">
<span id="zipimport-examples"></span><h2>例子</h2>
<p>这是一个从 ZIP 档案中导入模块的例子 - 请注意 <a class="reference internal" href="#module-zipimport" title="zipimport: Support for importing Python modules from ZIP archives."><code class="xref py py-mod docutils literal notranslate"><span class="pre">zipimport</span></code></a> 模块不需要明确地使用。</p>
<div class="highlight-shell-session notranslate"><div class="highlight"><pre><span></span><span class="gp">$ </span>unzip<span class="w"> </span>-l<span class="w"> </span>example.zip
<span class="go">Archive:  example.zip</span>
<span class="go">  Length     Date   Time    Name</span>
<span class="go"> --------    ----   ----    ----</span>
<span class="go">     8467  11-26-02 22:30   jwzthreading.py</span>
<span class="go"> --------                   -------</span>
<span class="go">     8467                   1 file</span>
<span class="gp">$ </span>./python
<span class="go">Python 2.3 (#1, Aug 1 2003, 19:54:32)</span>
<span class="go">&gt;&gt;&gt; import sys</span>
<span class="go">&gt;&gt;&gt; sys.path.insert(0, &#39;example.zip&#39;)  # Add .zip file to front of path</span>
<span class="go">&gt;&gt;&gt; import jwzthreading</span>
<span class="go">&gt;&gt;&gt; jwzthreading.__file__</span>
<span class="go">&#39;example.zip/jwzthreading.py&#39;</span>
</pre></div>
</div>
</section>
</section>


            <div class="clearer"></div>
          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>