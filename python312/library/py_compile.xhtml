<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" /><meta name="viewport" content="width=device-width, initial-scale=1" />
<meta property="og:title" content="py_compile --- 编译 Python 源文件" />
<meta property="og:type" content="website" />
<meta property="og:url" content="https://docs.python.org/3/library/py_compile.xhtml" />
<meta property="og:site_name" content="Python documentation" />
<meta property="og:description" content="源代码: Lib/py_compile.py[https://github.com/python/cpython/tree/3.12/Lib/py_compile.py] py_compile 模块提供了用来从源文件生成字节码的函数和另一个用于当模块源文件作为脚本被调用时的函数。 虽然不太常用，但这个函数在安装共享模块时还是很有用的，特别是当一些用户可能没有权限在包含源代码的目录中写字节码缓..." />
<meta property="og:image" content="https://docs.python.org/3/_static/og-image.png" />
<meta property="og:image:alt" content="Python documentation" />
<meta name="description" content="源代码: Lib/py_compile.py[https://github.com/python/cpython/tree/3.12/Lib/py_compile.py] py_compile 模块提供了用来从源文件生成字节码的函数和另一个用于当模块源文件作为脚本被调用时的函数。 虽然不太常用，但这个函数在安装共享模块时还是很有用的，特别是当一些用户可能没有权限在包含源代码的目录中写字节码缓..." />
<meta property="og:image:width" content="200" />
<meta property="og:image:height" content="200" />
<meta name="theme-color" content="#3776ab" />

    <title>py_compile --- 编译 Python 源文件</title>
    <link rel="stylesheet" type="text/css" href="../_static/pygments.css" />
    <link rel="stylesheet" type="text/css" href="../_static/epub.css" />
    <link rel="canonical" href="https://docs.python.org/3/library/py_compile.html" />
    
      
    

    
    <style>
      @media only screen {
        table.full-width-table {
            width: 100%;
        }
      }
    </style>
 

  </head><body>


    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <section id="module-py_compile">
<span id="py-compile-compile-python-source-files"></span><h1><code class="xref py py-mod docutils literal notranslate"><span class="pre">py_compile</span></code> --- 编译 Python 源文件</h1>
<p><strong>源代码:</strong> <a class="reference external" href="https://github.com/python/cpython/tree/3.12/Lib/py_compile.py">Lib/py_compile.py</a><span class="link-target"> [https://github.com/python/cpython/tree/3.12/Lib/py_compile.py]</span></p>
<hr class="docutils" id="index-0" />
<p><a class="reference internal" href="#module-py_compile" title="py_compile: Generate byte-code files from Python source files."><code class="xref py py-mod docutils literal notranslate"><span class="pre">py_compile</span></code></a> 模块提供了用来从源文件生成字节码的函数和另一个用于当模块源文件作为脚本被调用时的函数。</p>
<p>虽然不太常用，但这个函数在安装共享模块时还是很有用的，特别是当一些用户可能没有权限在包含源代码的目录中写字节码缓存文件时。</p>
<dl class="py exception">
<dt class="sig sig-object py" id="py_compile.PyCompileError">
<em class="property"><span class="pre">exception</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">py_compile.</span></span><span class="sig-name descname"><span class="pre">PyCompileError</span></span></dt>
<dd><p>当编译文件过程中发生错误时，抛出的异常。</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="py_compile.compile">
<span class="sig-prename descclassname"><span class="pre">py_compile.</span></span><span class="sig-name descname"><span class="pre">compile</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">file</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">cfile</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">dfile</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">doraise</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">optimize</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">-1</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">invalidation_mode</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">PycInvalidationMode.TIMESTAMP</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">quiet</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">0</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>将源文件编译成字节码并写入字节码缓存文件。 源代码将从名为 <em>file</em> 的文件中加载。 字节码会被写入到 <em>cfile</em>，它默认为 <span class="target" id="index-15"></span><a class="pep reference external" href="https://peps.python.org/pep-3147/"><strong>PEP 3147</strong></a><span class="link-target"> [https://peps.python.org/pep-3147/]</span>/<span class="target" id="index-16"></span><a class="pep reference external" href="https://peps.python.org/pep-0488/"><strong>PEP 488</strong></a><span class="link-target"> [https://peps.python.org/pep-0488/]</span> 路径，以 <code class="docutils literal notranslate"><span class="pre">.pyc</span></code> 结尾。 举例来说，如果 <em>file</em> 为 <code class="docutils literal notranslate"><span class="pre">/foo/bar/baz.py</span></code> 则对于 Python 3.2 <em>cfile</em> 将默认为 <code class="docutils literal notranslate"><span class="pre">/foo/bar/__pycache__/baz.cpython-32.pyc</span></code>。 如果指定了 <em>dfile</em>，则将用它而不是 <em>file</em> 作为在异常回溯中获取并显示的源文件的名称。 如果 <em>doraise</em> 为真值，则当编译 <em>file</em> 遇到错误时将引发 <a class="reference internal" href="#py_compile.PyCompileError" title="py_compile.PyCompileError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">PyCompileError</span></code></a>。 如果 <em>doraise</em> 为（默认的）假值，则会将错误字符串写入到 <code class="docutils literal notranslate"><span class="pre">sys.stderr</span></code>，但不会引发异常。 此函数返回已编译字节码文件的路径，即 <em>cfile</em> 所使用的值。</p>
<p><em>doraise</em> 和 <em>quiet</em> 参数确定在编译文件时如何处理错误。 如果 <em>quiet</em> 为 0 或 1，并且 <em>doraise</em> 为假值，则会启用默认行为：写入错误信息到 <code class="docutils literal notranslate"><span class="pre">sys.stderr</span></code>，并且函数将返回 <code class="docutils literal notranslate"><span class="pre">None</span></code> 而非一个路径。 如果 <em>doraise</em> 为真值，则将改为引发 <a class="reference internal" href="#py_compile.PyCompileError" title="py_compile.PyCompileError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">PyCompileError</span></code></a>。 但是如果 <em>quiet</em> 为 2，则不会写入消息，并且 <em>doraise</em> 也不会有效果。</p>
<p>如果 <em>cfile</em> 所表示（显式指定或计算得出）的路径为符号链接或非常规文件，则将引发 <a class="reference internal" href="exceptions.xhtml#FileExistsError" title="FileExistsError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">FileExistsError</span></code></a>。 此行为是用来警告如果允许写入编译后字节码文件到这些路径则导入操作将会把它们转为常规文件。 这是使用文件重命名来将最终编译后字节码文件放置到位以防止并发文件写入问题的导入操作的附带效果。</p>
<p><em>optimize</em> 控制优化级别并会被传给内置的 <a class="reference internal" href="functions.xhtml#compile" title="compile"><code class="xref py py-func docutils literal notranslate"><span class="pre">compile()</span></code></a> 函数。 默认值 <code class="docutils literal notranslate"><span class="pre">-1</span></code> 表示选择当前解释器的优化级别。</p>
<p><em>invalidation_mode</em> 应当是 <a class="reference internal" href="#py_compile.PycInvalidationMode" title="py_compile.PycInvalidationMode"><code class="xref py py-class docutils literal notranslate"><span class="pre">PycInvalidationMode</span></code></a> 枚举的成员，它控制在运行时如何让已生成的字节码缓存失效。 如果设置了 <span class="target" id="index-17"></span><code class="xref std std-envvar docutils literal notranslate"><span class="pre">SOURCE_DATE_EPOCH</span></code> 环境变量则默认值为 <a class="reference internal" href="#py_compile.PycInvalidationMode.CHECKED_HASH" title="py_compile.PycInvalidationMode.CHECKED_HASH"><code class="xref py py-attr docutils literal notranslate"><span class="pre">PycInvalidationMode.CHECKED_HASH</span></code></a>，否则默认值为 <a class="reference internal" href="#py_compile.PycInvalidationMode.TIMESTAMP" title="py_compile.PycInvalidationMode.TIMESTAMP"><code class="xref py py-attr docutils literal notranslate"><span class="pre">PycInvalidationMode.TIMESTAMP</span></code></a>。</p>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.2 版本发生变更: </span>将 <em>cfile</em> 的默认值改成与 <span class="target" id="index-18"></span><a class="pep reference external" href="https://peps.python.org/pep-3147/"><strong>PEP 3147</strong></a><span class="link-target"> [https://peps.python.org/pep-3147/]</span> 兼容。 之前的默认值是 <em>file</em> + <code class="docutils literal notranslate"><span class="pre">'c'</span></code> (如果启用优化则为 <code class="docutils literal notranslate"><span class="pre">'o'</span></code>)。 同时也添加了 <em>optimize</em> 形参。</p>
</div>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.4 版本发生变更: </span>将代码更改为使用 <a class="reference internal" href="importlib.xhtml#module-importlib" title="importlib: The implementation of the import machinery."><code class="xref py py-mod docutils literal notranslate"><span class="pre">importlib</span></code></a> 执行字节码缓存文件写入。 这意味着文件创建/写入的语义现在与 <a class="reference internal" href="importlib.xhtml#module-importlib" title="importlib: The implementation of the import machinery."><code class="xref py py-mod docutils literal notranslate"><span class="pre">importlib</span></code></a> 所做的相匹配，例如权限、写入和移动语义等等。 同时也添加了当 <em>cfile</em> 为符号链接或非常规文件时引发 <a class="reference internal" href="exceptions.xhtml#FileExistsError" title="FileExistsError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">FileExistsError</span></code></a> 的预警设置。</p>
</div>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.7 版本发生变更: </span><em>invalidation_mode</em> 形参是根据 <span class="target" id="index-19"></span><a class="pep reference external" href="https://peps.python.org/pep-0552/"><strong>PEP 552</strong></a><span class="link-target"> [https://peps.python.org/pep-0552/]</span> 的描述添加的。 如果设置了 <span class="target" id="index-20"></span><code class="xref std std-envvar docutils literal notranslate"><span class="pre">SOURCE_DATE_EPOCH</span></code> 环境变量，<em>invalidation_mode</em> 将被强制设为 <a class="reference internal" href="#py_compile.PycInvalidationMode.CHECKED_HASH" title="py_compile.PycInvalidationMode.CHECKED_HASH"><code class="xref py py-attr docutils literal notranslate"><span class="pre">PycInvalidationMode.CHECKED_HASH</span></code></a>。</p>
</div>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.7.2 版本发生变更: </span><span class="target" id="index-21"></span><code class="xref std std-envvar docutils literal notranslate"><span class="pre">SOURCE_DATE_EPOCH</span></code> 环境变量不会再覆盖 <em>invalidation_mode</em> 参数的值，而改为确定其默认值。</p>
</div>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.8 版本发生变更: </span>增加了 <em>quiet</em> 形参。</p>
</div>
</dd></dl>

<dl class="py class">
<dt class="sig sig-object py" id="py_compile.PycInvalidationMode">
<em class="property"><span class="pre">class</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">py_compile.</span></span><span class="sig-name descname"><span class="pre">PycInvalidationMode</span></span></dt>
<dd><p>一个由可用方法组成的枚举，解释器可以用它来确定字节码文件是否与源文件保持同步。 <code class="docutils literal notranslate"><span class="pre">.pyc</span></code> 文件在其标头中指明了所需的失效模式。 请参阅 <a class="reference internal" href="../reference/import.xhtml#pyc-invalidation"><span class="std std-ref">已缓存字节码的失效</span></a> 了解有关 Python 在运行时如何让 <code class="docutils literal notranslate"><span class="pre">.pyc</span></code> 文件失效的更多信息。</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.7.</span></p>
</div>
<dl class="py attribute">
<dt class="sig sig-object py" id="py_compile.PycInvalidationMode.TIMESTAMP">
<span class="sig-name descname"><span class="pre">TIMESTAMP</span></span></dt>
<dd><p><code class="docutils literal notranslate"><span class="pre">.pyc</span></code> 文件包括时间戳和源文件的大小，Python 将在运行时将其与源文件的元数据进行比较以确定 <code class="docutils literal notranslate"><span class="pre">.pyc</span></code> 文件是否需要重新生成。</p>
</dd></dl>

<dl class="py attribute">
<dt class="sig sig-object py" id="py_compile.PycInvalidationMode.CHECKED_HASH">
<span class="sig-name descname"><span class="pre">CHECKED_HASH</span></span></dt>
<dd><p><code class="docutils literal notranslate"><span class="pre">.pyc</span></code> 文件包括源文件内容的哈希值，Python 将在运行时将其与源文件内容进行比较以确定 <code class="docutils literal notranslate"><span class="pre">.pyc</span></code> 文件是否需要重新生成。</p>
</dd></dl>

<dl class="py attribute">
<dt class="sig sig-object py" id="py_compile.PycInvalidationMode.UNCHECKED_HASH">
<span class="sig-name descname"><span class="pre">UNCHECKED_HASH</span></span></dt>
<dd><p>类似于 <a class="reference internal" href="#py_compile.PycInvalidationMode.CHECKED_HASH" title="py_compile.PycInvalidationMode.CHECKED_HASH"><code class="xref py py-attr docutils literal notranslate"><span class="pre">CHECKED_HASH</span></code></a>，<code class="docutils literal notranslate"><span class="pre">.pyc</span></code> 文件包括源文件内容的哈希值。 但是，Python 将在运行时假定 <code class="docutils literal notranslate"><span class="pre">.pyc</span></code> 文件是最新的而完全不会将 <code class="docutils literal notranslate"><span class="pre">.pyc</span></code> 与源文件进行验证。</p>
<p>此选项适用于 <code class="docutils literal notranslate"><span class="pre">.pycs</span></code> 由 Python 以外的某个系统例如构建系统来确保最新的情况。</p>
</dd></dl>

</dd></dl>

<section id="command-line-interface">
<span id="py-compile-cli"></span><h2>命令行接口</h2>
<p>这个模块可作为脚本发起调用以编译多个源文件。 在 <em>filenames</em> 中指定的文件会被编译并将结果字节码以普通方式进行缓存。 这个程序不会搜索目录结构来定位源文件；它只编译显式指定的文件。 如果某个文件无法被编译则退出状态为非零值。</p>
<dl class="std option">
<dt class="sig sig-object std" id="cmdoption-python-m-py_compile-arg-file">
<span class="sig-name descname"><span class="pre">&lt;file&gt;</span></span><span class="sig-prename descclassname"> <span class="pre">...</span> <span class="pre">&lt;fileN&gt;</span></span></dt>
<dt class="sig sig-object std" id="cmdoption-python-m-py_compile">
<span class="sig-name descname"><span class="pre">-</span></span><span class="sig-prename descclassname"></span></dt>
<dd><p>位置参数是要编译的文件。 如果 <code class="docutils literal notranslate"><span class="pre">-</span></code> 是唯一的形参，则文件列表将从标准输入获取。</p>
</dd></dl>

<dl class="std option">
<dt class="sig sig-object std" id="cmdoption-python-m-py_compile-q">
<span id="cmdoption-python-m-py_compile-quiet"></span><span class="sig-name descname"><span class="pre">-q</span></span><span class="sig-prename descclassname"></span><span class="sig-prename descclassname"><span class="pre">,</span> </span><span class="sig-name descname"><span class="pre">--quiet</span></span><span class="sig-prename descclassname"></span></dt>
<dd><p>屏蔽错误输出。</p>
</dd></dl>

<div class="versionchanged">
<p><span class="versionmodified changed">在 3.2 版本发生变更: </span>添加了对 <code class="docutils literal notranslate"><span class="pre">-</span></code> 的支持。</p>
</div>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.10 版本发生变更: </span>添加了对 <a class="reference internal" href="#cmdoption-python-m-py_compile-q"><code class="xref std std-option docutils literal notranslate"><span class="pre">-q</span></code></a> 的支持。</p>
</div>
<div class="admonition seealso">
<p class="admonition-title">参见</p>
<dl class="simple">
<dt>模块 <a class="reference internal" href="compileall.xhtml#module-compileall" title="compileall: Tools for byte-compiling all Python source files in a directory tree."><code class="xref py py-mod docutils literal notranslate"><span class="pre">compileall</span></code></a></dt><dd><p>编译一个目录树中所有 Python 源文件的工具。</p>
</dd>
</dl>
</div>
</section>
</section>


            <div class="clearer"></div>
          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>