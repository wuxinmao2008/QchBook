<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" /><meta name="viewport" content="width=device-width, initial-scale=1" />
<meta property="og:title" content="crypt —— 验证 Unix 口令的函数" />
<meta property="og:type" content="website" />
<meta property="og:url" content="https://docs.python.org/3/library/crypt.xhtml" />
<meta property="og:site_name" content="Python documentation" />
<meta property="og:description" content="源代码： Lib/struct.py[https://github.com/python/cpython/tree/3.12/Lib/struct.py] 本模块实现了连接 crypt(3)[https://manpages.debian.org/crypt(3)] 的接口，是一个基于改进 DES 算法的单向散列函数；更多细节请参阅 Unix man 手册。可能的用途包括保存经过哈希的口令，..." />
<meta property="og:image" content="https://docs.python.org/3/_static/og-image.png" />
<meta property="og:image:alt" content="Python documentation" />
<meta name="description" content="源代码： Lib/struct.py[https://github.com/python/cpython/tree/3.12/Lib/struct.py] 本模块实现了连接 crypt(3)[https://manpages.debian.org/crypt(3)] 的接口，是一个基于改进 DES 算法的单向散列函数；更多细节请参阅 Unix man 手册。可能的用途包括保存经过哈希的口令，..." />
<meta property="og:image:width" content="200" />
<meta property="og:image:height" content="200" />
<meta name="theme-color" content="#3776ab" />

    <title>crypt —— 验证 Unix 口令的函数</title>
    <link rel="stylesheet" type="text/css" href="../_static/pygments.css" />
    <link rel="stylesheet" type="text/css" href="../_static/epub.css" />
    <link rel="canonical" href="https://docs.python.org/3/library/crypt.html" />
    
      
    

    
    <style>
      @media only screen {
        table.full-width-table {
            width: 100%;
        }
      }
    </style>
 

  </head><body>


    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <section id="module-crypt">
<span id="crypt-function-to-check-unix-passwords"></span><h1><a class="reference internal" href="#module-crypt" title="crypt: The crypt() function used to check Unix passwords.（已弃用） (Unix)"><code class="xref py py-mod docutils literal notranslate"><span class="pre">crypt</span></code></a> —— 验证 Unix 口令的函数</h1>
<p><strong>源代码：</strong> <a class="reference external" href="https://github.com/python/cpython/tree/3.12/Lib/struct.py">Lib/struct.py</a><span class="link-target"> [https://github.com/python/cpython/tree/3.12/Lib/struct.py]</span></p>
<div class="deprecated-removed" id="index-0">
<p><span class="versionmodified">从 3.11 版起不建议使用，将在 3.13 版中移除: </span><a class="reference internal" href="#module-crypt" title="crypt: The crypt() function used to check Unix passwords.（已弃用） (Unix)"><code class="xref py py-mod docutils literal notranslate"><span class="pre">crypt</span></code></a> 模块已被弃用（请参阅 <span class="target" id="index-5"></span><a class="pep reference external" href="https://peps.python.org/pep-0594/#crypt"><strong>PEP 594</strong></a><span class="link-target"> [https://peps.python.org/pep-0594/#crypt]</span> 了解详情及其替代品）。 <a class="reference internal" href="hashlib.xhtml#module-hashlib" title="hashlib: Secure hash and message digest algorithms."><code class="xref py py-mod docutils literal notranslate"><span class="pre">hashlib</span></code></a> 模块是针对特定应用场景的潜在替换物。 <a class="reference external" href="https://pypi.org/project/passlib/">passlib</a><span class="link-target"> [https://pypi.org/project/passlib/]</span> 包可以替代此模块的所有应用场景。</p>
</div>
<hr class="docutils" />
<p>本模块实现了连接 <em class="manpage"><a class="manpage reference external" href="https://manpages.debian.org/crypt(3)">crypt(3)</a><span class="link-target"> [https://manpages.debian.org/crypt(3)]</span></em> 的接口，是一个基于改进 DES 算法的单向散列函数；更多细节请参阅 Unix man 手册。可能的用途包括保存经过哈希的口令，这样就可以在不存储实际口令的情况下对其进行验证，或者尝试用字典来破解 Unix 口令。</p>
<p id="index-2">请注意，本模块的执行取决于当前系统中 <em class="manpage"><a class="manpage reference external" href="https://manpages.debian.org/crypt(3)">crypt(3)</a><span class="link-target"> [https://manpages.debian.org/crypt(3)]</span></em> 的实际实现。 因此，当前实现版本可用的扩展均可在本模块使用。</p>
<div class="availability docutils container">
<p><a class="reference internal" href="intro.xhtml#availability"><span class="std std-ref">可用性</span></a>: Unix，不包括 VxWorks。</p>
</div>
<div class="availability docutils container">
<p><a class="reference internal" href="intro.xhtml#availability"><span class="std std-ref">可用性</span></a>: 非 Emscripten，非 WASI。</p>
<p>此模块在 WebAssembly 平台 <code class="docutils literal notranslate"><span class="pre">wasm32-emscripten</span></code> 和 <code class="docutils literal notranslate"><span class="pre">wasm32-wasi</span></code> 上不适用或不可用。 请参阅 <a class="reference internal" href="intro.xhtml#wasm-availability"><span class="std std-ref">WebAssembly 平台</span></a> 了解详情。</p>
</div>
<section id="hashing-methods">
<h2>哈希方法</h2>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.3.</span></p>
</div>
<p><a class="reference internal" href="#module-crypt" title="crypt: The crypt() function used to check Unix passwords.（已弃用） (Unix)"><code class="xref py py-mod docutils literal notranslate"><span class="pre">crypt</span></code></a> 模块定义了哈希方法的列表（不是所有的方法在所有平台上都可用）。</p>
<dl class="py data">
<dt class="sig sig-object py" id="crypt.METHOD_SHA512">
<span class="sig-prename descclassname"><span class="pre">crypt.</span></span><span class="sig-name descname"><span class="pre">METHOD_SHA512</span></span></dt>
<dd><p>基于 SHA-512 哈希函数的模块化加密格式方法，具备 16 个字符的 salt 和 86个字符的哈希算法。这是最强的哈希算法。</p>
</dd></dl>

<dl class="py data">
<dt class="sig sig-object py" id="crypt.METHOD_SHA256">
<span class="sig-prename descclassname"><span class="pre">crypt.</span></span><span class="sig-name descname"><span class="pre">METHOD_SHA256</span></span></dt>
<dd><p>另一种基于 SHA-256 哈希函数的模块化加密格式方法，具备 16 个字符的 salt 和 43 个字符的哈希算法。</p>
</dd></dl>

<dl class="py data">
<dt class="sig sig-object py" id="crypt.METHOD_BLOWFISH">
<span class="sig-prename descclassname"><span class="pre">crypt.</span></span><span class="sig-name descname"><span class="pre">METHOD_BLOWFISH</span></span></dt>
<dd><p>另一种基于 Blowfish 的模块化加密格式方法，有 22 个字符的 salt 和 31 个字符的哈希算法。</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.7.</span></p>
</div>
</dd></dl>

<dl class="py data">
<dt class="sig sig-object py" id="crypt.METHOD_MD5">
<span class="sig-prename descclassname"><span class="pre">crypt.</span></span><span class="sig-name descname"><span class="pre">METHOD_MD5</span></span></dt>
<dd><p>另一种基于 MD5 哈希函数的模块化加密格式方法，具备 8 个字符的 salt 和 22 个字符的哈希算法。</p>
</dd></dl>

<dl class="py data">
<dt class="sig sig-object py" id="crypt.METHOD_CRYPT">
<span class="sig-prename descclassname"><span class="pre">crypt.</span></span><span class="sig-name descname"><span class="pre">METHOD_CRYPT</span></span></dt>
<dd><p>传统的方法，具备 2 个字符的 salt 和 13 个字符的哈希算法。这是最弱的方法。</p>
</dd></dl>

</section>
<section id="module-attributes">
<h2>模块属性</h2>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.3.</span></p>
</div>
<dl class="py attribute">
<dt class="sig sig-object py" id="crypt.methods">
<span class="sig-prename descclassname"><span class="pre">crypt.</span></span><span class="sig-name descname"><span class="pre">methods</span></span></dt>
<dd><p>可用口令哈希算法的列表，形式为 <code class="docutils literal notranslate"><span class="pre">crypt.METHOD_*</span></code> 对象。该列表从最强到最弱进行排序。</p>
</dd></dl>

</section>
<section id="module-functions">
<h2>模块函数</h2>
<p><a class="reference internal" href="#module-crypt" title="crypt: The crypt() function used to check Unix passwords.（已弃用） (Unix)"><code class="xref py py-mod docutils literal notranslate"><span class="pre">crypt</span></code></a> 模块定义了以下函数：</p>
<dl class="py function">
<dt class="sig sig-object py" id="crypt.crypt">
<span class="sig-prename descclassname"><span class="pre">crypt.</span></span><span class="sig-name descname"><span class="pre">crypt</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">word</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">salt</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p><em>word</em> 通常将是用户在提示符或图形界面上输入的口令。 可选参数 <em>salt</em> 要么是 <a class="reference internal" href="#crypt.mksalt" title="crypt.mksalt"><code class="xref py py-func docutils literal notranslate"><span class="pre">mksalt()</span></code></a> 所返回的字符串，即 <code class="docutils literal notranslate"><span class="pre">crypt.METHOD_*</span></code> 值之一（尽管不是在所有平台上都可用），要么就是一个包括 salt 的完全加密的口令，与本函数的返回值一样。 如果未给出 <em>salt</em>，则将使用 <a class="reference internal" href="#crypt.methods" title="crypt.methods"><code class="xref py py-attr docutils literal notranslate"><span class="pre">methods</span></code></a> 中提供的最强方法。</p>
<p>查验口令通常是传入纯文本密码 <em>word</em> ，和之前 <a class="reference internal" href="#module-crypt" title="crypt: The crypt() function used to check Unix passwords.（已弃用） (Unix)"><code class="xref py py-func docutils literal notranslate"><span class="pre">crypt()</span></code></a> 调用的结果进行比较，应该与本次调用的结果相同。</p>
<p><em>salt</em> (随机的 2 或 16 个字符的字符串，可能带有 <code class="docutils literal notranslate"><span class="pre">$digit{TX-PL-LABEL}#x60;</span></code> 前缀以提示相关方法) 将被用来扰乱加密算法。  <em>salt</em> 中的字符必须在 <code class="docutils literal notranslate"><span class="pre">[./a-zA-Z0-9]</span></code> 集合中，但 Modular Crypt Format 除外，它会带有 <code class="docutils literal notranslate"><span class="pre">$digit{TX-PL-LABEL}#x60;</span></code> 前缀。</p>
<p>返回哈希后的口令字符串，将由 salt 所在字母表中的字符组成。</p>
<p id="index-3">由于有些 <em class="manpage"><a class="manpage reference external" href="https://manpages.debian.org/crypt(3)">crypt(3)</a><span class="link-target"> [https://manpages.debian.org/crypt(3)]</span></em> 扩展可以接受各种大小的  <em>salt</em>  值，建议在查验口令时采用完整的加密后口令作为 salt。</p>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.3 版本发生变更: </span>除了字符串之外， <em>salt</em> 还可接受 <code class="docutils literal notranslate"><span class="pre">crypt.METHOD_*</span></code> 值。</p>
</div>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="crypt.mksalt">
<span class="sig-prename descclassname"><span class="pre">crypt.</span></span><span class="sig-name descname"><span class="pre">mksalt</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">method</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="o"><span class="pre">*</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">rounds</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>返回用指定方法随机生成的 salt 值。 如果没有给出 <em>method</em>，则会使用 <a class="reference internal" href="#crypt.methods" title="crypt.methods"><code class="xref py py-attr docutils literal notranslate"><span class="pre">methods</span></code></a> 中提供的最强方法。is used.</p>
<p>返回一个字符串，可用作传入 <a class="reference internal" href="#module-crypt" title="crypt: The crypt() function used to check Unix passwords.（已弃用） (Unix)"><code class="xref py py-func docutils literal notranslate"><span class="pre">crypt()</span></code></a> 的 <em>salt</em> 参数。</p>
<p><em>rounds</em> 指定了 <code class="docutils literal notranslate"><span class="pre">METHOD_SHA256</span></code>, <code class="docutils literal notranslate"><span class="pre">METHOD_SHA512</span></code> 和 <code class="docutils literal notranslate"><span class="pre">METHOD_BLOWFISH</span></code> 的循环次数。 对于 <code class="docutils literal notranslate"><span class="pre">METHOD_SHA256</span></code> 和 <code class="docutils literal notranslate"><span class="pre">METHOD_SHA512</span></code> 而言，必须为介于 <code class="docutils literal notranslate"><span class="pre">1000</span></code> 和 <code class="docutils literal notranslate"><span class="pre">999_999_999</span></code> 之间的整数，默认值为 <code class="docutils literal notranslate"><span class="pre">5000</span></code>。 而对于 <code class="docutils literal notranslate"><span class="pre">METHOD_BLOWFISH</span></code>，则必须为 <code class="docutils literal notranslate"><span class="pre">16</span></code> (2<sup>4</sup>) 和 <code class="docutils literal notranslate"><span class="pre">2_147_483_648</span></code> (2<sup>31</sup>) 之间的二的幂，默认值为 <code class="docutils literal notranslate"><span class="pre">4096</span></code> (2<sup>12</sup>)。</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.3.</span></p>
</div>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.7 版本发生变更: </span>加入  <em>rounds</em> 参数。</p>
</div>
</dd></dl>

</section>
<section id="examples">
<h2>例子</h2>
<p>以下简单示例演示了典型用法（需要一个时间固定的比较操作来限制留给计时攻击的暴露面。 <a class="reference internal" href="hmac.xhtml#hmac.compare_digest" title="hmac.compare_digest"><code class="xref py py-func docutils literal notranslate"><span class="pre">hmac.compare_digest()</span></code></a> 即很适用）：</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="kn">import</span> <span class="nn">pwd</span>
<span class="kn">import</span> <span class="nn">crypt</span>
<span class="kn">import</span> <span class="nn">getpass</span>
<span class="kn">from</span> <span class="nn">hmac</span> <span class="kn">import</span> <span class="n">compare_digest</span> <span class="k">as</span> <span class="n">compare_hash</span>

<span class="k">def</span> <span class="nf">login</span><span class="p">():</span>
    <span class="n">username</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s1">&#39;Python login: &#39;</span><span class="p">)</span>
    <span class="n">cryptedpasswd</span> <span class="o">=</span> <span class="n">pwd</span><span class="o">.</span><span class="n">getpwnam</span><span class="p">(</span><span class="n">username</span><span class="p">)[</span><span class="mi">1</span><span class="p">]</span>
    <span class="k">if</span> <span class="n">cryptedpasswd</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">cryptedpasswd</span> <span class="o">==</span> <span class="s1">&#39;x&#39;</span> <span class="ow">or</span> <span class="n">cryptedpasswd</span> <span class="o">==</span> <span class="s1">&#39;*&#39;</span><span class="p">:</span>
            <span class="k">raise</span> <span class="ne">ValueError</span><span class="p">(</span><span class="s1">&#39;no support for shadow passwords&#39;</span><span class="p">)</span>
        <span class="n">cleartext</span> <span class="o">=</span> <span class="n">getpass</span><span class="o">.</span><span class="n">getpass</span><span class="p">()</span>
        <span class="k">return</span> <span class="n">compare_hash</span><span class="p">(</span><span class="n">crypt</span><span class="o">.</span><span class="n">crypt</span><span class="p">(</span><span class="n">cleartext</span><span class="p">,</span> <span class="n">cryptedpasswd</span><span class="p">),</span> <span class="n">cryptedpasswd</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="kc">True</span>
</pre></div>
</div>
<p>采用当前强度最高的方法生成哈希值，并与原口令进行核对：</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="kn">import</span> <span class="nn">crypt</span>
<span class="kn">from</span> <span class="nn">hmac</span> <span class="kn">import</span> <span class="n">compare_digest</span> <span class="k">as</span> <span class="n">compare_hash</span>

<span class="n">hashed</span> <span class="o">=</span> <span class="n">crypt</span><span class="o">.</span><span class="n">crypt</span><span class="p">(</span><span class="n">plaintext</span><span class="p">)</span>
<span class="k">if</span> <span class="ow">not</span> <span class="n">compare_hash</span><span class="p">(</span><span class="n">hashed</span><span class="p">,</span> <span class="n">crypt</span><span class="o">.</span><span class="n">crypt</span><span class="p">(</span><span class="n">plaintext</span><span class="p">,</span> <span class="n">hashed</span><span class="p">)):</span>
    <span class="k">raise</span> <span class="ne">ValueError</span><span class="p">(</span><span class="s2">&quot;hashed version doesn&#39;t validate against original&quot;</span><span class="p">)</span>
</pre></div>
</div>
</section>
</section>


            <div class="clearer"></div>
          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>