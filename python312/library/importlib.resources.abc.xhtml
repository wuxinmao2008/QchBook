<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" /><meta name="viewport" content="width=device-width, initial-scale=1" />
<meta property="og:title" content="importlib.resources.abc -- Abstract base classes for resources" />
<meta property="og:type" content="website" />
<meta property="og:url" content="https://docs.python.org/3/library/importlib.resources.abc.xhtml" />
<meta property="og:site_name" content="Python documentation" />
<meta property="og:description" content="源代码: Lib/importlib/resources/abc.py[https://github.com/python/cpython/tree/3.12/Lib/importlib/resources/abc.py]" />
<meta property="og:image" content="https://docs.python.org/3/_static/og-image.png" />
<meta property="og:image:alt" content="Python documentation" />
<meta name="description" content="源代码: Lib/importlib/resources/abc.py[https://github.com/python/cpython/tree/3.12/Lib/importlib/resources/abc.py]" />
<meta property="og:image:width" content="200" />
<meta property="og:image:height" content="200" />
<meta name="theme-color" content="#3776ab" />

    <title>importlib.resources.abc -- Abstract base classes for resources</title>
    <link rel="stylesheet" type="text/css" href="../_static/pygments.css" />
    <link rel="stylesheet" type="text/css" href="../_static/epub.css" />
    <link rel="canonical" href="https://docs.python.org/3/library/importlib.resources.abc.html" />
    
      
    

    
    <style>
      @media only screen {
        table.full-width-table {
            width: 100%;
        }
      }
    </style>
 

  </head><body>


    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <section id="module-importlib.resources.abc">
<span id="importlib-resources-abc-abstract-base-classes-for-resources"></span><h1><code class="xref py py-mod docutils literal notranslate"><span class="pre">importlib.resources.abc</span></code> -- Abstract base classes for resources</h1>
<p><strong>源代码:</strong> <a class="reference external" href="https://github.com/python/cpython/tree/3.12/Lib/importlib/resources/abc.py">Lib/importlib/resources/abc.py</a><span class="link-target"> [https://github.com/python/cpython/tree/3.12/Lib/importlib/resources/abc.py]</span></p>
<hr class="docutils" />
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.11.</span></p>
</div>
<dl class="py class">
<dt class="sig sig-object py" id="importlib.resources.abc.ResourceReader">
<em class="property"><span class="pre">class</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">importlib.resources.abc.</span></span><span class="sig-name descname"><span class="pre">ResourceReader</span></span></dt>
<dd><p><em>被 TraversableResources</em> 取代</p>
<p>提供读取 <em>resources</em> 能力的一个 <a class="reference internal" href="../glossary.xhtml#term-abstract-base-class"><span class="xref std std-term">abstract base class</span></a> 。</p>
<p>从这个 ABC 的视角出发，<em>resource</em> 指一个包附带的二进制文件。常见的如在包的  <code class="docutils literal notranslate"><span class="pre">__init__.py</span></code> 文件旁的数据文件。这个类存在的目的是为了将对数据文件的访问进行抽象，这样包就和其数据文件的存储方式无关了。不论这些文件是存放在一个 zip 文件里还是直接在文件系统内。</p>
<p>对于该类中的任一方法，<em>resource</em> 参数的值都需要是一个在概念上表示文件名称的 <a class="reference internal" href="../glossary.xhtml#term-path-like-object"><span class="xref std std-term">path-like object</span></a>。 这意味着任何子目录的路径都不该出现在 <em>resouce</em> 参数值内。 因为对于阅读器而言，包的位置就代表着「目录」。 因此目录和文件名就分别对应于包和资源。 这也是该类的实例都需要和一个包直接关联（而不是潜在指代很多包或者一整个模块）的原因。</p>
<p>想支持资源读取的加载器需要提供一个返回实现了此 ABC 的接口的 <code class="docutils literal notranslate"><span class="pre">get_resource_reader(fullname)</span></code> 方法。如果通过全名指定的模块不是一个包，这个方法应该返回 <a class="reference internal" href="constants.xhtml#None" title="None"><code class="xref py py-const docutils literal notranslate"><span class="pre">None</span></code></a>。 当指定的模块是一个包时，应该只返回一个与这个抽象类ABC兼容的对象。</p>
<div class="deprecated-removed">
<p><span class="versionmodified">从 3.12 版起不建议使用，将在 3.14 版中移除: </span>使用 <a class="reference internal" href="#importlib.resources.abc.TraversableResources" title="importlib.resources.abc.TraversableResources"><code class="xref py py-class docutils literal notranslate"><span class="pre">importlib.resources.abc.TraversableResources</span></code></a> 代替。</p>
</div>
<dl class="py method">
<dt class="sig sig-object py" id="importlib.resources.abc.ResourceReader.open_resource">
<em class="property"><span class="pre">abstractmethod</span> </em><span class="sig-name descname"><span class="pre">open_resource</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">resource</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>返回一个打开的 <a class="reference internal" href="../glossary.xhtml#term-file-like-object"><span class="xref std std-term">file-like object</span></a> 用于 <em>resource</em> 的二进制读取。</p>
<p>如果无法找到资源，将会引发 <a class="reference internal" href="exceptions.xhtml#FileNotFoundError" title="FileNotFoundError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">FileNotFoundError</span></code></a>。</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="importlib.resources.abc.ResourceReader.resource_path">
<em class="property"><span class="pre">abstractmethod</span> </em><span class="sig-name descname"><span class="pre">resource_path</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">resource</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>返回 <em>resource</em> 的文件系统路径。</p>
<p>如果资源并不实际存在于文件系统中，将会引发 <a class="reference internal" href="exceptions.xhtml#FileNotFoundError" title="FileNotFoundError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">FileNotFoundError</span></code></a>。</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="importlib.resources.abc.ResourceReader.is_resource">
<em class="property"><span class="pre">abstractmethod</span> </em><span class="sig-name descname"><span class="pre">is_resource</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">name</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>如果 <em>name</em> 被视作资源，则返回True。如果 <em>name</em> 不存在，则引发 <a class="reference internal" href="exceptions.xhtml#FileNotFoundError" title="FileNotFoundError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">FileNotFoundError</span></code></a> 异常。</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="importlib.resources.abc.ResourceReader.contents">
<em class="property"><span class="pre">abstractmethod</span> </em><span class="sig-name descname"><span class="pre">contents</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>反回由字符串组成的 <a class="reference internal" href="../glossary.xhtml#term-iterable"><span class="xref std std-term">iterable</span></a>，表示这个包的所有内容。 请注意并不要求迭代器返回的所有名称都是实际的资源，例如返回 <a class="reference internal" href="#importlib.resources.abc.ResourceReader.is_resource" title="importlib.resources.abc.ResourceReader.is_resource"><code class="xref py py-meth docutils literal notranslate"><span class="pre">is_resource()</span></code></a> 为假值的名称也是可接受的。</p>
<p>允许非资源名字被返回是为了允许存储的一个包和它的资源的方式是已知先验的并且非资源名字会有用的情况。比如，允许返回子目录名字，目的是当得知包和资源存储在文件系统上面的时候，能够直接使用子目录的名字。</p>
<p>这个抽象方法返回了一个不包含任何内容的可迭代对象。</p>
</dd></dl>

</dd></dl>

<dl class="py class">
<dt class="sig sig-object py" id="importlib.resources.abc.Traversable">
<em class="property"><span class="pre">class</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">importlib.resources.abc.</span></span><span class="sig-name descname"><span class="pre">Traversable</span></span></dt>
<dd><p>一个具有 <a class="reference internal" href="pathlib.xhtml#pathlib.Path" title="pathlib.Path"><code class="xref py py-class docutils literal notranslate"><span class="pre">pathlib.Path</span></code></a> 中方法的子集并适用于遍历目录和打开文件的对象。</p>
<p>对于该对象在文件系统中的表示形式，请使用 <a class="reference internal" href="importlib.resources.xhtml#importlib.resources.as_file" title="importlib.resources.as_file"><code class="xref py py-meth docutils literal notranslate"><span class="pre">importlib.resources.as_file()</span></code></a>。</p>
<dl class="py attribute">
<dt class="sig sig-object py" id="importlib.resources.abc.Traversable.name">
<span class="sig-name descname"><span class="pre">name</span></span></dt>
<dd><p>抽象属性。 此对象的不带任何父引用的基本名称。</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="importlib.resources.abc.Traversable.iterdir">
<em class="property"><span class="pre">abstractmethod</span> </em><span class="sig-name descname"><span class="pre">iterdir</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>产出自身内部的可遍历对象。</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="importlib.resources.abc.Traversable.is_dir">
<em class="property"><span class="pre">abstractmethod</span> </em><span class="sig-name descname"><span class="pre">is_dir</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Return <code class="docutils literal notranslate"><span class="pre">True</span></code> if self is a directory.</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="importlib.resources.abc.Traversable.is_file">
<em class="property"><span class="pre">abstractmethod</span> </em><span class="sig-name descname"><span class="pre">is_file</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Return <code class="docutils literal notranslate"><span class="pre">True</span></code> if self is a file.</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="importlib.resources.abc.Traversable.joinpath">
<em class="property"><span class="pre">abstractmethod</span> </em><span class="sig-name descname"><span class="pre">joinpath</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="o"><span class="pre">*</span></span><span class="n"><span class="pre">pathsegments</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>按照 <em>pathsegments</em> 遍历目录并以 <code class="xref py py-class docutils literal notranslate"><span class="pre">Traversable</span></code> 形式返回结果。</p>
<p>每个 <em>pathsegments</em> 参数可能包含以正斜杠 (<code class="docutils literal notranslate"><span class="pre">/</span></code>, <code class="docutils literal notranslate"><span class="pre">posixpath.sep</span></code> ) 分隔的多个名称。 例如，以下值是等价的:</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="n">files</span><span class="o">.</span><span class="n">joinpath</span><span class="p">(</span><span class="s1">&#39;subdir&#39;</span><span class="p">,</span> <span class="s1">&#39;subsuddir&#39;</span><span class="p">,</span> <span class="s1">&#39;file.txt&#39;</span><span class="p">)</span>
<span class="n">files</span><span class="o">.</span><span class="n">joinpath</span><span class="p">(</span><span class="s1">&#39;subdir/subsuddir/file.txt&#39;</span><span class="p">)</span>
</pre></div>
</div>
<p>请注意某些 <code class="xref py py-class docutils literal notranslate"><span class="pre">Traversable</span></code> 实现可能没有升级到最新版本的协议。 要与这样的实现保持兼容，可以向每个对 <code class="docutils literal notranslate"><span class="pre">joinpath</span></code> 的调用提供提供单个不带路径分隔符的参数。 例如:</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="n">files</span><span class="o">.</span><span class="n">joinpath</span><span class="p">(</span><span class="s1">&#39;subdir&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">joinpath</span><span class="p">(</span><span class="s1">&#39;subsubdir&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">joinpath</span><span class="p">(</span><span class="s1">&#39;file.txt&#39;</span><span class="p">)</span>
</pre></div>
</div>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.11 版本发生变更: </span><code class="docutils literal notranslate"><span class="pre">joinpath</span></code> 接受多个 <em>pathsegments</em>，这些部分可以包含正斜杠作为路径分隔符。 在之前版本中，只接受单个 <em>child</em> 参数。</p>
</div>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="importlib.resources.abc.Traversable.__truediv__">
<em class="property"><span class="pre">abstractmethod</span> </em><span class="sig-name descname"><span class="pre">__truediv__</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">child</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>返回可遍历的子对象自身。 等价于 <code class="docutils literal notranslate"><span class="pre">joinpath(child)</span></code>。</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="importlib.resources.abc.Traversable.open">
<em class="property"><span class="pre">abstractmethod</span> </em><span class="sig-name descname"><span class="pre">open</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">mode</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">'r'</span></span></em>, <em class="sig-param"><span class="o"><span class="pre">*</span></span><span class="n"><span class="pre">args</span></span></em>, <em class="sig-param"><span class="o"><span class="pre">**</span></span><span class="n"><span class="pre">kwargs</span></span></em><span class="sig-paren">)</span></dt>
<dd><p><em>mode</em> 可以为 'r' 或 'rb' 即以文本或二进制模式打开。 返回一个适用于读取的句柄（与 <a class="reference internal" href="pathlib.xhtml#pathlib.Path.open" title="pathlib.Path.open"><code class="xref py py-attr docutils literal notranslate"><span class="pre">pathlib.Path.open</span></code></a> 样同）。</p>
<p>当以文件模式打开时，接受与 <a class="reference internal" href="io.xhtml#io.TextIOWrapper" title="io.TextIOWrapper"><code class="xref py py-class docutils literal notranslate"><span class="pre">io.TextIOWrapper</span></code></a> 所接受的相同编码格式形参。</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="importlib.resources.abc.Traversable.read_bytes">
<span class="sig-name descname"><span class="pre">read_bytes</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>以字节串形式读取自身的内容。</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="importlib.resources.abc.Traversable.read_text">
<span class="sig-name descname"><span class="pre">read_text</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">encoding</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>以文本形式读取自身的内容。</p>
</dd></dl>

</dd></dl>

<dl class="py class">
<dt class="sig sig-object py" id="importlib.resources.abc.TraversableResources">
<em class="property"><span class="pre">class</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">importlib.resources.abc.</span></span><span class="sig-name descname"><span class="pre">TraversableResources</span></span></dt>
<dd><p>针对能够为 <a class="reference internal" href="importlib.resources.xhtml#importlib.resources.files" title="importlib.resources.files"><code class="xref py py-meth docutils literal notranslate"><span class="pre">importlib.resources.files()</span></code></a> 接口提供服务的资源读取器的抽象基类。 子类化 <a class="reference internal" href="#importlib.resources.abc.ResourceReader" title="importlib.resources.abc.ResourceReader"><code class="xref py py-class docutils literal notranslate"><span class="pre">ResourceReader</span></code></a> 并为 <code class="xref py py-class docutils literal notranslate"><span class="pre">ResourceReader</span></code> 的抽象方法提供具体实现。 因此 ，任何提供了 <code class="xref py py-class docutils literal notranslate"><span class="pre">TraversableResources</span></code> 的加载器也会提供 <code class="xref py py-class docutils literal notranslate"><span class="pre">ResourceReader</span></code>。</p>
<p>需要支持资源读取的加载器应实现此接口。</p>
<dl class="py method">
<dt class="sig sig-object py" id="importlib.resources.abc.TraversableResources.files">
<em class="property"><span class="pre">abstractmethod</span> </em><span class="sig-name descname"><span class="pre">files</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>为载入的包返回一个 <a class="reference internal" href="#importlib.resources.abc.Traversable" title="importlib.resources.abc.Traversable"><code class="xref py py-class docutils literal notranslate"><span class="pre">importlib.resources.abc.Traversable</span></code></a> 对象。</p>
</dd></dl>

</dd></dl>

</section>


            <div class="clearer"></div>
          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>