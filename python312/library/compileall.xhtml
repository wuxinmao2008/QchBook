<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" /><meta name="viewport" content="width=device-width, initial-scale=1" />
<meta property="og:title" content="compileall --- 字节编译 Python 库" />
<meta property="og:type" content="website" />
<meta property="og:url" content="https://docs.python.org/3/library/compileall.xhtml" />
<meta property="og:site_name" content="Python documentation" />
<meta property="og:description" content="源代码: Lib/compileall.py[https://github.com/python/cpython/tree/3.12/Lib/compileall.py] 这个模块提供了一些工具函数来支持安装 Python 库。 这些函数可以编译一个目录树中的 Python 源文件。 这个模块可被用来在安装库时创建缓存的字节码文件，这使得它们对于没有库目录写入权限的用户来说也是可用的。 可用..." />
<meta property="og:image" content="https://docs.python.org/3/_static/og-image.png" />
<meta property="og:image:alt" content="Python documentation" />
<meta name="description" content="源代码: Lib/compileall.py[https://github.com/python/cpython/tree/3.12/Lib/compileall.py] 这个模块提供了一些工具函数来支持安装 Python 库。 这些函数可以编译一个目录树中的 Python 源文件。 这个模块可被用来在安装库时创建缓存的字节码文件，这使得它们对于没有库目录写入权限的用户来说也是可用的。 可用..." />
<meta property="og:image:width" content="200" />
<meta property="og:image:height" content="200" />
<meta name="theme-color" content="#3776ab" />

    <title>compileall --- 字节编译 Python 库</title>
    <link rel="stylesheet" type="text/css" href="../_static/pygments.css" />
    <link rel="stylesheet" type="text/css" href="../_static/epub.css" />
    <link rel="canonical" href="https://docs.python.org/3/library/compileall.html" />
    
      
    

    
    <style>
      @media only screen {
        table.full-width-table {
            width: 100%;
        }
      }
    </style>
 

  </head><body>


    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <section id="module-compileall">
<span id="compileall-byte-compile-python-libraries"></span><h1><code class="xref py py-mod docutils literal notranslate"><span class="pre">compileall</span></code> --- 字节编译 Python 库</h1>
<p><strong>源代码:</strong> <a class="reference external" href="https://github.com/python/cpython/tree/3.12/Lib/compileall.py">Lib/compileall.py</a><span class="link-target"> [https://github.com/python/cpython/tree/3.12/Lib/compileall.py]</span></p>
<hr class="docutils" />
<p>这个模块提供了一些工具函数来支持安装 Python 库。 这些函数可以编译一个目录树中的 Python 源文件。 这个模块可被用来在安装库时创建缓存的字节码文件，这使得它们对于没有库目录写入权限的用户来说也是可用的。</p>
<div class="availability docutils container">
<p><a class="reference internal" href="intro.xhtml#availability"><span class="std std-ref">可用性</span></a>: 非 Emscripten，非 WASI。</p>
<p>此模块在 WebAssembly 平台 <code class="docutils literal notranslate"><span class="pre">wasm32-emscripten</span></code> 和 <code class="docutils literal notranslate"><span class="pre">wasm32-wasi</span></code> 上不适用或不可用。 请参阅 <a class="reference internal" href="intro.xhtml#wasm-availability"><span class="std std-ref">WebAssembly 平台</span></a> 了解详情。</p>
</div>
<section id="command-line-use">
<span id="compileall-cli"></span><h2>使用命令行</h2>
<p>此模块可以作为脚本运行 (使用 <strong class="program">python -m compileall</strong>) 来编译 Python 源代码。</p>
<dl class="std option">
<dt class="sig sig-object std" id="cmdoption-compileall-arg-directory">
<span class="sig-name descname"><span class="pre">directory</span></span><span class="sig-prename descclassname"> <span class="pre">...</span></span></dt>
<dt class="sig sig-object std" id="cmdoption-compileall-arg-file">
<span class="sig-name descname"><span class="pre">file</span></span><span class="sig-prename descclassname"> <span class="pre">...</span></span></dt>
<dd><p>位置参数是要编译的文件或包含源文件的目录，目录将被递归地遍历。 如果没有给出参数，则其行为如同使用了命令行 <code class="samp docutils literal notranslate"><span class="pre">-l</span> <em><span class="pre">&lt;directories</span> <span class="pre">from</span> <span class="pre">sys.path&gt;</span></em></code>。</p>
</dd></dl>

<dl class="std option">
<dt class="sig sig-object std" id="cmdoption-compileall-l">
<span class="sig-name descname"><span class="pre">-l</span></span><span class="sig-prename descclassname"></span></dt>
<dd><p>不要递归到子目录，只编译直接包含在指明或隐含的目录中的源代码文件。</p>
</dd></dl>

<dl class="std option">
<dt class="sig sig-object std" id="cmdoption-compileall-f">
<span class="sig-name descname"><span class="pre">-f</span></span><span class="sig-prename descclassname"></span></dt>
<dd><p>强制重新构建即使时间戳是最新的。</p>
</dd></dl>

<dl class="std option">
<dt class="sig sig-object std" id="cmdoption-compileall-q">
<span class="sig-name descname"><span class="pre">-q</span></span><span class="sig-prename descclassname"></span></dt>
<dd><p>不要打印已编译文件的列表。 如果传入一次，则错误消息仍将被打印。 如果传入两次 (<code class="docutils literal notranslate"><span class="pre">-qq</span></code>)，所有输出都会被屏蔽。</p>
</dd></dl>

<dl class="std option">
<dt class="sig sig-object std" id="cmdoption-compileall-d">
<span class="sig-name descname"><span class="pre">-d</span></span><span class="sig-prename descclassname"> <span class="pre">destdir</span></span></dt>
<dd><p>要附加到每个被编译文件的路径之前的目录。 这将出现在编译时回溯信息中，并且还会被编译到字节码文件中，届时它将在字节码文件被执行而源文件已不存在的情况下被用于回溯和其他消息。</p>
</dd></dl>

<dl class="std option">
<dt class="sig sig-object std" id="cmdoption-compileall-s">
<span class="sig-name descname"><span class="pre">-s</span></span><span class="sig-prename descclassname"> <span class="pre">strip_prefix</span></span></dt>
<dd></dd></dl>

<dl class="std option">
<dt class="sig sig-object std" id="cmdoption-compileall-p">
<span class="sig-name descname"><span class="pre">-p</span></span><span class="sig-prename descclassname"> <span class="pre">prepend_prefix</span></span></dt>
<dd><p>移除 (<code class="docutils literal notranslate"><span class="pre">-s</span></code>) 或添加 (<code class="docutils literal notranslate"><span class="pre">-p</span></code>) 记录在 <code class="docutils literal notranslate"><span class="pre">.pyc</span></code> 文件中的给定路径前缀。 不可与 <code class="docutils literal notranslate"><span class="pre">-d</span></code> 一同使用。</p>
</dd></dl>

<dl class="std option">
<dt class="sig sig-object std" id="cmdoption-compileall-x">
<span class="sig-name descname"><span class="pre">-x</span></span><span class="sig-prename descclassname"> <span class="pre">regex</span></span></dt>
<dd><p>regex 会被用于搜索每个要执行编译的文件的完整路径，而如果 regex 产生了一个匹配，则相应文件会被跳过。</p>
</dd></dl>

<dl class="std option">
<dt class="sig sig-object std" id="cmdoption-compileall-i">
<span class="sig-name descname"><span class="pre">-i</span></span><span class="sig-prename descclassname"> <span class="pre">list</span></span></dt>
<dd><p>读取文件 <code class="docutils literal notranslate"><span class="pre">list</span></code> 并将其包含的每一行添加到要编译的文件和目录列表中。 如果 <code class="docutils literal notranslate"><span class="pre">list</span></code> 为 <code class="docutils literal notranslate"><span class="pre">-</span></code>，则从 <code class="docutils literal notranslate"><span class="pre">stdin</span></code> 读取行。</p>
</dd></dl>

<dl class="std option">
<dt class="sig sig-object std" id="cmdoption-compileall-b">
<span class="sig-name descname"><span class="pre">-b</span></span><span class="sig-prename descclassname"></span></dt>
<dd><p>将字节码写入到它们的传统位置和名称，这可能会覆盖由另一版本的 Python 所创建的字节码文件。 默认是将文件写入到它们的 <span class="target" id="index-8"></span><a class="pep reference external" href="https://peps.python.org/pep-3147/"><strong>PEP 3147</strong></a><span class="link-target"> [https://peps.python.org/pep-3147/]</span> 位置和名称，这允许来自多个版本的 Python 字节码文件共存。</p>
</dd></dl>

<dl class="std option">
<dt class="sig sig-object std" id="cmdoption-compileall-r">
<span class="sig-name descname"><span class="pre">-r</span></span><span class="sig-prename descclassname"></span></dt>
<dd><p>控制子目录的最大递归层级。 如果给出此选项，则 <code class="docutils literal notranslate"><span class="pre">-l</span></code> 选项将不会被考虑。 <strong class="program">python -m compileall &lt;directory&gt; -r 0</strong> 等价于 <strong class="program">python -m compileall &lt;directory&gt; -l</strong>。</p>
</dd></dl>

<dl class="std option">
<dt class="sig sig-object std" id="cmdoption-compileall-j">
<span class="sig-name descname"><span class="pre">-j</span></span><span class="sig-prename descclassname"> <span class="pre">N</span></span></dt>
<dd><p>Use <em>N</em> workers to compile the files within the given directory.
If <code class="docutils literal notranslate"><span class="pre">0</span></code> is used, then the result of <a class="reference internal" href="os.xhtml#os.cpu_count" title="os.cpu_count"><code class="xref py py-func docutils literal notranslate"><span class="pre">os.cpu_count()</span></code></a>
will be used.</p>
</dd></dl>

<dl class="std option">
<dt class="sig sig-object std" id="cmdoption-compileall-invalidation-mode">
<span class="sig-name descname"><span class="pre">--invalidation-mode</span></span><span class="sig-prename descclassname"> <span class="pre">[timestamp|checked-hash|unchecked-hash]</span></span></dt>
<dd><p>控制生成的字节码文件在运行时的失效规则。 值为 <code class="docutils literal notranslate"><span class="pre">timestamp</span></code>，意味着将生成嵌入了源时间戳和大小的 <code class="docutils literal notranslate"><span class="pre">.pyc</span></code> 文件。 <code class="docutils literal notranslate"><span class="pre">checked-hash</span></code> 和 <code class="docutils literal notranslate"><span class="pre">unchecked-hash</span></code> 等值将导致生成基于哈希的 pyc。 基于哈希的 pyc 嵌入了源文件内容的哈希值而不是时间戳。 请参阅 <a class="reference internal" href="../reference/import.xhtml#pyc-invalidation"><span class="std std-ref">已缓存字节码的失效</span></a> 了解有关 Python 在运行时如何验证字节码缓存文件的更多信息。 如果未设置 <span class="target" id="index-9"></span><code class="xref std std-envvar docutils literal notranslate"><span class="pre">SOURCE_DATE_EPOCH</span></code> 环境变量则默认值为 <code class="docutils literal notranslate"><span class="pre">timestamp</span></code>，而如果设置了 <code class="docutils literal notranslate"><span class="pre">SOURCE_DATE_EPOCH</span></code> 则为 <code class="docutils literal notranslate"><span class="pre">checked-hash</span></code>。</p>
</dd></dl>

<dl class="std option">
<dt class="sig sig-object std" id="cmdoption-compileall-o">
<span class="sig-name descname"><span class="pre">-o</span></span><span class="sig-prename descclassname"> <span class="pre">level</span></span></dt>
<dd><p>使用给定的优化级别进行编译。 可以多次使用来一次性地针对多个级别进行编译 (例如，<code class="docutils literal notranslate"><span class="pre">compileall</span> <span class="pre">-o</span> <span class="pre">1</span> <span class="pre">-o</span> <span class="pre">2</span></code>)。</p>
</dd></dl>

<dl class="std option">
<dt class="sig sig-object std" id="cmdoption-compileall-e">
<span class="sig-name descname"><span class="pre">-e</span></span><span class="sig-prename descclassname"> <span class="pre">dir</span></span></dt>
<dd><p>忽略指向给定目录之外的符号链接。</p>
</dd></dl>

<dl class="std option">
<dt class="sig sig-object std" id="cmdoption-compileall-hardlink-dupes">
<span class="sig-name descname"><span class="pre">--hardlink-dupes</span></span><span class="sig-prename descclassname"></span></dt>
<dd><p>如果两个不同优化级别的 <code class="docutils literal notranslate"><span class="pre">.pyc</span></code> 文件具有相同的内容，则使用硬链接来合并重复的文件。</p>
</dd></dl>

<div class="versionchanged">
<p><span class="versionmodified changed">在 3.2 版本发生变更: </span>增加了 <code class="docutils literal notranslate"><span class="pre">-i</span></code>, <code class="docutils literal notranslate"><span class="pre">-b</span></code> 和 <code class="docutils literal notranslate"><span class="pre">-h</span></code> 选项。</p>
</div>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.5 版本发生变更: </span>增加了 <code class="docutils literal notranslate"><span class="pre">-j</span></code>, <code class="docutils literal notranslate"><span class="pre">-r</span></code> 和 <code class="docutils literal notranslate"><span class="pre">-qq</span></code> 选项。 <code class="docutils literal notranslate"><span class="pre">-q</span></code> 选项改为多级别值。 <code class="docutils literal notranslate"><span class="pre">-b</span></code> 将总是产生以 <code class="docutils literal notranslate"><span class="pre">.pyc</span></code> 为后缀的字节码文件，而不是 <code class="docutils literal notranslate"><span class="pre">.pyo</span></code>。</p>
</div>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.7 版本发生变更: </span>增加了 <code class="docutils literal notranslate"><span class="pre">--invalidation-mode</span></code> 选项。</p>
</div>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.9 版本发生变更: </span>增加了 <code class="docutils literal notranslate"><span class="pre">-s</span></code>, <code class="docutils literal notranslate"><span class="pre">-p</span></code>, <code class="docutils literal notranslate"><span class="pre">-e</span></code> 和 <code class="docutils literal notranslate"><span class="pre">--hardlink-dupes</span></code> 选项。 将默认的递归限制从 10 提高到 <a class="reference internal" href="sys.xhtml#sys.getrecursionlimit" title="sys.getrecursionlimit"><code class="xref py py-func docutils literal notranslate"><span class="pre">sys.getrecursionlimit()</span></code></a>。 增加允许多次指定 <code class="docutils literal notranslate"><span class="pre">-o</span></code> 选项。</p>
</div>
<p>没有可以控制 <a class="reference internal" href="functions.xhtml#compile" title="compile"><code class="xref py py-func docutils literal notranslate"><span class="pre">compile()</span></code></a> 函数所使用的优化级别的命令行选项，因为 Python 解释器本身已经提供了该选项: <strong class="program">python -O -m compileall</strong>。</p>
<p>类似地，<a class="reference internal" href="functions.xhtml#compile" title="compile"><code class="xref py py-func docutils literal notranslate"><span class="pre">compile()</span></code></a> 函数会遵循 <a class="reference internal" href="sys.xhtml#sys.pycache_prefix" title="sys.pycache_prefix"><code class="xref py py-data docutils literal notranslate"><span class="pre">sys.pycache_prefix</span></code></a> 设置。 所生成的字节码缓存将仅在 <a class="reference internal" href="functions.xhtml#compile" title="compile"><code class="xref py py-func docutils literal notranslate"><span class="pre">compile()</span></code></a> 附带与将在运行时使用的相同 <a class="reference internal" href="sys.xhtml#sys.pycache_prefix" title="sys.pycache_prefix"><code class="xref py py-data docutils literal notranslate"><span class="pre">sys.pycache_prefix</span></code></a> 时可用（如果存在该设置）。</p>
</section>
<section id="public-functions">
<h2>公有函数</h2>
<dl class="py function">
<dt class="sig sig-object py" id="compileall.compile_dir">
<span class="sig-prename descclassname"><span class="pre">compileall.</span></span><span class="sig-name descname"><span class="pre">compile_dir</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">dir</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">maxlevels</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">sys.getrecursionlimit()</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">ddir</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">force</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">rx</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">quiet</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">0</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">legacy</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">optimize</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">-1</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">workers</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">1</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">invalidation_mode</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="o"><span class="pre">*</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">stripdir</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">prependdir</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">limit_sl_dest</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">hardlink_dupes</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>递归地深入名为 <em>dir</em> 的目录树，在途中编译所有 <code class="file docutils literal notranslate"><span class="pre">.py</span></code> 文件。 如果所有文件都编译成功则返回真值，否则返回假值。</p>
<p><em>maxlevels</em> 形参被用来限制递归深度；它默认为 <code class="docutils literal notranslate"><span class="pre">sys.getrecursionlimit()</span></code>。</p>
<p>如果给出了 <em>ddir</em>，它会被附加到每个被编译的文件的路径之前以便在编译时回溯中使用，同时还会被编译到字节码文件中，届时它将在字节码文件被执行而源文件已不存在的情况下被用于回溯和其他消息中。</p>
<p>如果 <em>force</em> 为真值，则即使时间戳为最新模块也会被重新编译。</p>
<p>如果给出了 <em>rx</em>，则它的 <code class="docutils literal notranslate"><span class="pre">search</span></code> 方法会在准备编译的每个文件的完整路径上被调用，并且如果它返回真值，则该文件会被跳过。 这可被用来排除与一个正则表达式相匹配的文件，正则表达式将以 <a class="reference internal" href="re.xhtml#re-objects"><span class="std std-ref">re.Pattern</span></a> 对象的形式给出。</p>
<p>如果 <em>quiet</em> 为 <code class="docutils literal notranslate"><span class="pre">False</span></code> 或 <code class="docutils literal notranslate"><span class="pre">0</span></code> (默认值)，则文件名和其他信息将被打印到标准输出。 如果设为 <code class="docutils literal notranslate"><span class="pre">1</span></code>，则只打印错误。 如果设为 <code class="docutils literal notranslate"><span class="pre">2</span></code>，则屏蔽所有输出。</p>
<p>如果 <em>legacy</em> 为真值，则将字节码文件写入到它们的传统位置和名称，这可能会覆盖由另一版本的 Python 所创建的字节码文件。 默认是将文件写入到它们的 <span class="target" id="index-10"></span><a class="pep reference external" href="https://peps.python.org/pep-3147/"><strong>PEP 3147</strong></a><span class="link-target"> [https://peps.python.org/pep-3147/]</span> 位置和名称，这允许来自多个版本的 Python 字节码文件共存。</p>
<p><em>optimize</em> 指明编译器的优化级别。 它会被传给内置 <a class="reference internal" href="functions.xhtml#compile" title="compile"><code class="xref py py-func docutils literal notranslate"><span class="pre">compile()</span></code></a> 函数。 还接受一个优化层别列表这将在单次调用中多次编译一个 <code class="file docutils literal notranslate"><span class="pre">.py</span></code> 文件。</p>
<p>参数 <em>workers</em> 指明要使用多少个工作进程来并行编译文件。 默认设置不使用多个工作进程。 如果平台不能使用多个工作进程而又给出了 <em>workers</em> 参数，则将回退为使用顺序编译。 如果 <em>workers</em> 为 0，则会使用系统的核心数量。 如果 <em>workers</em> 小于 <code class="docutils literal notranslate"><span class="pre">0</span></code>，则会引发 <a class="reference internal" href="exceptions.xhtml#ValueError" title="ValueError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">ValueError</span></code></a>。</p>
<p><em>invalidation_mode</em> 应为 <a class="reference internal" href="py_compile.xhtml#py_compile.PycInvalidationMode" title="py_compile.PycInvalidationMode"><code class="xref py py-class docutils literal notranslate"><span class="pre">py_compile.PycInvalidationMode</span></code></a> 枚举的成员之一并将控制所生成的 pyc 在运行时以何种方式验证是否失效。</p>
<p><em>stripdir</em>, <em>prependdir</em> 和 <em>limit_sl_dest</em> 参数分别对应上述的 <code class="docutils literal notranslate"><span class="pre">-s</span></code>, <code class="docutils literal notranslate"><span class="pre">-p</span></code> 和 <code class="docutils literal notranslate"><span class="pre">-e</span></code> 选项。 它们可以被指定为 <code class="docutils literal notranslate"><span class="pre">str</span></code> 或 <a class="reference internal" href="os.xhtml#os.PathLike" title="os.PathLike"><code class="xref py py-class docutils literal notranslate"><span class="pre">os.PathLike</span></code></a>。</p>
<p>如果 <em>hardlink_dupes</em> 为真值且两个使用不同优化级别的 <code class="docutils literal notranslate"><span class="pre">.pyc</span></code> 文件具有相同的内容，则会使用硬链接来合并重复的文件。</p>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.2 版本发生变更: </span>增加了 <em>legacy</em> 和 <em>optimize</em> 形参。</p>
</div>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.5 版本发生变更: </span>增加了 <em>workers</em> 形参。</p>
</div>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.5 版本发生变更: </span><em>quiet</em> 形参已改为多级别值。</p>
</div>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.5 版本发生变更: </span><em>legacy</em> 形参将只写入 <code class="docutils literal notranslate"><span class="pre">.pyc</span></code> 文件而非 <code class="docutils literal notranslate"><span class="pre">.pyo</span></code> 文件，无论 <em>optimize</em> 的值是什么。</p>
</div>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.6 版本发生变更: </span>接受一个 <a class="reference internal" href="../glossary.xhtml#term-path-like-object"><span class="xref std std-term">path-like object</span></a>。</p>
</div>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.7 版本发生变更: </span>增加了 <em>invalidation_mode</em> 形参。</p>
</div>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.7.2 版本发生变更: </span><em>invalidation_mode</em> 形参的默认值已更新为 <code class="docutils literal notranslate"><span class="pre">None</span></code>。</p>
</div>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.8 版本发生变更: </span>将 <em>workers</em> 设为 0 现在将会选择最优核心数量。</p>
</div>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.9 版本发生变更: </span>增加了 <em>stripdir</em>, <em>prependdir</em>, <em>limit_sl_dest</em> 和 <em>hardlink_dupes</em> 参数。 <em>maxlevels</em> 的默认值从 <code class="docutils literal notranslate"><span class="pre">10</span></code> 改为 <code class="docutils literal notranslate"><span class="pre">sys.getrecursionlimit()</span></code></p>
</div>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="compileall.compile_file">
<span class="sig-prename descclassname"><span class="pre">compileall.</span></span><span class="sig-name descname"><span class="pre">compile_file</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">fullname</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">ddir</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">force</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">rx</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">quiet</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">0</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">legacy</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">optimize</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">-1</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">invalidation_mode</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="o"><span class="pre">*</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">stripdir</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">prependdir</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">limit_sl_dest</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">hardlink_dupes</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>编译路径为 <em>fullname</em> 的文件。 如果文件编译成功则返回真值，否则返回假值。</p>
<p>如果给出了 <em>ddir</em>，它会被附加到被编译的文件的路径之前以便在编译时回溯中使用，同时还会被编译到字节码文件中，届时它将在字节码文件被执行而源文件已不存在的情况下被用于回溯和其他消息中。</p>
<p>如果给出了 <em>rx</em>，则会向它的 <code class="docutils literal notranslate"><span class="pre">search</span></code> 方法传入准备编译的文件的完整路径，并且如果它返回真值，则不编译该文件并返回 <code class="docutils literal notranslate"><span class="pre">True</span></code>。 这可被用来排除与一个正则表达式相匹配的文件，正则表达式将以 <a class="reference internal" href="re.xhtml#re-objects"><span class="std std-ref">re.Pattern</span></a> 对象的形式给出。</p>
<p>如果 <em>quiet</em> 为 <code class="docutils literal notranslate"><span class="pre">False</span></code> 或 <code class="docutils literal notranslate"><span class="pre">0</span></code> (默认值)，则文件名和其他信息将被打印到标准输出。 如果设为 <code class="docutils literal notranslate"><span class="pre">1</span></code>，则只打印错误。 如果设为 <code class="docutils literal notranslate"><span class="pre">2</span></code>，则屏蔽所有输出。</p>
<p>如果 <em>legacy</em> 为真值，则将字节码文件写入到它们的传统位置和名称，这可能会覆盖由另一版本的 Python 所创建的字节码文件。 默认是将文件写入到它们的 <span class="target" id="index-11"></span><a class="pep reference external" href="https://peps.python.org/pep-3147/"><strong>PEP 3147</strong></a><span class="link-target"> [https://peps.python.org/pep-3147/]</span> 位置和名称，这允许来自多个版本的 Python 字节码文件共存。</p>
<p><em>optimize</em> 指明编译器的优化级别。 它会被传给内置 <a class="reference internal" href="functions.xhtml#compile" title="compile"><code class="xref py py-func docutils literal notranslate"><span class="pre">compile()</span></code></a> 函数。 还接受一个优化层别列表这将在单次调用中多次编译一个 <code class="file docutils literal notranslate"><span class="pre">.py</span></code> 文件。</p>
<p><em>invalidation_mode</em> 应为 <a class="reference internal" href="py_compile.xhtml#py_compile.PycInvalidationMode" title="py_compile.PycInvalidationMode"><code class="xref py py-class docutils literal notranslate"><span class="pre">py_compile.PycInvalidationMode</span></code></a> 枚举的成员之一并将控制所生成的 pyc 在运行时以何种方式验证是否失效。</p>
<p><em>stripdir</em>, <em>prependdir</em> 和 <em>limit_sl_dest</em> 参数分别对应上述的 <code class="docutils literal notranslate"><span class="pre">-s</span></code>, <code class="docutils literal notranslate"><span class="pre">-p</span></code> 和 <code class="docutils literal notranslate"><span class="pre">-e</span></code> 选项。 它们可以被指定为 <code class="docutils literal notranslate"><span class="pre">str</span></code> 或 <a class="reference internal" href="os.xhtml#os.PathLike" title="os.PathLike"><code class="xref py py-class docutils literal notranslate"><span class="pre">os.PathLike</span></code></a>。</p>
<p>如果 <em>hardlink_dupes</em> 为真值且两个使用不同优化级别的 <code class="docutils literal notranslate"><span class="pre">.pyc</span></code> 文件具有相同的内容，则会使用硬链接来合并重复的文件。</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.2.</span></p>
</div>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.5 版本发生变更: </span><em>quiet</em> 形参已改为多级别值。</p>
</div>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.5 版本发生变更: </span><em>legacy</em> 形参将只写入 <code class="docutils literal notranslate"><span class="pre">.pyc</span></code> 文件而非 <code class="docutils literal notranslate"><span class="pre">.pyo</span></code> 文件，无论 <em>optimize</em> 的值是什么。</p>
</div>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.7 版本发生变更: </span>增加了 <em>invalidation_mode</em> 形参。</p>
</div>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.7.2 版本发生变更: </span><em>invalidation_mode</em> 形参的默认值已更新为 <code class="docutils literal notranslate"><span class="pre">None</span></code>。</p>
</div>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.9 版本发生变更: </span>增加了 <em>stripdir</em>, <em>prependdir</em>, <em>limit_sl_dest</em> 和 <em>hardlink_dupes</em> 参数。</p>
</div>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="compileall.compile_path">
<span class="sig-prename descclassname"><span class="pre">compileall.</span></span><span class="sig-name descname"><span class="pre">compile_path</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">skip_curdir</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">True</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">maxlevels</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">0</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">force</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">quiet</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">0</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">legacy</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">optimize</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">-1</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">invalidation_mode</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>将在 <code class="docutils literal notranslate"><span class="pre">sys.path</span></code> 中找到的所有 <code class="file docutils literal notranslate"><span class="pre">.py</span></code> 文件编译为字节码。 如果所有文件编译成功则返回真值，否则返回假值。</p>
<p>如果 <em>skip_curdir</em> 为真值（默认），则当前目录不会被包括在搜索中。 所有其他形参将被传递给 <a class="reference internal" href="#compileall.compile_dir" title="compileall.compile_dir"><code class="xref py py-func docutils literal notranslate"><span class="pre">compile_dir()</span></code></a> 函数。 请注意不同于其他编译函数，<code class="docutils literal notranslate"><span class="pre">maxlevels</span></code> 默认为 <code class="docutils literal notranslate"><span class="pre">0</span></code>。</p>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.2 版本发生变更: </span>增加了 <em>legacy</em> 和 <em>optimize</em> 形参。</p>
</div>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.5 版本发生变更: </span><em>quiet</em> 形参已改为多级别值。</p>
</div>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.5 版本发生变更: </span><em>legacy</em> 形参将只写入 <code class="docutils literal notranslate"><span class="pre">.pyc</span></code> 文件而非 <code class="docutils literal notranslate"><span class="pre">.pyo</span></code> 文件，无论 <em>optimize</em> 的值是什么。</p>
</div>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.7 版本发生变更: </span>增加了 <em>invalidation_mode</em> 形参。</p>
</div>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.7.2 版本发生变更: </span><em>invalidation_mode</em> 形参的默认值已更新为 <code class="docutils literal notranslate"><span class="pre">None</span></code>。</p>
</div>
</dd></dl>

<p>强制重新编译 <code class="file docutils literal notranslate"><span class="pre">Lib/</span></code> 子目录及其所有子目录下的全部 <code class="file docutils literal notranslate"><span class="pre">.py</span></code> 文件:</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="kn">import</span> <span class="nn">compileall</span>

<span class="n">compileall</span><span class="o">.</span><span class="n">compile_dir</span><span class="p">(</span><span class="s1">&#39;Lib/&#39;</span><span class="p">,</span> <span class="n">force</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>

<span class="c1"># Perform same compilation, excluding files in .svn directories.</span>
<span class="kn">import</span> <span class="nn">re</span>
<span class="n">compileall</span><span class="o">.</span><span class="n">compile_dir</span><span class="p">(</span><span class="s1">&#39;Lib/&#39;</span><span class="p">,</span> <span class="n">rx</span><span class="o">=</span><span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="sa">r</span><span class="s1">&#39;[/</span><span class="se">\\</span><span class="s1">][.]svn&#39;</span><span class="p">),</span> <span class="n">force</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>

<span class="c1"># pathlib.Path objects can also be used.</span>
<span class="kn">import</span> <span class="nn">pathlib</span>
<span class="n">compileall</span><span class="o">.</span><span class="n">compile_dir</span><span class="p">(</span><span class="n">pathlib</span><span class="o">.</span><span class="n">Path</span><span class="p">(</span><span class="s1">&#39;Lib/&#39;</span><span class="p">),</span> <span class="n">force</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</pre></div>
</div>
<div class="admonition seealso">
<p class="admonition-title">参见</p>
<dl class="simple">
<dt>模块 <a class="reference internal" href="py_compile.xhtml#module-py_compile" title="py_compile: Generate byte-code files from Python source files."><code class="xref py py-mod docutils literal notranslate"><span class="pre">py_compile</span></code></a></dt><dd><p>将单个源文件编译为字节码。</p>
</dd>
</dl>
</div>
</section>
</section>


            <div class="clearer"></div>
          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>