<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" /><meta name="viewport" content="width=device-width, initial-scale=1" />
<meta property="og:title" content="平台支持" />
<meta property="og:type" content="website" />
<meta property="og:url" content="https://docs.python.org/3/library/asyncio-platforms.xhtml" />
<meta property="og:site_name" content="Python documentation" />
<meta property="og:description" content="asyncio 模块被设计为可移植的,但由于平台的底层架构和功能，一些平台存在细微的差异和限制。 所有平台: loop.add_reader() 和 loop.add_writer() 不能用来监视文件I/O。. Windows: 源代码: Lib/asyncio/proactor_events.py[https://github.com/python/cpython/tree/3.12/L..." />
<meta property="og:image" content="https://docs.python.org/3/_static/og-image.png" />
<meta property="og:image:alt" content="Python documentation" />
<meta name="description" content="asyncio 模块被设计为可移植的,但由于平台的底层架构和功能，一些平台存在细微的差异和限制。 所有平台: loop.add_reader() 和 loop.add_writer() 不能用来监视文件I/O。. Windows: 源代码: Lib/asyncio/proactor_events.py[https://github.com/python/cpython/tree/3.12/L..." />
<meta property="og:image:width" content="200" />
<meta property="og:image:height" content="200" />
<meta name="theme-color" content="#3776ab" />

    <title>平台支持</title>
    <link rel="stylesheet" type="text/css" href="../_static/pygments.css" />
    <link rel="stylesheet" type="text/css" href="../_static/epub.css" />
    <link rel="canonical" href="https://docs.python.org/3/library/asyncio-platforms.html" />
    
      
    

    
    <style>
      @media only screen {
        table.full-width-table {
            width: 100%;
        }
      }
    </style>
 

  </head><body>


    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <section id="platform-support">
<span id="asyncio-platform-support"></span><h1>平台支持</h1>
<p><a class="reference internal" href="asyncio.xhtml#module-asyncio" title="asyncio: Asynchronous I/O."><code class="xref py py-mod docutils literal notranslate"><span class="pre">asyncio</span></code></a> 模块被设计为可移植的,但由于平台的底层架构和功能，一些平台存在细微的差异和限制。</p>
<section id="all-platforms">
<h2>所有平台</h2>
<ul class="simple">
<li><p><a class="reference internal" href="asyncio-eventloop.xhtml#asyncio.loop.add_reader" title="asyncio.loop.add_reader"><code class="xref py py-meth docutils literal notranslate"><span class="pre">loop.add_reader()</span></code></a> 和 <a class="reference internal" href="asyncio-eventloop.xhtml#asyncio.loop.add_writer" title="asyncio.loop.add_writer"><code class="xref py py-meth docutils literal notranslate"><span class="pre">loop.add_writer()</span></code></a> 不能用来监视文件I/O。</p></li>
</ul>
</section>
<section id="windows">
<h2>Windows</h2>
<p><strong>源代码:</strong> <a class="reference external" href="https://github.com/python/cpython/tree/3.12/Lib/asyncio/proactor_events.py">Lib/asyncio/proactor_events.py</a><span class="link-target"> [https://github.com/python/cpython/tree/3.12/Lib/asyncio/proactor_events.py]</span>, <a class="reference external" href="https://github.com/python/cpython/tree/3.12/Lib/asyncio/windows_events.py">Lib/asyncio/windows_events.py</a><span class="link-target"> [https://github.com/python/cpython/tree/3.12/Lib/asyncio/windows_events.py]</span>, <a class="reference external" href="https://github.com/python/cpython/tree/3.12/Lib/asyncio/windows_utils.py">Lib/asyncio/windows_utils.py</a><span class="link-target"> [https://github.com/python/cpython/tree/3.12/Lib/asyncio/windows_utils.py]</span></p>
<hr class="docutils" />
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.8 版本发生变更: </span>在 Windows 上，<a class="reference internal" href="asyncio-eventloop.xhtml#asyncio.ProactorEventLoop" title="asyncio.ProactorEventLoop"><code class="xref py py-class docutils literal notranslate"><span class="pre">ProactorEventLoop</span></code></a> 现在是默认的事件循环。</p>
</div>
<p>Windows上的所有事件循环都不支持以下方法:</p>
<ul class="simple">
<li><p>不支持 <a class="reference internal" href="asyncio-eventloop.xhtml#asyncio.loop.create_unix_connection" title="asyncio.loop.create_unix_connection"><code class="xref py py-meth docutils literal notranslate"><span class="pre">loop.create_unix_connection()</span></code></a> 和 <a class="reference internal" href="asyncio-eventloop.xhtml#asyncio.loop.create_unix_server" title="asyncio.loop.create_unix_server"><code class="xref py py-meth docutils literal notranslate"><span class="pre">loop.create_unix_server()</span></code></a>。 <a class="reference internal" href="socket.xhtml#socket.AF_UNIX" title="socket.AF_UNIX"><code class="xref py py-const docutils literal notranslate"><span class="pre">socket.AF_UNIX</span></code></a> 套接字族是 Unix 专属的。</p></li>
<li><p>不支持 <a class="reference internal" href="asyncio-eventloop.xhtml#asyncio.loop.add_signal_handler" title="asyncio.loop.add_signal_handler"><code class="xref py py-meth docutils literal notranslate"><span class="pre">loop.add_signal_handler()</span></code></a> 和 <a class="reference internal" href="asyncio-eventloop.xhtml#asyncio.loop.remove_signal_handler" title="asyncio.loop.remove_signal_handler"><code class="xref py py-meth docutils literal notranslate"><span class="pre">loop.remove_signal_handler()</span></code></a> 。</p></li>
</ul>
<p><a class="reference internal" href="asyncio-eventloop.xhtml#asyncio.SelectorEventLoop" title="asyncio.SelectorEventLoop"><code class="xref py py-class docutils literal notranslate"><span class="pre">SelectorEventLoop</span></code></a> 有下列限制:</p>
<ul class="simple">
<li><p><a class="reference internal" href="selectors.xhtml#selectors.SelectSelector" title="selectors.SelectSelector"><code class="xref py py-class docutils literal notranslate"><span class="pre">SelectSelector</span></code></a> 只被用于等待套接字事件：它支持套接字且最多支持512个套接字。</p></li>
<li><p><a class="reference internal" href="asyncio-eventloop.xhtml#asyncio.loop.add_reader" title="asyncio.loop.add_reader"><code class="xref py py-meth docutils literal notranslate"><span class="pre">loop.add_reader()</span></code></a> 和 <a class="reference internal" href="asyncio-eventloop.xhtml#asyncio.loop.add_writer" title="asyncio.loop.add_writer"><code class="xref py py-meth docutils literal notranslate"><span class="pre">loop.add_writer()</span></code></a> 只接受套接字处理回调函数(如管道、文件描述符等都不支持)。</p></li>
<li><p>因为不支持管道，所以  <a class="reference internal" href="asyncio-eventloop.xhtml#asyncio.loop.connect_read_pipe" title="asyncio.loop.connect_read_pipe"><code class="xref py py-meth docutils literal notranslate"><span class="pre">loop.connect_read_pipe()</span></code></a> 和 <a class="reference internal" href="asyncio-eventloop.xhtml#asyncio.loop.connect_write_pipe" title="asyncio.loop.connect_write_pipe"><code class="xref py py-meth docutils literal notranslate"><span class="pre">loop.connect_write_pipe()</span></code></a> 方法没有实现。</p></li>
<li><p>不支持 <a class="reference internal" href="asyncio-subprocess.xhtml#asyncio-subprocess"><span class="std std-ref">Subprocesses</span></a> ，也就是  <a class="reference internal" href="asyncio-eventloop.xhtml#asyncio.loop.subprocess_exec" title="asyncio.loop.subprocess_exec"><code class="xref py py-meth docutils literal notranslate"><span class="pre">loop.subprocess_exec()</span></code></a> 和 <a class="reference internal" href="asyncio-eventloop.xhtml#asyncio.loop.subprocess_shell" title="asyncio.loop.subprocess_shell"><code class="xref py py-meth docutils literal notranslate"><span class="pre">loop.subprocess_shell()</span></code></a> 方法没有实现。</p></li>
</ul>
<p><a class="reference internal" href="asyncio-eventloop.xhtml#asyncio.ProactorEventLoop" title="asyncio.ProactorEventLoop"><code class="xref py py-class docutils literal notranslate"><span class="pre">ProactorEventLoop</span></code></a> 有下列限制:</p>
<ul class="simple">
<li><p>不支持  <a class="reference internal" href="asyncio-eventloop.xhtml#asyncio.loop.add_reader" title="asyncio.loop.add_reader"><code class="xref py py-meth docutils literal notranslate"><span class="pre">loop.add_reader()</span></code></a> 和 <a class="reference internal" href="asyncio-eventloop.xhtml#asyncio.loop.add_writer" title="asyncio.loop.add_writer"><code class="xref py py-meth docutils literal notranslate"><span class="pre">loop.add_writer()</span></code></a> 方法。</p></li>
</ul>
<p>通常 Windows 上单调时钟的分辨率约为 15.6 毫秒。 最佳分辨率是 0.5 毫秒。 分辨率依赖于具体的硬件 (<a class="reference external" href="https://en.wikipedia.org/wiki/High_Precision_Event_Timer">HPET</a><span class="link-target"> [https://en.wikipedia.org/wiki/High_Precision_Event_Timer]</span> 的可用性) 和 Windows 的设置。</p>
<section id="subprocess-support-on-windows">
<span id="asyncio-windows-subprocess"></span><h3>Windows的子进程支持</h3>
<p>在 Windows 上，默认的事件循环 <a class="reference internal" href="asyncio-eventloop.xhtml#asyncio.ProactorEventLoop" title="asyncio.ProactorEventLoop"><code class="xref py py-class docutils literal notranslate"><span class="pre">ProactorEventLoop</span></code></a> 支持子进程，而 <a class="reference internal" href="asyncio-eventloop.xhtml#asyncio.SelectorEventLoop" title="asyncio.SelectorEventLoop"><code class="xref py py-class docutils literal notranslate"><span class="pre">SelectorEventLoop</span></code></a> 则不支持。</p>
<p>也不支持 <a class="reference internal" href="asyncio-policy.xhtml#asyncio.AbstractEventLoopPolicy.set_child_watcher" title="asyncio.AbstractEventLoopPolicy.set_child_watcher"><code class="xref py py-meth docutils literal notranslate"><span class="pre">policy.set_child_watcher()</span></code></a> 函数，<a class="reference internal" href="asyncio-eventloop.xhtml#asyncio.ProactorEventLoop" title="asyncio.ProactorEventLoop"><code class="xref py py-class docutils literal notranslate"><span class="pre">ProactorEventLoop</span></code></a> 有不同的机制来监视子进程。</p>
</section>
</section>
<section id="macos">
<h2>macOS</h2>
<p>完整支持流行的macOS版本。</p>
<p class="rubric">macOS &lt;= 10.8</p>
<p>在 macOS 10.6, 10.7 和 10.8 上，默认的事件循环使用 <a class="reference internal" href="selectors.xhtml#selectors.KqueueSelector" title="selectors.KqueueSelector"><code class="xref py py-class docutils literal notranslate"><span class="pre">selectors.KqueueSelector</span></code></a>，在这些版本上它并不支持字符设备。 可以手工配置 <a class="reference internal" href="asyncio-eventloop.xhtml#asyncio.SelectorEventLoop" title="asyncio.SelectorEventLoop"><code class="xref py py-class docutils literal notranslate"><span class="pre">SelectorEventLoop</span></code></a> 来使用 <a class="reference internal" href="selectors.xhtml#selectors.SelectSelector" title="selectors.SelectSelector"><code class="xref py py-class docutils literal notranslate"><span class="pre">SelectSelector</span></code></a> 或 <a class="reference internal" href="selectors.xhtml#selectors.PollSelector" title="selectors.PollSelector"><code class="xref py py-class docutils literal notranslate"><span class="pre">PollSelector</span></code></a> 以在这些较老版本的 macOS 上支持字符设备。 例如:</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="kn">import</span> <span class="nn">asyncio</span>
<span class="kn">import</span> <span class="nn">selectors</span>

<span class="n">selector</span> <span class="o">=</span> <span class="n">selectors</span><span class="o">.</span><span class="n">SelectSelector</span><span class="p">()</span>
<span class="n">loop</span> <span class="o">=</span> <span class="n">asyncio</span><span class="o">.</span><span class="n">SelectorEventLoop</span><span class="p">(</span><span class="n">selector</span><span class="p">)</span>
<span class="n">asyncio</span><span class="o">.</span><span class="n">set_event_loop</span><span class="p">(</span><span class="n">loop</span><span class="p">)</span>
</pre></div>
</div>
</section>
</section>


            <div class="clearer"></div>
          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>