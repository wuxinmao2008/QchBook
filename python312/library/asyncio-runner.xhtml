<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" /><meta name="viewport" content="width=device-width, initial-scale=1" />
<meta property="og:title" content="运行器" />
<meta property="og:type" content="website" />
<meta property="og:url" content="https://docs.python.org/3/library/asyncio-runner.xhtml" />
<meta property="og:site_name" content="Python documentation" />
<meta property="og:description" content="源代码: Lib/asyncio/runners.py[https://github.com/python/cpython/tree/3.12/Lib/asyncio/runners.py] 本节将简述用于运行异步代码的高层级异步原语。 它们构建于 事件循环 之上，其目标是简化针对常见通用场景的异步代码的用法。 运行 asyncio 程序, 运行器上下文管理器, 处理键盘中断. 运行 asy..." />
<meta property="og:image" content="https://docs.python.org/3/_static/og-image.png" />
<meta property="og:image:alt" content="Python documentation" />
<meta name="description" content="源代码: Lib/asyncio/runners.py[https://github.com/python/cpython/tree/3.12/Lib/asyncio/runners.py] 本节将简述用于运行异步代码的高层级异步原语。 它们构建于 事件循环 之上，其目标是简化针对常见通用场景的异步代码的用法。 运行 asyncio 程序, 运行器上下文管理器, 处理键盘中断. 运行 asy..." />
<meta property="og:image:width" content="200" />
<meta property="og:image:height" content="200" />
<meta name="theme-color" content="#3776ab" />

    <title>运行器</title>
    <link rel="stylesheet" type="text/css" href="../_static/pygments.css" />
    <link rel="stylesheet" type="text/css" href="../_static/epub.css" />
    <link rel="canonical" href="https://docs.python.org/3/library/asyncio-runner.html" />
    
      
    

    
    <style>
      @media only screen {
        table.full-width-table {
            width: 100%;
        }
      }
    </style>
 

  </head><body>


    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <section id="runners">
<h1>运行器</h1>
<p><strong>源代码:</strong> <a class="reference external" href="https://github.com/python/cpython/tree/3.12/Lib/asyncio/runners.py">Lib/asyncio/runners.py</a><span class="link-target"> [https://github.com/python/cpython/tree/3.12/Lib/asyncio/runners.py]</span></p>
<p>本节将简述用于运行异步代码的高层级异步原语。</p>
<p>它们构建于 <a class="reference internal" href="asyncio-eventloop.xhtml#asyncio-event-loop"><span class="std std-ref">事件循环</span></a> 之上，其目标是简化针对常见通用场景的异步代码的用法。</p>
<nav class="contents local" id="id1">
<ul class="simple">
<li><p><a class="reference internal" href="#running-an-asyncio-program" id="id2">运行 asyncio 程序</a></p></li>
<li><p><a class="reference internal" href="#runner-context-manager" id="id3">运行器上下文管理器</a></p></li>
<li><p><a class="reference internal" href="#handling-keyboard-interruption" id="id4">处理键盘中断</a></p></li>
</ul>
</nav>
<section id="running-an-asyncio-program">
<h2><a class="toc-backref" href="#id2" role="doc-backlink">运行 asyncio 程序</a></h2>
<dl class="py function">
<dt class="sig sig-object py" id="asyncio.run">
<span class="sig-prename descclassname"><span class="pre">asyncio.</span></span><span class="sig-name descname"><span class="pre">run</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">coro</span></span></em>, <em class="sig-param"><span class="o"><span class="pre">*</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">debug</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">loop_factory</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>执行 <a class="reference internal" href="../glossary.xhtml#term-coroutine"><span class="xref std std-term">coroutine</span></a> <em>coro</em> 并返回结果。</p>
<p>此函数会运行传入的协程，负责管理 asyncio 事件循环，<em>终结异步生成器</em>，并关闭执行器。</p>
<p>当有其他 asyncio 事件循环在同一线程中运行时，此函数不能被调用。</p>
<p>如果 <em>debug</em> 为 <code class="docutils literal notranslate"><span class="pre">True</span></code>，事件循环将运行于调试模式。 <code class="docutils literal notranslate"><span class="pre">False</span></code> 将显式地禁用调试模式。 使用 <code class="docutils literal notranslate"><span class="pre">None</span></code> 将沿用全局 <a class="reference internal" href="asyncio-dev.xhtml#asyncio-debug-mode"><span class="std std-ref">Debug 模式</span></a> 设置。</p>
<p>If <em>loop_factory</em> is not <code class="docutils literal notranslate"><span class="pre">None</span></code>, it is used to create a new event loop;
otherwise <a class="reference internal" href="asyncio-eventloop.xhtml#asyncio.new_event_loop" title="asyncio.new_event_loop"><code class="xref py py-func docutils literal notranslate"><span class="pre">asyncio.new_event_loop()</span></code></a> is used. The loop is closed at the end.
This function should be used as a main entry point for asyncio programs,
and should ideally only be called once. It is recommended to use
<em>loop_factory</em> to configure the event loop instead of policies.</p>
<p>执行器的关闭有 5 分钟的超时限制。 如果执行器未在时限之内结束，将发出警告消息并关闭执行器。</p>
<p>示例:</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="k">async</span> <span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="k">await</span> <span class="n">asyncio</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;hello&#39;</span><span class="p">)</span>

<span class="n">asyncio</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="n">main</span><span class="p">())</span>
</pre></div>
</div>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.7.</span></p>
</div>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.9 版本发生变更: </span>更新为使用 <a class="reference internal" href="asyncio-eventloop.xhtml#asyncio.loop.shutdown_default_executor" title="asyncio.loop.shutdown_default_executor"><code class="xref py py-meth docutils literal notranslate"><span class="pre">loop.shutdown_default_executor()</span></code></a>。</p>
</div>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.10 版本发生变更: </span>默认情况下 <em>debug</em> 为 <code class="docutils literal notranslate"><span class="pre">None</span></code> 即沿用全局调试模式设置。</p>
</div>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.12 版本发生变更: </span>增加了 <em>loop_factory</em> 形参。</p>
</div>
</dd></dl>

</section>
<section id="runner-context-manager">
<h2><a class="toc-backref" href="#id3" role="doc-backlink">运行器上下文管理器</a></h2>
<dl class="py class">
<dt class="sig sig-object py" id="asyncio.Runner">
<em class="property"><span class="pre">class</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">asyncio.</span></span><span class="sig-name descname"><span class="pre">Runner</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="o"><span class="pre">*</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">debug</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">loop_factory</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>对在相同上下文中 <em>多个</em> 异步函数调用进行简化的上下文管理器。</p>
<p>有时多个最高层级异步函数应当在同一个 <a class="reference internal" href="asyncio-eventloop.xhtml#asyncio-event-loop"><span class="std std-ref">事件循环</span></a> 和 <a class="reference internal" href="contextvars.xhtml#contextvars.Context" title="contextvars.Context"><code class="xref py py-class docutils literal notranslate"><span class="pre">contextvars.Context</span></code></a> 中被调用。</p>
<p>如果 <em>debug</em> 为 <code class="docutils literal notranslate"><span class="pre">True</span></code>，事件循环将运行于调试模式。 <code class="docutils literal notranslate"><span class="pre">False</span></code> 将显式地禁用调试模式。 使用 <code class="docutils literal notranslate"><span class="pre">None</span></code> 将沿用全局 <a class="reference internal" href="asyncio-dev.xhtml#asyncio-debug-mode"><span class="std std-ref">Debug 模式</span></a> 设置。</p>
<p><em>loop_factory</em> 可被用来重载循环的创建。 <em>loop_factory</em> 要负责将所创建的循环设置为当前事件循环。 在默认情况下如果 <em>loop_factory</em> 为 <code class="docutils literal notranslate"><span class="pre">None</span></code> 则会使用 <a class="reference internal" href="asyncio-eventloop.xhtml#asyncio.new_event_loop" title="asyncio.new_event_loop"><code class="xref py py-func docutils literal notranslate"><span class="pre">asyncio.new_event_loop()</span></code></a> 并通过 <a class="reference internal" href="asyncio-eventloop.xhtml#asyncio.set_event_loop" title="asyncio.set_event_loop"><code class="xref py py-func docutils literal notranslate"><span class="pre">asyncio.set_event_loop()</span></code></a> 将其设置为当前事件循环。</p>
<p>基本上，<a class="reference internal" href="#asyncio.run" title="asyncio.run"><code class="xref py py-func docutils literal notranslate"><span class="pre">asyncio.run()</span></code></a> 示例可以通过运行器的使用来重写:</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="k">async</span> <span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="k">await</span> <span class="n">asyncio</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;hello&#39;</span><span class="p">)</span>

<span class="k">with</span> <span class="n">asyncio</span><span class="o">.</span><span class="n">Runner</span><span class="p">()</span> <span class="k">as</span> <span class="n">runner</span><span class="p">:</span>
    <span class="n">runner</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="n">main</span><span class="p">())</span>
</pre></div>
</div>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.11.</span></p>
</div>
<dl class="py method">
<dt class="sig sig-object py" id="asyncio.Runner.run">
<span class="sig-name descname"><span class="pre">run</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">coro</span></span></em>, <em class="sig-param"><span class="o"><span class="pre">*</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">context</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>在嵌入的循环中运行一个 <a class="reference internal" href="../glossary.xhtml#term-coroutine"><span class="xref std std-term">协程</span></a> <em>coro</em>。</p>
<p>返回协程的结果或者引发其异常。</p>
<p>可选的仅限关键字参数 <em>context</em> 允许指定一个自定义 <a class="reference internal" href="contextvars.xhtml#contextvars.Context" title="contextvars.Context"><code class="xref py py-class docutils literal notranslate"><span class="pre">contextvars.Context</span></code></a> 用作 <em>coro</em> 运行所在的上下文。 如果为 <code class="docutils literal notranslate"><span class="pre">None</span></code> 则会使用运行器的默认上下文。</p>
<p>当有其他 asyncio 事件循环在同一线程中运行时，此函数不能被调用。</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="asyncio.Runner.close">
<span class="sig-name descname"><span class="pre">close</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>关闭运行器。</p>
<p>最终化异步生成器，停止默认执行器，关闭事件循环并释放嵌入的 <a class="reference internal" href="contextvars.xhtml#contextvars.Context" title="contextvars.Context"><code class="xref py py-class docutils literal notranslate"><span class="pre">contextvars.Context</span></code></a>。</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="asyncio.Runner.get_loop">
<span class="sig-name descname"><span class="pre">get_loop</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>返回关联到运行器实例的事件循环。</p>
</dd></dl>

<div class="admonition note">
<p class="admonition-title">备注</p>
<p><a class="reference internal" href="#asyncio.Runner" title="asyncio.Runner"><code class="xref py py-class docutils literal notranslate"><span class="pre">Runner</span></code></a> 会使用惰性初始化策略，它的构造器不会初始化下层的低层级结构体。</p>
<p>嵌入的 <em>loop</em> 和 <em>context</em> 是在进入 <a class="reference internal" href="../reference/compound_stmts.xhtml#with"><code class="xref std std-keyword docutils literal notranslate"><span class="pre">with</span></code></a> 语句体或者对 <a class="reference internal" href="#asyncio.run" title="asyncio.run"><code class="xref py py-meth docutils literal notranslate"><span class="pre">run()</span></code></a> 或 <a class="reference internal" href="#asyncio.Runner.get_loop" title="asyncio.Runner.get_loop"><code class="xref py py-meth docutils literal notranslate"><span class="pre">get_loop()</span></code></a> 的首次调用时被创建的。</p>
</div>
</dd></dl>

</section>
<section id="handling-keyboard-interruption">
<h2><a class="toc-backref" href="#id4" role="doc-backlink">处理键盘中断</a></h2>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.11.</span></p>
</div>
<p>当 <a class="reference internal" href="signal.xhtml#signal.SIGINT" title="signal.SIGINT"><code class="xref py py-const docutils literal notranslate"><span class="pre">signal.SIGINT</span></code></a> 被 <kbd class="kbd compound docutils literal notranslate"><kbd class="kbd docutils literal notranslate">Ctrl</kbd>-<kbd class="kbd docutils literal notranslate">C</kbd></kbd> 引发时，默认将在主线程中引发 <a class="reference internal" href="exceptions.xhtml#KeyboardInterrupt" title="KeyboardInterrupt"><code class="xref py py-exc docutils literal notranslate"><span class="pre">KeyboardInterrupt</span></code></a>。 但是这并不适用于 <a class="reference internal" href="asyncio.xhtml#module-asyncio" title="asyncio: Asynchronous I/O."><code class="xref py py-mod docutils literal notranslate"><span class="pre">asyncio</span></code></a> 因为它可以中断异步的内部操作并能挂起要退出的程序。</p>
<p>为解决此问题，<a class="reference internal" href="asyncio.xhtml#module-asyncio" title="asyncio: Asynchronous I/O."><code class="xref py py-mod docutils literal notranslate"><span class="pre">asyncio</span></code></a> 将按以下步骤处理 <a class="reference internal" href="signal.xhtml#signal.SIGINT" title="signal.SIGINT"><code class="xref py py-const docutils literal notranslate"><span class="pre">signal.SIGINT</span></code></a>:</p>
<ol class="arabic simple">
<li><p><a class="reference internal" href="#asyncio.Runner.run" title="asyncio.Runner.run"><code class="xref py py-meth docutils literal notranslate"><span class="pre">asyncio.Runner.run()</span></code></a> 在任何用户代码被执行之前安装一个自定义的 <a class="reference internal" href="signal.xhtml#signal.SIGINT" title="signal.SIGINT"><code class="xref py py-const docutils literal notranslate"><span class="pre">signal.SIGINT</span></code></a> 处理器并在从该函数退出时将其移除。</p></li>
<li><p><a class="reference internal" href="#asyncio.Runner" title="asyncio.Runner"><code class="xref py py-class docutils literal notranslate"><span class="pre">Runner</span></code></a> 为所传入的协程创建主任务供其执行。creates the main task for the passed coroutine for its execution.</p></li>
<li><p>当 <a class="reference internal" href="signal.xhtml#signal.SIGINT" title="signal.SIGINT"><code class="xref py py-const docutils literal notranslate"><span class="pre">signal.SIGINT</span></code></a> 被 <kbd class="kbd compound docutils literal notranslate"><kbd class="kbd docutils literal notranslate">Ctrl</kbd>-<kbd class="kbd docutils literal notranslate">C</kbd></kbd> 引发时，自定义的信号处理器将通过调用 <a class="reference internal" href="asyncio-task.xhtml#asyncio.Task.cancel" title="asyncio.Task.cancel"><code class="xref py py-meth docutils literal notranslate"><span class="pre">asyncio.Task.cancel()</span></code></a> 在主任务内部引发 <a class="reference internal" href="asyncio-exceptions.xhtml#asyncio.CancelledError" title="asyncio.CancelledError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">asyncio.CancelledError</span></code></a> 来取消主任务。  这将导致 Python 栈回退，<code class="docutils literal notranslate"><span class="pre">try/except</span></code> 和 <code class="docutils literal notranslate"><span class="pre">try/finally</span></code> 代码块可被用于资源清理。 在主任务被取消之后，<a class="reference internal" href="#asyncio.Runner.run" title="asyncio.Runner.run"><code class="xref py py-meth docutils literal notranslate"><span class="pre">asyncio.Runner.run()</span></code></a> 将引发 <a class="reference internal" href="exceptions.xhtml#KeyboardInterrupt" title="KeyboardInterrupt"><code class="xref py py-exc docutils literal notranslate"><span class="pre">KeyboardInterrupt</span></code></a>。</p></li>
<li><p>用户可以编写无法通过 <a class="reference internal" href="asyncio-task.xhtml#asyncio.Task.cancel" title="asyncio.Task.cancel"><code class="xref py py-meth docutils literal notranslate"><span class="pre">asyncio.Task.cancel()</span></code></a> 来中断的紧密循环，在这种情况下后续的第二次 <kbd class="kbd compound docutils literal notranslate"><kbd class="kbd docutils literal notranslate">Ctrl</kbd>-<kbd class="kbd docutils literal notranslate">C</kbd></kbd> 将立即引发 <a class="reference internal" href="exceptions.xhtml#KeyboardInterrupt" title="KeyboardInterrupt"><code class="xref py py-exc docutils literal notranslate"><span class="pre">KeyboardInterrupt</span></code></a> 而不会取消主任务。</p></li>
</ol>
</section>
</section>


            <div class="clearer"></div>
          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>