<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" /><meta name="viewport" content="width=device-width, initial-scale=1" />
<meta property="og:title" content="traceback --- 打印或读取栈回溯信息" />
<meta property="og:type" content="website" />
<meta property="og:url" content="https://docs.python.org/3/library/traceback.xhtml" />
<meta property="og:site_name" content="Python documentation" />
<meta property="og:description" content="源代码： Lib/traceback.py[https://github.com/python/cpython/tree/3.12/Lib/traceback.py] 该模块提供了一个标准接口来提取、格式化和打印 Python 程序的栈跟踪结果。它完全模仿Python 解释器在打印栈跟踪结果时的行为。当您想要在程序控制下打印栈跟踪结果时，例如在“封装”解释器时，这是非常有用的。 本模块使用 ..." />
<meta property="og:image" content="https://docs.python.org/3/_static/og-image.png" />
<meta property="og:image:alt" content="Python documentation" />
<meta name="description" content="源代码： Lib/traceback.py[https://github.com/python/cpython/tree/3.12/Lib/traceback.py] 该模块提供了一个标准接口来提取、格式化和打印 Python 程序的栈跟踪结果。它完全模仿Python 解释器在打印栈跟踪结果时的行为。当您想要在程序控制下打印栈跟踪结果时，例如在“封装”解释器时，这是非常有用的。 本模块使用 ..." />
<meta property="og:image:width" content="200" />
<meta property="og:image:height" content="200" />
<meta name="theme-color" content="#3776ab" />

    <title>traceback --- 打印或读取栈回溯信息</title>
    <link rel="stylesheet" type="text/css" href="../_static/pygments.css" />
    <link rel="stylesheet" type="text/css" href="../_static/epub.css" />
    <link rel="canonical" href="https://docs.python.org/3/library/traceback.html" />
    
      
    

    
    <style>
      @media only screen {
        table.full-width-table {
            width: 100%;
        }
      }
    </style>
 

  </head><body>


    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <section id="module-traceback">
<span id="traceback-print-or-retrieve-a-stack-traceback"></span><h1><code class="xref py py-mod docutils literal notranslate"><span class="pre">traceback</span></code> --- 打印或读取栈回溯信息</h1>
<p><strong>源代码：</strong> <a class="reference external" href="https://github.com/python/cpython/tree/3.12/Lib/traceback.py">Lib/traceback.py</a><span class="link-target"> [https://github.com/python/cpython/tree/3.12/Lib/traceback.py]</span></p>
<hr class="docutils" />
<p>该模块提供了一个标准接口来提取、格式化和打印 Python 程序的栈跟踪结果。它完全模仿Python 解释器在打印栈跟踪结果时的行为。当您想要在程序控制下打印栈跟踪结果时，例如在“封装”解释器时，这是非常有用的。</p>
<p id="index-0">本模块使用 <a class="reference internal" href="../reference/datamodel.xhtml#traceback-objects"><span class="std std-ref">回溯对象</span></a> --- 它们是类型为 <a class="reference internal" href="types.xhtml#types.TracebackType" title="types.TracebackType"><code class="xref py py-class docutils literal notranslate"><span class="pre">types.TracebackType</span></code></a> 的对象，它们将被赋值给 <a class="reference internal" href="exceptions.xhtml#BaseException" title="BaseException"><code class="xref py py-class docutils literal notranslate"><span class="pre">BaseException</span></code></a> 实例的 <a class="reference internal" href="exceptions.xhtml#BaseException.__traceback__" title="BaseException.__traceback__"><code class="xref py py-attr docutils literal notranslate"><span class="pre">__traceback__</span></code></a> 字段。</p>
<div class="admonition seealso">
<p class="admonition-title">参见</p>
<dl class="simple">
<dt>模块 <a class="reference internal" href="faulthandler.xhtml#module-faulthandler" title="faulthandler: Dump the Python traceback."><code class="xref py py-mod docutils literal notranslate"><span class="pre">faulthandler</span></code></a></dt><dd><p>用于在发生错误、超时或用户信号时显式地转储 Python 回溯信息。</p>
</dd>
<dt>模块 <a class="reference internal" href="pdb.xhtml#module-pdb" title="pdb: The Python debugger for interactive interpreters."><code class="xref py py-mod docutils literal notranslate"><span class="pre">pdb</span></code></a></dt><dd><p>用于 Python 程序的交互式源代码调试器。</p>
</dd>
</dl>
</div>
<p>这个模块定义了以下函数：</p>
<dl class="py function">
<dt class="sig sig-object py" id="traceback.print_tb">
<span class="sig-prename descclassname"><span class="pre">traceback.</span></span><span class="sig-name descname"><span class="pre">print_tb</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">tb</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">limit</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">file</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>如果 <em>limit</em> 为正值则打印来自 <a class="reference internal" href="../reference/datamodel.xhtml#traceback-objects"><span class="std std-ref">回溯对象</span></a> <em>tb</em> 的至多 <em>limit</em> 个栈回溯条目（从调用方的帧开始）。 否则，打印最后 <code class="docutils literal notranslate"><span class="pre">abs(limit)</span></code> 个条目。 如果 <em>limit</em> 被省略或为 <code class="docutils literal notranslate"><span class="pre">None</span></code>，则打印所有条目。 如果 <em>file</em> 被省略或为 <code class="docutils literal notranslate"><span class="pre">None</span></code>，则会输出到 <a class="reference internal" href="sys.xhtml#sys.stderr" title="sys.stderr"><code class="xref py py-data docutils literal notranslate"><span class="pre">sys.stderr</span></code></a>；在其他情况下它应当是一个打开的 <a class="reference internal" href="../glossary.xhtml#term-file-object"><span class="xref std std-term">文件</span></a> 或 <a class="reference internal" href="../glossary.xhtml#term-file-like-object"><span class="xref std std-term">file-like object</span></a> 用来接受输出。</p>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.5 版本发生变更: </span>添加了对负数值 <em>limit</em> 的支持</p>
</div>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="traceback.print_exception">
<span class="sig-prename descclassname"><span class="pre">traceback.</span></span><span class="sig-name descname"><span class="pre">print_exception</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">exc</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">/</span></span></em>, <span class="optional">[</span><em class="sig-param"><span class="n"><span class="pre">value</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">tb</span></span></em>, <span class="optional">]</span><em class="sig-param"><span class="n"><span class="pre">limit=None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">file=None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">chain=True</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>将来自 <a class="reference internal" href="../reference/datamodel.xhtml#traceback-objects"><span class="std std-ref">回溯对象</span></a> <em>tb</em> 的异常信息与栈跟踪条目打印到 <em>file</em>。 这与 <a class="reference internal" href="#traceback.print_tb" title="traceback.print_tb"><code class="xref py py-func docutils literal notranslate"><span class="pre">print_tb()</span></code></a> 相比有以下几方面的区别：</p>
<ul class="simple">
<li><p>如果 <em>tb</em> 不为 <code class="docutils literal notranslate"><span class="pre">None</span></code>，它将打印头部 <code class="docutils literal notranslate"><span class="pre">Traceback</span> <span class="pre">(most</span> <span class="pre">recent</span> <span class="pre">call</span> <span class="pre">last):</span></code></p></li>
<li><p>它将在栈回溯之后打印异常类型和 <em>value</em></p></li>
</ul>
<ul class="simple" id="index-1">
<li><p>如果 <em>type(value)</em> 为 <a class="reference internal" href="exceptions.xhtml#SyntaxError" title="SyntaxError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">SyntaxError</span></code></a> 且 <em>value</em> 具有适当的格式，它会打印发生语法错误的行并用一个圆点来指明错误的大致位置。</p></li>
</ul>
<p>从 Python 3.10 开始，可以不再传递 <em>value</em> 和 <em>tb</em>，而是传递一个异常对象作为第一个参数。 如果提供了 <em>value</em> 和 <em>tb</em>，则第一个参数会被忽略以便提供向下兼容性。</p>
<p>可选的 <em>limit</em> 参数的含义与 <a class="reference internal" href="#traceback.print_tb" title="traceback.print_tb"><code class="xref py py-func docutils literal notranslate"><span class="pre">print_tb()</span></code></a> 的相同。 如果 <em>chain</em> 为真值（默认），则链式异常（异常的 <a class="reference internal" href="exceptions.xhtml#BaseException.__cause__" title="BaseException.__cause__"><code class="xref py py-attr docutils literal notranslate"><span class="pre">__cause__</span></code></a> 或 <a class="reference internal" href="exceptions.xhtml#BaseException.__context__" title="BaseException.__context__"><code class="xref py py-attr docutils literal notranslate"><span class="pre">__context__</span></code></a> 属性）也将被打印出来，就像解释器本身在打印未处理的异常时一样。</p>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.5 版本发生变更: </span><em>etype</em> 参数会被忽略并根据 <em>value</em> 推断出来。</p>
</div>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.10 版本发生变更: </span><em>etype</em> 形参已被重命名为 <em>exc</em> 并且现在是仅限位置形参。</p>
</div>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="traceback.print_exc">
<span class="sig-prename descclassname"><span class="pre">traceback.</span></span><span class="sig-name descname"><span class="pre">print_exc</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">limit</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">file</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">chain</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">True</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>这是 <code class="docutils literal notranslate"><span class="pre">print_exception(sys.exception(),</span> <span class="pre">limit,</span> <span class="pre">file,</span> <span class="pre">chain)</span></code> 的快捷操作。</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="traceback.print_last">
<span class="sig-prename descclassname"><span class="pre">traceback.</span></span><span class="sig-name descname"><span class="pre">print_last</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">limit</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">file</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">chain</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">True</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>这是 <code class="docutils literal notranslate"><span class="pre">print_exception(sys.last_exc,</span> <span class="pre">limit,</span> <span class="pre">file,</span> <span class="pre">chain)</span></code> 的一个快捷方式。 通常它将只在异常到达交互提示符之后才会起作用 (参见 <a class="reference internal" href="sys.xhtml#sys.last_exc" title="sys.last_exc"><code class="xref py py-data docutils literal notranslate"><span class="pre">sys.last_exc</span></code></a>)。</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="traceback.print_stack">
<span class="sig-prename descclassname"><span class="pre">traceback.</span></span><span class="sig-name descname"><span class="pre">print_stack</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">f</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">limit</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">file</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>如果 <em>limit</em> 为正数则打印至多 <em>limit</em> 个栈跟踪条目（从发起调用点开始）。 在其他情况下，则打印最后 <code class="docutils literal notranslate"><span class="pre">abs(limit)</span></code> 个条目。 如果 <em>limit</em> 被省略或为 <code class="docutils literal notranslate"><span class="pre">None</span></code>，则会打印所有条目。 可选的 <em>f</em> 参数可被用来指定一个替代 <a class="reference internal" href="../reference/datamodel.xhtml#frame-objects"><span class="std std-ref">栈帧</span></a> 作为开始位置。 可选的 <em>file</em> 参数的含义与 <a class="reference internal" href="#traceback.print_tb" title="traceback.print_tb"><code class="xref py py-func docutils literal notranslate"><span class="pre">print_tb()</span></code></a> 的相同。</p>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.5 版本发生变更: </span>添加了对负数值 <em>limit</em> 的支持</p>
</div>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="traceback.extract_tb">
<span class="sig-prename descclassname"><span class="pre">traceback.</span></span><span class="sig-name descname"><span class="pre">extract_tb</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">tb</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">limit</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>返回一个 <a class="reference internal" href="#traceback.StackSummary" title="traceback.StackSummary"><code class="xref py py-class docutils literal notranslate"><span class="pre">StackSummary</span></code></a> 对象来代表从 <a class="reference internal" href="../reference/datamodel.xhtml#traceback-objects"><span class="std std-ref">回溯对象</span></a> <em>tb</em> 提取的“预处理”栈跟踪条目列表。 它可用作栈跟踪的另一种格式化形式。 可选的 <em>limit</em> 参数的含义与 <a class="reference internal" href="#traceback.print_tb" title="traceback.print_tb"><code class="xref py py-func docutils literal notranslate"><span class="pre">print_tb()</span></code></a> 的相同。 “预处理”栈跟踪条目是一个 <a class="reference internal" href="#traceback.FrameSummary" title="traceback.FrameSummary"><code class="xref py py-class docutils literal notranslate"><span class="pre">FrameSummary</span></code></a> 对象，其中包含代表通常针对栈跟踪打印的信息的 <a class="reference internal" href="#traceback.FrameSummary.filename" title="traceback.FrameSummary.filename"><code class="xref py py-attr docutils literal notranslate"><span class="pre">filename</span></code></a>, <a class="reference internal" href="#traceback.FrameSummary.lineno" title="traceback.FrameSummary.lineno"><code class="xref py py-attr docutils literal notranslate"><span class="pre">lineno</span></code></a>, <a class="reference internal" href="#traceback.FrameSummary.name" title="traceback.FrameSummary.name"><code class="xref py py-attr docutils literal notranslate"><span class="pre">name</span></code></a> 和 <a class="reference internal" href="#traceback.FrameSummary.line" title="traceback.FrameSummary.line"><code class="xref py py-attr docutils literal notranslate"><span class="pre">line</span></code></a> 等属性。</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="traceback.extract_stack">
<span class="sig-prename descclassname"><span class="pre">traceback.</span></span><span class="sig-name descname"><span class="pre">extract_stack</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">f</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">limit</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>从当前的 <a class="reference internal" href="../reference/datamodel.xhtml#frame-objects"><span class="std std-ref">栈帧</span></a> 提取原始回溯。 返回值的格式与 <a class="reference internal" href="#traceback.extract_tb" title="traceback.extract_tb"><code class="xref py py-func docutils literal notranslate"><span class="pre">extract_tb()</span></code></a> 的相同。 可选的 <em>f</em> 和 <em>limit</em> 参数的含义与 <a class="reference internal" href="#traceback.print_stack" title="traceback.print_stack"><code class="xref py py-func docutils literal notranslate"><span class="pre">print_stack()</span></code></a> 的相同。</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="traceback.format_list">
<span class="sig-prename descclassname"><span class="pre">traceback.</span></span><span class="sig-name descname"><span class="pre">format_list</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">extracted_list</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>给定一个由元组或如 <a class="reference internal" href="#traceback.extract_tb" title="traceback.extract_tb"><code class="xref py py-func docutils literal notranslate"><span class="pre">extract_tb()</span></code></a> 或 <a class="reference internal" href="#traceback.extract_stack" title="traceback.extract_stack"><code class="xref py py-func docutils literal notranslate"><span class="pre">extract_stack()</span></code></a> 所返回的 <a class="reference internal" href="#traceback.FrameSummary" title="traceback.FrameSummary"><code class="xref py py-class docutils literal notranslate"><span class="pre">FrameSummary</span></code></a> 对象组成的列表，返回一个可打印的字符串列表。 结果列表中的每个字符串都对应于参数列表中具有相同索引号的条目。 每个字符串以一个换行符结束；对于那些源文本行不为 <code class="docutils literal notranslate"><span class="pre">None</span></code> 的条目，字符串也可能包含内部换行符。</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="traceback.format_exception_only">
<span class="sig-prename descclassname"><span class="pre">traceback.</span></span><span class="sig-name descname"><span class="pre">format_exception_only</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">exc</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">/</span></span></em><span class="optional">[</span>, <em class="sig-param"><span class="n"><span class="pre">value</span></span></em><span class="optional">]</span><span class="sig-paren">)</span></dt>
<dd><p>使用 <a class="reference internal" href="sys.xhtml#sys.last_value" title="sys.last_value"><code class="xref py py-data docutils literal notranslate"><span class="pre">sys.last_value</span></code></a> 等给出的异常值来格式化回溯的异常部分。 返回值是一个字符串列表，其中每一项都以换行符结束。 该列表包含异常消息，它通常是一个字符串；但是，对于 <a class="reference internal" href="exceptions.xhtml#SyntaxError" title="SyntaxError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">SyntaxError</span></code></a> 异常，它将包含多行并且（当打印时）会显示语法错误发生位置的详细信息。 在异常消息之后，该列表还包含了异常的 <a class="reference internal" href="exceptions.xhtml#BaseException.__notes__" title="BaseException.__notes__"><code class="xref py py-attr docutils literal notranslate"><span class="pre">注释</span></code></a>。</p>
<p>从 Python 3.10 开始，可以不传入 <em>value</em>，而是传入一个异常对象作为第一个参数。 如果提供了 <em>value</em>，则第一个参数将被忽略以便提供向下兼容性。</p>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.10 版本发生变更: </span><em>etype</em> 形参已被重命名为 <em>exc</em> 并且现在是仅限位置形参。</p>
</div>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.11 版本发生变更: </span>返回的列表现在将包括关联到异常的任何 <a class="reference internal" href="exceptions.xhtml#BaseException.__notes__" title="BaseException.__notes__"><code class="xref py py-attr docutils literal notranslate"><span class="pre">注释</span></code></a>。</p>
</div>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="traceback.format_exception">
<span class="sig-prename descclassname"><span class="pre">traceback.</span></span><span class="sig-name descname"><span class="pre">format_exception</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">exc</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">/</span></span></em>, <span class="optional">[</span><em class="sig-param"><span class="n"><span class="pre">value</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">tb</span></span></em>, <span class="optional">]</span><em class="sig-param"><span class="n"><span class="pre">limit=None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">chain=True</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>格式化一个栈跟踪和异常信息。 参数的含义与传给 <a class="reference internal" href="#traceback.print_exception" title="traceback.print_exception"><code class="xref py py-func docutils literal notranslate"><span class="pre">print_exception()</span></code></a> 的相应参数相同。 返回值是一个字符串列表，每个字符串都以一个换行符结束且有些还包含内部换行符。 当这些行被拼接并打印时，打印的文本与 <a class="reference internal" href="#traceback.print_exception" title="traceback.print_exception"><code class="xref py py-func docutils literal notranslate"><span class="pre">print_exception()</span></code></a> 的完全相同。</p>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.5 版本发生变更: </span><em>etype</em> 参数会被忽略并根据 <em>value</em> 推断出来。</p>
</div>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.10 版本发生变更: </span>此函数的行为和签名已被修改以与 <a class="reference internal" href="#traceback.print_exception" title="traceback.print_exception"><code class="xref py py-func docutils literal notranslate"><span class="pre">print_exception()</span></code></a> 相匹配。</p>
</div>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="traceback.format_exc">
<span class="sig-prename descclassname"><span class="pre">traceback.</span></span><span class="sig-name descname"><span class="pre">format_exc</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">limit</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">chain</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">True</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>这类似于 <code class="docutils literal notranslate"><span class="pre">print_exc(limit)</span></code> 但会返回一个字符串而不是打印到一个文件。</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="traceback.format_tb">
<span class="sig-prename descclassname"><span class="pre">traceback.</span></span><span class="sig-name descname"><span class="pre">format_tb</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">tb</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">limit</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>是 <code class="docutils literal notranslate"><span class="pre">format_list(extract_tb(tb,</span> <span class="pre">limit))</span></code> 的简写形式。</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="traceback.format_stack">
<span class="sig-prename descclassname"><span class="pre">traceback.</span></span><span class="sig-name descname"><span class="pre">format_stack</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">f</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">limit</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>是 <code class="docutils literal notranslate"><span class="pre">format_list(extract_stack(f,</span> <span class="pre">limit))</span></code> 的简写形式。</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="traceback.clear_frames">
<span class="sig-prename descclassname"><span class="pre">traceback.</span></span><span class="sig-name descname"><span class="pre">clear_frames</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">tb</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>通过调用每个 <a class="reference internal" href="../reference/datamodel.xhtml#frame-objects"><span class="std std-ref">帧对象</span></a> 的 <a class="reference internal" href="../reference/datamodel.xhtml#frame.clear" title="frame.clear"><code class="xref py py-meth docutils literal notranslate"><span class="pre">clear()</span></code></a> 方法来清除 <a class="reference internal" href="../reference/datamodel.xhtml#traceback-objects"><span class="std std-ref">回溯</span></a> <em>tb</em> 中所有栈帧的局部变量。</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.4.</span></p>
</div>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="traceback.walk_stack">
<span class="sig-prename descclassname"><span class="pre">traceback.</span></span><span class="sig-name descname"><span class="pre">walk_stack</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">f</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>从给定的帧开始访问 <a class="reference internal" href="../reference/datamodel.xhtml#frame.f_back" title="frame.f_back"><code class="xref py py-attr docutils literal notranslate"><span class="pre">f.f_back</span></code></a> 之后的栈内容，产生每一个帧和帧对应的行号。 如果 <em>f</em> 为 <code class="docutils literal notranslate"><span class="pre">None</span></code>，则会使用当前栈。 这个辅助函数要与 <a class="reference internal" href="#traceback.StackSummary.extract" title="traceback.StackSummary.extract"><code class="xref py py-meth docutils literal notranslate"><span class="pre">StackSummary.extract()</span></code></a> 一起使用。</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.5.</span></p>
</div>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="traceback.walk_tb">
<span class="sig-prename descclassname"><span class="pre">traceback.</span></span><span class="sig-name descname"><span class="pre">walk_tb</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">tb</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>访问 <a class="reference internal" href="../reference/datamodel.xhtml#traceback.tb_next" title="traceback.tb_next"><code class="xref py py-attr docutils literal notranslate"><span class="pre">tb_next</span></code></a> 之后的回溯并产生每一个帧和帧对应的行号。 这个辅助函数要与 <a class="reference internal" href="#traceback.StackSummary.extract" title="traceback.StackSummary.extract"><code class="xref py py-meth docutils literal notranslate"><span class="pre">StackSummary.extract()</span></code></a> 一起使用。</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.5.</span></p>
</div>
</dd></dl>

<p>此模块还定义了以下的类:</p>
<section id="tracebackexception-objects">
<h2><code class="xref py py-class docutils literal notranslate"><span class="pre">TracebackException</span></code> 对象</h2>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.5.</span></p>
</div>
<p><code class="xref py py-class docutils literal notranslate"><span class="pre">TracebackException</span></code> 对象基于实际的异常创建通过轻量的方式捕获数据以便随后打印。</p>
<dl class="py class">
<dt class="sig sig-object py" id="traceback.TracebackException">
<em class="property"><span class="pre">class</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">traceback.</span></span><span class="sig-name descname"><span class="pre">TracebackException</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">exc_type</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">exc_value</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">exc_traceback</span></span></em>, <em class="sig-param"><span class="o"><span class="pre">*</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">limit</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">lookup_lines</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">True</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">capture_locals</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">compact</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">max_group_width</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">15</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">max_group_depth</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">10</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>捕获一个异常以便随后渲染。 <em>limit</em>, <em>lookup_lines</em> 和 <em>capture_locals</em> 的含义与 <a class="reference internal" href="#traceback.StackSummary" title="traceback.StackSummary"><code class="xref py py-class docutils literal notranslate"><span class="pre">StackSummary</span></code></a> 类的相同。</p>
<p>如果 <em>compact</em> 为真值，则只有 <code class="xref py py-class docutils literal notranslate"><span class="pre">TracebackException</span></code> 的 <a class="reference internal" href="functions.xhtml#format" title="format"><code class="xref py py-meth docutils literal notranslate"><span class="pre">format()</span></code></a> 方法所需要的数据会被保存在类属性性。 特别地，<a class="reference internal" href="#traceback.TracebackException.__context__" title="traceback.TracebackException.__context__"><code class="xref py py-attr docutils literal notranslate"><span class="pre">__context__</span></code></a> 字段只有在 <a class="reference internal" href="#traceback.TracebackException.__cause__" title="traceback.TracebackException.__cause__"><code class="xref py py-attr docutils literal notranslate"><span class="pre">__cause__</span></code></a> 为 <code class="docutils literal notranslate"><span class="pre">None</span></code> 且 <a class="reference internal" href="#traceback.TracebackException.__suppress_context__" title="traceback.TracebackException.__suppress_context__"><code class="xref py py-attr docutils literal notranslate"><span class="pre">__suppress_context__</span></code></a> 为假值时才会被计算。</p>
<p>请注意当局部变量被捕获时，它们也会被显示在回溯中。</p>
<p><em>max_group_width</em> 和 <em>max_group_depth</em> 控制异常组的格式化 (参见 <a class="reference internal" href="exceptions.xhtml#BaseExceptionGroup" title="BaseExceptionGroup"><code class="xref py py-exc docutils literal notranslate"><span class="pre">BaseExceptionGroup</span></code></a>)。 depth 是指分组的嵌套层级，而 width 是指一个异常组的异常数组的大小。 格式化的输出在达到某个限制时将被截断。</p>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.10 版本发生变更: </span>增加了 <em>compact</em> 形参。</p>
</div>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.11 版本发生变更: </span>添加了 <em>max_group_width</em> 和 <em>max_group_depth</em> 形参。parameters.</p>
</div>
<dl class="py attribute">
<dt class="sig sig-object py" id="traceback.TracebackException.__cause__">
<span class="sig-name descname"><span class="pre">__cause__</span></span></dt>
<dd><p>原始 <a class="reference internal" href="exceptions.xhtml#BaseException.__cause__" title="BaseException.__cause__"><code class="xref py py-attr docutils literal notranslate"><span class="pre">__cause__</span></code></a> 的 <code class="xref py py-class docutils literal notranslate"><span class="pre">TracebackException</span></code>。</p>
</dd></dl>

<dl class="py attribute">
<dt class="sig sig-object py" id="traceback.TracebackException.__context__">
<span class="sig-name descname"><span class="pre">__context__</span></span></dt>
<dd><p>原始 <a class="reference internal" href="exceptions.xhtml#BaseException.__context__" title="BaseException.__context__"><code class="xref py py-attr docutils literal notranslate"><span class="pre">__context__</span></code></a> 的 <code class="xref py py-class docutils literal notranslate"><span class="pre">TracebackException</span></code>。</p>
</dd></dl>

<dl class="py attribute">
<dt class="sig sig-object py" id="traceback.TracebackException.exceptions">
<span class="sig-name descname"><span class="pre">exceptions</span></span></dt>
<dd><p>如果 <code class="docutils literal notranslate"><span class="pre">self</span></code> 代表一个 <a class="reference internal" href="exceptions.xhtml#ExceptionGroup" title="ExceptionGroup"><code class="xref py py-exc docutils literal notranslate"><span class="pre">ExceptionGroup</span></code></a>，此字段将保存一个由代表被嵌套异常的 <code class="xref py py-class docutils literal notranslate"><span class="pre">TracebackException</span></code> 实例组成的列表。 否则它将为 <code class="docutils literal notranslate"><span class="pre">None</span></code>。</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.11.</span></p>
</div>
</dd></dl>

<dl class="py attribute">
<dt class="sig sig-object py" id="traceback.TracebackException.__suppress_context__">
<span class="sig-name descname"><span class="pre">__suppress_context__</span></span></dt>
<dd><p>来自原始异常的 <a class="reference internal" href="exceptions.xhtml#BaseException.__suppress_context__" title="BaseException.__suppress_context__"><code class="xref py py-attr docutils literal notranslate"><span class="pre">__suppress_context__</span></code></a> 值。</p>
</dd></dl>

<dl class="py attribute">
<dt class="sig sig-object py" id="traceback.TracebackException.__notes__">
<span class="sig-name descname"><span class="pre">__notes__</span></span></dt>
<dd><p>来自原始异常的 <a class="reference internal" href="exceptions.xhtml#BaseException.__notes__" title="BaseException.__notes__"><code class="xref py py-attr docutils literal notranslate"><span class="pre">__notes__</span></code></a> 值，或者如果异常没有任何注释则为 <code class="docutils literal notranslate"><span class="pre">None</span></code>。 如果它不为 <code class="docutils literal notranslate"><span class="pre">None</span></code> 则会在异常字符串之后的回溯中进行格式化。</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.11.</span></p>
</div>
</dd></dl>

<dl class="py attribute">
<dt class="sig sig-object py" id="traceback.TracebackException.stack">
<span class="sig-name descname"><span class="pre">stack</span></span></dt>
<dd><p>代表回溯的 <a class="reference internal" href="#traceback.StackSummary" title="traceback.StackSummary"><code class="xref py py-class docutils literal notranslate"><span class="pre">StackSummary</span></code></a>。</p>
</dd></dl>

<dl class="py attribute">
<dt class="sig sig-object py" id="traceback.TracebackException.exc_type">
<span class="sig-name descname"><span class="pre">exc_type</span></span></dt>
<dd><p>原始回溯的类。</p>
</dd></dl>

<dl class="py attribute">
<dt class="sig sig-object py" id="traceback.TracebackException.filename">
<span class="sig-name descname"><span class="pre">filename</span></span></dt>
<dd><p>针对语法错误 —— 错误发生所在的文件名。</p>
</dd></dl>

<dl class="py attribute">
<dt class="sig sig-object py" id="traceback.TracebackException.lineno">
<span class="sig-name descname"><span class="pre">lineno</span></span></dt>
<dd><p>针对语法错误 —— 错误发生所在的行号。</p>
</dd></dl>

<dl class="py attribute">
<dt class="sig sig-object py" id="traceback.TracebackException.end_lineno">
<span class="sig-name descname"><span class="pre">end_lineno</span></span></dt>
<dd><p>针对语法错误 —— 错误发生所在的末尾行号。 如不存在则可以为 <code class="docutils literal notranslate"><span class="pre">None</span></code>。</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.10.</span></p>
</div>
</dd></dl>

<dl class="py attribute">
<dt class="sig sig-object py" id="traceback.TracebackException.text">
<span class="sig-name descname"><span class="pre">text</span></span></dt>
<dd><p>针对语法错误 —— 错误发生所在的文本。</p>
</dd></dl>

<dl class="py attribute">
<dt class="sig sig-object py" id="traceback.TracebackException.offset">
<span class="sig-name descname"><span class="pre">offset</span></span></dt>
<dd><p>针对语法错误 —— 错误发生所在的文本内部的偏移量。</p>
</dd></dl>

<dl class="py attribute">
<dt class="sig sig-object py" id="traceback.TracebackException.end_offset">
<span class="sig-name descname"><span class="pre">end_offset</span></span></dt>
<dd><p>针对语法错误 —— 错误发生所在的文本末尾偏移量。 如不存在则可以为 <code class="docutils literal notranslate"><span class="pre">None</span></code>。</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.10.</span></p>
</div>
</dd></dl>

<dl class="py attribute">
<dt class="sig sig-object py" id="traceback.TracebackException.msg">
<span class="sig-name descname"><span class="pre">msg</span></span></dt>
<dd><p>针对语法错误 —— 编译器错误消息。</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="traceback.TracebackException.from_exception">
<em class="property"><span class="pre">classmethod</span><span class="w"> </span></em><span class="sig-name descname"><span class="pre">from_exception</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">exc</span></span></em>, <em class="sig-param"><span class="o"><span class="pre">*</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">limit</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">lookup_lines</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">True</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">capture_locals</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>捕获一个异常以便随后渲染。 <em>limit</em>, <em>lookup_lines</em> 和 <em>capture_locals</em> 的含义与 <a class="reference internal" href="#traceback.StackSummary" title="traceback.StackSummary"><code class="xref py py-class docutils literal notranslate"><span class="pre">StackSummary</span></code></a> 类的相同。</p>
<p>请注意当局部变量被捕获时，它们也会被显示在回溯中。</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="traceback.TracebackException.print">
<span class="sig-name descname"><span class="pre">print</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="o"><span class="pre">*</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">file</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">chain</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">True</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>将 <a class="reference internal" href="functions.xhtml#format" title="format"><code class="xref py py-meth docutils literal notranslate"><span class="pre">format()</span></code></a> 所返回的异常信息打印至 <em>file</em> (默认为 <code class="docutils literal notranslate"><span class="pre">sys.stderr</span></code>)。</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.11.</span></p>
</div>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="traceback.TracebackException.format">
<span class="sig-name descname"><span class="pre">format</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="o"><span class="pre">*</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">chain</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">True</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>格式化异常。</p>
<p>如果 <em>chain</em> 不为 <code class="docutils literal notranslate"><span class="pre">True</span></code>，则 <a class="reference internal" href="#traceback.TracebackException.__cause__" title="traceback.TracebackException.__cause__"><code class="xref py py-attr docutils literal notranslate"><span class="pre">__cause__</span></code></a> 和 <a class="reference internal" href="#traceback.TracebackException.__context__" title="traceback.TracebackException.__context__"><code class="xref py py-attr docutils literal notranslate"><span class="pre">__context__</span></code></a> 将不会被格式化。</p>
<p>返回值是一个字符串的生成器，其中每个字符串都以换行符结束并且有些还会包含内部换行符。 <a class="reference internal" href="#traceback.print_exception" title="traceback.print_exception"><code class="xref py py-func docutils literal notranslate"><span class="pre">print_exception()</span></code></a> 是此方法的一个包装器，它只是将这些行打印到一个文件。</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="traceback.TracebackException.format_exception_only">
<span class="sig-name descname"><span class="pre">format_exception_only</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>格式化回溯的异常部分。</p>
<p>返回值是一个字符串的生成器，每个字符串都以一个换行符结束。</p>
<p>The generator emits the exception's message followed by its notes
(if it has any). The exception message is normally a single string;
however, for <a class="reference internal" href="exceptions.xhtml#SyntaxError" title="SyntaxError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">SyntaxError</span></code></a> exceptions, it consists of several
lines that (when printed) display detailed information about where
the syntax error occurred.</p>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.11 版本发生变更: </span>异常的 <a class="reference internal" href="exceptions.xhtml#BaseException.__notes__" title="BaseException.__notes__"><code class="xref py py-attr docutils literal notranslate"><span class="pre">注释</span></code></a> 现在将被包括在输出中。</p>
</div>
</dd></dl>

</dd></dl>

</section>
<section id="stacksummary-objects">
<h2><code class="xref py py-class docutils literal notranslate"><span class="pre">StackSummary</span></code> 对象</h2>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.5.</span></p>
</div>
<p><code class="xref py py-class docutils literal notranslate"><span class="pre">StackSummary</span></code> 对象代表一个可被格式化的调用栈。</p>
<dl class="py class">
<dt class="sig sig-object py" id="traceback.StackSummary">
<em class="property"><span class="pre">class</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">traceback.</span></span><span class="sig-name descname"><span class="pre">StackSummary</span></span></dt>
<dd><dl class="py method">
<dt class="sig sig-object py" id="traceback.StackSummary.extract">
<em class="property"><span class="pre">classmethod</span><span class="w"> </span></em><span class="sig-name descname"><span class="pre">extract</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">frame_gen</span></span></em>, <em class="sig-param"><span class="o"><span class="pre">*</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">limit</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">lookup_lines</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">True</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">capture_locals</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>根据一个帧生成器（例如由 <a class="reference internal" href="#traceback.walk_stack" title="traceback.walk_stack"><code class="xref py py-func docutils literal notranslate"><span class="pre">walk_stack()</span></code></a> 或 <a class="reference internal" href="#traceback.walk_tb" title="traceback.walk_tb"><code class="xref py py-func docutils literal notranslate"><span class="pre">walk_tb()</span></code></a> 所返回的对象）构造 <code class="xref py py-class docutils literal notranslate"><span class="pre">StackSummary</span></code> 对象。</p>
<p>如果提供了 <em>limit</em>，则只从 <em>frame_gen</em> 提取该参数所指定数量的帧。 如果 <em>lookup_lines</em> 为 <code class="docutils literal notranslate"><span class="pre">False</span></code>，则返回的 <a class="reference internal" href="#traceback.FrameSummary" title="traceback.FrameSummary"><code class="xref py py-class docutils literal notranslate"><span class="pre">FrameSummary</span></code></a> 对象将不会读入它们的行，这使得创建 <code class="xref py py-class docutils literal notranslate"><span class="pre">StackSummary</span></code> 的开销更低（如果它不会被实际格式化这就很有价值）。 如果 <em>capture_locals</em> 为 <code class="docutils literal notranslate"><span class="pre">True</span></code> 则每个 <code class="xref py py-class docutils literal notranslate"><span class="pre">FrameSummary</span></code> 中的局部变量会被捕获为对象表示形式。</p>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.12 版本发生变更: </span>在局部变量的 <a class="reference internal" href="functions.xhtml#repr" title="repr"><code class="xref py py-func docutils literal notranslate"><span class="pre">repr()</span></code></a> 上被引发的异常（当 <em>capture_locals</em> 为 <code class="docutils literal notranslate"><span class="pre">True</span></code> 时）不会再被传播给调用方。</p>
</div>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="traceback.StackSummary.from_list">
<em class="property"><span class="pre">classmethod</span><span class="w"> </span></em><span class="sig-name descname"><span class="pre">from_list</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">a_list</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>从所提供的 <a class="reference internal" href="#traceback.FrameSummary" title="traceback.FrameSummary"><code class="xref py py-class docutils literal notranslate"><span class="pre">FrameSummary</span></code></a> 对象列表或旧式的元组列表构造一个 <code class="xref py py-class docutils literal notranslate"><span class="pre">StackSummary</span></code> 对象。 每个元组都应当是以 <em>文件名</em>, <em>行号</em>, <em>名称</em>, <em>行</em> 为元素的 4 元组。</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="traceback.StackSummary.format">
<span class="sig-name descname"><span class="pre">format</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>返回一个可打印的字符串列表。 结果列表中的每个字符串各自对应来自栈的单独的 <a class="reference internal" href="../reference/datamodel.xhtml#frame-objects"><span class="std std-ref">帧</span></a>。 每个字符串都以一个换行符结束；对于带有源文本行的条目来说，字符串还可能包含内部换行符。</p>
<p>对于同一帧与行的长序列，将显示前几个重复项，后面跟一个指明之后的实际重复次数的摘要行。</p>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.6 版本发生变更: </span>重复帧的长序列现在将被缩减。</p>
</div>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="traceback.StackSummary.format_frame_summary">
<span class="sig-name descname"><span class="pre">format_frame_summary</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">frame_summary</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>返回用于打印栈中涉及的某一个 <a class="reference internal" href="../reference/datamodel.xhtml#frame-objects"><span class="std std-ref">帧</span></a> 的字符串。 此方法会为每个要用 <a class="reference internal" href="#traceback.StackSummary.format" title="traceback.StackSummary.format"><code class="xref py py-meth docutils literal notranslate"><span class="pre">StackSummary.format()</span></code></a> 来打印的 <a class="reference internal" href="#traceback.FrameSummary" title="traceback.FrameSummary"><code class="xref py py-class docutils literal notranslate"><span class="pre">FrameSummary</span></code></a> 对象进行调用。 如果它返回 <code class="docutils literal notranslate"><span class="pre">None</span></code>，该帧将从输出中被省略。</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.11.</span></p>
</div>
</dd></dl>

</dd></dl>

</section>
<section id="framesummary-objects">
<h2><code class="xref py py-class docutils literal notranslate"><span class="pre">FrameSummary</span></code> 对象</h2>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.5.</span></p>
</div>
<p><code class="xref py py-class docutils literal notranslate"><span class="pre">FrameSummary</span></code> 对象表示 <a class="reference internal" href="../reference/datamodel.xhtml#traceback-objects"><span class="std std-ref">回溯</span></a> 中的某一个 <a class="reference internal" href="../reference/datamodel.xhtml#frame-objects"><span class="std std-ref">帧</span></a>。</p>
<dl class="py class">
<dt class="sig sig-object py" id="traceback.FrameSummary">
<em class="property"><span class="pre">class</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">traceback.</span></span><span class="sig-name descname"><span class="pre">FrameSummary</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">filename</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">lineno</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">name</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">lookup_line</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">True</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">locals</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">line</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>代表 <a class="reference internal" href="../reference/datamodel.xhtml#traceback-objects"><span class="std std-ref">回溯</span></a> 或栈中被格式化或打印的一个单独 <a class="reference internal" href="../reference/datamodel.xhtml#frame-objects"><span class="std std-ref">帧</span></a>。 它有时还可能带有包括在其中的帧局部变量的字符串化版本。 如果 <em>lookup_line</em> 为 <code class="docutils literal notranslate"><span class="pre">False</span></code>，则源代码不会被查找直到 <code class="xref py py-class docutils literal notranslate"><span class="pre">FrameSummary</span></code> 的 <a class="reference internal" href="#traceback.FrameSummary.line" title="traceback.FrameSummary.line"><code class="xref py py-attr docutils literal notranslate"><span class="pre">line</span></code></a> 属性已经被访问（这还会在将其转换为 <a class="reference internal" href="stdtypes.xhtml#tuple" title="tuple"><code class="xref py py-class docutils literal notranslate"><span class="pre">tuple</span></code></a> 时发生）。 <a class="reference internal" href="#traceback.FrameSummary.line" title="traceback.FrameSummary.line"><code class="xref py py-attr docutils literal notranslate"><span class="pre">line</span></code></a> 可能会被直接提供，并将完全阻止行查找的发生。 <em>locals</em> 是一个可选的局部变量字典，如果有提供的话这些变量的表示形式将被存储在概要中以便随后显示。</p>
<p><code class="xref py py-class docutils literal notranslate"><span class="pre">FrameSummary</span></code> 实例具有以下属性：</p>
<dl class="py attribute">
<dt class="sig sig-object py" id="traceback.FrameSummary.filename">
<span class="sig-name descname"><span class="pre">filename</span></span></dt>
<dd><p>对应于该帧的源代码的文件名。 等价于访问 <a class="reference internal" href="../reference/datamodel.xhtml#frame-objects"><span class="std std-ref">帧对象</span></a> <em>f</em> 上的 <a class="reference internal" href="../reference/datamodel.xhtml#codeobject.co_filename" title="codeobject.co_filename"><code class="xref py py-attr docutils literal notranslate"><span class="pre">f.f_code.co_filename</span></code></a>。</p>
</dd></dl>

<dl class="py attribute">
<dt class="sig sig-object py" id="traceback.FrameSummary.lineno">
<span class="sig-name descname"><span class="pre">lineno</span></span></dt>
<dd><p>对应于该帧的源代码的行号。</p>
</dd></dl>

<dl class="py attribute">
<dt class="sig sig-object py" id="traceback.FrameSummary.name">
<span class="sig-name descname"><span class="pre">name</span></span></dt>
<dd><p>等价于访问 <a class="reference internal" href="../reference/datamodel.xhtml#frame-objects"><span class="std std-ref">帧对象</span></a> <em>f</em> 上的 <a class="reference internal" href="../reference/datamodel.xhtml#codeobject.co_name" title="codeobject.co_name"><code class="xref py py-attr docutils literal notranslate"><span class="pre">f.f_code.co_name</span></code></a>。</p>
</dd></dl>

<dl class="py attribute">
<dt class="sig sig-object py" id="traceback.FrameSummary.line">
<span class="sig-name descname"><span class="pre">line</span></span></dt>
<dd><p>代表该帧的源代码的字符串，开头和末尾的空白将被去除。 如果源代码不可用，它将为 <code class="docutils literal notranslate"><span class="pre">None</span></code>。</p>
</dd></dl>

</dd></dl>

</section>
<section id="traceback-examples">
<span id="traceback-example"></span><h2>回溯示例</h2>
<p>这个简单示例是一个基本的读取-求值-打印循环，类似于（但实用性小于）标准 Python 交互式解释器循环。 对于解释器循环的更完整实现，请参阅 <a class="reference internal" href="code.xhtml#module-code" title="code: Facilities to implement read-eval-print loops."><code class="xref py py-mod docutils literal notranslate"><span class="pre">code</span></code></a> 模块。</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="kn">import</span> <span class="nn">sys</span><span class="o">,</span> <span class="nn">traceback</span>

<span class="k">def</span> <span class="nf">run_user_code</span><span class="p">(</span><span class="n">envdir</span><span class="p">):</span>
    <span class="n">source</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s2">&quot;&gt;&gt;&gt; &quot;</span><span class="p">)</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">exec</span><span class="p">(</span><span class="n">source</span><span class="p">,</span> <span class="n">envdir</span><span class="p">)</span>
    <span class="k">except</span> <span class="ne">Exception</span><span class="p">:</span>
        <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;Exception in user code:&quot;</span><span class="p">)</span>
        <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;-&quot;</span><span class="o">*</span><span class="mi">60</span><span class="p">)</span>
        <span class="n">traceback</span><span class="o">.</span><span class="n">print_exc</span><span class="p">(</span><span class="n">file</span><span class="o">=</span><span class="n">sys</span><span class="o">.</span><span class="n">stdout</span><span class="p">)</span>
        <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;-&quot;</span><span class="o">*</span><span class="mi">60</span><span class="p">)</span>

<span class="n">envdir</span> <span class="o">=</span> <span class="p">{}</span>
<span class="k">while</span> <span class="kc">True</span><span class="p">:</span>
    <span class="n">run_user_code</span><span class="p">(</span><span class="n">envdir</span><span class="p">)</span>
</pre></div>
</div>
<p>下面的例子演示了打印和格式化异常与回溯的不同方式:</p>
<div class="highlight-python notranslate"><div class="highlight"><pre><span></span><span class="kn">import</span> <span class="nn">sys</span><span class="o">,</span> <span class="nn">traceback</span>

<span class="k">def</span> <span class="nf">lumberjack</span><span class="p">():</span>
    <span class="n">bright_side_of_life</span><span class="p">()</span>

<span class="k">def</span> <span class="nf">bright_side_of_life</span><span class="p">():</span>
    <span class="k">return</span> <span class="nb">tuple</span><span class="p">()[</span><span class="mi">0</span><span class="p">]</span>

<span class="k">try</span><span class="p">:</span>
    <span class="n">lumberjack</span><span class="p">()</span>
<span class="k">except</span> <span class="ne">IndexError</span><span class="p">:</span>
    <span class="n">exc</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">exception</span><span class="p">()</span>
    <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;*** print_tb:&quot;</span><span class="p">)</span>
    <span class="n">traceback</span><span class="o">.</span><span class="n">print_tb</span><span class="p">(</span><span class="n">exc</span><span class="o">.</span><span class="n">__traceback__</span><span class="p">,</span> <span class="n">limit</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">file</span><span class="o">=</span><span class="n">sys</span><span class="o">.</span><span class="n">stdout</span><span class="p">)</span>
    <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;*** print_exception:&quot;</span><span class="p">)</span>
    <span class="n">traceback</span><span class="o">.</span><span class="n">print_exception</span><span class="p">(</span><span class="n">exc</span><span class="p">,</span> <span class="n">limit</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">file</span><span class="o">=</span><span class="n">sys</span><span class="o">.</span><span class="n">stdout</span><span class="p">)</span>
    <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;*** print_exc:&quot;</span><span class="p">)</span>
    <span class="n">traceback</span><span class="o">.</span><span class="n">print_exc</span><span class="p">(</span><span class="n">limit</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">file</span><span class="o">=</span><span class="n">sys</span><span class="o">.</span><span class="n">stdout</span><span class="p">)</span>
    <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;*** format_exc, first and last line:&quot;</span><span class="p">)</span>
    <span class="n">formatted_lines</span> <span class="o">=</span> <span class="n">traceback</span><span class="o">.</span><span class="n">format_exc</span><span class="p">()</span><span class="o">.</span><span class="n">splitlines</span><span class="p">()</span>
    <span class="nb">print</span><span class="p">(</span><span class="n">formatted_lines</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
    <span class="nb">print</span><span class="p">(</span><span class="n">formatted_lines</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>
    <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;*** format_exception:&quot;</span><span class="p">)</span>
    <span class="nb">print</span><span class="p">(</span><span class="nb">repr</span><span class="p">(</span><span class="n">traceback</span><span class="o">.</span><span class="n">format_exception</span><span class="p">(</span><span class="n">exc</span><span class="p">)))</span>
    <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;*** extract_tb:&quot;</span><span class="p">)</span>
    <span class="nb">print</span><span class="p">(</span><span class="nb">repr</span><span class="p">(</span><span class="n">traceback</span><span class="o">.</span><span class="n">extract_tb</span><span class="p">(</span><span class="n">exc</span><span class="o">.</span><span class="n">__traceback__</span><span class="p">)))</span>
    <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;*** format_tb:&quot;</span><span class="p">)</span>
    <span class="nb">print</span><span class="p">(</span><span class="nb">repr</span><span class="p">(</span><span class="n">traceback</span><span class="o">.</span><span class="n">format_tb</span><span class="p">(</span><span class="n">exc</span><span class="o">.</span><span class="n">__traceback__</span><span class="p">)))</span>
    <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;*** tb_lineno:&quot;</span><span class="p">,</span> <span class="n">exc</span><span class="o">.</span><span class="n">__traceback__</span><span class="o">.</span><span class="n">tb_lineno</span><span class="p">)</span>
</pre></div>
</div>
<p>该示例的输出看起来像是这样的:</p>
<div class="highlight-none notranslate"><div class="highlight"><pre><span></span>*** print_tb:
  File &quot;&lt;doctest...&gt;&quot;, line 10, in &lt;module&gt;
    lumberjack()
*** print_exception:
Traceback (most recent call last):
  File &quot;&lt;doctest...&gt;&quot;, line 10, in &lt;module&gt;
    lumberjack()
  File &quot;&lt;doctest...&gt;&quot;, line 4, in lumberjack
    bright_side_of_life()
IndexError: tuple index out of range
*** print_exc:
Traceback (most recent call last):
  File &quot;&lt;doctest...&gt;&quot;, line 10, in &lt;module&gt;
    lumberjack()
  File &quot;&lt;doctest...&gt;&quot;, line 4, in lumberjack
    bright_side_of_life()
IndexError: tuple index out of range
*** format_exc, first and last line:
Traceback (most recent call last):
IndexError: tuple index out of range
*** format_exception:
[&#39;Traceback (most recent call last):\n&#39;,
 &#39;  File &quot;&lt;doctest default[0]&gt;&quot;, line 10, in &lt;module&gt;\n    lumberjack()\n&#39;,
 &#39;  File &quot;&lt;doctest default[0]&gt;&quot;, line 4, in lumberjack\n    bright_side_of_life()\n&#39;,
 &#39;  File &quot;&lt;doctest default[0]&gt;&quot;, line 7, in bright_side_of_life\n    return tuple()[0]\n           ~~~~~~~^^^\n&#39;,
 &#39;IndexError: tuple index out of range\n&#39;]
*** extract_tb:
[&lt;FrameSummary file &lt;doctest...&gt;, line 10 in &lt;module&gt;&gt;,
 &lt;FrameSummary file &lt;doctest...&gt;, line 4 in lumberjack&gt;,
 &lt;FrameSummary file &lt;doctest...&gt;, line 7 in bright_side_of_life&gt;]
*** format_tb:
[&#39;  File &quot;&lt;doctest default[0]&gt;&quot;, line 10, in &lt;module&gt;\n    lumberjack()\n&#39;,
 &#39;  File &quot;&lt;doctest default[0]&gt;&quot;, line 4, in lumberjack\n    bright_side_of_life()\n&#39;,
 &#39;  File &quot;&lt;doctest default[0]&gt;&quot;, line 7, in bright_side_of_life\n    return tuple()[0]\n           ~~~~~~~^^^\n&#39;]
*** tb_lineno: 10
</pre></div>
</div>
<p>下面的例子演示了打印和格式化栈的不同方式:</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="kn">import</span> <span class="nn">traceback</span>
<span class="gp">&gt;&gt;&gt; </span><span class="k">def</span> <span class="nf">another_function</span><span class="p">():</span>
<span class="gp">... </span>    <span class="n">lumberstack</span><span class="p">()</span>
<span class="gp">...</span>
<span class="gp">&gt;&gt;&gt; </span><span class="k">def</span> <span class="nf">lumberstack</span><span class="p">():</span>
<span class="gp">... </span>    <span class="n">traceback</span><span class="o">.</span><span class="n">print_stack</span><span class="p">()</span>
<span class="gp">... </span>    <span class="nb">print</span><span class="p">(</span><span class="nb">repr</span><span class="p">(</span><span class="n">traceback</span><span class="o">.</span><span class="n">extract_stack</span><span class="p">()))</span>
<span class="gp">... </span>    <span class="nb">print</span><span class="p">(</span><span class="nb">repr</span><span class="p">(</span><span class="n">traceback</span><span class="o">.</span><span class="n">format_stack</span><span class="p">()))</span>
<span class="gp">...</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">another_function</span><span class="p">()</span>
  File <span class="nb">&quot;&lt;doctest&gt;&quot;</span>, line <span class="m">10</span>, in <span class="n">&lt;module&gt;</span>
<span class="w">    </span><span class="n">another_function</span><span class="p">()</span>
  File <span class="nb">&quot;&lt;doctest&gt;&quot;</span>, line <span class="m">3</span>, in <span class="n">another_function</span>
<span class="w">    </span><span class="n">lumberstack</span><span class="p">()</span>
  File <span class="nb">&quot;&lt;doctest&gt;&quot;</span>, line <span class="m">6</span>, in <span class="n">lumberstack</span>
<span class="w">    </span><span class="n">traceback</span><span class="o">.</span><span class="n">print_stack</span><span class="p">()</span>
<span class="x">[(&#39;&lt;doctest&gt;&#39;, 10, &#39;&lt;module&gt;&#39;, &#39;another_function()&#39;),</span>
<span class="x"> (&#39;&lt;doctest&gt;&#39;, 3, &#39;another_function&#39;, &#39;lumberstack()&#39;),</span>
<span class="x"> (&#39;&lt;doctest&gt;&#39;, 7, &#39;lumberstack&#39;, &#39;print(repr(traceback.extract_stack()))&#39;)]</span>
<span class="x">[&#39;  File &quot;&lt;doctest&gt;&quot;, line 10, in &lt;module&gt;\n    another_function()\n&#39;,</span>
<span class="x"> &#39;  File &quot;&lt;doctest&gt;&quot;, line 3, in another_function\n    lumberstack()\n&#39;,</span>
<span class="x"> &#39;  File &quot;&lt;doctest&gt;&quot;, line 8, in lumberstack\n    print(repr(traceback.format_stack()))\n&#39;]</span>
</pre></div>
</div>
<p>最后这个例子演示了最后几个格式化函数:</p>
<div class="highlight-pycon notranslate"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="kn">import</span> <span class="nn">traceback</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">traceback</span><span class="o">.</span><span class="n">format_list</span><span class="p">([(</span><span class="s1">&#39;spam.py&#39;</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="s1">&#39;&lt;module&gt;&#39;</span><span class="p">,</span> <span class="s1">&#39;spam.eggs()&#39;</span><span class="p">),</span>
<span class="gp">... </span>                       <span class="p">(</span><span class="s1">&#39;eggs.py&#39;</span><span class="p">,</span> <span class="mi">42</span><span class="p">,</span> <span class="s1">&#39;eggs&#39;</span><span class="p">,</span> <span class="s1">&#39;return &quot;bacon&quot;&#39;</span><span class="p">)])</span>
<span class="go">[&#39;  File &quot;spam.py&quot;, line 3, in &lt;module&gt;\n    spam.eggs()\n&#39;,</span>
<span class="go"> &#39;  File &quot;eggs.py&quot;, line 42, in eggs\n    return &quot;bacon&quot;\n&#39;]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">an_error</span> <span class="o">=</span> <span class="ne">IndexError</span><span class="p">(</span><span class="s1">&#39;tuple index out of range&#39;</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">traceback</span><span class="o">.</span><span class="n">format_exception_only</span><span class="p">(</span><span class="nb">type</span><span class="p">(</span><span class="n">an_error</span><span class="p">),</span> <span class="n">an_error</span><span class="p">)</span>
<span class="go">[&#39;IndexError: tuple index out of range\n&#39;]</span>
</pre></div>
</div>
</section>
</section>


            <div class="clearer"></div>
          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>