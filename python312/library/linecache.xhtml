<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" /><meta name="viewport" content="width=device-width, initial-scale=1" />
<meta property="og:title" content="linecache --- 随机访问文本行" />
<meta property="og:type" content="website" />
<meta property="og:url" content="https://docs.python.org/3/library/linecache.xhtml" />
<meta property="og:site_name" content="Python documentation" />
<meta property="og:description" content="源代码: Lib/linecache.py[https://github.com/python/cpython/tree/3.12/Lib/linecache.py] linecache 模块允许从一个 Python 源文件中获取任意的行，并会尝试使用缓存进行内部优化，常应用于从单个文件读取多行的场合。 此模块被 traceback 模块用来提取源码行以便包含在格式化的回溯中。 tokeni..." />
<meta property="og:image" content="https://docs.python.org/3/_static/og-image.png" />
<meta property="og:image:alt" content="Python documentation" />
<meta name="description" content="源代码: Lib/linecache.py[https://github.com/python/cpython/tree/3.12/Lib/linecache.py] linecache 模块允许从一个 Python 源文件中获取任意的行，并会尝试使用缓存进行内部优化，常应用于从单个文件读取多行的场合。 此模块被 traceback 模块用来提取源码行以便包含在格式化的回溯中。 tokeni..." />
<meta property="og:image:width" content="200" />
<meta property="og:image:height" content="200" />
<meta name="theme-color" content="#3776ab" />

    <title>linecache --- 随机访问文本行</title>
    <link rel="stylesheet" type="text/css" href="../_static/pygments.css" />
    <link rel="stylesheet" type="text/css" href="../_static/epub.css" />
    <link rel="canonical" href="https://docs.python.org/3/library/linecache.html" />
    
      
    

    
    <style>
      @media only screen {
        table.full-width-table {
            width: 100%;
        }
      }
    </style>
 

  </head><body>


    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <section id="module-linecache">
<span id="linecache-random-access-to-text-lines"></span><h1><code class="xref py py-mod docutils literal notranslate"><span class="pre">linecache</span></code> --- 随机访问文本行</h1>
<p><strong>源代码:</strong> <a class="reference external" href="https://github.com/python/cpython/tree/3.12/Lib/linecache.py">Lib/linecache.py</a><span class="link-target"> [https://github.com/python/cpython/tree/3.12/Lib/linecache.py]</span></p>
<hr class="docutils" />
<p><a class="reference internal" href="#module-linecache" title="linecache: Provides random access to individual lines from text files."><code class="xref py py-mod docutils literal notranslate"><span class="pre">linecache</span></code></a> 模块允许从一个 Python 源文件中获取任意的行，并会尝试使用缓存进行内部优化，常应用于从单个文件读取多行的场合。 此模块被 <a class="reference internal" href="traceback.xhtml#module-traceback" title="traceback: Print or retrieve a stack traceback."><code class="xref py py-mod docutils literal notranslate"><span class="pre">traceback</span></code></a> 模块用来提取源码行以便包含在格式化的回溯中。</p>
<p><a class="reference internal" href="tokenize.xhtml#tokenize.open" title="tokenize.open"><code class="xref py py-func docutils literal notranslate"><span class="pre">tokenize.open()</span></code></a> 函数被用于打开文件。 此函数使用 <a class="reference internal" href="tokenize.xhtml#tokenize.detect_encoding" title="tokenize.detect_encoding"><code class="xref py py-func docutils literal notranslate"><span class="pre">tokenize.detect_encoding()</span></code></a> 来获取文件的编码格式；如果未指明编码格式，则默认编码为 UTF-8。</p>
<p><a class="reference internal" href="#module-linecache" title="linecache: Provides random access to individual lines from text files."><code class="xref py py-mod docutils literal notranslate"><span class="pre">linecache</span></code></a> 模块定义了下列函数：</p>
<dl class="py function">
<dt class="sig sig-object py" id="linecache.getline">
<span class="sig-prename descclassname"><span class="pre">linecache.</span></span><span class="sig-name descname"><span class="pre">getline</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">filename</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">lineno</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">module_globals</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>从名为 <em>filename</em> 的文件中获取 <em>lineno</em> 行，此函数绝不会引发异常 --- 出现错误时它将返回 <code class="docutils literal notranslate"><span class="pre">''</span></code> (所有找到的行都将包含换行符作为结束)。</p>
<p id="index-0">如果找不到名为 <em>filename</em> 的文件，此函数会先在 <em>module_globals</em> 中检查 <span class="target" id="index-3"></span><a class="pep reference external" href="https://peps.python.org/pep-0302/"><strong>PEP 302</strong></a><span class="link-target"> [https://peps.python.org/pep-0302/]</span> <code class="docutils literal notranslate"><span class="pre">__loader__</span></code>。 如果存在这样的加载器并且它定义了 <code class="docutils literal notranslate"><span class="pre">get_source</span></code> 方法，则由该方法来确定源行 (如果 <code class="docutils literal notranslate"><span class="pre">get_source()</span></code> 返回 <code class="docutils literal notranslate"><span class="pre">None</span></code>，则该函数返回 <code class="docutils literal notranslate"><span class="pre">''</span></code>)。 最后，如果 <em>filename</em> 是一个相对路径文件名，则它会在模块搜索路径 <code class="docutils literal notranslate"><span class="pre">sys.path</span></code> 中按条目的相对位置进行查找。</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="linecache.clearcache">
<span class="sig-prename descclassname"><span class="pre">linecache.</span></span><span class="sig-name descname"><span class="pre">clearcache</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>清空缓存。 如果你不再需要之前使用 <a class="reference internal" href="#linecache.getline" title="linecache.getline"><code class="xref py py-func docutils literal notranslate"><span class="pre">getline()</span></code></a> 从文件读取的行即可使用此函数。</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="linecache.checkcache">
<span class="sig-prename descclassname"><span class="pre">linecache.</span></span><span class="sig-name descname"><span class="pre">checkcache</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">filename</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>检查缓存有效性。 如果缓存中的文件在磁盘上发生了改变，而你需要更新后的版本即可使用此函数。 如果省略了 <em>filename</em>，它会检查缓存中的所有条目。</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="linecache.lazycache">
<span class="sig-prename descclassname"><span class="pre">linecache.</span></span><span class="sig-name descname"><span class="pre">lazycache</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">filename</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">module_globals</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>捕获有关某个非基于文件的模块的足够细节信息，以允许稍后再通过 <a class="reference internal" href="#linecache.getline" title="linecache.getline"><code class="xref py py-func docutils literal notranslate"><span class="pre">getline()</span></code></a> 来获取其中的行，即使当稍后调用时 <em>module_globals</em> 为 <code class="docutils literal notranslate"><span class="pre">None</span></code>。 这可以避免在实际需要读取行之前执行 I/O，也不必始终保持模块全局变量。</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.5.</span></p>
</div>
</dd></dl>

<p>示例:</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="kn">import</span> <span class="nn">linecache</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">linecache</span><span class="o">.</span><span class="n">getline</span><span class="p">(</span><span class="n">linecache</span><span class="o">.</span><span class="vm">__file__</span><span class="p">,</span> <span class="mi">8</span><span class="p">)</span>
<span class="go">&#39;import sys\n&#39;</span>
</pre></div>
</div>
</section>


            <div class="clearer"></div>
          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>