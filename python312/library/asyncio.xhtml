<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" /><meta name="viewport" content="width=device-width, initial-scale=1" />
<meta property="og:title" content="asyncio --- 异步 I/O" />
<meta property="og:type" content="website" />
<meta property="og:url" content="https://docs.python.org/3/library/asyncio.xhtml" />
<meta property="og:site_name" content="Python documentation" />
<meta property="og:description" content="Hello World!: asyncio 是用来编写 并发 代码的库，使用 async/await 语法。 asyncio 被用作多个提供高性能 Python 异步框架的基础，包括网络和网站服务，数据库连接库，分布式任务队列等等。 asyncio 往往是构建 IO 密集型和高层级 结构化 网络代码的最佳选择。 asyncio 提供一组 高层级 API 用于: 并发地 运行 Python 协..." />
<meta property="og:image" content="https://docs.python.org/3/_static/og-image.png" />
<meta property="og:image:alt" content="Python documentation" />
<meta name="description" content="Hello World!: asyncio 是用来编写 并发 代码的库，使用 async/await 语法。 asyncio 被用作多个提供高性能 Python 异步框架的基础，包括网络和网站服务，数据库连接库，分布式任务队列等等。 asyncio 往往是构建 IO 密集型和高层级 结构化 网络代码的最佳选择。 asyncio 提供一组 高层级 API 用于: 并发地 运行 Python 协..." />
<meta property="og:image:width" content="200" />
<meta property="og:image:height" content="200" />
<meta name="theme-color" content="#3776ab" />

    <title>asyncio --- 异步 I/O</title>
    <link rel="stylesheet" type="text/css" href="../_static/pygments.css" />
    <link rel="stylesheet" type="text/css" href="../_static/epub.css" />
    <link rel="canonical" href="https://docs.python.org/3/library/asyncio.html" />
    
      
    

    
    <style>
      @media only screen {
        table.full-width-table {
            width: 100%;
        }
      }
    </style>
 

  </head><body>


    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <section id="module-asyncio">
<span id="asyncio-asynchronous-i-o"></span><h1><code class="xref py py-mod docutils literal notranslate"><span class="pre">asyncio</span></code> --- 异步 I/O</h1>
<hr class="docutils" />
<aside class="sidebar">
<p class="sidebar-title">Hello World!</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="kn">import</span> <span class="nn">asyncio</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Hello ...&#39;</span><span class="p">)</span>
    <span class="k">await</span> <span class="n">asyncio</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;... World!&#39;</span><span class="p">)</span>

<span class="n">asyncio</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="n">main</span><span class="p">())</span>
</pre></div>
</div>
</aside>
<p>asyncio 是用来编写 <strong>并发</strong> 代码的库，使用 <strong>async/await</strong> 语法。</p>
<p>asyncio 被用作多个提供高性能 Python 异步框架的基础，包括网络和网站服务，数据库连接库，分布式任务队列等等。</p>
<p>asyncio 往往是构建 IO 密集型和高层级 <strong>结构化</strong> 网络代码的最佳选择。</p>
<p>asyncio 提供一组 <strong>高层级</strong> API 用于:</p>
<ul class="simple">
<li><p>并发地 <a class="reference internal" href="asyncio-task.xhtml#coroutine"><span class="std std-ref">运行 Python 协程</span></a> 并对其执行过程实现完全控制;</p></li>
<li><p>执行 <a class="reference internal" href="asyncio-stream.xhtml#asyncio-streams"><span class="std std-ref">网络 IO 和 IPC</span></a>;</p></li>
<li><p>控制 <a class="reference internal" href="asyncio-subprocess.xhtml#asyncio-subprocess"><span class="std std-ref">子进程</span></a>;</p></li>
<li><p>通过 <a class="reference internal" href="asyncio-queue.xhtml#asyncio-queues"><span class="std std-ref">队列</span></a> 实现分布式任务;</p></li>
<li><p><a class="reference internal" href="asyncio-sync.xhtml#asyncio-sync"><span class="std std-ref">同步</span></a> 并发代码;</p></li>
</ul>
<p>此外，还有一些 <strong>低层级</strong> API 以支持 <em>库和框架的开发者</em> 实现:</p>
<ul class="simple">
<li><p>创建和管理 <a class="reference internal" href="asyncio-eventloop.xhtml#asyncio-event-loop"><span class="std std-ref">事件循环</span></a>，它提供用于 <a class="reference internal" href="asyncio-eventloop.xhtml#loop-create-server"><span class="std std-ref">连接网络</span></a>, 运行 <a class="reference internal" href="asyncio-eventloop.xhtml#loop-subprocess-exec"><span class="std std-ref">子进程</span></a>, 处理 <a class="reference internal" href="asyncio-eventloop.xhtml#loop-add-signal-handler"><span class="std std-ref">OS 信号</span></a> 等功能的异步 API；</p></li>
<li><p>使用 <a class="reference internal" href="asyncio-protocol.xhtml#asyncio-transports-protocols"><span class="std std-ref">transports</span></a> 实现高效率协议;</p></li>
<li><p>通过 async/await 语法 <a class="reference internal" href="asyncio-future.xhtml#asyncio-futures"><span class="std std-ref">桥接</span></a> 基于回调的库和代码。</p></li>
</ul>
<p id="asyncio-cli">你可以在 REPL 中尝试使用 <code class="docutils literal notranslate"><span class="pre">asyncio</span></code> 并发上下文:</p>
<div class="highlight-pycon notranslate"><div class="highlight"><pre><span></span><span class="go">$ python -m asyncio</span>
<span class="go">asyncio REPL ...</span>
<span class="go">Use &quot;await&quot; directly instead of &quot;asyncio.run()&quot;.</span>
<span class="go">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</span>
<span class="gp">&gt;&gt;&gt; </span><span class="kn">import</span> <span class="nn">asyncio</span>
<span class="gp">&gt;&gt;&gt; </span><span class="k">await</span> <span class="n">asyncio</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="n">result</span><span class="o">=</span><span class="s1">&#39;hello&#39;</span><span class="p">)</span>
<span class="go">&#39;hello&#39;</span>
</pre></div>
</div>
<div class="availability docutils container">
<p><a class="reference internal" href="intro.xhtml#availability"><span class="std std-ref">可用性</span></a>: 非 Emscripten，非 WASI。</p>
<p>此模块在 WebAssembly 平台 <code class="docutils literal notranslate"><span class="pre">wasm32-emscripten</span></code> 和 <code class="docutils literal notranslate"><span class="pre">wasm32-wasi</span></code> 上不适用或不可用。 请参阅 <a class="reference internal" href="intro.xhtml#wasm-availability"><span class="std std-ref">WebAssembly 平台</span></a> 了解详情。</p>
</div>
<p class="rubric">参考</p>
<div class="toctree-wrapper compound">
<p class="caption" role="heading"><span class="caption-text">高层级 API</span></p>
<ul>
<li class="toctree-l1"><a class="reference internal" href="asyncio-runner.xhtml">运行器</a></li>
<li class="toctree-l1"><a class="reference internal" href="asyncio-task.xhtml">协程与任务</a></li>
<li class="toctree-l1"><a class="reference internal" href="asyncio-stream.xhtml">流</a></li>
<li class="toctree-l1"><a class="reference internal" href="asyncio-sync.xhtml">同步原语</a></li>
<li class="toctree-l1"><a class="reference internal" href="asyncio-subprocess.xhtml">子进程集</a></li>
<li class="toctree-l1"><a class="reference internal" href="asyncio-queue.xhtml">队列集</a></li>
<li class="toctree-l1"><a class="reference internal" href="asyncio-exceptions.xhtml">异常</a></li>
</ul>
</div>
<div class="toctree-wrapper compound">
<p class="caption" role="heading"><span class="caption-text">低层级 API</span></p>
<ul>
<li class="toctree-l1"><a class="reference internal" href="asyncio-eventloop.xhtml">事件循环</a></li>
<li class="toctree-l1"><a class="reference internal" href="asyncio-future.xhtml">Futures</a></li>
<li class="toctree-l1"><a class="reference internal" href="asyncio-protocol.xhtml">传输和协议</a></li>
<li class="toctree-l1"><a class="reference internal" href="asyncio-policy.xhtml">策略</a></li>
<li class="toctree-l1"><a class="reference internal" href="asyncio-platforms.xhtml">平台支持</a></li>
<li class="toctree-l1"><a class="reference internal" href="asyncio-extending.xhtml">扩展</a></li>
</ul>
</div>
<div class="toctree-wrapper compound">
<p class="caption" role="heading"><span class="caption-text">指南与教程</span></p>
<ul>
<li class="toctree-l1"><a class="reference internal" href="asyncio-api-index.xhtml">高层级 API 索引</a></li>
<li class="toctree-l1"><a class="reference internal" href="asyncio-llapi-index.xhtml">低层级 API 索引</a></li>
<li class="toctree-l1"><a class="reference internal" href="asyncio-dev.xhtml">用 asyncio 开发</a></li>
</ul>
</div>
<div class="admonition note">
<p class="admonition-title">备注</p>
<p>asyncio 的源代码可以在 <a class="reference external" href="https://github.com/python/cpython/tree/3.12/Lib/asyncio/">Lib/asyncio/</a><span class="link-target"> [https://github.com/python/cpython/tree/3.12/Lib/asyncio/]</span> 中找到。</p>
</div>
</section>


            <div class="clearer"></div>
          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>