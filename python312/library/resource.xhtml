<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" /><meta name="viewport" content="width=device-width, initial-scale=1" />
<meta property="og:title" content="resource --- 资源使用信息" />
<meta property="og:type" content="website" />
<meta property="og:url" content="https://docs.python.org/3/library/resource.xhtml" />
<meta property="og:site_name" content="Python documentation" />
<meta property="og:description" content="该模块提供了测量和控制程序所利用的系统资源的基本机制。 可用性: Unix, 非 Emscripten, 非 WASI。 符号常量被用来指定特定的系统资源，并要求获得关于当前进程或其子进程的使用信息。 当系统调用失败时，会触发一个 OSError 。 资源限制: 资源的使用可以通过下面描述的 setrlimit() 函数来限制。每个资源都被一对限制所控制：一个软限制和一个硬限制。软限制是当前..." />
<meta property="og:image" content="https://docs.python.org/3/_static/og-image.png" />
<meta property="og:image:alt" content="Python documentation" />
<meta name="description" content="该模块提供了测量和控制程序所利用的系统资源的基本机制。 可用性: Unix, 非 Emscripten, 非 WASI。 符号常量被用来指定特定的系统资源，并要求获得关于当前进程或其子进程的使用信息。 当系统调用失败时，会触发一个 OSError 。 资源限制: 资源的使用可以通过下面描述的 setrlimit() 函数来限制。每个资源都被一对限制所控制：一个软限制和一个硬限制。软限制是当前..." />
<meta property="og:image:width" content="200" />
<meta property="og:image:height" content="200" />
<meta name="theme-color" content="#3776ab" />

    <title>resource --- 资源使用信息</title>
    <link rel="stylesheet" type="text/css" href="../_static/pygments.css" />
    <link rel="stylesheet" type="text/css" href="../_static/epub.css" />
    <link rel="canonical" href="https://docs.python.org/3/library/resource.html" />
    
      
    

    
    <style>
      @media only screen {
        table.full-width-table {
            width: 100%;
        }
      }
    </style>
 

  </head><body>


    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <section id="module-resource">
<span id="resource-resource-usage-information"></span><h1><code class="xref py py-mod docutils literal notranslate"><span class="pre">resource</span></code> --- 资源使用信息</h1>
<hr class="docutils" />
<p>该模块提供了测量和控制程序所利用的系统资源的基本机制。</p>
<div class="availability docutils container">
<p><a class="reference internal" href="intro.xhtml#availability"><span class="std std-ref">可用性</span></a>: Unix, 非 Emscripten, 非 WASI。</p>
</div>
<p>符号常量被用来指定特定的系统资源，并要求获得关于当前进程或其子进程的使用信息。</p>
<p>当系统调用失败时，会触发一个 <a class="reference internal" href="exceptions.xhtml#OSError" title="OSError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">OSError</span></code></a> 。</p>
<dl class="py exception">
<dt class="sig sig-object py" id="resource.error">
<em class="property"><span class="pre">exception</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">resource.</span></span><span class="sig-name descname"><span class="pre">error</span></span></dt>
<dd><p>一个被弃用的 <a class="reference internal" href="exceptions.xhtml#OSError" title="OSError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">OSError</span></code></a> 的别名。</p>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.3 版本发生变更: </span>根据 <span class="target" id="index-2"></span><a class="pep reference external" href="https://peps.python.org/pep-3151/"><strong>PEP 3151</strong></a><span class="link-target"> [https://peps.python.org/pep-3151/]</span>，这个类是 <a class="reference internal" href="exceptions.xhtml#OSError" title="OSError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">OSError</span></code></a> 的别名。</p>
</div>
</dd></dl>

<section id="resource-limits">
<h2>资源限制</h2>
<p>资源的使用可以通过下面描述的 <a class="reference internal" href="#resource.setrlimit" title="resource.setrlimit"><code class="xref py py-func docutils literal notranslate"><span class="pre">setrlimit()</span></code></a> 函数来限制。每个资源都被一对限制所控制：一个软限制和一个硬限制。软限制是当前的限制，并且可以由一个进程随着时间的推移而降低或提高。软限制永远不能超过硬限制。硬限制可以降低到大于软限制的任何数值，但不能提高。（只有拥有超级用户有效UID的进程才能提高硬限制。)</p>
<p>可以被限制的具体资源取决于系统。它们在 man <em class="manpage"><a class="manpage reference external" href="https://manpages.debian.org/getrlimit(2)">getrlimit(2)</a><span class="link-target"> [https://manpages.debian.org/getrlimit(2)]</span></em> 中描述。 下面列出的资源在底层操作系统支持的情况下被支持；那些不能被操作系统检查或控制的资源在本模块中没有为这些平台定义。</p>
<dl class="py data">
<dt class="sig sig-object py" id="resource.RLIM_INFINITY">
<span class="sig-prename descclassname"><span class="pre">resource.</span></span><span class="sig-name descname"><span class="pre">RLIM_INFINITY</span></span></dt>
<dd><p>用来表示无限资源的极限的常数。</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="resource.getrlimit">
<span class="sig-prename descclassname"><span class="pre">resource.</span></span><span class="sig-name descname"><span class="pre">getrlimit</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">resource</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>返回一个包含 <em>resource</em> 当前软限制和硬限制的元组。如果指定了一个无效的资源，则触发 <a class="reference internal" href="exceptions.xhtml#ValueError" title="ValueError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">ValueError</span></code></a> ，如果底层系统调用意外失败，则引发 <a class="reference internal" href="#resource.error" title="resource.error"><code class="xref py py-exc docutils literal notranslate"><span class="pre">error</span></code></a> 。</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="resource.setrlimit">
<span class="sig-prename descclassname"><span class="pre">resource.</span></span><span class="sig-name descname"><span class="pre">setrlimit</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">resource</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">limits</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>设置 <em>resource</em> 的新的消耗极限。参数 <em>limits</em> 必须是一个由两个整数组成的元组 <code class="docutils literal notranslate"><span class="pre">(soft,</span> <span class="pre">hard)</span></code> ，描述了新的限制。 <a class="reference internal" href="#resource.RLIM_INFINITY" title="resource.RLIM_INFINITY"><code class="xref py py-data docutils literal notranslate"><span class="pre">RLIM_INFINITY</span></code></a> 的值可以用来请求一个无限的限制。</p>
<p>如果指定了一个无效的资源，如果新的软限制超过了硬限制，或者如果一个进程试图提高它的硬限制，将触发 <a class="reference internal" href="exceptions.xhtml#ValueError" title="ValueError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">ValueError</span></code></a> 。当资源的硬限制或系统限制不是无限时，指定一个 <a class="reference internal" href="#resource.RLIM_INFINITY" title="resource.RLIM_INFINITY"><code class="xref py py-data docutils literal notranslate"><span class="pre">RLIM_INFINITY</span></code></a> 的限制将导致 <a class="reference internal" href="exceptions.xhtml#ValueError" title="ValueError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">ValueError</span></code></a> 。 一个有效 UID 为超级用户的进程可以请求任何有效的限制值，包括无限，但如果请求的限制超过了系统规定的限制，则仍然会产生 <a class="reference internal" href="exceptions.xhtml#ValueError" title="ValueError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">ValueError</span></code></a> 。</p>
<p>如果底层系统调用失败， <code class="docutils literal notranslate"><span class="pre">setrlimit</span></code> 也可能触发 <a class="reference internal" href="#resource.error" title="resource.error"><code class="xref py py-exc docutils literal notranslate"><span class="pre">error</span></code></a> 。</p>
<p>VxWorks只支持设置 <a class="reference internal" href="#resource.RLIMIT_NOFILE" title="resource.RLIMIT_NOFILE"><code class="xref py py-data docutils literal notranslate"><span class="pre">RLIMIT_NOFILE</span></code></a> 。</p>
<p class="audit-hook">触发一个 <a class="reference internal" href="sys.xhtml#auditing"><span class="std std-ref">auditing event</span></a> <code class="docutils literal notranslate"><span class="pre">resource.setrlimit</span></code> 使用参数  <code class="docutils literal notranslate"><span class="pre">resource</span></code> ， <code class="docutils literal notranslate"><span class="pre">limits</span></code> 。</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="resource.prlimit">
<span class="sig-prename descclassname"><span class="pre">resource.</span></span><span class="sig-name descname"><span class="pre">prlimit</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">pid</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">resource</span></span></em><span class="optional">[</span>, <em class="sig-param"><span class="n"><span class="pre">limits</span></span></em><span class="optional">]</span><span class="sig-paren">)</span></dt>
<dd><p>将 <a class="reference internal" href="#resource.setrlimit" title="resource.setrlimit"><code class="xref py py-func docutils literal notranslate"><span class="pre">setrlimit()</span></code></a> 和 <a class="reference internal" href="#resource.getrlimit" title="resource.getrlimit"><code class="xref py py-func docutils literal notranslate"><span class="pre">getrlimit()</span></code></a> 合并为一个函数，支持获取和设置任意进程的资源限制。如果 <em>pid</em> 为0，那么该调用适用于当前进程。 <em>resource</em> 和 <em>limits</em> 的含义与 <a class="reference internal" href="#resource.setrlimit" title="resource.setrlimit"><code class="xref py py-func docutils literal notranslate"><span class="pre">setrlimit()</span></code></a> 相同，只是 <em>limits</em> 是可选的。</p>
<p>当 <em>limits</em> 没有给出时，该函数返回进程 <em>pid</em> 的 <em>resource</em> 限制。当 <em>limits</em> 被给定时，进程的 <em>resource</em> 限制被设置，并返回以前的资源限制。</p>
<p>当 <em>pid</em> 找不到时，触发 <a class="reference internal" href="exceptions.xhtml#ProcessLookupError" title="ProcessLookupError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">ProcessLookupError</span></code></a> ；当用户没有进程的 <code class="docutils literal notranslate"><span class="pre">CAP_SYS_RESOURCE</span></code> 时，触发 <a class="reference internal" href="exceptions.xhtml#PermissionError" title="PermissionError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">PermissionError</span></code></a> 。</p>
<p class="audit-hook">触发一个 <a class="reference internal" href="sys.xhtml#auditing"><span class="std std-ref">auditing event</span></a> <code class="docutils literal notranslate"><span class="pre">resource.prlimit</span></code> 带有参数 <code class="docutils literal notranslate"><span class="pre">pid</span></code> ， <code class="docutils literal notranslate"><span class="pre">resource</span></code> ， <code class="docutils literal notranslate"><span class="pre">limits</span></code> 。</p>
<div class="availability docutils container">
<p><a class="reference internal" href="intro.xhtml#availability"><span class="std std-ref">可用性</span></a>: Linux &gt;= 2.6.36 且 glibc &gt;= 2.13。</p>
</div>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.4.</span></p>
</div>
</dd></dl>

<p>这些符号定义了资源的消耗可以通过下面描述的 <a class="reference internal" href="#resource.setrlimit" title="resource.setrlimit"><code class="xref py py-func docutils literal notranslate"><span class="pre">setrlimit()</span></code></a> 和 <a class="reference internal" href="#resource.getrlimit" title="resource.getrlimit"><code class="xref py py-func docutils literal notranslate"><span class="pre">getrlimit()</span></code></a> 函数来控制。这些符号的值正是 C 程序所使用的常数。</p>
<p>Unix man 页面 <em class="manpage"><a class="manpage reference external" href="https://manpages.debian.org/getrlimit(2)">getrlimit(2)</a><span class="link-target"> [https://manpages.debian.org/getrlimit(2)]</span></em> 列出了可用的资源。注意，并非所有系统都使用相同的符号或相同的值来表示相同的资源。本模块并不试图掩盖平台的差异——没有为某一平台定义的符号在该平台上将无法从本模块中获得。</p>
<dl class="py data">
<dt class="sig sig-object py" id="resource.RLIMIT_CORE">
<span class="sig-prename descclassname"><span class="pre">resource.</span></span><span class="sig-name descname"><span class="pre">RLIMIT_CORE</span></span></dt>
<dd><p>当前进程可以创建的核心文件的最大大小（以字节为单位）。如果需要更大的核心文件来包含整个进程的镜像，这可能会导致创建一个部分核心文件。</p>
</dd></dl>

<dl class="py data">
<dt class="sig sig-object py" id="resource.RLIMIT_CPU">
<span class="sig-prename descclassname"><span class="pre">resource.</span></span><span class="sig-name descname"><span class="pre">RLIMIT_CPU</span></span></dt>
<dd><p>一个进程可以使用的最大处理器时间（以秒为单位）。如果超过了这个限制，一个 <code class="xref py py-const docutils literal notranslate"><span class="pre">SIGXCPU</span></code> 信号将被发送给进程。（参见 <a class="reference internal" href="signal.xhtml#module-signal" title="signal: Set handlers for asynchronous events."><code class="xref py py-mod docutils literal notranslate"><span class="pre">signal</span></code></a> 模块文档，了解如何捕捉这个信号并做一些有用的事情，例如，将打开的文件刷新到磁盘上）。</p>
</dd></dl>

<dl class="py data">
<dt class="sig sig-object py" id="resource.RLIMIT_FSIZE">
<span class="sig-prename descclassname"><span class="pre">resource.</span></span><span class="sig-name descname"><span class="pre">RLIMIT_FSIZE</span></span></dt>
<dd><p>进程可能创建的文件的最大大小。</p>
</dd></dl>

<dl class="py data">
<dt class="sig sig-object py" id="resource.RLIMIT_DATA">
<span class="sig-prename descclassname"><span class="pre">resource.</span></span><span class="sig-name descname"><span class="pre">RLIMIT_DATA</span></span></dt>
<dd><p>进程的堆的最大大小（以字节为单位）。</p>
</dd></dl>

<dl class="py data">
<dt class="sig sig-object py" id="resource.RLIMIT_STACK">
<span class="sig-prename descclassname"><span class="pre">resource.</span></span><span class="sig-name descname"><span class="pre">RLIMIT_STACK</span></span></dt>
<dd><p>当前进程的调用堆栈的最大大小（字节）。 这只影响到多线程进程中主线程的堆栈。</p>
</dd></dl>

<dl class="py data">
<dt class="sig sig-object py" id="resource.RLIMIT_RSS">
<span class="sig-prename descclassname"><span class="pre">resource.</span></span><span class="sig-name descname"><span class="pre">RLIMIT_RSS</span></span></dt>
<dd><p>应该提供给进程的最大常驻内存大小。</p>
</dd></dl>

<dl class="py data">
<dt class="sig sig-object py" id="resource.RLIMIT_NPROC">
<span class="sig-prename descclassname"><span class="pre">resource.</span></span><span class="sig-name descname"><span class="pre">RLIMIT_NPROC</span></span></dt>
<dd><p>当前进程可能创建的最大进程数。</p>
</dd></dl>

<dl class="py data">
<dt class="sig sig-object py" id="resource.RLIMIT_NOFILE">
<span class="sig-prename descclassname"><span class="pre">resource.</span></span><span class="sig-name descname"><span class="pre">RLIMIT_NOFILE</span></span></dt>
<dd><p>当前进程打开的文件描述符的最大数量。</p>
</dd></dl>

<dl class="py data">
<dt class="sig sig-object py" id="resource.RLIMIT_OFILE">
<span class="sig-prename descclassname"><span class="pre">resource.</span></span><span class="sig-name descname"><span class="pre">RLIMIT_OFILE</span></span></dt>
<dd><p>BSD 对 <a class="reference internal" href="#resource.RLIMIT_NOFILE" title="resource.RLIMIT_NOFILE"><code class="xref py py-const docutils literal notranslate"><span class="pre">RLIMIT_NOFILE</span></code></a> 的命名。</p>
</dd></dl>

<dl class="py data">
<dt class="sig sig-object py" id="resource.RLIMIT_MEMLOCK">
<span class="sig-prename descclassname"><span class="pre">resource.</span></span><span class="sig-name descname"><span class="pre">RLIMIT_MEMLOCK</span></span></dt>
<dd><p>可能被锁定在内存中的最大地址空间。</p>
</dd></dl>

<dl class="py data">
<dt class="sig sig-object py" id="resource.RLIMIT_VMEM">
<span class="sig-prename descclassname"><span class="pre">resource.</span></span><span class="sig-name descname"><span class="pre">RLIMIT_VMEM</span></span></dt>
<dd><p>进程可能占用的最大映射内存区域。</p>
<div class="availability docutils container">
<p><a class="reference internal" href="intro.xhtml#availability"><span class="std std-ref">可用性</span></a>: FreeBSD &gt;= 11。</p>
</div>
</dd></dl>

<dl class="py data">
<dt class="sig sig-object py" id="resource.RLIMIT_AS">
<span class="sig-prename descclassname"><span class="pre">resource.</span></span><span class="sig-name descname"><span class="pre">RLIMIT_AS</span></span></dt>
<dd><p>进程可能占用的地址空间的最大区域（以字节为单位）。</p>
</dd></dl>

<dl class="py data">
<dt class="sig sig-object py" id="resource.RLIMIT_MSGQUEUE">
<span class="sig-prename descclassname"><span class="pre">resource.</span></span><span class="sig-name descname"><span class="pre">RLIMIT_MSGQUEUE</span></span></dt>
<dd><p>可分配给 POSIX 消息队列的字节数。</p>
<div class="availability docutils container">
<p><a class="reference internal" href="intro.xhtml#availability"><span class="std std-ref">可用性</span></a>: Linux &gt;= 2.6.8。</p>
</div>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.4.</span></p>
</div>
</dd></dl>

<dl class="py data">
<dt class="sig sig-object py" id="resource.RLIMIT_NICE">
<span class="sig-prename descclassname"><span class="pre">resource.</span></span><span class="sig-name descname"><span class="pre">RLIMIT_NICE</span></span></dt>
<dd><p>进程的 Nice 级别的上限（计算为 20 - rlim_cur ）。</p>
<div class="availability docutils container">
<p><a class="reference internal" href="intro.xhtml#availability"><span class="std std-ref">可用性</span></a>: Linux &gt;= 2.6.12。</p>
</div>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.4.</span></p>
</div>
</dd></dl>

<dl class="py data">
<dt class="sig sig-object py" id="resource.RLIMIT_RTPRIO">
<span class="sig-prename descclassname"><span class="pre">resource.</span></span><span class="sig-name descname"><span class="pre">RLIMIT_RTPRIO</span></span></dt>
<dd><p>实时优先级的上限。</p>
<div class="availability docutils container">
<p><a class="reference internal" href="intro.xhtml#availability"><span class="std std-ref">可用性</span></a>: Linux &gt;= 2.6.12。</p>
</div>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.4.</span></p>
</div>
</dd></dl>

<dl class="py data">
<dt class="sig sig-object py" id="resource.RLIMIT_RTTIME">
<span class="sig-prename descclassname"><span class="pre">resource.</span></span><span class="sig-name descname"><span class="pre">RLIMIT_RTTIME</span></span></dt>
<dd><p>在实时调度下，一个进程在不进行阻塞性系统调用的情况下，可以花费的 CPU 时间限制（以微秒计）。</p>
<div class="availability docutils container">
<p><a class="reference internal" href="intro.xhtml#availability"><span class="std std-ref">可用性</span></a>： Linux &gt;= 2.6.25。</p>
</div>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.4.</span></p>
</div>
</dd></dl>

<dl class="py data">
<dt class="sig sig-object py" id="resource.RLIMIT_SIGPENDING">
<span class="sig-prename descclassname"><span class="pre">resource.</span></span><span class="sig-name descname"><span class="pre">RLIMIT_SIGPENDING</span></span></dt>
<dd><p>进程可能排队的信号数量。</p>
<div class="availability docutils container">
<p><a class="reference internal" href="intro.xhtml#availability"><span class="std std-ref">可用性</span></a>: Linux &gt;= 2.6.8。</p>
</div>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.4.</span></p>
</div>
</dd></dl>

<dl class="py data">
<dt class="sig sig-object py" id="resource.RLIMIT_SBSIZE">
<span class="sig-prename descclassname"><span class="pre">resource.</span></span><span class="sig-name descname"><span class="pre">RLIMIT_SBSIZE</span></span></dt>
<dd><p>这个用户使用的套接字缓冲区的最大大小（字节数）。这限制了这个用户在任何时候都可以持有的网络内存数量，因此也限制了 mbufs 的数量。</p>
<div class="availability docutils container">
<p><a class="reference internal" href="intro.xhtml#availability"><span class="std std-ref">可用性</span></a>: FreeBSD。</p>
</div>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.4.</span></p>
</div>
</dd></dl>

<dl class="py data">
<dt class="sig sig-object py" id="resource.RLIMIT_SWAP">
<span class="sig-prename descclassname"><span class="pre">resource.</span></span><span class="sig-name descname"><span class="pre">RLIMIT_SWAP</span></span></dt>
<dd><p>这个用户 ID 的所有进程可能保留或使用的交换空间的大小上限（以字节数表示）。 此限制只有在 vm.overcommit sysctl 的 1 号比特位被设置时才会生效。 请参阅 <a class="reference external" href="https://man.freebsd.org/cgi/man.cgi?query=tuning&amp;sektion=7">tuning(7)</a><span class="link-target"> [https://man.freebsd.org/cgi/man.cgi?query=tuning&amp;sektion=7]</span> 获取该 sysctl 的完整描述。</p>
<div class="availability docutils container">
<p><a class="reference internal" href="intro.xhtml#availability"><span class="std std-ref">可用性</span></a>: FreeBSD。</p>
</div>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.4.</span></p>
</div>
</dd></dl>

<dl class="py data">
<dt class="sig sig-object py" id="resource.RLIMIT_NPTS">
<span class="sig-prename descclassname"><span class="pre">resource.</span></span><span class="sig-name descname"><span class="pre">RLIMIT_NPTS</span></span></dt>
<dd><p>该用户 ID 创建的伪终端的最大数量。</p>
<div class="availability docutils container">
<p><a class="reference internal" href="intro.xhtml#availability"><span class="std std-ref">可用性</span></a>: FreeBSD。</p>
</div>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.4.</span></p>
</div>
</dd></dl>

<dl class="py data">
<dt class="sig sig-object py" id="resource.RLIMIT_KQUEUES">
<span class="sig-prename descclassname"><span class="pre">resource.</span></span><span class="sig-name descname"><span class="pre">RLIMIT_KQUEUES</span></span></dt>
<dd><p>这个用户 ID 被允许创建的最大 kqueue 数量。</p>
<div class="availability docutils container">
<p><a class="reference internal" href="intro.xhtml#availability"><span class="std std-ref">可用性</span></a>: FreeBSD &gt;= 11。</p>
</div>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.10.</span></p>
</div>
</dd></dl>

</section>
<section id="resource-usage">
<h2>资源用量</h2>
<p>这些函数被用来检索资源使用信息。</p>
<dl class="py function">
<dt class="sig sig-object py" id="resource.getrusage">
<span class="sig-prename descclassname"><span class="pre">resource.</span></span><span class="sig-name descname"><span class="pre">getrusage</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">who</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>此函数返回一个描述当前进程或其子进程所消耗的资源的对象，它由 <em>who</em> 形参指定。 <em>who</em> 形参应当使用下面介绍的 <code class="xref py py-const docutils literal notranslate"><span class="pre">RUSAGE_*</span></code> 常量之一来指定。</p>
<p>一个简单的示例：</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="kn">from</span> <span class="nn">resource</span> <span class="kn">import</span> <span class="o">*</span>
<span class="kn">import</span> <span class="nn">time</span>

<span class="c1"># a non CPU-bound task</span>
<span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">getrusage</span><span class="p">(</span><span class="n">RUSAGE_SELF</span><span class="p">))</span>

<span class="c1"># a CPU-bound task</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10</span> <span class="o">**</span> <span class="mi">8</span><span class="p">):</span>
   <span class="n">_</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">+</span> <span class="mi">1</span>
<span class="nb">print</span><span class="p">(</span><span class="n">getrusage</span><span class="p">(</span><span class="n">RUSAGE_SELF</span><span class="p">))</span>
</pre></div>
</div>
<p>返回值的字段分别描述了某一特定系统资源的使用情况，例如，在用户模式下运行的时间或进程从主内存中换出的次数。有些值取决于内部的时钟周期，例如进程使用的内存量。</p>
<p>为了向后兼容，返回值也可以作为一个 16 个元素的元组来访问。</p>
<p>返回值中的 <code class="xref py py-attr docutils literal notranslate"><span class="pre">ru_utime</span></code> 和 <code class="xref py py-attr docutils literal notranslate"><span class="pre">ru_stime</span></code> 字段是浮点值，分别代表在用户模式下执行的时间和在系统模式下执行的时间。其余的值是整数。关于这些值的详细信息，请查阅 <em class="manpage"><a class="manpage reference external" href="https://manpages.debian.org/getrusage(2)">getrusage(2)</a><span class="link-target"> [https://manpages.debian.org/getrusage(2)]</span></em> man page 。这里介绍一个简短的摘要。</p>
<table class="docutils align-default">
<thead>
<tr class="row-odd"><th class="head"><p>索引</p></th>
<th class="head"><p>域</p></th>
<th class="head"><p>资源</p></th>
</tr>
</thead>
<tbody>
<tr class="row-even"><td><p><code class="docutils literal notranslate"><span class="pre">0</span></code></p></td>
<td><p><code class="xref py py-attr docutils literal notranslate"><span class="pre">ru_utime</span></code></p></td>
<td><p>用户模式下的时间（浮点数秒）</p></td>
</tr>
<tr class="row-odd"><td><p><code class="docutils literal notranslate"><span class="pre">1</span></code></p></td>
<td><p><code class="xref py py-attr docutils literal notranslate"><span class="pre">ru_stime</span></code></p></td>
<td><p>系统模式下的时间（浮点数秒）</p></td>
</tr>
<tr class="row-even"><td><p><code class="docutils literal notranslate"><span class="pre">2</span></code></p></td>
<td><p><code class="xref py py-attr docutils literal notranslate"><span class="pre">ru_maxrss</span></code></p></td>
<td><p>最大的常驻内存大小</p></td>
</tr>
<tr class="row-odd"><td><p><code class="docutils literal notranslate"><span class="pre">3</span></code></p></td>
<td><p><code class="xref py py-attr docutils literal notranslate"><span class="pre">ru_ixrss</span></code></p></td>
<td><p>共享内存大小</p></td>
</tr>
<tr class="row-even"><td><p><code class="docutils literal notranslate"><span class="pre">4</span></code></p></td>
<td><p><code class="xref py py-attr docutils literal notranslate"><span class="pre">ru_idrss</span></code></p></td>
<td><p>未共享的内存大小</p></td>
</tr>
<tr class="row-odd"><td><p><code class="docutils literal notranslate"><span class="pre">5</span></code></p></td>
<td><p><code class="xref py py-attr docutils literal notranslate"><span class="pre">ru_isrss</span></code></p></td>
<td><p>未共享的堆栈大小</p></td>
</tr>
<tr class="row-even"><td><p><code class="docutils literal notranslate"><span class="pre">6</span></code></p></td>
<td><p><code class="xref py py-attr docutils literal notranslate"><span class="pre">ru_minflt</span></code></p></td>
<td><p>不需要 I/O 的页面故障数</p></td>
</tr>
<tr class="row-odd"><td><p><code class="docutils literal notranslate"><span class="pre">7</span></code></p></td>
<td><p><code class="xref py py-attr docutils literal notranslate"><span class="pre">ru_majflt</span></code></p></td>
<td><p>需要 I/O 的页面故障数</p></td>
</tr>
<tr class="row-even"><td><p><code class="docutils literal notranslate"><span class="pre">8</span></code></p></td>
<td><p><code class="xref py py-attr docutils literal notranslate"><span class="pre">ru_nswap</span></code></p></td>
<td><p>swap out 的数量</p></td>
</tr>
<tr class="row-odd"><td><p><code class="docutils literal notranslate"><span class="pre">9</span></code></p></td>
<td><p><code class="xref py py-attr docutils literal notranslate"><span class="pre">ru_inblock</span></code></p></td>
<td><p>块输入操作数</p></td>
</tr>
<tr class="row-even"><td><p><code class="docutils literal notranslate"><span class="pre">10</span></code></p></td>
<td><p><code class="xref py py-attr docutils literal notranslate"><span class="pre">ru_oublock</span></code></p></td>
<td><p>块输出操作数</p></td>
</tr>
<tr class="row-odd"><td><p><code class="docutils literal notranslate"><span class="pre">11</span></code></p></td>
<td><p><code class="xref py py-attr docutils literal notranslate"><span class="pre">ru_msgsnd</span></code></p></td>
<td><p>发送消息数</p></td>
</tr>
<tr class="row-even"><td><p><code class="docutils literal notranslate"><span class="pre">12</span></code></p></td>
<td><p><code class="xref py py-attr docutils literal notranslate"><span class="pre">ru_msgrcv</span></code></p></td>
<td><p>收到消息数</p></td>
</tr>
<tr class="row-odd"><td><p><code class="docutils literal notranslate"><span class="pre">13</span></code></p></td>
<td><p><code class="xref py py-attr docutils literal notranslate"><span class="pre">ru_nsignals</span></code></p></td>
<td><p>收到信号数</p></td>
</tr>
<tr class="row-even"><td><p><code class="docutils literal notranslate"><span class="pre">14</span></code></p></td>
<td><p><code class="xref py py-attr docutils literal notranslate"><span class="pre">ru_nvcsw</span></code></p></td>
<td><p>主动上下文切换</p></td>
</tr>
<tr class="row-odd"><td><p><code class="docutils literal notranslate"><span class="pre">15</span></code></p></td>
<td><p><code class="xref py py-attr docutils literal notranslate"><span class="pre">ru_nivcsw</span></code></p></td>
<td><p>被动上下文切换</p></td>
</tr>
</tbody>
</table>
<p>如果指定了一个无效的 <em>who</em> 参数，这个函数将触发一个 <a class="reference internal" href="exceptions.xhtml#ValueError" title="ValueError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">ValueError</span></code></a> 。在特殊情况下，它也可能触发 <a class="reference internal" href="#resource.error" title="resource.error"><code class="xref py py-exc docutils literal notranslate"><span class="pre">error</span></code></a> 异常。</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="resource.getpagesize">
<span class="sig-prename descclassname"><span class="pre">resource.</span></span><span class="sig-name descname"><span class="pre">getpagesize</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>返回一个系统页面的字节数。（这不需要和硬件页的大小相同）。</p>
</dd></dl>

<p>下面的 <code class="xref py py-const docutils literal notranslate"><span class="pre">RUSAGE_*</span></code> 符号将被传给 <a class="reference internal" href="#resource.getrusage" title="resource.getrusage"><code class="xref py py-func docutils literal notranslate"><span class="pre">getrusage()</span></code></a> 函数以指定应该为哪些进程提供信息。</p>
<dl class="py data">
<dt class="sig sig-object py" id="resource.RUSAGE_SELF">
<span class="sig-prename descclassname"><span class="pre">resource.</span></span><span class="sig-name descname"><span class="pre">RUSAGE_SELF</span></span></dt>
<dd><p>传递给 <a class="reference internal" href="#resource.getrusage" title="resource.getrusage"><code class="xref py py-func docutils literal notranslate"><span class="pre">getrusage()</span></code></a> 以请求调用进程消耗的资源，这是进程中所有线程使用的资源总和。</p>
</dd></dl>

<dl class="py data">
<dt class="sig sig-object py" id="resource.RUSAGE_CHILDREN">
<span class="sig-prename descclassname"><span class="pre">resource.</span></span><span class="sig-name descname"><span class="pre">RUSAGE_CHILDREN</span></span></dt>
<dd><p>传递给 <a class="reference internal" href="#resource.getrusage" title="resource.getrusage"><code class="xref py py-func docutils literal notranslate"><span class="pre">getrusage()</span></code></a> 以请求被终止和等待的调用进程的子进程所消耗的资源。</p>
</dd></dl>

<dl class="py data">
<dt class="sig sig-object py" id="resource.RUSAGE_BOTH">
<span class="sig-prename descclassname"><span class="pre">resource.</span></span><span class="sig-name descname"><span class="pre">RUSAGE_BOTH</span></span></dt>
<dd><p>传递给 <a class="reference internal" href="#resource.getrusage" title="resource.getrusage"><code class="xref py py-func docutils literal notranslate"><span class="pre">getrusage()</span></code></a> 以请求当前进程和子进程所消耗的资源。并非所有系统都能使用。</p>
</dd></dl>

<dl class="py data">
<dt class="sig sig-object py" id="resource.RUSAGE_THREAD">
<span class="sig-prename descclassname"><span class="pre">resource.</span></span><span class="sig-name descname"><span class="pre">RUSAGE_THREAD</span></span></dt>
<dd><p>传递给 <a class="reference internal" href="#resource.getrusage" title="resource.getrusage"><code class="xref py py-func docutils literal notranslate"><span class="pre">getrusage()</span></code></a> 以请求当前线程所消耗的资源。 并非所有系统都能使用。</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.2.</span></p>
</div>
</dd></dl>

</section>
</section>


            <div class="clearer"></div>
          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>