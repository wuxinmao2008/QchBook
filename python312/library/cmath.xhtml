<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" /><meta name="viewport" content="width=device-width, initial-scale=1" />
<meta property="og:title" content="cmath --- 针对复数的数学函数" />
<meta property="og:type" content="website" />
<meta property="og:url" content="https://docs.python.org/3/library/cmath.xhtml" />
<meta property="og:site_name" content="Python documentation" />
<meta property="og:description" content="本模块提供了一些适用于复数的数学函数。 本模块中的函数接受整数、浮点数或复数作为参数。 它们也接受任意具有__complex__() 或__float__() 方法的 Python 对象：这些方法分别用于将对象转换为复数或浮点数，然后再将函数应用于转换后的结果。 到极坐标和从极坐标的转换: A Python complex number z is stored internally usin..." />
<meta property="og:image" content="https://docs.python.org/3/_static/og-image.png" />
<meta property="og:image:alt" content="Python documentation" />
<meta name="description" content="本模块提供了一些适用于复数的数学函数。 本模块中的函数接受整数、浮点数或复数作为参数。 它们也接受任意具有__complex__() 或__float__() 方法的 Python 对象：这些方法分别用于将对象转换为复数或浮点数，然后再将函数应用于转换后的结果。 到极坐标和从极坐标的转换: A Python complex number z is stored internally usin..." />
<meta property="og:image:width" content="200" />
<meta property="og:image:height" content="200" />
<meta name="theme-color" content="#3776ab" />

    <title>cmath --- 针对复数的数学函数</title>
    <link rel="stylesheet" type="text/css" href="../_static/pygments.css" />
    <link rel="stylesheet" type="text/css" href="../_static/epub.css" />
    <link rel="canonical" href="https://docs.python.org/3/library/cmath.html" />
    
      
    

    
    <style>
      @media only screen {
        table.full-width-table {
            width: 100%;
        }
      }
    </style>
 

  </head><body>


    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <section id="module-cmath">
<span id="cmath-mathematical-functions-for-complex-numbers"></span><h1><code class="xref py py-mod docutils literal notranslate"><span class="pre">cmath</span></code> --- 针对复数的数学函数</h1>
<hr class="docutils" />
<p>本模块提供了一些适用于复数的数学函数。 本模块中的函数接受整数、浮点数或复数作为参数。 它们也接受任意具有 <a class="reference internal" href="../reference/datamodel.xhtml#object.__complex__" title="object.__complex__"><code class="xref py py-meth docutils literal notranslate"><span class="pre">__complex__()</span></code></a> 或 <a class="reference internal" href="../reference/datamodel.xhtml#object.__float__" title="object.__float__"><code class="xref py py-meth docutils literal notranslate"><span class="pre">__float__()</span></code></a> 方法的 Python 对象：这些方法分别用于将对象转换为复数或浮点数，然后再将函数应用于转换后的结果。</p>
<div class="admonition note">
<p class="admonition-title">备注</p>
<p>对于涉及分支切割的函数，我们会有确定如何在切割本身上定义这些函数的问题。 根据 Kahan 的论文 &quot;Branch cuts for complex elementary functions&quot;，以及 C99 的附录 G 和之后的 C 标准，我们使用零符号来区别分支切割的一侧和另一侧：对于沿实轴（一部分）的分支切割我们要看虚部的符号，而对于沿虚轴的分支切割我们则要看实部的符号。</p>
<p>例如，<a class="reference internal" href="#cmath.sqrt" title="cmath.sqrt"><code class="xref py py-func docutils literal notranslate"><span class="pre">cmath.sqrt()</span></code></a> 函数有一个沿着负实轴的分支切割。 参数 <code class="docutils literal notranslate"><span class="pre">complex(-2.0,</span> <span class="pre">-0.0)</span></code> 会被当作位于切支切割的 <em>下方</em> 来处理，因而将给出一个负虚轴上的结果。</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">cmath</span><span class="o">.</span><span class="n">sqrt</span><span class="p">(</span><span class="nb">complex</span><span class="p">(</span><span class="o">-</span><span class="mf">2.0</span><span class="p">,</span> <span class="o">-</span><span class="mf">0.0</span><span class="p">))</span>
<span class="go">-1.4142135623730951j</span>
</pre></div>
</div>
<p>但是参数 <code class="docutils literal notranslate"><span class="pre">complex(-2.0,</span> <span class="pre">0.0)</span></code> 则会被当作是位于支割线的上方来处理:</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">cmath</span><span class="o">.</span><span class="n">sqrt</span><span class="p">(</span><span class="nb">complex</span><span class="p">(</span><span class="o">-</span><span class="mf">2.0</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">))</span>
<span class="go">1.4142135623730951j</span>
</pre></div>
</div>
</div>
<section id="conversions-to-and-from-polar-coordinates">
<h2>到极坐标和从极坐标的转换</h2>
<p>A Python complex number <code class="docutils literal notranslate"><span class="pre">z</span></code> is stored internally using <em>rectangular</em>
or <em>Cartesian</em> coordinates.  It is completely determined by its <em>real
part</em> <code class="docutils literal notranslate"><span class="pre">z.real</span></code> and its <em>imaginary part</em> <code class="docutils literal notranslate"><span class="pre">z.imag</span></code>.</p>
<p><em>极坐标</em> 提供了另一种复数的表示方法。在极坐标中，一个复数 <em>z</em> 由模量 <em>r</em> 和相位角 <em>phi</em> 来定义。模量 <em>r</em> 是从 <em>z</em> 到坐标原点的距离，而相位角 <em>phi</em> 是以弧度为单位的，逆时针的，从正X轴到连接原点和 <em>z</em> 的线段间夹角的角度。</p>
<p>下面的函数可用于原生直角坐标与极坐标的相互转换。</p>
<dl class="py function">
<dt class="sig sig-object py" id="cmath.phase">
<span class="sig-prename descclassname"><span class="pre">cmath.</span></span><span class="sig-name descname"><span class="pre">phase</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">x</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>将 <em>x</em> 的相位 (或称 <em>x</em> 的 <em>参数</em>) 作为一个浮点数返回。 <code class="docutils literal notranslate"><span class="pre">phase(x)</span></code> 等价于 <code class="docutils literal notranslate"><span class="pre">math.atan2(x.imag,</span> <span class="pre">x.real)</span></code>。 结果将位于 [-<em>π</em>, <em>π</em>] 范围内，且此操作的支割线将位于负实轴上。 结果的符号将与 <code class="docutils literal notranslate"><span class="pre">x.imag</span></code> 的符号相同，即使 <code class="docutils literal notranslate"><span class="pre">x.imag</span></code> 的值为零:</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">phase</span><span class="p">(</span><span class="nb">complex</span><span class="p">(</span><span class="o">-</span><span class="mf">1.0</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">))</span>
<span class="go">3.141592653589793</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">phase</span><span class="p">(</span><span class="nb">complex</span><span class="p">(</span><span class="o">-</span><span class="mf">1.0</span><span class="p">,</span> <span class="o">-</span><span class="mf">0.0</span><span class="p">))</span>
<span class="go">-3.141592653589793</span>
</pre></div>
</div>
</dd></dl>

<div class="admonition note">
<p class="admonition-title">备注</p>
<p>一个复数 <em>x</em> 的模数（绝对值）可以通过内置函数 <a class="reference internal" href="functions.xhtml#abs" title="abs"><code class="xref py py-func docutils literal notranslate"><span class="pre">abs()</span></code></a> 计算。没有单独的 <a class="reference internal" href="#module-cmath" title="cmath: Mathematical functions for complex numbers."><code class="xref py py-mod docutils literal notranslate"><span class="pre">cmath</span></code></a> 模块函数用于这个操作。</p>
</div>
<dl class="py function">
<dt class="sig sig-object py" id="cmath.polar">
<span class="sig-prename descclassname"><span class="pre">cmath.</span></span><span class="sig-name descname"><span class="pre">polar</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">x</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>在极坐标中返回 <em>x</em> 的表达方式。返回一个数对 <code class="docutils literal notranslate"><span class="pre">(r,</span> <span class="pre">phi)</span></code>，<em>r</em> 是 <em>x</em> 的模数，<em>phi</em> 是 <em>x</em> 的相位角。 <code class="docutils literal notranslate"><span class="pre">polar(x)</span></code> 相当于 <code class="docutils literal notranslate"><span class="pre">(abs(x),</span> <span class="pre">phase(x))</span></code>。</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cmath.rect">
<span class="sig-prename descclassname"><span class="pre">cmath.</span></span><span class="sig-name descname"><span class="pre">rect</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">r</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">phi</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Return the complex number <em>x</em> with polar coordinates <em>r</em> and <em>phi</em>.
Equivalent to <code class="docutils literal notranslate"><span class="pre">complex(r</span> <span class="pre">*</span> <span class="pre">math.cos(phi),</span> <span class="pre">r</span> <span class="pre">*</span> <span class="pre">math.sin(phi))</span></code>.</p>
</dd></dl>

</section>
<section id="power-and-logarithmic-functions">
<h2>幂函数与对数函数</h2>
<dl class="py function">
<dt class="sig sig-object py" id="cmath.exp">
<span class="sig-prename descclassname"><span class="pre">cmath.</span></span><span class="sig-name descname"><span class="pre">exp</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">x</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>返回 <em>e</em> 的 <em>x</em> 次方，<em>e</em> 是自然对数的底数。</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cmath.log">
<span class="sig-prename descclassname"><span class="pre">cmath.</span></span><span class="sig-name descname"><span class="pre">log</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">x</span></span></em><span class="optional">[</span>, <em class="sig-param"><span class="n"><span class="pre">base</span></span></em><span class="optional">]</span><span class="sig-paren">)</span></dt>
<dd><p>返回 <em>x</em> 的以 <em>base</em> 为底的对数。 如果没有指定 <em>base</em>，则返回 <em>x</em> 的自然对数。 存在一条支割线，即沿着负实轴从 0 到 -∞。</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cmath.log10">
<span class="sig-prename descclassname"><span class="pre">cmath.</span></span><span class="sig-name descname"><span class="pre">log10</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">x</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>返回底数为 10 的 <em>x</em> 的对数。它具有与 <a class="reference internal" href="#cmath.log" title="cmath.log"><code class="xref py py-func docutils literal notranslate"><span class="pre">log()</span></code></a> 相同的支割线。</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cmath.sqrt">
<span class="sig-prename descclassname"><span class="pre">cmath.</span></span><span class="sig-name descname"><span class="pre">sqrt</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">x</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>返回 <em>x</em> 的平方根。 它具有与 <a class="reference internal" href="#cmath.log" title="cmath.log"><code class="xref py py-func docutils literal notranslate"><span class="pre">log()</span></code></a> 相同的支割线。</p>
</dd></dl>

</section>
<section id="trigonometric-functions">
<h2>三角函数</h2>
<dl class="py function">
<dt class="sig sig-object py" id="cmath.acos">
<span class="sig-prename descclassname"><span class="pre">cmath.</span></span><span class="sig-name descname"><span class="pre">acos</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">x</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>返回 <em>x</em> 的反余弦。 存在两条支割线：一条沿着实轴从 1 到 ∞。 另一条沿着实轴从 -1 向左延伸到 -∞。</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cmath.asin">
<span class="sig-prename descclassname"><span class="pre">cmath.</span></span><span class="sig-name descname"><span class="pre">asin</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">x</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>返回 <em>x</em> 的反正弦。它与 <a class="reference internal" href="#cmath.acos" title="cmath.acos"><code class="xref py py-func docutils literal notranslate"><span class="pre">acos()</span></code></a> 有相同的支割线。</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cmath.atan">
<span class="sig-prename descclassname"><span class="pre">cmath.</span></span><span class="sig-name descname"><span class="pre">atan</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">x</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>返回 <em>x</em> 的反正切。 存在两条支割线：一条沿着虚轴从 <code class="docutils literal notranslate"><span class="pre">1j</span></code> 延伸到 <code class="docutils literal notranslate"><span class="pre">∞j</span></code>。 另一条沿着虚轴从 <code class="docutils literal notranslate"><span class="pre">-1j</span></code> 延伸到 <code class="docutils literal notranslate"><span class="pre">-∞j</span></code>。</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cmath.cos">
<span class="sig-prename descclassname"><span class="pre">cmath.</span></span><span class="sig-name descname"><span class="pre">cos</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">x</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>返回 <em>x</em> 的余弦。</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cmath.sin">
<span class="sig-prename descclassname"><span class="pre">cmath.</span></span><span class="sig-name descname"><span class="pre">sin</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">x</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>返回 <em>x</em> 的正弦。</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cmath.tan">
<span class="sig-prename descclassname"><span class="pre">cmath.</span></span><span class="sig-name descname"><span class="pre">tan</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">x</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>返回 <em>x</em> 的正切。</p>
</dd></dl>

</section>
<section id="hyperbolic-functions">
<h2>双曲函数</h2>
<dl class="py function">
<dt class="sig sig-object py" id="cmath.acosh">
<span class="sig-prename descclassname"><span class="pre">cmath.</span></span><span class="sig-name descname"><span class="pre">acosh</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">x</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>返回 <em>x</em> 的反双曲余弦。 存在一条支割线，沿着实轴从 1 向左延伸到 -∞。</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cmath.asinh">
<span class="sig-prename descclassname"><span class="pre">cmath.</span></span><span class="sig-name descname"><span class="pre">asinh</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">x</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>返回 <em>x</em> 的反双曲正弦。 存在两条支割线：一条沿着虚轴从 <code class="docutils literal notranslate"><span class="pre">1j</span></code> 延伸到 <code class="docutils literal notranslate"><span class="pre">∞j</span></code>。 另一条沿着虚轴从 <code class="docutils literal notranslate"><span class="pre">-1j</span></code> 延伸到 <code class="docutils literal notranslate"><span class="pre">-∞j</span></code>。</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cmath.atanh">
<span class="sig-prename descclassname"><span class="pre">cmath.</span></span><span class="sig-name descname"><span class="pre">atanh</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">x</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>返回 <em>x</em> 反双曲正切。 存在两条支割线：一条沿着实轴从 <code class="docutils literal notranslate"><span class="pre">1</span></code> 延伸到 <code class="docutils literal notranslate"><span class="pre">∞</span></code>。 另一条沿着实轴从 <code class="docutils literal notranslate"><span class="pre">-1</span></code> 延伸到 <code class="docutils literal notranslate"><span class="pre">-∞</span></code>。</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cmath.cosh">
<span class="sig-prename descclassname"><span class="pre">cmath.</span></span><span class="sig-name descname"><span class="pre">cosh</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">x</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>返回 <em>x</em> 的双曲余弦值。</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cmath.sinh">
<span class="sig-prename descclassname"><span class="pre">cmath.</span></span><span class="sig-name descname"><span class="pre">sinh</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">x</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>返回 <em>x</em> 的双曲正弦值。</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cmath.tanh">
<span class="sig-prename descclassname"><span class="pre">cmath.</span></span><span class="sig-name descname"><span class="pre">tanh</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">x</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>返回 <em>x</em> 的双曲正切值。</p>
</dd></dl>

</section>
<section id="classification-functions">
<h2>分类函数</h2>
<dl class="py function">
<dt class="sig sig-object py" id="cmath.isfinite">
<span class="sig-prename descclassname"><span class="pre">cmath.</span></span><span class="sig-name descname"><span class="pre">isfinite</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">x</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>如果 <em>x</em> 的实部和虚部都是有限的，则返回 <code class="docutils literal notranslate"><span class="pre">True</span></code>，否则返回 <code class="docutils literal notranslate"><span class="pre">False</span></code>。</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.2.</span></p>
</div>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cmath.isinf">
<span class="sig-prename descclassname"><span class="pre">cmath.</span></span><span class="sig-name descname"><span class="pre">isinf</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">x</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>如果 <em>x</em> 的实部或者虚部是无穷大的，则返回 <code class="docutils literal notranslate"><span class="pre">True</span></code>，否则返回 <code class="docutils literal notranslate"><span class="pre">False</span></code>。</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cmath.isnan">
<span class="sig-prename descclassname"><span class="pre">cmath.</span></span><span class="sig-name descname"><span class="pre">isnan</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">x</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>如果 <em>x</em> 的实部或者虚部是 NaN，则返回 <code class="docutils literal notranslate"><span class="pre">True</span></code> ，否则返回 <code class="docutils literal notranslate"><span class="pre">False</span></code>。</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cmath.isclose">
<span class="sig-prename descclassname"><span class="pre">cmath.</span></span><span class="sig-name descname"><span class="pre">isclose</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">a</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">b</span></span></em>, <em class="sig-param"><span class="o"><span class="pre">*</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">rel_tol</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">1e-09</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">abs_tol</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">0.0</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>若 <em>a</em> 和 <em>b</em> 的值比较接近则返回 <code class="docutils literal notranslate"><span class="pre">True</span></code>，否则返回 <code class="docutils literal notranslate"><span class="pre">False</span></code>。</p>
<p>根据给定的绝对和相对容差确定两个值是否被认为是接近的。</p>
<p><em>rel_tol</em> 是相对容差 —— 它是 <em>a</em> 和 <em>b</em> 之间允许的最大差值，相对于 <em>a</em> 或 <em>b</em> 的较大绝对值。例如，要设置5％的容差，请传递 <code class="docutils literal notranslate"><span class="pre">rel_tol=0.05</span></code> 。默认容差为 <code class="docutils literal notranslate"><span class="pre">1e-09</span></code>，确保两个值在大约9位十进制数字内相同。 <em>rel_tol</em> 必须大于零。</p>
<p><em>abs_tol</em> 是最小绝对容差 —— 对于接近零的比较很有用。 <em>abs_tol</em> 必须至少为零。</p>
<p>如果没有错误发生，结果将是： <code class="docutils literal notranslate"><span class="pre">abs(a-b)</span> <span class="pre">&lt;=</span> <span class="pre">max(rel_tol</span> <span class="pre">*</span> <span class="pre">max(abs(a),</span> <span class="pre">abs(b)),</span> <span class="pre">abs_tol)</span></code> 。</p>
<p>IEEE 754特殊值 <code class="docutils literal notranslate"><span class="pre">NaN</span></code> ， <code class="docutils literal notranslate"><span class="pre">inf</span></code> 和 <code class="docutils literal notranslate"><span class="pre">-inf</span></code> 将根据IEEE规则处理。具体来说， <code class="docutils literal notranslate"><span class="pre">NaN</span></code> 不被认为接近任何其他值，包括 <code class="docutils literal notranslate"><span class="pre">NaN</span></code> 。 <code class="docutils literal notranslate"><span class="pre">inf</span></code> 和 <code class="docutils literal notranslate"><span class="pre">-inf</span></code> 只被认为接近自己。</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.5.</span></p>
</div>
<div class="admonition seealso">
<p class="admonition-title">参见</p>
<p><span class="target" id="index-3"></span><a class="pep reference external" href="https://peps.python.org/pep-0485/"><strong>PEP 485</strong></a><span class="link-target"> [https://peps.python.org/pep-0485/]</span> —— 用于测试近似相等的函数</p>
</div>
</dd></dl>

</section>
<section id="constants">
<h2>常量</h2>
<dl class="py data">
<dt class="sig sig-object py" id="cmath.pi">
<span class="sig-prename descclassname"><span class="pre">cmath.</span></span><span class="sig-name descname"><span class="pre">pi</span></span></dt>
<dd><p>数学常数 <em>π</em> ，作为一个浮点数。</p>
</dd></dl>

<dl class="py data">
<dt class="sig sig-object py" id="cmath.e">
<span class="sig-prename descclassname"><span class="pre">cmath.</span></span><span class="sig-name descname"><span class="pre">e</span></span></dt>
<dd><p>数学常数 <em>e</em> ，作为一个浮点数。</p>
</dd></dl>

<dl class="py data">
<dt class="sig sig-object py" id="cmath.tau">
<span class="sig-prename descclassname"><span class="pre">cmath.</span></span><span class="sig-name descname"><span class="pre">tau</span></span></dt>
<dd><p>数学常数 <em>τ</em> ，作为一个浮点数。</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.6.</span></p>
</div>
</dd></dl>

<dl class="py data">
<dt class="sig sig-object py" id="cmath.inf">
<span class="sig-prename descclassname"><span class="pre">cmath.</span></span><span class="sig-name descname"><span class="pre">inf</span></span></dt>
<dd><p>浮点正无穷大。相当于 <code class="docutils literal notranslate"><span class="pre">float('inf')</span></code>。</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.6.</span></p>
</div>
</dd></dl>

<dl class="py data">
<dt class="sig sig-object py" id="cmath.infj">
<span class="sig-prename descclassname"><span class="pre">cmath.</span></span><span class="sig-name descname"><span class="pre">infj</span></span></dt>
<dd><p>具有零实部和正无穷虚部的复数。相当于 <code class="docutils literal notranslate"><span class="pre">complex(0.0,</span> <span class="pre">float('inf'))</span></code>。</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.6.</span></p>
</div>
</dd></dl>

<dl class="py data">
<dt class="sig sig-object py" id="cmath.nan">
<span class="sig-prename descclassname"><span class="pre">cmath.</span></span><span class="sig-name descname"><span class="pre">nan</span></span></dt>
<dd><p>浮点“非数字”（NaN）值。相当于 <code class="docutils literal notranslate"><span class="pre">float('nan')</span></code>。</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.6.</span></p>
</div>
</dd></dl>

<dl class="py data">
<dt class="sig sig-object py" id="cmath.nanj">
<span class="sig-prename descclassname"><span class="pre">cmath.</span></span><span class="sig-name descname"><span class="pre">nanj</span></span></dt>
<dd><p>具有零实部和 NaN 虚部的复数。相当于 <code class="docutils literal notranslate"><span class="pre">complex(0.0,</span> <span class="pre">float('nan'))</span></code>。</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.6.</span></p>
</div>
</dd></dl>

<p id="index-1">请注意，函数的选择与模块 <a class="reference internal" href="math.xhtml#module-math" title="math: Mathematical functions (sin() etc.)."><code class="xref py py-mod docutils literal notranslate"><span class="pre">math</span></code></a> 中的函数选择相似，但不完全相同。 拥有两个模块的原因是因为有些用户对复数不感兴趣，甚至根本不知道它们是什么。它们宁愿 <code class="docutils literal notranslate"><span class="pre">math.sqrt(-1)</span></code> 引发异常，也不想返回一个复数。 另请注意，被 <a class="reference internal" href="#module-cmath" title="cmath: Mathematical functions for complex numbers."><code class="xref py py-mod docutils literal notranslate"><span class="pre">cmath</span></code></a> 定义的函数始终会返回一个复数，尽管答案可以表示为一个实数（在这种情况下，复数的虚数部分为零）。</p>
<p>关于支割线的注释：它们是沿着给定函数无法连续的曲线。它们是许多复变函数的必要特征。 假设您需要使用复变函数进行计算，您将会了解支割线的概念。 请参阅几乎所有关于复变函数的（不太基本）的书来获得启发。 对于如何正确地基于数值目的来选择支割线的相关信息，一个良好的参考如下：</p>
<div class="admonition seealso">
<p class="admonition-title">参见</p>
<p>Kahan, W: Branch cuts for complex elementary functions; or, Much ado about nothing's sign bit. In Iserles, A., and Powell, M. (eds.), The state of the art in numerical analysis. Clarendon Press (1987) pp165--211.</p>
</div>
</section>
</section>


            <div class="clearer"></div>
          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>