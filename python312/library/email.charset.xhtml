<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" /><meta name="viewport" content="width=device-width, initial-scale=1" />
<meta property="og:title" content="email.charset: 表示字符集" />
<meta property="og:type" content="website" />
<meta property="og:url" content="https://docs.python.org/3/library/email.charset.xhtml" />
<meta property="og:site_name" content="Python documentation" />
<meta property="og:description" content="源代码: Lib/email/charset.py[https://github.com/python/cpython/tree/3.12/Lib/email/charset.py] 此模块是旧版 ( Compat32) email API 的组成部分。 在新版 API 中只会使用其中的别名表。 本节中的其余文本是此模块的原始文档。 此模块提供了一个 Charset 类用来表示电子邮件消息中..." />
<meta property="og:image" content="https://docs.python.org/3/_static/og-image.png" />
<meta property="og:image:alt" content="Python documentation" />
<meta name="description" content="源代码: Lib/email/charset.py[https://github.com/python/cpython/tree/3.12/Lib/email/charset.py] 此模块是旧版 ( Compat32) email API 的组成部分。 在新版 API 中只会使用其中的别名表。 本节中的其余文本是此模块的原始文档。 此模块提供了一个 Charset 类用来表示电子邮件消息中..." />
<meta property="og:image:width" content="200" />
<meta property="og:image:height" content="200" />
<meta name="theme-color" content="#3776ab" />

    <title>email.charset: 表示字符集</title>
    <link rel="stylesheet" type="text/css" href="../_static/pygments.css" />
    <link rel="stylesheet" type="text/css" href="../_static/epub.css" />
    <link rel="canonical" href="https://docs.python.org/3/library/email.charset.html" />
    
      
    

    
    <style>
      @media only screen {
        table.full-width-table {
            width: 100%;
        }
      }
    </style>
 

  </head><body>


    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <section id="module-email.charset">
<span id="email-charset-representing-character-sets"></span><h1><code class="xref py py-mod docutils literal notranslate"><span class="pre">email.charset</span></code>: 表示字符集</h1>
<p><strong>源代码:</strong> <a class="reference external" href="https://github.com/python/cpython/tree/3.12/Lib/email/charset.py">Lib/email/charset.py</a><span class="link-target"> [https://github.com/python/cpython/tree/3.12/Lib/email/charset.py]</span></p>
<hr class="docutils" />
<p>此模块是旧版 (<code class="docutils literal notranslate"><span class="pre">Compat32</span></code>) email API 的组成部分。 在新版 API 中只会使用其中的别名表。</p>
<p>本节中的其余文本是此模块的原始文档。</p>
<p>此模块提供了一个 <a class="reference internal" href="#email.charset.Charset" title="email.charset.Charset"><code class="xref py py-class docutils literal notranslate"><span class="pre">Charset</span></code></a> 类用来表示电子邮件消息中的字符集和字符集转换操作，以及一个字符集注册表和几个用于操作此注册表的便捷方法。 <a class="reference internal" href="#email.charset.Charset" title="email.charset.Charset"><code class="xref py py-class docutils literal notranslate"><span class="pre">Charset</span></code></a> 的实例在 <a class="reference internal" href="email.xhtml#module-email" title="email: Package supporting the parsing, manipulating, and generating email messages."><code class="xref py py-mod docutils literal notranslate"><span class="pre">email</span></code></a> 包的其他几个模块中也有使用。</p>
<p>请从 <a class="reference internal" href="#module-email.charset" title="email.charset: Character Sets"><code class="xref py py-mod docutils literal notranslate"><span class="pre">email.charset</span></code></a> 模块导入这个类。</p>
<dl class="py class">
<dt class="sig sig-object py" id="email.charset.Charset">
<em class="property"><span class="pre">class</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">email.charset.</span></span><span class="sig-name descname"><span class="pre">Charset</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">input_charset</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">DEFAULT_CHARSET</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>将字符集映射到其 email 特征属性。</p>
<p>这个类提供了特定字符集对于电子邮件的要求的相关信息。 考虑到适用编解码器的可用性，它还为字符集之间的转换提供了一些便捷例程。 在给定字符集的情况下，它将尽可能地以符合 RFC 的方式在电子邮件消息中提供有关如何使用该字符集的信息。</p>
<p>特定字符集当在电子邮件标头或消息体中使用时必须以 quoted-printable 或 base64 来编码。 某些字符集则必须被立即转换，不允许在电子邮件中使用。</p>
<p>可选的 <em>input_charset</em> 说明如下；它总是会被强制转为小写。 在进行别名正规化后它还会被用来查询字符集注册表以找出用于该字符集的标头编码格式、消息体编码格式和输出转换编解码器。 举例来说，如果 <em>input_charset</em> 为 <code class="docutils literal notranslate"><span class="pre">iso-8859-1</span></code>，则标头和消息体将会使用 quoted-printable 来编码并且不需要输出转换编解码器。 如果 <em>input_charset</em> 为 <code class="docutils literal notranslate"><span class="pre">euc-jp</span></code>，则标头将使用 base64 来编码，消息体将不会被编码，但输出文本将从 <code class="docutils literal notranslate"><span class="pre">euc-jp</span></code> 字符集转换为 <code class="docutils literal notranslate"><span class="pre">iso-2022-jp</span></code> 字符集。</p>
<p><a class="reference internal" href="#email.charset.Charset" title="email.charset.Charset"><code class="xref py py-class docutils literal notranslate"><span class="pre">Charset</span></code></a> 实例具有下列数据属性:</p>
<dl class="py attribute">
<dt class="sig sig-object py" id="email.charset.Charset.input_charset">
<span class="sig-name descname"><span class="pre">input_charset</span></span></dt>
<dd><p>指定的初始字符集。 通用别名会被转换为它们的 <em>官方</em> 电子邮件名称 (例如 <code class="docutils literal notranslate"><span class="pre">latin_1</span></code> 会被转换为 <code class="docutils literal notranslate"><span class="pre">iso-8859-1</span></code>)。 默认值为 7 位 <code class="docutils literal notranslate"><span class="pre">us-ascii</span></code>。</p>
</dd></dl>

<dl class="py attribute">
<dt class="sig sig-object py" id="email.charset.Charset.header_encoding">
<span class="sig-name descname"><span class="pre">header_encoding</span></span></dt>
<dd><p>如果字符集在用于电子邮件标头之前必须被编码，此属性将被设为 <code class="docutils literal notranslate"><span class="pre">charset.QP</span></code> (表示 quoted-printable 编码格式), <code class="docutils literal notranslate"><span class="pre">charset.BASE64</span></code> (表示 base64 编码格式) 或 <code class="docutils literal notranslate"><span class="pre">charset.SHORTEST</span></code> 表示 QP 或 BASE64 编码格式中最简短的一个。 在其他情况下，该属性将为 <code class="docutils literal notranslate"><span class="pre">None</span></code>。</p>
</dd></dl>

<dl class="py attribute">
<dt class="sig sig-object py" id="email.charset.Charset.body_encoding">
<span class="sig-name descname"><span class="pre">body_encoding</span></span></dt>
<dd><p>与 <em>header_encoding</em> 一样，但是用来描述电子邮件消息体的编码格式，它实际上可以与标头编码格式不同。 <code class="docutils literal notranslate"><span class="pre">charset.SHORTEST</span></code> 不允许被用作 <em>body_encoding</em>。</p>
</dd></dl>

<dl class="py attribute">
<dt class="sig sig-object py" id="email.charset.Charset.output_charset">
<span class="sig-name descname"><span class="pre">output_charset</span></span></dt>
<dd><p>某些字符集在用于电子邮件标头或消息体之前必须被转换。 如果 <em>input_charset</em> 是这些字符集之一，该属性将包含输出将要转换的字符集名称。 在其他情况下，该属性将为 <code class="docutils literal notranslate"><span class="pre">None</span></code>。</p>
</dd></dl>

<dl class="py attribute">
<dt class="sig sig-object py" id="email.charset.Charset.input_codec">
<span class="sig-name descname"><span class="pre">input_codec</span></span></dt>
<dd><p>用于将 <em>input_charset</em> 转换为 Unicode 的 Python 编解码器名称。 如果不需要任何转换编解码器，该属性将为 <code class="docutils literal notranslate"><span class="pre">None</span></code>。</p>
</dd></dl>

<dl class="py attribute">
<dt class="sig sig-object py" id="email.charset.Charset.output_codec">
<span class="sig-name descname"><span class="pre">output_codec</span></span></dt>
<dd><p>用于将 Unicode 转换为 <em>output_charset</em> 的 Python 编解码器名称。 如果不需要任何转换编解码器，该属性将具有与 <em>input_codec</em> 相同的值。</p>
</dd></dl>

<p><a class="reference internal" href="#email.charset.Charset" title="email.charset.Charset"><code class="xref py py-class docutils literal notranslate"><span class="pre">Charset</span></code></a> 实例还有下列方法:</p>
<dl class="py method">
<dt class="sig sig-object py" id="email.charset.Charset.get_body_encoding">
<span class="sig-name descname"><span class="pre">get_body_encoding</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>返回用于消息体编码的内容转换编码格式。</p>
<p>根据所使用的编码格式返回 <code class="docutils literal notranslate"><span class="pre">quoted-printable</span></code> 或 <code class="docutils literal notranslate"><span class="pre">base64</span></code>，或是返回一个函数，在这种情况下你应当调用该函数并附带一个参数，即被编码的消息对象。 该函数应当自行将 <em class="mailheader">Content-Transfer-Encoding</em> 标头设为适当的值。</p>
<p>如果 <em>body_encoding</em> 为 <code class="docutils literal notranslate"><span class="pre">QP</span></code> 则返回字符串 <code class="docutils literal notranslate"><span class="pre">quoted-printable</span></code>，如果 <em>body_encoding</em> 为 <code class="docutils literal notranslate"><span class="pre">BASE64</span></code> 则返回字符串 <code class="docutils literal notranslate"><span class="pre">base64</span></code>，并在其他情况下返回字符串 <code class="docutils literal notranslate"><span class="pre">7bit</span></code>。</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="email.charset.Charset.get_output_charset">
<span class="sig-name descname"><span class="pre">get_output_charset</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>返回输出字符集。</p>
<p>如果 <em>output_charset</em> 属性不为 <code class="docutils literal notranslate"><span class="pre">None</span></code> 则返回该属性，否则返回 <em>input_charset</em>。</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="email.charset.Charset.header_encode">
<span class="sig-name descname"><span class="pre">header_encode</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">string</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>对字符串 <em>string</em> 执行标头编码。</p>
<p>编码格式的类型 (base64 或 quoted-printable) 将取决于 <em>header_encoding</em> 属性。</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="email.charset.Charset.header_encode_lines">
<span class="sig-name descname"><span class="pre">header_encode_lines</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">string</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">maxlengths</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>通过先将 <em>string</em> 转换为字节串来对其执行标头编码。</p>
<p>这类似于 <a class="reference internal" href="#email.charset.Charset.header_encode" title="email.charset.Charset.header_encode"><code class="xref py py-meth docutils literal notranslate"><span class="pre">header_encode()</span></code></a>，区别是字符串会被调整至参数 <em>maxlengths</em> 所给出的最大行长度，它应当是一个迭代器：该迭代器返回的每个元素将提供下一个最大行长度。</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="email.charset.Charset.body_encode">
<span class="sig-name descname"><span class="pre">body_encode</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">string</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>对字符串 <em>string</em> 执行消息体编码。</p>
<p>编码格式的类型 (base64 或 quoted-printable) 将取决于 <em>body_encoding</em> 属性。</p>
</dd></dl>

<p><a class="reference internal" href="#email.charset.Charset" title="email.charset.Charset"><code class="xref py py-class docutils literal notranslate"><span class="pre">Charset</span></code></a> 类还提供了一些方法以支持标准运算和内置函数。</p>
<dl class="py method">
<dt class="sig sig-object py" id="email.charset.Charset.__str__">
<span class="sig-name descname"><span class="pre">__str__</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>将 <em>input_charset</em> 以转为小写的字符串形式返回。 <code class="xref py py-meth docutils literal notranslate"><span class="pre">__repr__()</span></code> 是 <code class="xref py py-meth docutils literal notranslate"><span class="pre">__str__()</span></code> 的别名。</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="email.charset.Charset.__eq__">
<span class="sig-name descname"><span class="pre">__eq__</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">other</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>这个方法允许你对两个 <a class="reference internal" href="#email.charset.Charset" title="email.charset.Charset"><code class="xref py py-class docutils literal notranslate"><span class="pre">Charset</span></code></a> 实例进行相等比较。</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="email.charset.Charset.__ne__">
<span class="sig-name descname"><span class="pre">__ne__</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">other</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>这个方法允许你对两个 <a class="reference internal" href="#email.charset.Charset" title="email.charset.Charset"><code class="xref py py-class docutils literal notranslate"><span class="pre">Charset</span></code></a> 实例进行相等比较。</p>
</dd></dl>

</dd></dl>

<p><a class="reference internal" href="#module-email.charset" title="email.charset: Character Sets"><code class="xref py py-mod docutils literal notranslate"><span class="pre">email.charset</span></code></a> 模块还提供了下列函数用于向全局字符集、别名以及编解码器注册表添加新条目:</p>
<dl class="py function">
<dt class="sig sig-object py" id="email.charset.add_charset">
<span class="sig-prename descclassname"><span class="pre">email.charset.</span></span><span class="sig-name descname"><span class="pre">add_charset</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">charset</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">header_enc</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">body_enc</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">output_charset</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>向全局注册表添加字符特征属性。</p>
<p><em>charset</em> 是输入字符集，它必须为某个字符集的正规名称。</p>
<p>可选的 <em>header_enc</em> 和 <em>body_enc</em> 可以是 <code class="docutils literal notranslate"><span class="pre">charset.QP</span></code> 表示 quoted-printable 编码格式, <code class="docutils literal notranslate"><span class="pre">charset.BASE64</span></code> 表示 base64 编码格式, <code class="docutils literal notranslate"><span class="pre">charset.SHORTEST</span></code> 表示 quoted-printable 或 base64 编码格式中较短的一个，或者为 <code class="docutils literal notranslate"><span class="pre">None</span></code> 表示没有编码格式。 <code class="docutils literal notranslate"><span class="pre">SHORTEST</span></code> 仅对 <em>header_enc</em> 有效。 默认值为 <code class="docutils literal notranslate"><span class="pre">None</span></code> 表示没有编码格式。</p>
<p>可选的 <em>output_charset</em> 是输出所应当采用的字符集。 当 <code class="xref py py-meth docutils literal notranslate"><span class="pre">Charset.convert()</span></code> 方法被调用时将会执行从输入字符集到输出字符集的转换。 默认情况下输出字符集将与输入字符集相同。</p>
<p><em>input_charset</em> 和 <em>output_charset</em> 都必须在模块的字符集-编解码器映射中具有 Unicode 编解码器条目；使用 <a class="reference internal" href="#email.charset.add_codec" title="email.charset.add_codec"><code class="xref py py-func docutils literal notranslate"><span class="pre">add_codec()</span></code></a> 可添加本模块还不知道的编解码器。 请参阅 <a class="reference internal" href="codecs.xhtml#module-codecs" title="codecs: Encode and decode data and streams."><code class="xref py py-mod docutils literal notranslate"><span class="pre">codecs</span></code></a> 模块的文档来了解更多信息。</p>
<p>全局字符集注册表保存在模块全局字典 <code class="docutils literal notranslate"><span class="pre">CHARSETS</span></code> 中。</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="email.charset.add_alias">
<span class="sig-prename descclassname"><span class="pre">email.charset.</span></span><span class="sig-name descname"><span class="pre">add_alias</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">alias</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">canonical</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>添加一个字符集别名。 <em>alias</em> 为特定的别名，例如 <code class="docutils literal notranslate"><span class="pre">latin-1</span></code>。 <em>canonical</em> 是字符集的正规名称，例如 <code class="docutils literal notranslate"><span class="pre">iso-8859-1</span></code>。</p>
<p>全局字符集注册表保存在模块全局字典 <code class="docutils literal notranslate"><span class="pre">ALIASES</span></code> 中。</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="email.charset.add_codec">
<span class="sig-prename descclassname"><span class="pre">email.charset.</span></span><span class="sig-name descname"><span class="pre">add_codec</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">charset</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">codecname</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>添加在给定字符集的字符和 Unicode 之间建立映射的编解码器。</p>
<p><em>charset</em> 是某个字符集的正规名称。 <em>codecname</em> 是某个 Python 编解码器的名称，可以被用来作为 <a class="reference internal" href="stdtypes.xhtml#str" title="str"><code class="xref py py-class docutils literal notranslate"><span class="pre">str</span></code></a> 的 <a class="reference internal" href="stdtypes.xhtml#str.encode" title="str.encode"><code class="xref py py-meth docutils literal notranslate"><span class="pre">encode()</span></code></a> 方法的第二个参数。</p>
</dd></dl>

</section>


            <div class="clearer"></div>
          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>