<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" /><meta name="viewport" content="width=device-width, initial-scale=1" />
<meta property="og:title" content="codeop --- 编译 Python 代码" />
<meta property="og:type" content="website" />
<meta property="og:url" content="https://docs.python.org/3/library/codeop.xhtml" />
<meta property="og:site_name" content="Python documentation" />
<meta property="og:description" content="源代码： Lib/codeop.py[https://github.com/python/cpython/tree/3.12/Lib/codeop.py] codeop 模块提供了可以模拟Python读取-执行-打印循环的实用程序，就像在 code 模块中一样。因此，您可能不希望直接使用该模块；如果你想在程序中包含这样一个循环，你可能需要使用 code 模块。 这个任务有两个部分: 能够判断..." />
<meta property="og:image" content="https://docs.python.org/3/_static/og-image.png" />
<meta property="og:image:alt" content="Python documentation" />
<meta name="description" content="源代码： Lib/codeop.py[https://github.com/python/cpython/tree/3.12/Lib/codeop.py] codeop 模块提供了可以模拟Python读取-执行-打印循环的实用程序，就像在 code 模块中一样。因此，您可能不希望直接使用该模块；如果你想在程序中包含这样一个循环，你可能需要使用 code 模块。 这个任务有两个部分: 能够判断..." />
<meta property="og:image:width" content="200" />
<meta property="og:image:height" content="200" />
<meta name="theme-color" content="#3776ab" />

    <title>codeop --- 编译 Python 代码</title>
    <link rel="stylesheet" type="text/css" href="../_static/pygments.css" />
    <link rel="stylesheet" type="text/css" href="../_static/epub.css" />
    <link rel="canonical" href="https://docs.python.org/3/library/codeop.html" />
    
      
    

    
    <style>
      @media only screen {
        table.full-width-table {
            width: 100%;
        }
      }
    </style>
 

  </head><body>


    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <section id="module-codeop">
<span id="codeop-compile-python-code"></span><h1><code class="xref py py-mod docutils literal notranslate"><span class="pre">codeop</span></code> --- 编译 Python 代码</h1>
<p><strong>源代码：</strong> <a class="reference external" href="https://github.com/python/cpython/tree/3.12/Lib/codeop.py">Lib/codeop.py</a><span class="link-target"> [https://github.com/python/cpython/tree/3.12/Lib/codeop.py]</span></p>
<hr class="docutils" />
<p><a class="reference internal" href="#module-codeop" title="codeop: Compile (possibly incomplete) Python code."><code class="xref py py-mod docutils literal notranslate"><span class="pre">codeop</span></code></a> 模块提供了可以模拟Python读取-执行-打印循环的实用程序，就像在 <a class="reference internal" href="code.xhtml#module-code" title="code: Facilities to implement read-eval-print loops."><code class="xref py py-mod docutils literal notranslate"><span class="pre">code</span></code></a> 模块中一样。因此，您可能不希望直接使用该模块；如果你想在程序中包含这样一个循环，你可能需要使用 <a class="reference internal" href="code.xhtml#module-code" title="code: Facilities to implement read-eval-print loops."><code class="xref py py-mod docutils literal notranslate"><span class="pre">code</span></code></a> 模块。</p>
<p>这个任务有两个部分:</p>
<ol class="arabic simple">
<li><p>能够判断一行输入是否完成了一条 Python 语句：简而言之，就是告诉我们接下来是要打印 '<code class="docutils literal notranslate"><span class="pre">&gt;&gt;&gt;</span></code>' 还是 '<code class="docutils literal notranslate"><span class="pre">...</span></code>'。</p></li>
<li><p>记住用户已输入了哪些 future 语句，这样后续的输入可以在这些语句生效的状态下被编译。</p></li>
</ol>
<p><a class="reference internal" href="#module-codeop" title="codeop: Compile (possibly incomplete) Python code."><code class="xref py py-mod docutils literal notranslate"><span class="pre">codeop</span></code></a> 模块提供了分别以及同时执行这两个部分的方式。</p>
<p>只执行前一部分：</p>
<dl class="py function">
<dt class="sig sig-object py" id="codeop.compile_command">
<span class="sig-prename descclassname"><span class="pre">codeop.</span></span><span class="sig-name descname"><span class="pre">compile_command</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">source</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">filename</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">'&lt;input&gt;'</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">symbol</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">'single'</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>尝试编译 <em>source</em>，这应当是一个 Python 代码字符串并且在 <em>source</em> 是有效的 Python 代码时返回一个对象对象。 在此情况下，代码对象的 filename 属性将为 <em>filename</em>，其默认值为 <code class="docutils literal notranslate"><span class="pre">'&lt;input&gt;'</span></code>。 如果 <em>source</em> 不是 <em>not</em> 有效的 Python 代码，而是有效的 Python 代码的一个前缀时将返回 <code class="docutils literal notranslate"><span class="pre">None</span></code>。</p>
<p>如果 <em>source</em> 存在问题，将引发异常。 如果存在无效的 Python 语法将引发 <a class="reference internal" href="exceptions.xhtml#SyntaxError" title="SyntaxError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">SyntaxError</span></code></a>，而如果存在无效的字面值则将引发 <a class="reference internal" href="exceptions.xhtml#OverflowError" title="OverflowError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">OverflowError</span></code></a> 或 <a class="reference internal" href="exceptions.xhtml#ValueError" title="ValueError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">ValueError</span></code></a>。</p>
<p><em>symbol</em> 参数确定 <em>source</em> 是作为一条语句 (<code class="docutils literal notranslate"><span class="pre">'single'</span></code>，为默认值)，作为一个 <a class="reference internal" href="../glossary.xhtml#term-statement"><span class="xref std std-term">statement</span></a> 的序列 (<code class="docutils literal notranslate"><span class="pre">'exec'</span></code>) 还是作为一个 <a class="reference internal" href="../glossary.xhtml#term-expression"><span class="xref std std-term">expression</span></a> (<code class="docutils literal notranslate"><span class="pre">'eval'</span></code>) 来进行编译。 任何其他值都将导致引发 <a class="reference internal" href="exceptions.xhtml#ValueError" title="ValueError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">ValueError</span></code></a>。</p>
<div class="admonition note">
<p class="admonition-title">备注</p>
<p>解析器有可能（但很不常见）会在到达源码结尾之前停止解析并成功输出结果；在这种情况下，末尾的符号可能会被忽略而不是引发错误。 例如，一个反斜杠加两个换行符之后可以跟随任何无意义的符号。 一旦解析器 API 得到改进将修正这个问题。</p>
</div>
</dd></dl>

<dl class="py class">
<dt class="sig sig-object py" id="codeop.Compile">
<em class="property"><span class="pre">class</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">codeop.</span></span><span class="sig-name descname"><span class="pre">Compile</span></span></dt>
<dd><p>该类的实例具有 <a class="reference internal" href="../reference/datamodel.xhtml#object.__call__" title="object.__call__"><code class="xref py py-meth docutils literal notranslate"><span class="pre">__call__()</span></code></a> 方法，其签名与内置函数 <a class="reference internal" href="functions.xhtml#compile" title="compile"><code class="xref py py-func docutils literal notranslate"><span class="pre">compile()</span></code></a> 相似，区别在于如果该实例编译了包含 <a class="reference internal" href="__future__.xhtml#module-__future__" title="__future__: Future statement definitions"><code class="xref py py-mod docutils literal notranslate"><span class="pre">__future__</span></code></a> 语句的程序文本，则该实例会‘记住’并编译后续所有的所有包含该语句的程序文本。</p>
</dd></dl>

<dl class="py class">
<dt class="sig sig-object py" id="codeop.CommandCompiler">
<em class="property"><span class="pre">class</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">codeop.</span></span><span class="sig-name descname"><span class="pre">CommandCompiler</span></span></dt>
<dd><p>该类的实例具有 <a class="reference internal" href="../reference/datamodel.xhtml#object.__call__" title="object.__call__"><code class="xref py py-meth docutils literal notranslate"><span class="pre">__call__()</span></code></a> 方法，其签名与 <a class="reference internal" href="#codeop.compile_command" title="codeop.compile_command"><code class="xref py py-func docutils literal notranslate"><span class="pre">compile_command()</span></code></a> 相似；区别在如果该实例编译了包含 <a class="reference internal" href="__future__.xhtml#module-__future__" title="__future__: Future statement definitions"><code class="xref py py-mod docutils literal notranslate"><span class="pre">__future__</span></code></a> 语句的程序文本，则该实例会‘记住’并编译后续所有的包含该语句的程序文本。</p>
</dd></dl>

</section>


            <div class="clearer"></div>
          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>