<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" /><meta name="viewport" content="width=device-width, initial-scale=1" />
<meta property="og:title" content="select --- 等待 I/O 完成" />
<meta property="og:type" content="website" />
<meta property="og:url" content="https://docs.python.org/3/library/select.xhtml" />
<meta property="og:site_name" content="Python documentation" />
<meta property="og:description" content="该模块提供了对 select() 和 poll() 函数的访问，这在大多数操作系统上都是可用的， devpoll() 在 Solaris 及其衍生系统上可用， epoll() 在 Linux 2.5+ 上可用，而 kqueue() 在大多数 BSD 上可用。 注意在 Windows 上，它仅适用于套接字；在其他操作系统上，它还适用于其他文件类型（特别是在 Unix 上，它还适用于管道）。 它..." />
<meta property="og:image" content="https://docs.python.org/3/_static/og-image.png" />
<meta property="og:image:alt" content="Python documentation" />
<meta name="description" content="该模块提供了对 select() 和 poll() 函数的访问，这在大多数操作系统上都是可用的， devpoll() 在 Solaris 及其衍生系统上可用， epoll() 在 Linux 2.5+ 上可用，而 kqueue() 在大多数 BSD 上可用。 注意在 Windows 上，它仅适用于套接字；在其他操作系统上，它还适用于其他文件类型（特别是在 Unix 上，它还适用于管道）。 它..." />
<meta property="og:image:width" content="200" />
<meta property="og:image:height" content="200" />
<meta name="theme-color" content="#3776ab" />

    <title>select --- 等待 I/O 完成</title>
    <link rel="stylesheet" type="text/css" href="../_static/pygments.css" />
    <link rel="stylesheet" type="text/css" href="../_static/epub.css" />
    <link rel="canonical" href="https://docs.python.org/3/library/select.html" />
    
      
    

    
    <style>
      @media only screen {
        table.full-width-table {
            width: 100%;
        }
      }
    </style>
 

  </head><body>


    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <section id="module-select">
<span id="select-waiting-for-i-o-completion"></span><h1><code class="xref py py-mod docutils literal notranslate"><span class="pre">select</span></code> --- 等待 I/O 完成</h1>
<hr class="docutils" />
<p>该模块提供了对 <code class="xref c c-func docutils literal notranslate"><span class="pre">select()</span></code> 和 <code class="xref c c-func docutils literal notranslate"><span class="pre">poll()</span></code> 函数的访问，这在大多数操作系统上都是可用的，<code class="xref c c-func docutils literal notranslate"><span class="pre">devpoll()</span></code> 在 Solaris 及其衍生系统上可用，<code class="xref c c-func docutils literal notranslate"><span class="pre">epoll()</span></code> 在 Linux 2.5+ 上可用，而 <code class="xref c c-func docutils literal notranslate"><span class="pre">kqueue()</span></code> 在大多数 BSD 上可用。 注意在 Windows 上，它仅适用于套接字；在其他操作系统上，它还适用于其他文件类型（特别是在 Unix 上，它还适用于管道）。 它不能被用在常规文件上确定一个文件自其最后一次被读取后大小是否有增长。</p>
<div class="admonition note">
<p class="admonition-title">备注</p>
<p><a class="reference internal" href="selectors.xhtml#module-selectors" title="selectors: High-level I/O multiplexing."><code class="xref py py-mod docutils literal notranslate"><span class="pre">selectors</span></code></a> 模块是在 <a class="reference internal" href="#module-select" title="select: Wait for I/O completion on multiple streams."><code class="xref py py-mod docutils literal notranslate"><span class="pre">select</span></code></a> 模块原型的基础上进行高级且高效的 I/O 复用。推荐用户改用 <a class="reference internal" href="selectors.xhtml#module-selectors" title="selectors: High-level I/O multiplexing."><code class="xref py py-mod docutils literal notranslate"><span class="pre">selectors</span></code></a> 模块，除非用户希望对 OS 级的函数原型进行精确控制。</p>
</div>
<div class="availability docutils container">
<p><a class="reference internal" href="intro.xhtml#availability"><span class="std std-ref">可用性</span></a>: 非 Emscripten，非 WASI。</p>
<p>此模块在 WebAssembly 平台 <code class="docutils literal notranslate"><span class="pre">wasm32-emscripten</span></code> 和 <code class="docutils literal notranslate"><span class="pre">wasm32-wasi</span></code> 上不适用或不可用。 请参阅 <a class="reference internal" href="intro.xhtml#wasm-availability"><span class="std std-ref">WebAssembly 平台</span></a> 了解详情。</p>
</div>
<p>该模块定义以下内容：</p>
<dl class="py exception">
<dt class="sig sig-object py" id="select.error">
<em class="property"><span class="pre">exception</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">select.</span></span><span class="sig-name descname"><span class="pre">error</span></span></dt>
<dd><p>一个被弃用的 <a class="reference internal" href="exceptions.xhtml#OSError" title="OSError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">OSError</span></code></a> 的别名。</p>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.3 版本发生变更: </span>根据 <span class="target" id="index-14"></span><a class="pep reference external" href="https://peps.python.org/pep-3151/"><strong>PEP 3151</strong></a><span class="link-target"> [https://peps.python.org/pep-3151/]</span>，这个类是 <a class="reference internal" href="exceptions.xhtml#OSError" title="OSError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">OSError</span></code></a> 的别名。</p>
</div>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="select.devpoll">
<span class="sig-prename descclassname"><span class="pre">select.</span></span><span class="sig-name descname"><span class="pre">devpoll</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>（仅支持 Solaris 及其衍生版本）返回一个 <code class="docutils literal notranslate"><span class="pre">/dev/poll</span></code> 轮询对象，请参阅下方 <a class="reference internal" href="#devpoll-objects"><span class="std std-ref">/dev/poll 轮询对象</span></a> 获取 devpoll 对象所支持的方法。</p>
<p><code class="xref c c-func docutils literal notranslate"><span class="pre">devpoll()</span></code> 对象与实例化时允许的文件描述符数量相关联。 如果你的程序减少该值，<code class="xref c c-func docutils literal notranslate"><span class="pre">devpoll()</span></code> 将会失败。 如果你的程序增加该值，<code class="xref c c-func docutils literal notranslate"><span class="pre">devpoll()</span></code> 可能会返回不完整的活动文件描述符列表。</p>
<p>新的文件描述符是 <a class="reference internal" href="os.xhtml#fd-inheritance"><span class="std std-ref">不可继承的</span></a>。</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.3.</span></p>
</div>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.4 版本发生变更: </span>新的文件描述符现在是不可继承的。</p>
</div>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="select.epoll">
<span class="sig-prename descclassname"><span class="pre">select.</span></span><span class="sig-name descname"><span class="pre">epoll</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">sizehint</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">-1</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">flags</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">0</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>（仅支持 Linux 2.5.44 或更高版本）返回一个 edge poll 对象，该对象可作为 I/O 事件的边缘触发或水平触发接口。</p>
<p><em>sizehint</em> 通知 epoll 预计要注册的事件数量。 该值必须为正数，或为 <code class="docutils literal notranslate"><span class="pre">-1</span></code> 以使用默认值。 它仅在 <code class="xref c c-func docutils literal notranslate"><span class="pre">epoll_create1()</span></code> 不可用的旧系统上会被使用，在其他情况下它没有任何作用（尽管仍会检查其值）。</p>
<p><em>flags</em> 已经弃用且完全被忽略。但是，如果提供该值，则它必须是 <code class="docutils literal notranslate"><span class="pre">0</span></code> 或 <code class="docutils literal notranslate"><span class="pre">select.EPOLL_CLOEXEC</span></code>，否则会抛出 <code class="docutils literal notranslate"><span class="pre">OSError</span></code> 异常。</p>
<p>请参阅下方 <a class="reference internal" href="#epoll-objects"><span class="std std-ref">边缘触发和水平触发的轮询 (epoll) 对象</span></a> 获取 epoll 对象所支持的方法。</p>
<p><code class="docutils literal notranslate"><span class="pre">epoll</span></code> 对象支持上下文管理器：当在 <a class="reference internal" href="../reference/compound_stmts.xhtml#with"><code class="xref std std-keyword docutils literal notranslate"><span class="pre">with</span></code></a> 语句中使用时，新建的文件描述符会在运行至语句块结束时自动关闭。</p>
<p>新的文件描述符是 <a class="reference internal" href="os.xhtml#fd-inheritance"><span class="std std-ref">不可继承的</span></a>。</p>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.3 版本发生变更: </span>增加了 <em>flags</em> 参数。</p>
</div>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.4 版本发生变更: </span>增加了对 <a class="reference internal" href="../reference/compound_stmts.xhtml#with"><code class="xref std std-keyword docutils literal notranslate"><span class="pre">with</span></code></a> 语句的支持。新的文件描述符现在是不可继承的。</p>
</div>
<div class="deprecated">
<p><span class="versionmodified deprecated">自 3.4 版本弃用: </span><em>flags</em> 参数。现在默认采用 <code class="docutils literal notranslate"><span class="pre">select.EPOLL_CLOEXEC</span></code> 标志。使用 <a class="reference internal" href="os.xhtml#os.set_inheritable" title="os.set_inheritable"><code class="xref py py-func docutils literal notranslate"><span class="pre">os.set_inheritable()</span></code></a> 来让文件描述符可继承。</p>
</div>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="select.poll">
<span class="sig-prename descclassname"><span class="pre">select.</span></span><span class="sig-name descname"><span class="pre">poll</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>（部分操作系统不支持）返回一个 poll 对象，该对象支持注册和注销文件描述符，支持对描述符进行轮询以获取 I/O 事件。请参阅下方 <a class="reference internal" href="#poll-objects"><span class="std std-ref">Poll 对象</span></a> 获取 poll 对象所支持的方法。</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="select.kqueue">
<span class="sig-prename descclassname"><span class="pre">select.</span></span><span class="sig-name descname"><span class="pre">kqueue</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>（仅支持 BSD）返回一个内核队列对象，请参阅下方 <a class="reference internal" href="#kqueue-objects"><span class="std std-ref">Kqueue 对象</span></a> 获取 kqueue 对象所支持的方法。</p>
<p>新的文件描述符是 <a class="reference internal" href="os.xhtml#fd-inheritance"><span class="std std-ref">不可继承的</span></a>。</p>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.4 版本发生变更: </span>新的文件描述符现在是不可继承的。</p>
</div>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="select.kevent">
<span class="sig-prename descclassname"><span class="pre">select.</span></span><span class="sig-name descname"><span class="pre">kevent</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">ident</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">filter</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">KQ_FILTER_READ</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">flags</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">KQ_EV_ADD</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">fflags</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">0</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">data</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">0</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">udata</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">0</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>（仅支持 BSD）返回一个内核事件对象，请参阅下方 <a class="reference internal" href="#kevent-objects"><span class="std std-ref">Kevent 对象</span></a> 获取 kevent 对象所支持的方法。</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="select.select">
<span class="sig-prename descclassname"><span class="pre">select.</span></span><span class="sig-name descname"><span class="pre">select</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">rlist</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">wlist</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">xlist</span></span></em><span class="optional">[</span>, <em class="sig-param"><span class="n"><span class="pre">timeout</span></span></em><span class="optional">]</span><span class="sig-paren">)</span></dt>
<dd><p>这是一个明白直观的 Unix <code class="xref c c-func docutils literal notranslate"><span class="pre">select()</span></code> 系统调用接口。 前三个参数是产生“可等待对象”的可迭代对象：可以是代表文件描述符的整数，或是带有名为 <a class="reference internal" href="io.xhtml#io.IOBase.fileno" title="io.IOBase.fileno"><code class="xref py py-meth docutils literal notranslate"><span class="pre">fileno()</span></code></a> 的返回这样的整数的无形参方法的对象:</p>
<ul class="simple">
<li><p><em>rlist</em>：等待，直到可以开始读取</p></li>
<li><p><em>wlist</em>：等待，直到可以开始写入</p></li>
<li><p><em>xlist</em>：等待“异常情况”（请参阅当前系统的手册，以获取哪些情况称为异常情况）</p></li>
</ul>
<p>允许空的可迭代对象，但是否接受三个空的可迭代对象则取决于具体平台。 （已知在 Unix 上可行但在 Windows 上不可行。） 可选的 <em>timeout</em> 参数以一个浮点数表示超时秒数。 当省略 <em>timeout</em> 参数时该函数将阻塞直到至少有一个文件描述符准备就绪。 超时值为零表示执行轮询且永不阻塞。</p>
<p>返回值是三个列表，包含已就绪对象，返回的三个列表是前三个参数的子集。当超时时间已到且没有文件描述符就绪时，返回三个空列表。</p>
<p id="index-1">可迭代对象中可接受的对象类型有 Python <a class="reference internal" href="../glossary.xhtml#term-file-object"><span class="xref std std-term">文件对象</span></a> (例如 <code class="docutils literal notranslate"><span class="pre">sys.stdin</span></code> 以及 <a class="reference internal" href="functions.xhtml#open" title="open"><code class="xref py py-func docutils literal notranslate"><span class="pre">open()</span></code></a> 或 <a class="reference internal" href="os.xhtml#os.popen" title="os.popen"><code class="xref py py-func docutils literal notranslate"><span class="pre">os.popen()</span></code></a> 所返回的对象)，由 <a class="reference internal" href="socket.xhtml#socket.socket" title="socket.socket"><code class="xref py py-func docutils literal notranslate"><span class="pre">socket.socket()</span></code></a> 返回的套接字对象等。 你也可以自定义一个 <em class="dfn">wrapper</em> 类，只要它具有适当的 <a class="reference internal" href="io.xhtml#io.IOBase.fileno" title="io.IOBase.fileno"><code class="xref py py-meth docutils literal notranslate"><span class="pre">fileno()</span></code></a> 方法（该方法要确实返回一个文件描述符，而不能只是一个随机整数）。</p>
<div class="admonition note">
<p class="admonition-title">备注</p>
<p id="index-2">在 Windows 上不接受文件对象，但可以接受套接字。 在 Windows 上，底层的 <code class="xref c c-func docutils literal notranslate"><span class="pre">select()</span></code> 函数由 WinSock 库提供，且不会处理不是源自 WinSock 的文件描述符。</p>
</div>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.5 版本发生变更: </span>现在，当本函数被信号中断时，重试超时将从头开始计时，不会抛出 <a class="reference internal" href="exceptions.xhtml#InterruptedError" title="InterruptedError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">InterruptedError</span></code></a> 异常。除非信号处理程序抛出异常（相关原理请参阅 <span class="target" id="index-15"></span><a class="pep reference external" href="https://peps.python.org/pep-0475/"><strong>PEP 475</strong></a><span class="link-target"> [https://peps.python.org/pep-0475/]</span>）。</p>
</div>
</dd></dl>

<dl class="py attribute">
<dt class="sig sig-object py" id="select.PIPE_BUF">
<span class="sig-prename descclassname"><span class="pre">select.</span></span><span class="sig-name descname"><span class="pre">PIPE_BUF</span></span></dt>
<dd><p>当 <a class="reference internal" href="#select.select" title="select.select"><code class="xref py py-func docutils literal notranslate"><span class="pre">select()</span></code></a>、<code class="xref py py-func docutils literal notranslate"><span class="pre">poll()</span></code> 或本模块中的其他接口报告管道已准备就绪可以写入时，可以在不阻塞该管道的情况下的最小字节数。 它这不适用于其他文件型对象，例如如套接字。</p>
<p>POSIX 上须保证该值不小于 512。</p>
<div class="availability docutils container">
<p><a class="reference internal" href="intro.xhtml#availability"><span class="std std-ref">可用性</span></a>: Unix</p>
</div>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.2.</span></p>
</div>
</dd></dl>

<section id="dev-poll-polling-objects">
<span id="devpoll-objects"></span><h2><code class="docutils literal notranslate"><span class="pre">/dev/poll</span></code> 轮询对象</h2>
<p>Solaris 及其衍生版本具有 <code class="docutils literal notranslate"><span class="pre">/dev/poll</span></code>。 而 <code class="xref c c-func docutils literal notranslate"><span class="pre">select()</span></code> 为 <em>O</em>(<em>最高文件描述符</em>) 并且 <code class="xref c c-func docutils literal notranslate"><span class="pre">poll()</span></code> 为 <em>O</em>(<em>文件描述符数量</em>), <code class="docutils literal notranslate"><span class="pre">/dev/poll</span></code> 为 <em>O</em>(<em>活动的文件描述符</em>)。</p>
<p><code class="docutils literal notranslate"><span class="pre">/dev/poll</span></code> 的行为非常接近标准 <code class="xref c c-func docutils literal notranslate"><span class="pre">poll()</span></code> 对象。</p>
<dl class="py method">
<dt class="sig sig-object py" id="select.devpoll.close">
<span class="sig-prename descclassname"><span class="pre">devpoll.</span></span><span class="sig-name descname"><span class="pre">close</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>关闭轮询对象的文件描述符。</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.4.</span></p>
</div>
</dd></dl>

<dl class="py attribute">
<dt class="sig sig-object py" id="select.devpoll.closed">
<span class="sig-prename descclassname"><span class="pre">devpoll.</span></span><span class="sig-name descname"><span class="pre">closed</span></span></dt>
<dd><p>如果轮询对象已关闭，则返回 <code class="docutils literal notranslate"><span class="pre">True</span></code>。</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.4.</span></p>
</div>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="select.devpoll.fileno">
<span class="sig-prename descclassname"><span class="pre">devpoll.</span></span><span class="sig-name descname"><span class="pre">fileno</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>返回轮询对象的文件描述符对应的数字。</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.4.</span></p>
</div>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="select.devpoll.register">
<span class="sig-prename descclassname"><span class="pre">devpoll.</span></span><span class="sig-name descname"><span class="pre">register</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">fd</span></span></em><span class="optional">[</span>, <em class="sig-param"><span class="n"><span class="pre">eventmask</span></span></em><span class="optional">]</span><span class="sig-paren">)</span></dt>
<dd><p>在轮询对象中注册文件描述符。这样，将来调用 <a class="reference internal" href="#select.poll" title="select.poll"><code class="xref py py-meth docutils literal notranslate"><span class="pre">poll()</span></code></a> 方法时将检查文件描述符是否有未处理的 I/O 事件。<em>fd</em> 可以是整数，也可以是带有 <a class="reference internal" href="io.xhtml#io.IOBase.fileno" title="io.IOBase.fileno"><code class="xref py py-meth docutils literal notranslate"><span class="pre">fileno()</span></code></a> 方法的对象（该方法返回一个整数）。文件对象已经实现了 <code class="xref py py-meth docutils literal notranslate"><span class="pre">fileno()</span></code>，因此它们也可以用作参数。</p>
<p><em>eventmask</em> 是可选的位掩码，用于描述要检查的事件类型。 这些常量与 <code class="xref c c-func docutils literal notranslate"><span class="pre">poll()</span></code> 对象的相同。 默认值是常量 <code class="xref py py-const docutils literal notranslate"><span class="pre">POLLIN</span></code>、<code class="xref py py-const docutils literal notranslate"><span class="pre">POLLPRI</span></code> 和 <code class="xref py py-const docutils literal notranslate"><span class="pre">POLLOUT</span></code> 的组合。</p>
<div class="admonition warning">
<p class="admonition-title">警告</p>
<p>注册已注册的文件描述符不会报错，但结果是未定义的。 适当的做法是先注销或修改它。 这是与:c:func:<cite>!poll</cite> 的一个重要区别。</p>
</div>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="select.devpoll.modify">
<span class="sig-prename descclassname"><span class="pre">devpoll.</span></span><span class="sig-name descname"><span class="pre">modify</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">fd</span></span></em><span class="optional">[</span>, <em class="sig-param"><span class="n"><span class="pre">eventmask</span></span></em><span class="optional">]</span><span class="sig-paren">)</span></dt>
<dd><p>此方法先执行 <a class="reference internal" href="#select.devpoll.unregister" title="select.devpoll.unregister"><code class="xref py py-meth docutils literal notranslate"><span class="pre">unregister()</span></code></a> 后执行 <a class="reference internal" href="#select.devpoll.register" title="select.devpoll.register"><code class="xref py py-meth docutils literal notranslate"><span class="pre">register()</span></code></a>。直接执行此操作效率（稍微）高一些。</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="select.devpoll.unregister">
<span class="sig-prename descclassname"><span class="pre">devpoll.</span></span><span class="sig-name descname"><span class="pre">unregister</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">fd</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>删除轮询对象正在跟踪的某个文件描述符。与 <a class="reference internal" href="#select.devpoll.register" title="select.devpoll.register"><code class="xref py py-meth docutils literal notranslate"><span class="pre">register()</span></code></a> 方法类似，<em>fd</em> 可以是整数，也可以是带有 <a class="reference internal" href="io.xhtml#io.IOBase.fileno" title="io.IOBase.fileno"><code class="xref py py-meth docutils literal notranslate"><span class="pre">fileno()</span></code></a> 方法的对象（该方法返回一个整数）。</p>
<p>尝试删除从未注册过的文件描述符将被安全地忽略。</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="select.devpoll.poll">
<span class="sig-prename descclassname"><span class="pre">devpoll.</span></span><span class="sig-name descname"><span class="pre">poll</span></span><span class="sig-paren">(</span><span class="optional">[</span><em class="sig-param"><span class="n"><span class="pre">timeout</span></span></em><span class="optional">]</span><span class="sig-paren">)</span></dt>
<dd><p>轮询已注册的文件描述符的集合，并返回一个列表，列表可能为空，也可能有多个 <code class="docutils literal notranslate"><span class="pre">(fd,</span> <span class="pre">event)</span></code> 2元组，其中包含了要报告事件或错误的描述符。 <em>fd</em> 是文件描述符，<em>event</em> 是一个位掩码，表示该描述符所报告的事件 --- <code class="xref py py-const docutils literal notranslate"><span class="pre">POLLIN</span></code> 表示等待输入，<code class="xref py py-const docutils literal notranslate"><span class="pre">POLLOUT</span></code> 表示该描述符可以写入，依此类推。 空列表表示调用超时，没有任何文件描述符报告事件。 如果指定了 <em>timeout</em>，它将指定系统等待事件时，等待多长时间后返回（以毫秒为单位）。如果 <em>timeout</em> 被省略、为 -1 或为 <a class="reference internal" href="constants.xhtml#None" title="None"><code class="xref py py-const docutils literal notranslate"><span class="pre">None</span></code></a>，则本调用将阻塞，直到轮询对象发生事件为止。</p>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.5 版本发生变更: </span>现在，当本函数被信号中断时，重试超时将从头开始计时，不会抛出 <a class="reference internal" href="exceptions.xhtml#InterruptedError" title="InterruptedError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">InterruptedError</span></code></a> 异常。除非信号处理程序抛出异常（相关原理请参阅 <span class="target" id="index-16"></span><a class="pep reference external" href="https://peps.python.org/pep-0475/"><strong>PEP 475</strong></a><span class="link-target"> [https://peps.python.org/pep-0475/]</span>）。</p>
</div>
</dd></dl>

</section>
<section id="edge-and-level-trigger-polling-epoll-objects">
<span id="epoll-objects"></span><h2>边缘触发和水平触发的轮询 (epoll) 对象</h2>
<blockquote>
<div><p><a class="reference external" href="https://linux.die.net/man/4/epoll">https://linux.die.net/man/4/epoll</a></p>
<p><em>eventmask</em></p>
<table class="docutils align-default">
<thead>
<tr class="row-odd"><th class="head"><p>常量</p></th>
<th class="head"><p>含意</p></th>
</tr>
</thead>
<tbody>
<tr class="row-even"><td><p><code class="xref py py-const docutils literal notranslate"><span class="pre">EPOLLIN</span></code></p></td>
<td><p>可读</p></td>
</tr>
<tr class="row-odd"><td><p><code class="xref py py-const docutils literal notranslate"><span class="pre">EPOLLOUT</span></code></p></td>
<td><p>可写</p></td>
</tr>
<tr class="row-even"><td><p><code class="xref py py-const docutils literal notranslate"><span class="pre">EPOLLPRI</span></code></p></td>
<td><p>紧急数据读取</p></td>
</tr>
<tr class="row-odd"><td><p><code class="xref py py-const docutils literal notranslate"><span class="pre">EPOLLERR</span></code></p></td>
<td><p>在关联的文件描述符上有错误情况发生</p></td>
</tr>
<tr class="row-even"><td><p><code class="xref py py-const docutils literal notranslate"><span class="pre">EPOLLHUP</span></code></p></td>
<td><p>关联的文件描述符已挂起</p></td>
</tr>
<tr class="row-odd"><td><p><code class="xref py py-const docutils literal notranslate"><span class="pre">EPOLLET</span></code></p></td>
<td><p>设置触发方式为边缘触发，默认为水平触发</p></td>
</tr>
<tr class="row-even"><td><p><code class="xref py py-const docutils literal notranslate"><span class="pre">EPOLLONESHOT</span></code></p></td>
<td><p>设置 one-shot 模式。触发一次事件后，该描述符会在轮询对象内部被禁用。</p></td>
</tr>
<tr class="row-odd"><td><p><code class="xref py py-const docutils literal notranslate"><span class="pre">EPOLLEXCLUSIVE</span></code></p></td>
<td><p>当已关联的描述符发生事件时，仅唤醒一个 epoll 对象。默认（如果未设置此标志）是唤醒所有轮询该描述符的 epoll 对象。</p></td>
</tr>
<tr class="row-even"><td><p><code class="xref py py-const docutils literal notranslate"><span class="pre">EPOLLRDHUP</span></code></p></td>
<td><p>流套接字的对侧关闭了连接或关闭了写入到一半的连接。</p></td>
</tr>
<tr class="row-odd"><td><p><code class="xref py py-const docutils literal notranslate"><span class="pre">EPOLLRDNORM</span></code></p></td>
<td><p>等同于 <code class="xref py py-const docutils literal notranslate"><span class="pre">EPOLLIN</span></code></p></td>
</tr>
<tr class="row-even"><td><p><code class="xref py py-const docutils literal notranslate"><span class="pre">EPOLLRDBAND</span></code></p></td>
<td><p>可以读取优先数据带。</p></td>
</tr>
<tr class="row-odd"><td><p><code class="xref py py-const docutils literal notranslate"><span class="pre">EPOLLWRNORM</span></code></p></td>
<td><p>等同于 <code class="xref py py-const docutils literal notranslate"><span class="pre">EPOLLOUT</span></code></p></td>
</tr>
<tr class="row-even"><td><p><code class="xref py py-const docutils literal notranslate"><span class="pre">EPOLLWRBAND</span></code></p></td>
<td><p>可以写入优先级数据。</p></td>
</tr>
<tr class="row-odd"><td><p><code class="xref py py-const docutils literal notranslate"><span class="pre">EPOLLMSG</span></code></p></td>
<td><p>忽略</p></td>
</tr>
</tbody>
</table>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.6: </span>增加了 <code class="xref py py-const docutils literal notranslate"><span class="pre">EPOLLEXCLUSIVE</span></code>。仅支持 Linux Kernel 4.5 或更高版本。</p>
</div>
</div></blockquote>
<dl class="py method">
<dt class="sig sig-object py" id="select.epoll.close">
<span class="sig-prename descclassname"><span class="pre">epoll.</span></span><span class="sig-name descname"><span class="pre">close</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>关闭用于控制 epoll 对象的文件描述符。</p>
</dd></dl>

<dl class="py attribute">
<dt class="sig sig-object py" id="select.epoll.closed">
<span class="sig-prename descclassname"><span class="pre">epoll.</span></span><span class="sig-name descname"><span class="pre">closed</span></span></dt>
<dd><p>如果 epoll 对象已关闭，则返回 <code class="docutils literal notranslate"><span class="pre">True</span></code>。</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="select.epoll.fileno">
<span class="sig-prename descclassname"><span class="pre">epoll.</span></span><span class="sig-name descname"><span class="pre">fileno</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>返回文件描述符对应的数字，该描述符用于控制 epoll 对象。</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="select.epoll.fromfd">
<span class="sig-prename descclassname"><span class="pre">epoll.</span></span><span class="sig-name descname"><span class="pre">fromfd</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">fd</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>根据给定的文件描述符创建 epoll 对象。</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="select.epoll.register">
<span class="sig-prename descclassname"><span class="pre">epoll.</span></span><span class="sig-name descname"><span class="pre">register</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">fd</span></span></em><span class="optional">[</span>, <em class="sig-param"><span class="n"><span class="pre">eventmask</span></span></em><span class="optional">]</span><span class="sig-paren">)</span></dt>
<dd><p>在 epoll 对象中注册一个文件描述符。</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="select.epoll.modify">
<span class="sig-prename descclassname"><span class="pre">epoll.</span></span><span class="sig-name descname"><span class="pre">modify</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">fd</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">eventmask</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>修改一个已注册的文件描述符。</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="select.epoll.unregister">
<span class="sig-prename descclassname"><span class="pre">epoll.</span></span><span class="sig-name descname"><span class="pre">unregister</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">fd</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>从 epoll 对象中删除一个已注册的文件描述符。</p>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.9 版本发生变更: </span>此方法不会再忽略 <a class="reference internal" href="errno.xhtml#errno.EBADF" title="errno.EBADF"><code class="xref py py-data docutils literal notranslate"><span class="pre">EBADF</span></code></a> 错误。</p>
</div>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="select.epoll.poll">
<span class="sig-prename descclassname"><span class="pre">epoll.</span></span><span class="sig-name descname"><span class="pre">poll</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">timeout</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">maxevents</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">-1</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>等待事件发生，timeout 是浮点数，单位为秒。</p>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.5 版本发生变更: </span>现在，当本函数被信号中断时，重试超时将从头开始计时，不会抛出 <a class="reference internal" href="exceptions.xhtml#InterruptedError" title="InterruptedError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">InterruptedError</span></code></a> 异常。除非信号处理程序抛出异常（相关原理请参阅 <span class="target" id="index-17"></span><a class="pep reference external" href="https://peps.python.org/pep-0475/"><strong>PEP 475</strong></a><span class="link-target"> [https://peps.python.org/pep-0475/]</span>）。</p>
</div>
</dd></dl>

</section>
<section id="polling-objects">
<span id="poll-objects"></span><h2>Poll 对象</h2>
<p>大多数 Unix 系统都支持 <code class="xref c c-func docutils literal notranslate"><span class="pre">poll()</span></code> 系统调用，它为网络服务器提供了更好的可伸缩性，可以同时为大量客户端提供服务。 <code class="xref c c-func docutils literal notranslate"><span class="pre">poll()</span></code> 的可伸缩性更好是因为该系统只须列出要关注的文件描述符，而 <code class="xref c c-func docutils literal notranslate"><span class="pre">select()</span></code> 则会构建一个位映射表，打开这个要关注的描述符所对应的比特位，然后再次线性扫描整个位映射表。 <code class="xref c c-func docutils literal notranslate"><span class="pre">select()</span></code> 的复杂度为 <em>O</em>(<em>最高文件描述符</em>)，而 <code class="xref c c-func docutils literal notranslate"><span class="pre">poll()</span></code> 则为 <em>O</em>(<em>文件描述符的数量</em>)。</p>
<dl class="py method">
<dt class="sig sig-object py" id="select.poll.register">
<span class="sig-prename descclassname"><span class="pre">poll.</span></span><span class="sig-name descname"><span class="pre">register</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">fd</span></span></em><span class="optional">[</span>, <em class="sig-param"><span class="n"><span class="pre">eventmask</span></span></em><span class="optional">]</span><span class="sig-paren">)</span></dt>
<dd><p>在轮询对象中注册文件描述符。这样，将来调用 <a class="reference internal" href="#select.poll" title="select.poll"><code class="xref py py-meth docutils literal notranslate"><span class="pre">poll()</span></code></a> 方法时将检查文件描述符是否有未处理的 I/O 事件。<em>fd</em> 可以是整数，也可以是带有 <a class="reference internal" href="io.xhtml#io.IOBase.fileno" title="io.IOBase.fileno"><code class="xref py py-meth docutils literal notranslate"><span class="pre">fileno()</span></code></a> 方法的对象（该方法返回一个整数）。文件对象已经实现了 <code class="xref py py-meth docutils literal notranslate"><span class="pre">fileno()</span></code>，因此它们也可以用作参数。</p>
<p><em>eventmask</em> 是可选的位掩码，用于指定要检查的事件类型，它可以是常量 <code class="xref py py-const docutils literal notranslate"><span class="pre">POLLIN</span></code>、<code class="xref py py-const docutils literal notranslate"><span class="pre">POLLPRI</span></code> 和 <code class="xref py py-const docutils literal notranslate"><span class="pre">POLLOUT</span></code> 的组合，如下表所述。如果未指定本参数，默认将会检查所有 3 种类型的事件。</p>
<table class="docutils align-default">
<thead>
<tr class="row-odd"><th class="head"><p>常量</p></th>
<th class="head"><p>含意</p></th>
</tr>
</thead>
<tbody>
<tr class="row-even"><td><p><code class="xref py py-const docutils literal notranslate"><span class="pre">POLLIN</span></code></p></td>
<td><p>有要读取的数据</p></td>
</tr>
<tr class="row-odd"><td><p><code class="xref py py-const docutils literal notranslate"><span class="pre">POLLPRI</span></code></p></td>
<td><p>有紧急数据需要读取</p></td>
</tr>
<tr class="row-even"><td><p><code class="xref py py-const docutils literal notranslate"><span class="pre">POLLOUT</span></code></p></td>
<td><p>准备输出：写不会阻塞</p></td>
</tr>
<tr class="row-odd"><td><p><code class="xref py py-const docutils literal notranslate"><span class="pre">POLLERR</span></code></p></td>
<td><p>某种错误条件</p></td>
</tr>
<tr class="row-even"><td><p><code class="xref py py-const docutils literal notranslate"><span class="pre">POLLHUP</span></code></p></td>
<td><p>挂起</p></td>
</tr>
<tr class="row-odd"><td><p><code class="xref py py-const docutils literal notranslate"><span class="pre">POLLRDHUP</span></code></p></td>
<td><p>流套接字的对侧关闭了连接，或关闭了写入到一半的连接</p></td>
</tr>
<tr class="row-even"><td><p><code class="xref py py-const docutils literal notranslate"><span class="pre">POLLNVAL</span></code></p></td>
<td><p>无效的请求：描述符未打开</p></td>
</tr>
</tbody>
</table>
<p>注册已注册过的文件描述符不会报错，且等同于只注册一次该描述符。</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="select.poll.modify">
<span class="sig-prename descclassname"><span class="pre">poll.</span></span><span class="sig-name descname"><span class="pre">modify</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">fd</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">eventmask</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>修改一个已注册的文件描述符，等同于 <code class="docutils literal notranslate"><span class="pre">register(fd,</span> <span class="pre">eventmask)</span></code>。尝试修改未注册的文件描述符会抛出 <a class="reference internal" href="exceptions.xhtml#OSError" title="OSError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">OSError</span></code></a> 异常，错误码为 <code class="xref py py-const docutils literal notranslate"><span class="pre">ENOENT</span></code>。</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="select.poll.unregister">
<span class="sig-prename descclassname"><span class="pre">poll.</span></span><span class="sig-name descname"><span class="pre">unregister</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">fd</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>删除轮询对象正在跟踪的某个文件描述符。与 <a class="reference internal" href="#select.poll.register" title="select.poll.register"><code class="xref py py-meth docutils literal notranslate"><span class="pre">register()</span></code></a> 方法类似，<em>fd</em> 可以是整数，也可以是带有 <a class="reference internal" href="io.xhtml#io.IOBase.fileno" title="io.IOBase.fileno"><code class="xref py py-meth docutils literal notranslate"><span class="pre">fileno()</span></code></a> 方法的对象（该方法返回一个整数）。</p>
<p>尝试删除从未注册过的文件描述符会抛出 <a class="reference internal" href="exceptions.xhtml#KeyError" title="KeyError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">KeyError</span></code></a> 异常。</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="select.poll.poll">
<span class="sig-prename descclassname"><span class="pre">poll.</span></span><span class="sig-name descname"><span class="pre">poll</span></span><span class="sig-paren">(</span><span class="optional">[</span><em class="sig-param"><span class="n"><span class="pre">timeout</span></span></em><span class="optional">]</span><span class="sig-paren">)</span></dt>
<dd><p>轮询已注册的文件描述符的集合，并返回一个列表，列表可能为空，也可能有多个 <code class="docutils literal notranslate"><span class="pre">(fd,</span> <span class="pre">event)</span></code> 2元组，其中包含了要报告事件或错误的描述符。 <em>fd</em> 是文件描述符，<em>event</em> 是一个位掩码，表示该描述符所报告的事件 --- <code class="xref py py-const docutils literal notranslate"><span class="pre">POLLIN</span></code> 表示等待输入，<code class="xref py py-const docutils literal notranslate"><span class="pre">POLLOUT</span></code> 表示该描述符可以写入，依此类推。 空列表表示调用超时，没有任何文件描述符报告事件。 如果指定了 <em>timeout</em>，它将指定系统等待事件时，等待多长时间后返回（以毫秒为单位）。如果 <em>timeout</em> 被省略、为 -1 或为 <a class="reference internal" href="constants.xhtml#None" title="None"><code class="xref py py-const docutils literal notranslate"><span class="pre">None</span></code></a>，则本调用将阻塞，直到轮询对象发生事件为止。</p>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.5 版本发生变更: </span>现在，当本函数被信号中断时，重试超时将从头开始计时，不会抛出 <a class="reference internal" href="exceptions.xhtml#InterruptedError" title="InterruptedError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">InterruptedError</span></code></a> 异常。除非信号处理程序抛出异常（相关原理请参阅 <span class="target" id="index-18"></span><a class="pep reference external" href="https://peps.python.org/pep-0475/"><strong>PEP 475</strong></a><span class="link-target"> [https://peps.python.org/pep-0475/]</span>）。</p>
</div>
</dd></dl>

</section>
<section id="kqueue-objects">
<span id="id1"></span><h2>Kqueue 对象</h2>
<dl class="py method">
<dt class="sig sig-object py" id="select.kqueue.close">
<span class="sig-prename descclassname"><span class="pre">kqueue.</span></span><span class="sig-name descname"><span class="pre">close</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>关闭用于控制 kqueue 对象的文件描述符。</p>
</dd></dl>

<dl class="py attribute">
<dt class="sig sig-object py" id="select.kqueue.closed">
<span class="sig-prename descclassname"><span class="pre">kqueue.</span></span><span class="sig-name descname"><span class="pre">closed</span></span></dt>
<dd><p>如果 kqueue 对象已关闭，则返回 <code class="docutils literal notranslate"><span class="pre">True</span></code>。</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="select.kqueue.fileno">
<span class="sig-prename descclassname"><span class="pre">kqueue.</span></span><span class="sig-name descname"><span class="pre">fileno</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>返回文件描述符对应的数字，该描述符用于控制 epoll 对象。</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="select.kqueue.fromfd">
<span class="sig-prename descclassname"><span class="pre">kqueue.</span></span><span class="sig-name descname"><span class="pre">fromfd</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">fd</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>根据给定的文件描述符创建 kqueue 对象。</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="select.kqueue.control">
<span class="sig-prename descclassname"><span class="pre">kqueue.</span></span><span class="sig-name descname"><span class="pre">control</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">changelist</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">max_events</span></span></em><span class="optional">[</span>, <em class="sig-param"><span class="n"><span class="pre">timeout</span></span></em><span class="optional">]</span><span class="sig-paren">)</span> <span class="sig-return"><span class="sig-return-icon">&#x2192;</span> <span class="sig-return-typehint"><span class="pre">eventlist</span></span></span></dt>
<dd><p>Kevent 的低级接口</p>
<ul class="simple">
<li><p>changelist 必须是一个可迭代对象，迭代出 kevent 对象，否则置为 <code class="docutils literal notranslate"><span class="pre">None</span></code>。</p></li>
<li><p>max_events 必须是 0 或一个正整数。</p></li>
<li><p>timeout 单位为秒（一般为浮点数），默认为 <code class="docutils literal notranslate"><span class="pre">None</span></code>，即永不超时。</p></li>
</ul>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.5 版本发生变更: </span>现在，当本函数被信号中断时，重试超时将从头开始计时，不会抛出 <a class="reference internal" href="exceptions.xhtml#InterruptedError" title="InterruptedError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">InterruptedError</span></code></a> 异常。除非信号处理程序抛出异常（相关原理请参阅 <span class="target" id="index-19"></span><a class="pep reference external" href="https://peps.python.org/pep-0475/"><strong>PEP 475</strong></a><span class="link-target"> [https://peps.python.org/pep-0475/]</span>）。</p>
</div>
</dd></dl>

</section>
<section id="kevent-objects">
<span id="id2"></span><h2>Kevent 对象</h2>
<p><a class="reference external" href="https://man.freebsd.org/cgi/man.cgi?query=kqueue&amp;sektion=2">https://man.freebsd.org/cgi/man.cgi?query=kqueue&amp;sektion=2</a></p>
<dl class="py attribute">
<dt class="sig sig-object py" id="select.kevent.ident">
<span class="sig-prename descclassname"><span class="pre">kevent.</span></span><span class="sig-name descname"><span class="pre">ident</span></span></dt>
<dd><p>用于区分事件的标识值。其解释取决于筛选器，但该值通常是文件描述符。在构造函数中，该标识值可以是整数或带有 <a class="reference internal" href="io.xhtml#io.IOBase.fileno" title="io.IOBase.fileno"><code class="xref py py-meth docutils literal notranslate"><span class="pre">fileno()</span></code></a> 方法的对象。kevent 在内部存储整数。</p>
</dd></dl>

<dl class="py attribute">
<dt class="sig sig-object py" id="select.kevent.filter">
<span class="sig-prename descclassname"><span class="pre">kevent.</span></span><span class="sig-name descname"><span class="pre">filter</span></span></dt>
<dd><p>内核筛选器的名称。</p>
<table class="docutils align-default">
<thead>
<tr class="row-odd"><th class="head"><p>常量</p></th>
<th class="head"><p>含意</p></th>
</tr>
</thead>
<tbody>
<tr class="row-even"><td><p><code class="xref py py-const docutils literal notranslate"><span class="pre">KQ_FILTER_READ</span></code></p></td>
<td><p>获取描述符，并在有数据可读时返回</p></td>
</tr>
<tr class="row-odd"><td><p><code class="xref py py-const docutils literal notranslate"><span class="pre">KQ_FILTER_WRITE</span></code></p></td>
<td><p>获取描述符，并在有数据可写时返回</p></td>
</tr>
<tr class="row-even"><td><p><code class="xref py py-const docutils literal notranslate"><span class="pre">KQ_FILTER_AIO</span></code></p></td>
<td><p>AIO 请求</p></td>
</tr>
<tr class="row-odd"><td><p><code class="xref py py-const docutils literal notranslate"><span class="pre">KQ_FILTER_VNODE</span></code></p></td>
<td><p>当在 <em>fflag</em> 中监视的一个或多个请求事件发生时返回</p></td>
</tr>
<tr class="row-even"><td><p><code class="xref py py-const docutils literal notranslate"><span class="pre">KQ_FILTER_PROC</span></code></p></td>
<td><p>监视进程ID上的事件</p></td>
</tr>
<tr class="row-odd"><td><p><code class="xref py py-const docutils literal notranslate"><span class="pre">KQ_FILTER_NETDEV</span></code></p></td>
<td><p>观察网络设备上的事件 [在 macOS 上不可用]</p></td>
</tr>
<tr class="row-even"><td><p><code class="xref py py-const docutils literal notranslate"><span class="pre">KQ_FILTER_SIGNAL</span></code></p></td>
<td><p>每当监视的信号传递到进程时返回</p></td>
</tr>
<tr class="row-odd"><td><p><code class="xref py py-const docutils literal notranslate"><span class="pre">KQ_FILTER_TIMER</span></code></p></td>
<td><p>建立一个任意的计时器</p></td>
</tr>
</tbody>
</table>
</dd></dl>

<dl class="py attribute">
<dt class="sig sig-object py" id="select.kevent.flags">
<span class="sig-prename descclassname"><span class="pre">kevent.</span></span><span class="sig-name descname"><span class="pre">flags</span></span></dt>
<dd><p>筛选器操作。</p>
<table class="docutils align-default">
<thead>
<tr class="row-odd"><th class="head"><p>常量</p></th>
<th class="head"><p>含意</p></th>
</tr>
</thead>
<tbody>
<tr class="row-even"><td><p><code class="xref py py-const docutils literal notranslate"><span class="pre">KQ_EV_ADD</span></code></p></td>
<td><p>添加或修改事件</p></td>
</tr>
<tr class="row-odd"><td><p><code class="xref py py-const docutils literal notranslate"><span class="pre">KQ_EV_DELETE</span></code></p></td>
<td><p>从队列中删除事件</p></td>
</tr>
<tr class="row-even"><td><p><code class="xref py py-const docutils literal notranslate"><span class="pre">KQ_EV_ENABLE</span></code></p></td>
<td><p>Permitscontrol() 返回事件</p></td>
</tr>
<tr class="row-odd"><td><p><code class="xref py py-const docutils literal notranslate"><span class="pre">KQ_EV_DISABLE</span></code></p></td>
<td><p>禁用事件</p></td>
</tr>
<tr class="row-even"><td><p><code class="xref py py-const docutils literal notranslate"><span class="pre">KQ_EV_ONESHOT</span></code></p></td>
<td><p>在第一次发生后删除事件</p></td>
</tr>
<tr class="row-odd"><td><p><code class="xref py py-const docutils literal notranslate"><span class="pre">KQ_EV_CLEAR</span></code></p></td>
<td><p>检索事件后重置状态</p></td>
</tr>
<tr class="row-even"><td><p><code class="xref py py-const docutils literal notranslate"><span class="pre">KQ_EV_SYSFLAGS</span></code></p></td>
<td><p>内部事件</p></td>
</tr>
<tr class="row-odd"><td><p><code class="xref py py-const docutils literal notranslate"><span class="pre">KQ_EV_FLAG1</span></code></p></td>
<td><p>内部事件</p></td>
</tr>
<tr class="row-even"><td><p><code class="xref py py-const docutils literal notranslate"><span class="pre">KQ_EV_EOF</span></code></p></td>
<td><p>筛选特定EOF条件</p></td>
</tr>
<tr class="row-odd"><td><p><code class="xref py py-const docutils literal notranslate"><span class="pre">KQ_EV_ERROR</span></code></p></td>
<td><p>请参阅返回值</p></td>
</tr>
</tbody>
</table>
</dd></dl>

<dl class="py attribute">
<dt class="sig sig-object py" id="select.kevent.fflags">
<span class="sig-prename descclassname"><span class="pre">kevent.</span></span><span class="sig-name descname"><span class="pre">fflags</span></span></dt>
<dd><p>筛选特定标志。</p>
<p><code class="xref py py-const docutils literal notranslate"><span class="pre">KQ_FILTER_READ</span></code> 和  <code class="xref py py-const docutils literal notranslate"><span class="pre">KQ_FILTER_WRITE</span></code> 筛选标志：</p>
<table class="docutils align-default">
<thead>
<tr class="row-odd"><th class="head"><p>常量</p></th>
<th class="head"><p>含意</p></th>
</tr>
</thead>
<tbody>
<tr class="row-even"><td><p><code class="xref py py-const docutils literal notranslate"><span class="pre">KQ_NOTE_LOWAT</span></code></p></td>
<td><p>套接字缓冲区的低水线</p></td>
</tr>
</tbody>
</table>
<p><code class="xref py py-const docutils literal notranslate"><span class="pre">KQ_FILTER_VNODE</span></code> 筛选标志：</p>
<table class="docutils align-default">
<thead>
<tr class="row-odd"><th class="head"><p>常量</p></th>
<th class="head"><p>含意</p></th>
</tr>
</thead>
<tbody>
<tr class="row-even"><td><p><code class="xref py py-const docutils literal notranslate"><span class="pre">KQ_NOTE_DELETE</span></code></p></td>
<td><p>已调用 <em>unlink()</em></p></td>
</tr>
<tr class="row-odd"><td><p><code class="xref py py-const docutils literal notranslate"><span class="pre">KQ_NOTE_WRITE</span></code></p></td>
<td><p>发生写入</p></td>
</tr>
<tr class="row-even"><td><p><code class="xref py py-const docutils literal notranslate"><span class="pre">KQ_NOTE_EXTEND</span></code></p></td>
<td><p>文件已扩展</p></td>
</tr>
<tr class="row-odd"><td><p><code class="xref py py-const docutils literal notranslate"><span class="pre">KQ_NOTE_ATTRIB</span></code></p></td>
<td><p>属性已更改</p></td>
</tr>
<tr class="row-even"><td><p><code class="xref py py-const docutils literal notranslate"><span class="pre">KQ_NOTE_LINK</span></code></p></td>
<td><p>链接计数已更改</p></td>
</tr>
<tr class="row-odd"><td><p><code class="xref py py-const docutils literal notranslate"><span class="pre">KQ_NOTE_RENAME</span></code></p></td>
<td><p>文件已重命名</p></td>
</tr>
<tr class="row-even"><td><p><code class="xref py py-const docutils literal notranslate"><span class="pre">KQ_NOTE_REVOKE</span></code></p></td>
<td><p>对文件的访问权限已被撤销</p></td>
</tr>
</tbody>
</table>
<p><code class="xref py py-const docutils literal notranslate"><span class="pre">KQ_FILTER_PROC</span></code> filter flags:</p>
<table class="docutils align-default">
<thead>
<tr class="row-odd"><th class="head"><p>常量</p></th>
<th class="head"><p>含意</p></th>
</tr>
</thead>
<tbody>
<tr class="row-even"><td><p><code class="xref py py-const docutils literal notranslate"><span class="pre">KQ_NOTE_EXIT</span></code></p></td>
<td><p>进程已退出</p></td>
</tr>
<tr class="row-odd"><td><p><code class="xref py py-const docutils literal notranslate"><span class="pre">KQ_NOTE_FORK</span></code></p></td>
<td><p>该进程调用了 <em>fork()</em></p></td>
</tr>
<tr class="row-even"><td><p><code class="xref py py-const docutils literal notranslate"><span class="pre">KQ_NOTE_EXEC</span></code></p></td>
<td><p>进程已执行新进程</p></td>
</tr>
<tr class="row-odd"><td><p><code class="xref py py-const docutils literal notranslate"><span class="pre">KQ_NOTE_PCTRLMASK</span></code></p></td>
<td><p>内部筛选器标志</p></td>
</tr>
<tr class="row-even"><td><p><code class="xref py py-const docutils literal notranslate"><span class="pre">KQ_NOTE_PDATAMASK</span></code></p></td>
<td><p>内部筛选器标志</p></td>
</tr>
<tr class="row-odd"><td><p><code class="xref py py-const docutils literal notranslate"><span class="pre">KQ_NOTE_TRACK</span></code></p></td>
<td><p>跨  <em>fork()</em> 执行进程</p></td>
</tr>
<tr class="row-even"><td><p><code class="xref py py-const docutils literal notranslate"><span class="pre">KQ_NOTE_CHILD</span></code></p></td>
<td><p>在  <em>NOTE_TRACK</em> 的子进程上返回</p></td>
</tr>
<tr class="row-odd"><td><p><code class="xref py py-const docutils literal notranslate"><span class="pre">KQ_NOTE_TRACKERR</span></code></p></td>
<td><p>无法附加到子对象</p></td>
</tr>
</tbody>
</table>
<p><code class="xref py py-const docutils literal notranslate"><span class="pre">KQ_FILTER_NETDEV</span></code> 过滤器旗标 (在 macOS 上不可用):</p>
<table class="docutils align-default">
<thead>
<tr class="row-odd"><th class="head"><p>常量</p></th>
<th class="head"><p>含意</p></th>
</tr>
</thead>
<tbody>
<tr class="row-even"><td><p><code class="xref py py-const docutils literal notranslate"><span class="pre">KQ_NOTE_LINKUP</span></code></p></td>
<td><p>链接已建立</p></td>
</tr>
<tr class="row-odd"><td><p><code class="xref py py-const docutils literal notranslate"><span class="pre">KQ_NOTE_LINKDOWN</span></code></p></td>
<td><p>链接已断开</p></td>
</tr>
<tr class="row-even"><td><p><code class="xref py py-const docutils literal notranslate"><span class="pre">KQ_NOTE_LINKINV</span></code></p></td>
<td><p>链接状态无效</p></td>
</tr>
</tbody>
</table>
</dd></dl>

<dl class="py attribute">
<dt class="sig sig-object py" id="select.kevent.data">
<span class="sig-prename descclassname"><span class="pre">kevent.</span></span><span class="sig-name descname"><span class="pre">data</span></span></dt>
<dd><p>筛选特定数据。</p>
</dd></dl>

<dl class="py attribute">
<dt class="sig sig-object py" id="select.kevent.udata">
<span class="sig-prename descclassname"><span class="pre">kevent.</span></span><span class="sig-name descname"><span class="pre">udata</span></span></dt>
<dd><p>用户自定义值。</p>
</dd></dl>

</section>
</section>


            <div class="clearer"></div>
          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>