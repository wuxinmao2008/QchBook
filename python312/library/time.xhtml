<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" /><meta name="viewport" content="width=device-width, initial-scale=1" />
<meta property="og:title" content="time --- 时间的访问和转换" />
<meta property="og:type" content="website" />
<meta property="og:url" content="https://docs.python.org/3/library/time.xhtml" />
<meta property="og:site_name" content="Python documentation" />
<meta property="og:description" content="该模块提供了各种与时间相关的函数。相关功能还可以参阅 datetime 和 calendar 模块。 尽管所有平台皆可使用此模块，但模块内的函数并非所有平台都可用。此模块中定义的大多数函数的实现都是调用其所在平台的C语言库的同名函数。因为这些函数的语义可能因平台而异，所以使用时最好查阅对应平台的相关文档。 下面是一些术语和惯例的解释. epoch 是起始的时间点，即 time.gmtime(..." />
<meta property="og:image" content="https://docs.python.org/3/_static/og-image.png" />
<meta property="og:image:alt" content="Python documentation" />
<meta name="description" content="该模块提供了各种与时间相关的函数。相关功能还可以参阅 datetime 和 calendar 模块。 尽管所有平台皆可使用此模块，但模块内的函数并非所有平台都可用。此模块中定义的大多数函数的实现都是调用其所在平台的C语言库的同名函数。因为这些函数的语义可能因平台而异，所以使用时最好查阅对应平台的相关文档。 下面是一些术语和惯例的解释. epoch 是起始的时间点，即 time.gmtime(..." />
<meta property="og:image:width" content="200" />
<meta property="og:image:height" content="200" />
<meta name="theme-color" content="#3776ab" />

    <title>time --- 时间的访问和转换</title>
    <link rel="stylesheet" type="text/css" href="../_static/pygments.css" />
    <link rel="stylesheet" type="text/css" href="../_static/epub.css" />
    <link rel="canonical" href="https://docs.python.org/3/library/time.html" />
    
      
    

    
    <style>
      @media only screen {
        table.full-width-table {
            width: 100%;
        }
      }
    </style>
 

  </head><body>


    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <section id="module-time">
<span id="time-time-access-and-conversions"></span><h1><code class="xref py py-mod docutils literal notranslate"><span class="pre">time</span></code> --- 时间的访问和转换</h1>
<hr class="docutils" />
<p>该模块提供了各种与时间相关的函数。相关功能还可以参阅 <a class="reference internal" href="datetime.xhtml#module-datetime" title="datetime: Basic date and time types."><code class="xref py py-mod docutils literal notranslate"><span class="pre">datetime</span></code></a> 和 <a class="reference internal" href="calendar.xhtml#module-calendar" title="calendar: Functions for working with calendars, including some emulation of the Unix cal program."><code class="xref py py-mod docutils literal notranslate"><span class="pre">calendar</span></code></a> 模块。</p>
<p>尽管所有平台皆可使用此模块，但模块内的函数并非所有平台都可用。此模块中定义的大多数函数的实现都是调用其所在平台的C语言库的同名函数。因为这些函数的语义可能因平台而异，所以使用时最好查阅对应平台的相关文档。</p>
<p>下面是一些术语和惯例的解释.</p>
<span id="epoch"></span><ul class="simple" id="index-0">
<li><p><em class="dfn">epoch</em> 是起始的时间点，即 <code class="docutils literal notranslate"><span class="pre">time.gmtime(0)</span></code> 的返回值。 这在所有平台上都是 1970-01-01, 00:00:00 (UTC)。</p></li>
</ul>
<ul class="simple" id="index-1">
<li><p>术语 <em class="dfn">纪元秒数</em> 是指自 epoch （纪元）时间点以来经过的总秒数，通常不包括 <a class="reference external" href="https://en.wikipedia.org/wiki/Leap_second">闰秒</a><span class="link-target"> [https://en.wikipedia.org/wiki/Leap_second]</span>。 在所有符合 POSIX 标准的平台上，闰秒都不会记录在总秒数中。</p></li>
</ul>
<ul class="simple" id="index-2">
<li><p>此模块中的函数可能无法处理 <a class="reference internal" href="#epoch">epoch</a> 之前或遥远未来的日期和时间。 “遥远未来”的分界点是由 C 库确定的；对于 32 位系统，它通常是在 2038 年。</p></li>
</ul>
<ul class="simple" id="index-3">
<li><p>函数 <a class="reference internal" href="#time.strptime" title="time.strptime"><code class="xref py py-func docutils literal notranslate"><span class="pre">strptime()</span></code></a> 在接收到 <code class="docutils literal notranslate"><span class="pre">%y</span></code> 格式代码时可以解析使用 2 位数表示的年份。当解析 2 位数年份时，函数会按照 POSIX 和 ISO C 标准进行年份转换：数值 69--99 被映射为 1969--1999；数值 0--68 被映射为 2000--2068。</p></li>
</ul>
<ul class="simple" id="index-4">
<li><p>UTC是协调世界时（Coordinated Universal Time）的缩写。它以前也被称为格林威治标准时间（GMT）。使用UTC而不是CUT作为缩写是英语与法语（Temps Universel Coordonné）之间妥协的结果，不是什么低级错误。</p></li>
</ul>
<ul id="index-5">
<li><p>DST是夏令时（Daylight Saving Time）的缩写，在一年的某一段时间中将当地时间调整（通常）一小时。 DST的规则非常神奇（由当地法律确定），并且每年的起止时间都不同。C语言库中有一个表格，记录了各地的夏令时规则（实际上，为了灵活性，C语言库通常是从某个系统文件中读取这张表）。从这个角度而言，这张表是夏令时规则的唯一权威真理。</p></li>
<li><p>由于平台限制，各种实时函数的精度可能低于其值或参数所要求（或给定）的精度。例如，在大多数Unix系统上，时钟频率仅为每秒50或100次。</p></li>
<li><p>另一方面，<a class="reference internal" href="#time.time" title="time.time"><code class="xref py py-func docutils literal notranslate"><span class="pre">time()</span></code></a> 和 <a class="reference internal" href="#time.sleep" title="time.sleep"><code class="xref py py-func docutils literal notranslate"><span class="pre">sleep()</span></code></a> 的精度优于它们的 Unix 等价物：时间表示为浮点数，<a class="reference internal" href="#time.time" title="time.time"><code class="xref py py-func docutils literal notranslate"><span class="pre">time()</span></code></a> 返回可用的最准确时间 (如有可能将使用 Unix <code class="xref c c-func docutils literal notranslate"><span class="pre">gettimeofday()</span></code>)，并且 <a class="reference internal" href="#time.sleep" title="time.sleep"><code class="xref py py-func docutils literal notranslate"><span class="pre">sleep()</span></code></a> 将接受带有非零小数部分的时间 (如有可能将使用 Unix <code class="xref c c-func docutils literal notranslate"><span class="pre">select()</span></code> 来实现此功能)。</p></li>
<li><p>时间值由 <a class="reference internal" href="#time.gmtime" title="time.gmtime"><code class="xref py py-func docutils literal notranslate"><span class="pre">gmtime()</span></code></a>，<a class="reference internal" href="#time.localtime" title="time.localtime"><code class="xref py py-func docutils literal notranslate"><span class="pre">localtime()</span></code></a> 和 <a class="reference internal" href="#time.strptime" title="time.strptime"><code class="xref py py-func docutils literal notranslate"><span class="pre">strptime()</span></code></a> 返回，并被 <a class="reference internal" href="#time.asctime" title="time.asctime"><code class="xref py py-func docutils literal notranslate"><span class="pre">asctime()</span></code></a>， <a class="reference internal" href="#time.mktime" title="time.mktime"><code class="xref py py-func docutils literal notranslate"><span class="pre">mktime()</span></code></a> 和 <a class="reference internal" href="#time.strftime" title="time.strftime"><code class="xref py py-func docutils literal notranslate"><span class="pre">strftime()</span></code></a> 接受，是一个 9 个整数的序列。 <a class="reference internal" href="#time.gmtime" title="time.gmtime"><code class="xref py py-func docutils literal notranslate"><span class="pre">gmtime()</span></code></a>， <a class="reference internal" href="#time.localtime" title="time.localtime"><code class="xref py py-func docutils literal notranslate"><span class="pre">localtime()</span></code></a> 和 <a class="reference internal" href="#time.strptime" title="time.strptime"><code class="xref py py-func docutils literal notranslate"><span class="pre">strptime()</span></code></a> 的返回值还提供各个字段的属性名称。</p>
<p>请参阅 <a class="reference internal" href="#time.struct_time" title="time.struct_time"><code class="xref py py-class docutils literal notranslate"><span class="pre">struct_time</span></code></a> 以获取这些对象的描述。</p>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.3 版本发生变更: </span>当平台支持相应的 <code class="docutils literal notranslate"><span class="pre">struct</span> <span class="pre">tm</span></code> 成员时 <a class="reference internal" href="#time.struct_time" title="time.struct_time"><code class="xref py py-class docutils literal notranslate"><span class="pre">struct_time</span></code></a> 类型将被扩展以提供 <a class="reference internal" href="#time.struct_time.tm_gmtoff" title="time.struct_time.tm_gmtoff"><code class="xref py py-attr docutils literal notranslate"><span class="pre">tm_gmtoff</span></code></a> 和 <a class="reference internal" href="#time.struct_time.tm_zone" title="time.struct_time.tm_zone"><code class="xref py py-attr docutils literal notranslate"><span class="pre">tm_zone</span></code></a> 属性。</p>
</div>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.6 版本发生变更: </span><a class="reference internal" href="#time.struct_time" title="time.struct_time"><code class="xref py py-class docutils literal notranslate"><span class="pre">struct_time</span></code></a> 的属性 <a class="reference internal" href="#time.struct_time.tm_gmtoff" title="time.struct_time.tm_gmtoff"><code class="xref py py-attr docutils literal notranslate"><span class="pre">tm_gmtoff</span></code></a> 和 <a class="reference internal" href="#time.struct_time.tm_zone" title="time.struct_time.tm_zone"><code class="xref py py-attr docutils literal notranslate"><span class="pre">tm_zone</span></code></a> 现在可在所有平台上使用。</p>
</div>
</li>
<li><p>使用以下函数在时间表示之间进行转换：</p>
<table class="docutils align-default">
<thead>
<tr class="row-odd"><th class="head"><p>从</p></th>
<th class="head"><p>到</p></th>
<th class="head"><p>使用</p></th>
</tr>
</thead>
<tbody>
<tr class="row-even"><td><p>自纪元以来的秒数</p></td>
<td><p>UTC 的 <a class="reference internal" href="#time.struct_time" title="time.struct_time"><code class="xref py py-class docutils literal notranslate"><span class="pre">struct_time</span></code></a></p></td>
<td><p><a class="reference internal" href="#time.gmtime" title="time.gmtime"><code class="xref py py-func docutils literal notranslate"><span class="pre">gmtime()</span></code></a></p></td>
</tr>
<tr class="row-odd"><td><p>自纪元以来的秒数</p></td>
<td><p>本地时间的 <a class="reference internal" href="#time.struct_time" title="time.struct_time"><code class="xref py py-class docutils literal notranslate"><span class="pre">struct_time</span></code></a></p></td>
<td><p><a class="reference internal" href="#time.localtime" title="time.localtime"><code class="xref py py-func docutils literal notranslate"><span class="pre">localtime()</span></code></a></p></td>
</tr>
<tr class="row-even"><td><p>UTC 的 <a class="reference internal" href="#time.struct_time" title="time.struct_time"><code class="xref py py-class docutils literal notranslate"><span class="pre">struct_time</span></code></a></p></td>
<td><p>自纪元以来的秒数</p></td>
<td><p><a class="reference internal" href="calendar.xhtml#calendar.timegm" title="calendar.timegm"><code class="xref py py-func docutils literal notranslate"><span class="pre">calendar.timegm()</span></code></a></p></td>
</tr>
<tr class="row-odd"><td><p>本地时间的 <a class="reference internal" href="#time.struct_time" title="time.struct_time"><code class="xref py py-class docutils literal notranslate"><span class="pre">struct_time</span></code></a></p></td>
<td><p>自纪元以来的秒数</p></td>
<td><p><a class="reference internal" href="#time.mktime" title="time.mktime"><code class="xref py py-func docutils literal notranslate"><span class="pre">mktime()</span></code></a></p></td>
</tr>
</tbody>
</table>
</li>
</ul>
<section id="functions">
<span id="time-functions"></span><h2>函数</h2>
<dl class="py function">
<dt class="sig sig-object py" id="time.asctime">
<span class="sig-prename descclassname"><span class="pre">time.</span></span><span class="sig-name descname"><span class="pre">asctime</span></span><span class="sig-paren">(</span><span class="optional">[</span><em class="sig-param"><span class="n"><span class="pre">t</span></span></em><span class="optional">]</span><span class="sig-paren">)</span></dt>
<dd><p>转换由 <a class="reference internal" href="#time.gmtime" title="time.gmtime"><code class="xref py py-func docutils literal notranslate"><span class="pre">gmtime()</span></code></a> 或 <a class="reference internal" href="#time.localtime" title="time.localtime"><code class="xref py py-func docutils literal notranslate"><span class="pre">localtime()</span></code></a> 所返回的表示时间的元组或 <a class="reference internal" href="#time.struct_time" title="time.struct_time"><code class="xref py py-class docutils literal notranslate"><span class="pre">struct_time</span></code></a> 为以下形式的字符串: <code class="docutils literal notranslate"><span class="pre">'Sun</span> <span class="pre">Jun</span> <span class="pre">20</span> <span class="pre">23:21:05</span> <span class="pre">1993'</span></code>。 日期字段的长度为两个字符，如果日期只有一个数字则会以零填充，例如: <code class="docutils literal notranslate"><span class="pre">'Wed</span> <span class="pre">Jun</span>&#160; <span class="pre">9</span> <span class="pre">04:26:40</span> <span class="pre">1993'</span></code>。</p>
<p>如果未提供 <em>t</em>，则会使用 <a class="reference internal" href="#time.localtime" title="time.localtime"><code class="xref py py-func docutils literal notranslate"><span class="pre">localtime()</span></code></a> 所返回的当前时间。  <a class="reference internal" href="#time.asctime" title="time.asctime"><code class="xref py py-func docutils literal notranslate"><span class="pre">asctime()</span></code></a> 不会使用区域设置信息。</p>
<div class="admonition note">
<p class="admonition-title">备注</p>
<p>与同名的C函数不同， <a class="reference internal" href="#time.asctime" title="time.asctime"><code class="xref py py-func docutils literal notranslate"><span class="pre">asctime()</span></code></a> 不添加尾随换行符。</p>
</div>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="time.pthread_getcpuclockid">
<span class="sig-prename descclassname"><span class="pre">time.</span></span><span class="sig-name descname"><span class="pre">pthread_getcpuclockid</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">thread_id</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>返回指定的 <em>thread_id</em> 的特定于线程的CPU时间时钟的 <em>clk_id</em> 。</p>
<p>使用 <a class="reference internal" href="threading.xhtml#threading.Thread" title="threading.Thread"><code class="xref py py-class docutils literal notranslate"><span class="pre">threading.Thread</span></code></a> 对象的 <a class="reference internal" href="threading.xhtml#threading.get_ident" title="threading.get_ident"><code class="xref py py-func docutils literal notranslate"><span class="pre">threading.get_ident()</span></code></a> 或 <a class="reference internal" href="threading.xhtml#threading.Thread.ident" title="threading.Thread.ident"><code class="xref py py-attr docutils literal notranslate"><span class="pre">ident</span></code></a> 属性为 <em>thread_id</em> 获取合适的值。</p>
<div class="admonition warning">
<p class="admonition-title">警告</p>
<p>传递无效的或过期的 <em>thread_id</em> 可能会导致未定义的行为，例如段错误。</p>
</div>
<div class="availability docutils container">
<p><a class="reference internal" href="intro.xhtml#availability"><span class="std std-ref">可用性</span></a>: Unix</p>
<p>请参阅 <em class="manpage"><a class="manpage reference external" href="https://manpages.debian.org/pthread_getcpuclockid(3)">pthread_getcpuclockid(3)</a><span class="link-target"> [https://manpages.debian.org/pthread_getcpuclockid(3)]</span></em> 的手册页面了解更多信息。</p>
</div>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.7.</span></p>
</div>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="time.clock_getres">
<span class="sig-prename descclassname"><span class="pre">time.</span></span><span class="sig-name descname"><span class="pre">clock_getres</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">clk_id</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>返回指定时钟 <em>clk_id</em> 的分辨率（精度）。有关 <em>clk_id</em> 的可接受值列表，请参阅 <a class="reference internal" href="#time-clock-id-constants"><span class="std std-ref">Clock ID 常量</span></a> 。</p>
<div class="availability docutils container">
<p><a class="reference internal" href="intro.xhtml#availability"><span class="std std-ref">可用性</span></a>: Unix。</p>
</div>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.3.</span></p>
</div>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="time.clock_gettime">
<span class="sig-prename descclassname"><span class="pre">time.</span></span><span class="sig-name descname"><span class="pre">clock_gettime</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">clk_id</span></span></em><span class="sig-paren">)</span> <span class="sig-return"><span class="sig-return-icon">&#x2192;</span> <span class="sig-return-typehint"><a class="reference internal" href="functions.xhtml#float" title="float"><span class="pre">float</span></a></span></span></dt>
<dd><p>返回指定 <em>clk_id</em> 时钟的时间。有关 <em>clk_id</em> 的可接受值列表，请参阅 <a class="reference internal" href="#time-clock-id-constants"><span class="std std-ref">Clock ID 常量</span></a> 。</p>
<p>使用 <a class="reference internal" href="#time.clock_gettime_ns" title="time.clock_gettime_ns"><code class="xref py py-func docutils literal notranslate"><span class="pre">clock_gettime_ns()</span></code></a> 以避免 <a class="reference internal" href="functions.xhtml#float" title="float"><code class="xref py py-class docutils literal notranslate"><span class="pre">float</span></code></a> 类型导致的精度损失。</p>
<div class="availability docutils container">
<p><a class="reference internal" href="intro.xhtml#availability"><span class="std std-ref">可用性</span></a>: Unix。</p>
</div>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.3.</span></p>
</div>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="time.clock_gettime_ns">
<span class="sig-prename descclassname"><span class="pre">time.</span></span><span class="sig-name descname"><span class="pre">clock_gettime_ns</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">clk_id</span></span></em><span class="sig-paren">)</span> <span class="sig-return"><span class="sig-return-icon">&#x2192;</span> <span class="sig-return-typehint"><a class="reference internal" href="functions.xhtml#int" title="int"><span class="pre">int</span></a></span></span></dt>
<dd><p>与 <a class="reference internal" href="#time.clock_gettime" title="time.clock_gettime"><code class="xref py py-func docutils literal notranslate"><span class="pre">clock_gettime()</span></code></a> 相似，但返回时间为纳秒。</p>
<div class="availability docutils container">
<p><a class="reference internal" href="intro.xhtml#availability"><span class="std std-ref">可用性</span></a>: Unix。</p>
</div>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.7.</span></p>
</div>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="time.clock_settime">
<span class="sig-prename descclassname"><span class="pre">time.</span></span><span class="sig-name descname"><span class="pre">clock_settime</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">clk_id</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">time</span></span><span class="p"><span class="pre">:</span></span><span class="w"> </span><span class="n"><a class="reference internal" href="functions.xhtml#float" title="float"><span class="pre">float</span></a></span></em><span class="sig-paren">)</span></dt>
<dd><p>设置指定 <em>clk_id</em> 时钟的时间。 目前， <a class="reference internal" href="#time.CLOCK_REALTIME" title="time.CLOCK_REALTIME"><code class="xref py py-data docutils literal notranslate"><span class="pre">CLOCK_REALTIME</span></code></a> 是 <em>clk_id</em> 唯一可接受的值。</p>
<p>使用 <a class="reference internal" href="#time.clock_settime_ns" title="time.clock_settime_ns"><code class="xref py py-func docutils literal notranslate"><span class="pre">clock_settime_ns()</span></code></a> 以避免 <a class="reference internal" href="functions.xhtml#float" title="float"><code class="xref py py-class docutils literal notranslate"><span class="pre">float</span></code></a> 类型导致的精度损失。</p>
<div class="availability docutils container">
<p><a class="reference internal" href="intro.xhtml#availability"><span class="std std-ref">可用性</span></a>: Unix。</p>
</div>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.3.</span></p>
</div>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="time.clock_settime_ns">
<span class="sig-prename descclassname"><span class="pre">time.</span></span><span class="sig-name descname"><span class="pre">clock_settime_ns</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">clk_id</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">time</span></span><span class="p"><span class="pre">:</span></span><span class="w"> </span><span class="n"><a class="reference internal" href="functions.xhtml#int" title="int"><span class="pre">int</span></a></span></em><span class="sig-paren">)</span></dt>
<dd><p>与 <a class="reference internal" href="#time.clock_settime" title="time.clock_settime"><code class="xref py py-func docutils literal notranslate"><span class="pre">clock_settime()</span></code></a> 相似，但设置时间为纳秒。</p>
<div class="availability docutils container">
<p><a class="reference internal" href="intro.xhtml#availability"><span class="std std-ref">可用性</span></a>: Unix。</p>
</div>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.7.</span></p>
</div>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="time.ctime">
<span class="sig-prename descclassname"><span class="pre">time.</span></span><span class="sig-name descname"><span class="pre">ctime</span></span><span class="sig-paren">(</span><span class="optional">[</span><em class="sig-param"><span class="n"><span class="pre">secs</span></span></em><span class="optional">]</span><span class="sig-paren">)</span></dt>
<dd><p>将以距离 <a class="reference internal" href="#epoch">epoch</a> 的秒数表示的时间转换为以下形式的字符串: <code class="docutils literal notranslate"><span class="pre">'Sun</span> <span class="pre">Jun</span> <span class="pre">20</span> <span class="pre">23:21:05</span> <span class="pre">1993'</span></code> 代表本地时间。 日期字段的长度为两个字符且如果日期只有一位数字则会以空格填充，例如: <code class="docutils literal notranslate"><span class="pre">'Wed</span> <span class="pre">Jun</span>&#160; <span class="pre">9</span> <span class="pre">04:26:40</span> <span class="pre">1993'</span></code>。</p>
<p>如果 <em>secs</em> 未提供或为 <a class="reference internal" href="constants.xhtml#None" title="None"><code class="xref py py-const docutils literal notranslate"><span class="pre">None</span></code></a>，则使用 <a class="reference internal" href="#time.time" title="time.time"><code class="xref py py-func docutils literal notranslate"><span class="pre">time()</span></code></a> 所返回的当前时间。 <code class="docutils literal notranslate"><span class="pre">ctime(secs)</span></code> 等价于 <code class="docutils literal notranslate"><span class="pre">asctime(localtime(secs))</span></code>。 <a class="reference internal" href="#time.ctime" title="time.ctime"><code class="xref py py-func docutils literal notranslate"><span class="pre">ctime()</span></code></a> 不会使用区域设置信息。</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="time.get_clock_info">
<span class="sig-prename descclassname"><span class="pre">time.</span></span><span class="sig-name descname"><span class="pre">get_clock_info</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">name</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>获取有关指定时钟的信息作为命名空间对象。 支持的时钟名称和读取其值的相应函数是：</p>
<ul class="simple">
<li><p><code class="docutils literal notranslate"><span class="pre">'monotonic'</span></code>: <a class="reference internal" href="#time.monotonic" title="time.monotonic"><code class="xref py py-func docutils literal notranslate"><span class="pre">time.monotonic()</span></code></a></p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">'perf_counter'</span></code>: <a class="reference internal" href="#time.perf_counter" title="time.perf_counter"><code class="xref py py-func docutils literal notranslate"><span class="pre">time.perf_counter()</span></code></a></p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">'process_time'</span></code>: <a class="reference internal" href="#time.process_time" title="time.process_time"><code class="xref py py-func docutils literal notranslate"><span class="pre">time.process_time()</span></code></a></p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">'thread_time'</span></code>: <a class="reference internal" href="#time.thread_time" title="time.thread_time"><code class="xref py py-func docutils literal notranslate"><span class="pre">time.thread_time()</span></code></a></p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">'time'</span></code>: <a class="reference internal" href="#time.time" title="time.time"><code class="xref py py-func docutils literal notranslate"><span class="pre">time.time()</span></code></a></p></li>
</ul>
<p>结果具有以下属性：</p>
<ul class="simple">
<li><p><em>adjustable</em> ： 如果时钟可以自动更改（例如通过NTP守护程序）或由系统管理员手动更改，则为 <code class="docutils literal notranslate"><span class="pre">True</span></code> ，否则为 <code class="docutils literal notranslate"><span class="pre">False</span></code> 。</p></li>
<li><p><em>implementation</em> ： 用于获取时钟值的基础C函数的名称。有关可能的值，请参阅 <a class="reference internal" href="#time-clock-id-constants"><span class="std std-ref">Clock ID 常量</span></a> 。</p></li>
<li><p><em>monotonic</em> ：如果时钟不能倒退，则为 <code class="docutils literal notranslate"><span class="pre">True</span></code> ，否则为 <code class="docutils literal notranslate"><span class="pre">False</span></code> 。</p></li>
<li><p><em>resolution</em> ： 以秒为单位的时钟分辨率（ <a class="reference internal" href="functions.xhtml#float" title="float"><code class="xref py py-class docutils literal notranslate"><span class="pre">float</span></code></a> ）</p></li>
</ul>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.3.</span></p>
</div>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="time.gmtime">
<span class="sig-prename descclassname"><span class="pre">time.</span></span><span class="sig-name descname"><span class="pre">gmtime</span></span><span class="sig-paren">(</span><span class="optional">[</span><em class="sig-param"><span class="n"><span class="pre">secs</span></span></em><span class="optional">]</span><span class="sig-paren">)</span></dt>
<dd><p>将以自 <a class="reference internal" href="#epoch">epoch</a> 开始的秒数表示的时间转换为 UTC 的 <a class="reference internal" href="#time.struct_time" title="time.struct_time"><code class="xref py py-class docutils literal notranslate"><span class="pre">struct_time</span></code></a>，其中 dst 旗标始终为零。 如果未提供 <em>secs</em> 或为 <a class="reference internal" href="constants.xhtml#None" title="None"><code class="xref py py-const docutils literal notranslate"><span class="pre">None</span></code></a>，则使用 <a class="reference internal" href="#time.time" title="time.time"><code class="xref py py-func docutils literal notranslate"><span class="pre">time()</span></code></a> 所返回的当前时间。 一秒以内的小数将被忽略。 有关 <a class="reference internal" href="#time.struct_time" title="time.struct_time"><code class="xref py py-class docutils literal notranslate"><span class="pre">struct_time</span></code></a> 对象的说明请参见上文。 有关此函数的逆操作请参阅 <a class="reference internal" href="calendar.xhtml#calendar.timegm" title="calendar.timegm"><code class="xref py py-func docutils literal notranslate"><span class="pre">calendar.timegm()</span></code></a>。</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="time.localtime">
<span class="sig-prename descclassname"><span class="pre">time.</span></span><span class="sig-name descname"><span class="pre">localtime</span></span><span class="sig-paren">(</span><span class="optional">[</span><em class="sig-param"><span class="n"><span class="pre">secs</span></span></em><span class="optional">]</span><span class="sig-paren">)</span></dt>
<dd><p>与 <a class="reference internal" href="#time.gmtime" title="time.gmtime"><code class="xref py py-func docutils literal notranslate"><span class="pre">gmtime()</span></code></a> 相似但转换为当地时间。如果未提供 <em>secs</em> 或为 <a class="reference internal" href="constants.xhtml#None" title="None"><code class="xref py py-const docutils literal notranslate"><span class="pre">None</span></code></a> ，则使用由 <a class="reference internal" href="#time.time" title="time.time"><code class="xref py py-func docutils literal notranslate"><span class="pre">time()</span></code></a> 返回的当前时间。当 DST 适用于给定时间时，dst标志设置为 <code class="docutils literal notranslate"><span class="pre">1</span></code> 。</p>
<p><a class="reference internal" href="#time.localtime" title="time.localtime"><code class="xref py py-func docutils literal notranslate"><span class="pre">localtime()</span></code></a> 可能会引发 <a class="reference internal" href="exceptions.xhtml#OverflowError" title="OverflowError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">OverflowError</span></code></a> ，如果时间戳超出平台 C <code class="xref c c-func docutils literal notranslate"><span class="pre">localtime()</span></code> 或 <code class="xref c c-func docutils literal notranslate"><span class="pre">gmtime()</span></code> 函数支持的范围，并会在  <code class="xref c c-func docutils literal notranslate"><span class="pre">localtime()</span></code> 或 <code class="xref c c-func docutils literal notranslate"><span class="pre">gmtime()</span></code> 失败时引发 <a class="reference internal" href="exceptions.xhtml#OSError" title="OSError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">OSError</span></code></a> 。这通常被限制在1970至2038年之间。</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="time.mktime">
<span class="sig-prename descclassname"><span class="pre">time.</span></span><span class="sig-name descname"><span class="pre">mktime</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">t</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>这是 <a class="reference internal" href="#time.localtime" title="time.localtime"><code class="xref py py-func docutils literal notranslate"><span class="pre">localtime()</span></code></a> 的反函数。它的参数是 <a class="reference internal" href="#time.struct_time" title="time.struct_time"><code class="xref py py-class docutils literal notranslate"><span class="pre">struct_time</span></code></a> 或者完整的 9 元组（因为需要 dst 标志；如果它是未知的则使用 <code class="docutils literal notranslate"><span class="pre">-1</span></code> 作为dst标志），它表示 <em>local</em> 的时间，而不是 UTC 。它返回一个浮点数，以便与 <a class="reference internal" href="#time.time" title="time.time"><code class="xref py py-func docutils literal notranslate"><span class="pre">time()</span></code></a> 兼容。如果输入值不能表示为有效时间，则 <a class="reference internal" href="exceptions.xhtml#OverflowError" title="OverflowError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">OverflowError</span></code></a> 或 <a class="reference internal" href="exceptions.xhtml#ValueError" title="ValueError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">ValueError</span></code></a> 将被引发（这取决于Python或底层C库是否捕获到无效值）。它可以生成时间的最早日期取决于平台。</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="time.monotonic">
<span class="sig-prename descclassname"><span class="pre">time.</span></span><span class="sig-name descname"><span class="pre">monotonic</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span> <span class="sig-return"><span class="sig-return-icon">&#x2192;</span> <span class="sig-return-typehint"><a class="reference internal" href="functions.xhtml#float" title="float"><span class="pre">float</span></a></span></span></dt>
<dd><p>（以小数表示的秒为单位）返回一个单调时钟的值，即不能倒退的时钟。 该时钟不受系统时钟更新的影响。 返回值的参考点未被定义，因此只有两次调用之间的差值才是有效的。</p>
<p>使用 <a class="reference internal" href="#time.monotonic_ns" title="time.monotonic_ns"><code class="xref py py-func docutils literal notranslate"><span class="pre">monotonic_ns()</span></code></a> 以避免 <a class="reference internal" href="functions.xhtml#float" title="float"><code class="xref py py-class docutils literal notranslate"><span class="pre">float</span></code></a> 类型导致的精度损失。</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.3.</span></p>
</div>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.5 版本发生变更: </span>该功能现在始终可用且始终在系统范围内。</p>
</div>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.10 版本发生变更: </span>在 macOS 上，现在这个函数作用于全系统。</p>
</div>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="time.monotonic_ns">
<span class="sig-prename descclassname"><span class="pre">time.</span></span><span class="sig-name descname"><span class="pre">monotonic_ns</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span> <span class="sig-return"><span class="sig-return-icon">&#x2192;</span> <span class="sig-return-typehint"><a class="reference internal" href="functions.xhtml#int" title="int"><span class="pre">int</span></a></span></span></dt>
<dd><p>与 <a class="reference internal" href="#time.monotonic" title="time.monotonic"><code class="xref py py-func docutils literal notranslate"><span class="pre">monotonic()</span></code></a> 相似，但是返回时间为纳秒数。</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.7.</span></p>
</div>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="time.perf_counter">
<span class="sig-prename descclassname"><span class="pre">time.</span></span><span class="sig-name descname"><span class="pre">perf_counter</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span> <span class="sig-return"><span class="sig-return-icon">&#x2192;</span> <span class="sig-return-typehint"><a class="reference internal" href="functions.xhtml#float" title="float"><span class="pre">float</span></a></span></span></dt>
<dd><p id="index-6">（以小数表示的秒为单位）返回一个性能计数器的值，即用于测量较短持续时间的具有最高有效精度的时钟。 它会包括睡眠状态所消耗的时间并且作用于全系统范围。 返回值的参考点未被定义，因此只有两次调用之间的差值才是有效的。</p>
<p>使用 <a class="reference internal" href="#time.perf_counter_ns" title="time.perf_counter_ns"><code class="xref py py-func docutils literal notranslate"><span class="pre">perf_counter_ns()</span></code></a> 以避免 <a class="reference internal" href="functions.xhtml#float" title="float"><code class="xref py py-class docutils literal notranslate"><span class="pre">float</span></code></a> 类型导致的精度损失。</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.3.</span></p>
</div>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.10 版本发生变更: </span>在 Windows 上，现在这个函数作用于全系统。</p>
</div>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="time.perf_counter_ns">
<span class="sig-prename descclassname"><span class="pre">time.</span></span><span class="sig-name descname"><span class="pre">perf_counter_ns</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span> <span class="sig-return"><span class="sig-return-icon">&#x2192;</span> <span class="sig-return-typehint"><a class="reference internal" href="functions.xhtml#int" title="int"><span class="pre">int</span></a></span></span></dt>
<dd><p>与 <a class="reference internal" href="#time.perf_counter" title="time.perf_counter"><code class="xref py py-func docutils literal notranslate"><span class="pre">perf_counter()</span></code></a> 相似，但是返回时间为纳秒。</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.7.</span></p>
</div>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="time.process_time">
<span class="sig-prename descclassname"><span class="pre">time.</span></span><span class="sig-name descname"><span class="pre">process_time</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span> <span class="sig-return"><span class="sig-return-icon">&#x2192;</span> <span class="sig-return-typehint"><a class="reference internal" href="functions.xhtml#float" title="float"><span class="pre">float</span></a></span></span></dt>
<dd><p id="index-7">（以小数表示的秒为单位）返回当前进程的系统和用户 CPU 时间的总计值。 它不包括睡眠状态所消耗的时间。 根据定义它只作用于进程范围。 返回值的参考点未被定义，因此只有两次调用之间的差值才是有效的。</p>
<p>使用 <a class="reference internal" href="#time.process_time_ns" title="time.process_time_ns"><code class="xref py py-func docutils literal notranslate"><span class="pre">process_time_ns()</span></code></a> 以避免 <a class="reference internal" href="functions.xhtml#float" title="float"><code class="xref py py-class docutils literal notranslate"><span class="pre">float</span></code></a> 类型导致的精度损失。</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.3.</span></p>
</div>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="time.process_time_ns">
<span class="sig-prename descclassname"><span class="pre">time.</span></span><span class="sig-name descname"><span class="pre">process_time_ns</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span> <span class="sig-return"><span class="sig-return-icon">&#x2192;</span> <span class="sig-return-typehint"><a class="reference internal" href="functions.xhtml#int" title="int"><span class="pre">int</span></a></span></span></dt>
<dd><p>与 <a class="reference internal" href="#time.process_time" title="time.process_time"><code class="xref py py-func docutils literal notranslate"><span class="pre">process_time()</span></code></a> 相似，但是返回时间为纳秒。</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.7.</span></p>
</div>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="time.sleep">
<span class="sig-prename descclassname"><span class="pre">time.</span></span><span class="sig-name descname"><span class="pre">sleep</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">secs</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>调用方线程暂停执行给定的秒数。 该参数可以为浮点数以指定一个更精确的休眠时间。</p>
<p>如果休眠被信号打断并且信号处理器未引发异常，休眠将基于重新计算的时延重新开始。</p>
<p>暂停时间有可能比请求的要长出一段不确定的时间，因为会受系统中的其他活动排期影响。</p>
<p>在 Windows 上，如果 <em>secs</em> 为零，线程会将其时间片的剩余部分让渡给任何其他准备要运行的线程。 如果没有准备要运行的其他线程，该函数将立即返回，而线程将继续执行。 在 Windows 8.1 及更新版本中的实现使用了提供 100 纳秒分辨率的 <a class="reference external" href="https://docs.microsoft.com/en-us/windows-hardware/drivers/kernel/high-resolution-timers">高分辨率定时器</a><span class="link-target"> [https://docs.microsoft.com/en-us/windows-hardware/drivers/kernel/high-resolution-timers]</span>。 如果 <em>secs</em> 为零，则会使用 <code class="docutils literal notranslate"><span class="pre">Sleep(0)</span></code>。</p>
<p>Unix 实现:</p>
<ul class="simple">
<li><p>如果可能则使用 <code class="docutils literal notranslate"><span class="pre">clock_nanosleep()</span></code> (精度: 1 纳秒);</p></li>
<li><p>或者如果可能则使用 <code class="docutils literal notranslate"><span class="pre">nanosleep()</span></code> (精度: 1 纳秒);</p></li>
<li><p>或者使用 <code class="docutils literal notranslate"><span class="pre">select()</span></code> (精度: 1 微秒).</p></li>
</ul>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.5 版本发生变更: </span>现在，即使该睡眠过程被信号中断，该函数也会保证调用它的线程至少会睡眠 <em>secs</em> 秒。信号处理例程抛出异常的情况除外。（欲了解我们做出这次改变的原因，请参见 <span class="target" id="index-35"></span><a class="pep reference external" href="https://peps.python.org/pep-0475/"><strong>PEP 475</strong></a><span class="link-target"> [https://peps.python.org/pep-0475/]</span> ）</p>
</div>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.11 版本发生变更: </span>在 Unix 上，现在将在可能的情况下使用 <code class="docutils literal notranslate"><span class="pre">clock_nanosleep()</span></code> 和 <code class="docutils literal notranslate"><span class="pre">nanosleep()</span></code> 函数。 在 Windows 上，现在将使用可等待的计时器。</p>
</div>
</dd></dl>

<dl class="py function" id="index-9">
<dt class="sig sig-object py" id="time.strftime">
<span class="sig-prename descclassname"><span class="pre">time.</span></span><span class="sig-name descname"><span class="pre">strftime</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">format</span></span></em><span class="optional">[</span>, <em class="sig-param"><span class="n"><span class="pre">t</span></span></em><span class="optional">]</span><span class="sig-paren">)</span></dt>
<dd><p>转换一个元组或 <a class="reference internal" href="#time.struct_time" title="time.struct_time"><code class="xref py py-class docutils literal notranslate"><span class="pre">struct_time</span></code></a> 表示的由 <a class="reference internal" href="#time.gmtime" title="time.gmtime"><code class="xref py py-func docutils literal notranslate"><span class="pre">gmtime()</span></code></a> 或 <a class="reference internal" href="#time.localtime" title="time.localtime"><code class="xref py py-func docutils literal notranslate"><span class="pre">localtime()</span></code></a> 返回的时间到由 <em>format</em> 参数指定的字符串。如果未提供 <em>t</em> ，则使用由 <a class="reference internal" href="#time.localtime" title="time.localtime"><code class="xref py py-func docutils literal notranslate"><span class="pre">localtime()</span></code></a> 返回的当前时间。 <em>format</em> 必须是一个字符串。如果 <em>t</em> 中的任何字段超出允许范围，则引发 <a class="reference internal" href="exceptions.xhtml#ValueError" title="ValueError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">ValueError</span></code></a> 。</p>
<p>0是时间元组中任何位置的合法参数；如果它通常是非法的，则该值被强制改为正确的值。</p>
<p>以下指令可以嵌入 <em>format</em> 字符串中。它们显示时没有可选的字段宽度和精度规范，并被 <a class="reference internal" href="#time.strftime" title="time.strftime"><code class="xref py py-func docutils literal notranslate"><span class="pre">strftime()</span></code></a> 结果中的指示字符替换：</p>
<table class="docutils align-default">
<thead>
<tr class="row-odd"><th class="head"><p>指令</p></th>
<th class="head"><p>含意</p></th>
<th class="head"><p>备注</p></th>
</tr>
</thead>
<tbody>
<tr class="row-even"><td><p><code class="docutils literal notranslate"><span class="pre">%a</span></code></p></td>
<td><p>本地化的缩写星期中每日的名称。</p></td>
<td></td>
</tr>
<tr class="row-odd"><td><p><code class="docutils literal notranslate"><span class="pre">%A</span></code></p></td>
<td><p>本地化的星期中每日的完整名称。</p></td>
<td></td>
</tr>
<tr class="row-even"><td><p><code class="docutils literal notranslate"><span class="pre">%b</span></code></p></td>
<td><p>本地化的月缩写名称。</p></td>
<td></td>
</tr>
<tr class="row-odd"><td><p><code class="docutils literal notranslate"><span class="pre">%B</span></code></p></td>
<td><p>本地化的月完整名称。</p></td>
<td></td>
</tr>
<tr class="row-even"><td><p><code class="docutils literal notranslate"><span class="pre">%c</span></code></p></td>
<td><p>本地化的适当日期和时间表示。</p></td>
<td></td>
</tr>
<tr class="row-odd"><td><p><code class="docutils literal notranslate"><span class="pre">%d</span></code></p></td>
<td><p>十进制数 [01,31] 表示的月中日。</p></td>
<td></td>
</tr>
<tr class="row-even"><td><p><code class="docutils literal notranslate"><span class="pre">%f</span></code></p></td>
<td><dl class="simple">
<dt>十进制表示的的微秒数</dt><dd><p>[000000,999999].</p>
</dd>
</dl>
</td>
<td><p>(1)</p></td>
</tr>
<tr class="row-odd"><td><p><code class="docutils literal notranslate"><span class="pre">%H</span></code></p></td>
<td><p>十进制数 [00,23] 表示的小时（24小时制）。</p></td>
<td></td>
</tr>
<tr class="row-even"><td><p><code class="docutils literal notranslate"><span class="pre">%I</span></code></p></td>
<td><p>十进制数 [01,12] 表示的小时（12小时制）。</p></td>
<td></td>
</tr>
<tr class="row-odd"><td><p><code class="docutils literal notranslate"><span class="pre">%j</span></code></p></td>
<td><p>十进制数 [001,366] 表示的年中日。</p></td>
<td></td>
</tr>
<tr class="row-even"><td><p><code class="docutils literal notranslate"><span class="pre">%m</span></code></p></td>
<td><p>十进制数 [01,12] 表示的月。</p></td>
<td></td>
</tr>
<tr class="row-odd"><td><p><code class="docutils literal notranslate"><span class="pre">%M</span></code></p></td>
<td><p>十进制数 [00,59] 表示的分钟。</p></td>
<td></td>
</tr>
<tr class="row-even"><td><p><code class="docutils literal notranslate"><span class="pre">%p</span></code></p></td>
<td><p>本地化的 AM 或 PM 。</p></td>
<td><p>(2)</p></td>
</tr>
<tr class="row-odd"><td><p><code class="docutils literal notranslate"><span class="pre">%S</span></code></p></td>
<td><p>十进制数 [00,61] 表示的秒。</p></td>
<td><p>(3)</p></td>
</tr>
<tr class="row-even"><td><p><code class="docutils literal notranslate"><span class="pre">%U</span></code></p></td>
<td><p>十进制数 [00,53] 表示的一年中的周数（星期日作为一周的第一天）。 在第一个星期日之前的新年中的所有日子都被认为是在第 0 周。</p></td>
<td><p>(4)</p></td>
</tr>
<tr class="row-odd"><td><p><code class="docutils literal notranslate"><span class="pre">%w</span></code></p></td>
<td><p>十进制数 [0(星期日),6] 表示的周中日。</p></td>
<td></td>
</tr>
<tr class="row-even"><td><p><code class="docutils literal notranslate"><span class="pre">%W</span></code></p></td>
<td><p>十进制数 [00,53] 表示的一年中的周数（星期一作为一周的第一天）。 在第一个星期一之前的新年中的所有日子被认为是在第 0 周。</p></td>
<td><p>(4)</p></td>
</tr>
<tr class="row-odd"><td><p><code class="docutils literal notranslate"><span class="pre">%x</span></code></p></td>
<td><p>本地化的适当日期表示。</p></td>
<td></td>
</tr>
<tr class="row-even"><td><p><code class="docutils literal notranslate"><span class="pre">%X</span></code></p></td>
<td><p>本地化的适当时间表示。</p></td>
<td></td>
</tr>
<tr class="row-odd"><td><p><code class="docutils literal notranslate"><span class="pre">%y</span></code></p></td>
<td><p>十进制数 [00,99] 表示的没有世纪的年份。</p></td>
<td></td>
</tr>
<tr class="row-even"><td><p><code class="docutils literal notranslate"><span class="pre">%Y</span></code></p></td>
<td><p>十进制数表示的带世纪的年份。</p></td>
<td></td>
</tr>
<tr class="row-odd"><td><p><code class="docutils literal notranslate"><span class="pre">%z</span></code></p></td>
<td><p>时区偏移以格式 +HHMM 或 -HHMM 形式的 UTC/GMT 的正或负时差指示，其中H表示十进制小时数字，M表示小数分钟数字 [-23:59, +23:59] 。<a class="footnote-reference brackets" href="#id4" id="id1" role="doc-noteref"><span class="fn-bracket">[</span>1<span class="fn-bracket">]</span></a></p></td>
<td></td>
</tr>
<tr class="row-even"><td><p><code class="docutils literal notranslate"><span class="pre">%Z</span></code></p></td>
<td><p>时区名称（如果不存在时区，则不包含字符）。已弃用。 <a class="footnote-reference brackets" href="#id4" id="id2" role="doc-noteref"><span class="fn-bracket">[</span>1<span class="fn-bracket">]</span></a></p></td>
<td></td>
</tr>
<tr class="row-odd"><td><p><code class="docutils literal notranslate"><span class="pre">%%</span></code></p></td>
<td><p>字面的 <code class="docutils literal notranslate"><span class="pre">'%'</span></code> 字符。</p></td>
<td></td>
</tr>
</tbody>
</table>
<p>注释：</p>
<ol class="arabic simple">
<li><p><code class="docutils literal notranslate"><span class="pre">%f</span></code> 格式指示符只应用于 <a class="reference internal" href="#time.strptime" title="time.strptime"><code class="xref py py-func docutils literal notranslate"><span class="pre">strptime()</span></code></a>，而不应用于 <a class="reference internal" href="#time.strftime" title="time.strftime"><code class="xref py py-func docutils literal notranslate"><span class="pre">strftime()</span></code></a>。 不过，请参看 <a class="reference internal" href="datetime.xhtml#datetime.datetime.strptime" title="datetime.datetime.strptime"><code class="xref py py-meth docutils literal notranslate"><span class="pre">datetime.datetime.strptime()</span></code></a> 和 <a class="reference internal" href="datetime.xhtml#datetime.datetime.strftime" title="datetime.datetime.strftime"><code class="xref py py-meth docutils literal notranslate"><span class="pre">datetime.datetime.strftime()</span></code></a>，在这里 <code class="docutils literal notranslate"><span class="pre">%f</span></code> 格式指示符 <a class="reference internal" href="datetime.xhtml#format-codes"><span class="std std-ref">应用于微秒数</span></a>。</p></li>
<li><p>当与 <a class="reference internal" href="#time.strptime" title="time.strptime"><code class="xref py py-func docutils literal notranslate"><span class="pre">strptime()</span></code></a> 函数一起使用时，如果使用 <code class="docutils literal notranslate"><span class="pre">%I</span></code> 指令来解析小时， <code class="docutils literal notranslate"><span class="pre">%p</span></code> 指令只影响输出小时字段。</p></li>
</ol>
<ol class="arabic simple" id="leap-second" start="3">
<li><p>范围真的是 <code class="docutils literal notranslate"><span class="pre">0</span></code> 到 <code class="docutils literal notranslate"><span class="pre">61</span></code> ；值 <code class="docutils literal notranslate"><span class="pre">60</span></code> 在表示 <a class="reference external" href="https://en.wikipedia.org/wiki/Leap_second">leap seconds</a><span class="link-target"> [https://en.wikipedia.org/wiki/Leap_second]</span> 的时间戳中有效，并且由于历史原因支持值 <code class="docutils literal notranslate"><span class="pre">61</span></code> 。</p></li>
<li><p>当与 <a class="reference internal" href="#time.strptime" title="time.strptime"><code class="xref py py-func docutils literal notranslate"><span class="pre">strptime()</span></code></a> 函数一起使用时， <code class="docutils literal notranslate"><span class="pre">%U</span></code> 和 <code class="docutils literal notranslate"><span class="pre">%W</span></code> 仅用于指定星期几和年份的计算。</p></li>
</ol>
<p>下面是一个示例，一个与 <span class="target" id="index-36"></span><a class="rfc reference external" href="https://datatracker.ietf.org/doc/html/rfc2822.html"><strong>RFC 2822</strong></a><span class="link-target"> [https://datatracker.ietf.org/doc/html/rfc2822.html]</span> Internet电子邮件标准以兼容的日期格式。  <a class="footnote-reference brackets" href="#id4" id="id3" role="doc-noteref"><span class="fn-bracket">[</span>1<span class="fn-bracket">]</span></a></p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">time</span> <span class="kn">import</span> <span class="n">gmtime</span><span class="p">,</span> <span class="n">strftime</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">strftime</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">%a</span><span class="s2">, </span><span class="si">%d</span><span class="s2"> %b %Y %H:%M:%S +0000&quot;</span><span class="p">,</span> <span class="n">gmtime</span><span class="p">())</span>
<span class="go">&#39;Thu, 28 Jun 2001 14:17:15 +0000&#39;</span>
</pre></div>
</div>
<p>某些平台可能支持其他指令，但只有此处列出的指令具有 ANSI C 标准化的含义。要查看平台支持的完整格式代码集，请参阅 <em class="manpage"><a class="manpage reference external" href="https://manpages.debian.org/strftime(3)">strftime(3)</a><span class="link-target"> [https://manpages.debian.org/strftime(3)]</span></em> 文档。</p>
<p>在某些平台上，可选的字段宽度和精度规范可以按照以下顺序紧跟在指令的初始 <code class="docutils literal notranslate"><span class="pre">'%'</span></code> 之后；这也不可移植。字段宽度通常为2，除了 <code class="docutils literal notranslate"><span class="pre">%j</span></code> ，它是3。</p>
</dd></dl>

<dl class="py function" id="index-11">
<dt class="sig sig-object py" id="time.strptime">
<span class="sig-prename descclassname"><span class="pre">time.</span></span><span class="sig-name descname"><span class="pre">strptime</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">string</span></span></em><span class="optional">[</span>, <em class="sig-param"><span class="n"><span class="pre">format</span></span></em><span class="optional">]</span><span class="sig-paren">)</span></dt>
<dd><p>根据格式解析表示时间的字符串。 返回值为一个被 <a class="reference internal" href="#time.gmtime" title="time.gmtime"><code class="xref py py-func docutils literal notranslate"><span class="pre">gmtime()</span></code></a> 或 <a class="reference internal" href="#time.localtime" title="time.localtime"><code class="xref py py-func docutils literal notranslate"><span class="pre">localtime()</span></code></a> 返回的 <a class="reference internal" href="#time.struct_time" title="time.struct_time"><code class="xref py py-class docutils literal notranslate"><span class="pre">struct_time</span></code></a> 。</p>
<p><em>format</em> 参数使用与 <a class="reference internal" href="#time.strftime" title="time.strftime"><code class="xref py py-func docutils literal notranslate"><span class="pre">strftime()</span></code></a> 相同的指令。 它默认为匹配 <a class="reference internal" href="#time.ctime" title="time.ctime"><code class="xref py py-func docutils literal notranslate"><span class="pre">ctime()</span></code></a> 所返回的格式 <code class="docutils literal notranslate"><span class="pre">&quot;%a</span> <span class="pre">%b</span> <span class="pre">%d</span> <span class="pre">%H:%M:%S</span> <span class="pre">%Y&quot;`</span></code> 。 如果 <em>string</em> 不能根据 <em>format</em> 来解析，或者解析后它有多余的数据，则会引发 <a class="reference internal" href="exceptions.xhtml#ValueError" title="ValueError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">ValueError</span></code></a>。 当无法推断出更准确的值时，用于填充任何缺失数据的默认值是 <code class="docutils literal notranslate"><span class="pre">(1900,</span> <span class="pre">1,</span> <span class="pre">1,</span> <span class="pre">0,</span> <span class="pre">0,</span> <span class="pre">0,</span> <span class="pre">0,</span> <span class="pre">1,</span> <span class="pre">-1)</span></code> 。 <em>string</em> 和 <em>format</em> 都必须为字符串。</p>
<p>例如:</p>
<div class="doctest highlight-default notranslate"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="kn">import</span> <span class="nn">time</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">time</span><span class="o">.</span><span class="n">strptime</span><span class="p">(</span><span class="s2">&quot;30 Nov 00&quot;</span><span class="p">,</span> <span class="s2">&quot;</span><span class="si">%d</span><span class="s2"> %b %y&quot;</span><span class="p">)</span>   
<span class="go">time.struct_time(tm_year=2000, tm_mon=11, tm_mday=30, tm_hour=0, tm_min=0,</span>
<span class="go">                 tm_sec=0, tm_wday=3, tm_yday=335, tm_isdst=-1)</span>
</pre></div>
</div>
<p>支持 <code class="docutils literal notranslate"><span class="pre">%Z</span></code> 指令是基于 <code class="docutils literal notranslate"><span class="pre">tzname</span></code> 中包含的值以及 <code class="docutils literal notranslate"><span class="pre">daylight</span></code> 是否为真。因此，它是特定于平台的，除了识别始终已知的 UTC 和 GMT （并且被认为是非夏令时时区）。</p>
<p>仅支持文档中指定的指令。因为每个平台都实现了 <code class="docutils literal notranslate"><span class="pre">strftime()</span></code> ，它有时会提供比列出的指令更多的指令。但是 <code class="docutils literal notranslate"><span class="pre">strptime()</span></code> 独立于任何平台，因此不一定支持所有未记录为支持的可用指令。</p>
</dd></dl>

<dl class="py class">
<dt class="sig sig-object py" id="time.struct_time">
<em class="property"><span class="pre">class</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">time.</span></span><span class="sig-name descname"><span class="pre">struct_time</span></span></dt>
<dd><p>返回的时间值序列的类型为 <a class="reference internal" href="#time.gmtime" title="time.gmtime"><code class="xref py py-func docutils literal notranslate"><span class="pre">gmtime()</span></code></a> 、 <a class="reference internal" href="#time.localtime" title="time.localtime"><code class="xref py py-func docutils literal notranslate"><span class="pre">localtime()</span></code></a> 和 <a class="reference internal" href="#time.strptime" title="time.strptime"><code class="xref py py-func docutils literal notranslate"><span class="pre">strptime()</span></code></a> 。它是一个带有 <a class="reference internal" href="../glossary.xhtml#term-named-tuple"><span class="xref std std-term">named tuple</span></a> 接口的对象：可以通过索引和属性名访问值。 存在以下值：</p>
<table class="docutils align-default">
<tbody>
<tr class="row-odd"><td><p>索引</p></td>
<td><p>属性</p></td>
<td><p>值</p></td>
</tr>
<tr class="row-even"><td><p>0</p></td>
<td><dl class="py attribute">
<dt class="sig sig-object py" id="time.struct_time.tm_year">
<span class="sig-name descname"><span class="pre">tm_year</span></span></dt>
<dd></dd></dl>

</td>
<td><p>（例如，1993）</p></td>
</tr>
<tr class="row-odd"><td><p>1</p></td>
<td><dl class="py attribute">
<dt class="sig sig-object py" id="time.struct_time.tm_mon">
<span class="sig-name descname"><span class="pre">tm_mon</span></span></dt>
<dd></dd></dl>

</td>
<td><p>range [1, 12]</p></td>
</tr>
<tr class="row-even"><td><p>2</p></td>
<td><dl class="py attribute">
<dt class="sig sig-object py" id="time.struct_time.tm_day">
<span class="sig-name descname"><span class="pre">tm_day</span></span></dt>
<dd></dd></dl>

</td>
<td><p>range [1, 31]</p></td>
</tr>
<tr class="row-odd"><td><p>3</p></td>
<td><dl class="py attribute">
<dt class="sig sig-object py" id="time.struct_time.tm_hour">
<span class="sig-name descname"><span class="pre">tm_hour</span></span></dt>
<dd></dd></dl>

</td>
<td><p>range [0, 23]</p></td>
</tr>
<tr class="row-even"><td><p>4</p></td>
<td><dl class="py attribute">
<dt class="sig sig-object py" id="time.struct_time.tm_min">
<span class="sig-name descname"><span class="pre">tm_min</span></span></dt>
<dd></dd></dl>

</td>
<td><p>range [0, 59]</p></td>
</tr>
<tr class="row-odd"><td><p>5</p></td>
<td><dl class="py attribute">
<dt class="sig sig-object py" id="time.struct_time.tm_sec">
<span class="sig-name descname"><span class="pre">tm_sec</span></span></dt>
<dd></dd></dl>

</td>
<td><p>range [0, 61]；参见 <a class="reference internal" href="#time.strftime" title="time.strftime"><code class="xref py py-func docutils literal notranslate"><span class="pre">strftime()</span></code></a> 中的 <a class="reference internal" href="#leap-second"><span class="std std-ref">注释 (2)</span></a></p></td>
</tr>
<tr class="row-even"><td><p>6</p></td>
<td><dl class="py attribute">
<dt class="sig sig-object py" id="time.struct_time.tm_wday">
<span class="sig-name descname"><span class="pre">tm_wday</span></span></dt>
<dd></dd></dl>

</td>
<td><p>取值范围 [0, 6]；周一为 0</p></td>
</tr>
<tr class="row-odd"><td><p>7</p></td>
<td><dl class="py attribute">
<dt class="sig sig-object py" id="time.struct_time.tm_yday">
<span class="sig-name descname"><span class="pre">tm_yday</span></span></dt>
<dd></dd></dl>

</td>
<td><p>range [1, 366]</p></td>
</tr>
<tr class="row-even"><td><p>8</p></td>
<td><dl class="py attribute">
<dt class="sig sig-object py" id="time.struct_time.tm_isdst">
<span class="sig-name descname"><span class="pre">tm_isdst</span></span></dt>
<dd></dd></dl>

</td>
<td><p>0, 1 或 -1；如下所示</p></td>
</tr>
<tr class="row-odd"><td><p>N/A</p></td>
<td><dl class="py attribute">
<dt class="sig sig-object py" id="time.struct_time.tm_zone">
<span class="sig-name descname"><span class="pre">tm_zone</span></span></dt>
<dd></dd></dl>

</td>
<td><p>时区名称的缩写</p></td>
</tr>
<tr class="row-even"><td><p>N/A</p></td>
<td><dl class="py attribute">
<dt class="sig sig-object py" id="time.struct_time.tm_gmtoff">
<span class="sig-name descname"><span class="pre">tm_gmtoff</span></span></dt>
<dd></dd></dl>

</td>
<td><p>以秒为单位的UTC以东偏离</p></td>
</tr>
</tbody>
</table>
<p>请注意，与C结构不同，月份值是 [1,12] 的范围，而不是 [0,11] 。</p>
<p>在调用 <a class="reference internal" href="#time.mktime" title="time.mktime"><code class="xref py py-func docutils literal notranslate"><span class="pre">mktime()</span></code></a> 时， <a class="reference internal" href="#time.struct_time.tm_isdst" title="time.struct_time.tm_isdst"><code class="xref py py-attr docutils literal notranslate"><span class="pre">tm_isdst</span></code></a> 可以在夏令时生效时设置为1，而在夏令时不生效时设置为0。 值-1表示这是未知的，并且通常会导致填写正确的状态。</p>
<p>当一个长度不正确的元组被传递给期望 <a class="reference internal" href="#time.struct_time" title="time.struct_time"><code class="xref py py-class docutils literal notranslate"><span class="pre">struct_time</span></code></a> 的函数，或者具有错误类型的元素时，会引发 <a class="reference internal" href="exceptions.xhtml#TypeError" title="TypeError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">TypeError</span></code></a> 。</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="time.time">
<span class="sig-prename descclassname"><span class="pre">time.</span></span><span class="sig-name descname"><span class="pre">time</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span> <span class="sig-return"><span class="sig-return-icon">&#x2192;</span> <span class="sig-return-typehint"><a class="reference internal" href="functions.xhtml#float" title="float"><span class="pre">float</span></a></span></span></dt>
<dd><p>返回以浮点数表示的从 <a class="reference internal" href="#epoch">epoch</a> 开始的秒数形式的时间。 对 <a class="reference external" href="https://en.wikipedia.org/wiki/Leap_second">leap seconds</a><span class="link-target"> [https://en.wikipedia.org/wiki/Leap_second]</span> 的处理取决于具体平台。 在 Windows 和大多数 Unix 系统中，闰秒不会被计入从 <a class="reference internal" href="#epoch">epoch</a> 开始的秒数形式的时间中。 这通常被称为 <a class="reference external" href="https://en.wikipedia.org/wiki/Unix_time">Unix 时间</a><span class="link-target"> [https://en.wikipedia.org/wiki/Unix_time]</span>。</p>
<p>请注意，即使时间总是作为浮点数返回，但并非所有系统都提供高于1秒的精度。虽然此函数通常返回非递减值，但如果在两次调用之间设置了系统时钟，则它可以返回比先前调用更低的值。</p>
<p>返回的数字 <a class="reference internal" href="#time.time" title="time.time"><code class="xref py py-func docutils literal notranslate"><span class="pre">time()</span></code></a> 可以通过将其传递给 <a class="reference internal" href="#time.gmtime" title="time.gmtime"><code class="xref py py-func docutils literal notranslate"><span class="pre">gmtime()</span></code></a> 函数或转换为UTC中更常见的时间格式（即年、月、日、小时等）或通过将它传递给 <a class="reference internal" href="#time.localtime" title="time.localtime"><code class="xref py py-func docutils literal notranslate"><span class="pre">localtime()</span></code></a> 函数获得本地时间。在这两种情况下都返回一个 <a class="reference internal" href="#time.struct_time" title="time.struct_time"><code class="xref py py-class docutils literal notranslate"><span class="pre">struct_time</span></code></a> 对象，日历日期组件可以从中作为属性访问。</p>
<p>使用 <a class="reference internal" href="#time.time_ns" title="time.time_ns"><code class="xref py py-func docutils literal notranslate"><span class="pre">time_ns()</span></code></a> 以避免 <a class="reference internal" href="functions.xhtml#float" title="float"><code class="xref py py-class docutils literal notranslate"><span class="pre">float</span></code></a> 类型导致的精度损失。</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="time.time_ns">
<span class="sig-prename descclassname"><span class="pre">time.</span></span><span class="sig-name descname"><span class="pre">time_ns</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span> <span class="sig-return"><span class="sig-return-icon">&#x2192;</span> <span class="sig-return-typehint"><a class="reference internal" href="functions.xhtml#int" title="int"><span class="pre">int</span></a></span></span></dt>
<dd><p>与 <a class="reference internal" href="#time.time" title="time.time"><code class="xref py py-func docutils literal notranslate"><span class="pre">time()</span></code></a> 相似，但返回时间为用整数表示的自 <a class="reference internal" href="#epoch">epoch</a> 以来所经过的纳秒数。</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.7.</span></p>
</div>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="time.thread_time">
<span class="sig-prename descclassname"><span class="pre">time.</span></span><span class="sig-name descname"><span class="pre">thread_time</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span> <span class="sig-return"><span class="sig-return-icon">&#x2192;</span> <span class="sig-return-typehint"><a class="reference internal" href="functions.xhtml#float" title="float"><span class="pre">float</span></a></span></span></dt>
<dd><p id="index-12">（以小数表示的秒为单位）返回当前线程的系统和用户 CPU 时间的总计值。 它不包括睡眠状态所消耗的时间。 根据定义它只作用于线程范围。 返回值的参考点未被定义，因此只有两次调用之间的差值才是有效的。</p>
<p>使用 <a class="reference internal" href="#time.thread_time_ns" title="time.thread_time_ns"><code class="xref py py-func docutils literal notranslate"><span class="pre">thread_time_ns()</span></code></a> 以避免 <a class="reference internal" href="functions.xhtml#float" title="float"><code class="xref py py-class docutils literal notranslate"><span class="pre">float</span></code></a> 类型导致的精度损失。</p>
<div class="availability docutils container">
<p><a class="reference internal" href="intro.xhtml#availability"><span class="std std-ref">可用性</span></a>: Linux, Unix, Windows。</p>
<p>支持 <code class="docutils literal notranslate"><span class="pre">CLOCK_THREAD_CPUTIME_ID</span></code> 的 Unix 系统。</p>
</div>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.7.</span></p>
</div>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="time.thread_time_ns">
<span class="sig-prename descclassname"><span class="pre">time.</span></span><span class="sig-name descname"><span class="pre">thread_time_ns</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span> <span class="sig-return"><span class="sig-return-icon">&#x2192;</span> <span class="sig-return-typehint"><a class="reference internal" href="functions.xhtml#int" title="int"><span class="pre">int</span></a></span></span></dt>
<dd><p>与 <a class="reference internal" href="#time.thread_time" title="time.thread_time"><code class="xref py py-func docutils literal notranslate"><span class="pre">thread_time()</span></code></a> 相似，但返回纳秒时间。</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.7.</span></p>
</div>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="time.tzset">
<span class="sig-prename descclassname"><span class="pre">time.</span></span><span class="sig-name descname"><span class="pre">tzset</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>重置库例程使用的时间转换规则。环境变量 <span class="target" id="index-37"></span><code class="xref std std-envvar docutils literal notranslate"><span class="pre">TZ</span></code> 指定如何完成。它还将设置变量 <code class="docutils literal notranslate"><span class="pre">tzname</span></code> （来自 <span class="target" id="index-38"></span><code class="xref std std-envvar docutils literal notranslate"><span class="pre">TZ</span></code> 环境变量）， <code class="docutils literal notranslate"><span class="pre">timezone</span></code> （UTC的西部非DST秒）， <code class="docutils literal notranslate"><span class="pre">altzone</span></code> （UTC以西的DST秒）和 <code class="docutils literal notranslate"><span class="pre">daylight</span></code> （如果此时区没有任何夏令时规则则为0，如果有夏令时适用的时间，无论过去、现在或未来，则为非零）。</p>
<div class="availability docutils container">
<p><a class="reference internal" href="intro.xhtml#availability"><span class="std std-ref">可用性</span></a>: Unix。</p>
</div>
<div class="admonition note">
<p class="admonition-title">备注</p>
<p>虽然在很多情况下，更改 <span class="target" id="index-39"></span><code class="xref std std-envvar docutils literal notranslate"><span class="pre">TZ</span></code> 环境变量而不调用 <a class="reference internal" href="#time.tzset" title="time.tzset"><code class="xref py py-func docutils literal notranslate"><span class="pre">tzset()</span></code></a> 可能会影响函数的输出，例如 <a class="reference internal" href="#time.localtime" title="time.localtime"><code class="xref py py-func docutils literal notranslate"><span class="pre">localtime()</span></code></a> ，不应该依赖此行为。</p>
<p><span class="target" id="index-40"></span><code class="xref std std-envvar docutils literal notranslate"><span class="pre">TZ</span></code> 不应该包含空格。</p>
</div>
<p><span class="target" id="index-41"></span><code class="xref std std-envvar docutils literal notranslate"><span class="pre">TZ</span></code> 环境变量的标准格式是（为了清晰起见，添加了空格）:</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="n">std</span> <span class="n">offset</span> <span class="p">[</span><span class="n">dst</span> <span class="p">[</span><span class="n">offset</span> <span class="p">[,</span><span class="n">start</span><span class="p">[</span><span class="o">/</span><span class="n">time</span><span class="p">],</span> <span class="n">end</span><span class="p">[</span><span class="o">/</span><span class="n">time</span><span class="p">]]]]</span>
</pre></div>
</div>
<p>组件的位置是：</p>
<dl>
<dt><code class="docutils literal notranslate"><span class="pre">std</span></code> 和 <code class="docutils literal notranslate"><span class="pre">dst</span></code></dt><dd><p>三个或更多字母数字，给出时区缩写。这些将传到 time.tzname</p>
</dd>
<dt><code class="docutils literal notranslate"><span class="pre">offset</span></code></dt><dd><p>偏移量的形式为： <code class="docutils literal notranslate"><span class="pre">±</span> <span class="pre">hh[:mm[:ss]]</span></code> 。这表示添加到达UTC的本地时间的值。如果前面有 '-' ，则时区位于本初子午线的东边；否则，在它是西边。如果dst之后没有偏移，则假设夏令时比标准时间提前一小时。</p>
</dd>
<dt><code class="docutils literal notranslate"><span class="pre">start[/time],</span> <span class="pre">end[/time]</span></code></dt><dd><p>指示何时更改为DST和从DST返回。开始日期和结束日期的格式为以下之一：</p>
<dl class="simple">
<dt><code class="samp docutils literal notranslate"><span class="pre">J</span><em><span class="pre">n</span></em></code></dt><dd><p>Julian日 <em>n</em> （1 &lt;= <em>n</em> &lt;= 365）。闰日不计算在内，因此在所有年份中，2月28日是第59天，3月1日是第60天。</p>
</dd>
<dt><code class="samp docutils literal notranslate"><em><span class="pre">n</span></em></code></dt><dd><p>从零开始的Julian日（0 &lt;= <em>n</em> &lt;= 365）。 闰日计入，可以引用2月29日。</p>
</dd>
<dt><code class="samp docutils literal notranslate"><span class="pre">M</span><em><span class="pre">m</span></em><span class="pre">.</span><em><span class="pre">n</span></em><span class="pre">.</span><em><span class="pre">d</span></em></code></dt><dd><p>一年中 <em>m</em> 月的第 <em>n</em> 周（1 &lt;= <em>n</em> &lt;= 5 ，1 &lt;= <em>m</em> &lt;= 12 ，第 5 周表示 “可能在 <em>m</em> 月第 4 周或第 5 周出现的最后第 <em>d</em> 日”）的第 <em>d</em> 天（0 &lt;= <em>d</em> &lt;= 6）。 第 1 周是第 <em>d</em> 天发生的第一周。 第 0 天是星期天。</p>
</dd>
</dl>
<p><code class="docutils literal notranslate"><span class="pre">time</span></code> 的格式与 <code class="docutils literal notranslate"><span class="pre">offset</span></code> 的格式相同，但不允许使用前导符号（ '-' 或 '+' ）。如果没有给出时间，则默认值为02:00:00。</p>
</dd>
</dl>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">os</span><span class="o">.</span><span class="n">environ</span><span class="p">[</span><span class="s1">&#39;TZ&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;EST+05EDT,M4.1.0,M10.5.0&#39;</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">time</span><span class="o">.</span><span class="n">tzset</span><span class="p">()</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">time</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s1">&#39;</span><span class="si">%X</span><span class="s1"> </span><span class="si">%x</span><span class="s1"> %Z&#39;</span><span class="p">)</span>
<span class="go">&#39;02:07:36 05/08/03 EDT&#39;</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">os</span><span class="o">.</span><span class="n">environ</span><span class="p">[</span><span class="s1">&#39;TZ&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;AEST-10AEDT-11,M10.5.0,M3.5.0&#39;</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">time</span><span class="o">.</span><span class="n">tzset</span><span class="p">()</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">time</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s1">&#39;</span><span class="si">%X</span><span class="s1"> </span><span class="si">%x</span><span class="s1"> %Z&#39;</span><span class="p">)</span>
<span class="go">&#39;16:08:12 05/08/03 AEST&#39;</span>
</pre></div>
</div>
<p>在许多Unix系统（包括 *BSD ， Linux ， Solaris 和 Darwin 上），使用系统的区域信息（ <em class="manpage"><a class="manpage reference external" href="https://manpages.debian.org/tzfile(5)">tzfile(5)</a><span class="link-target"> [https://manpages.debian.org/tzfile(5)]</span></em> ）数据库来指定时区规则会更方便。为此，将 <span class="target" id="index-42"></span><code class="xref std std-envvar docutils literal notranslate"><span class="pre">TZ</span></code> 环境变量设置为所需时区数据文件的路径，相对于系统 'zoneinfo' 时区数据库的根目录，通常位于 <code class="file docutils literal notranslate"><span class="pre">/usr/share/zoneinfo</span></code> 。 例如，<code class="docutils literal notranslate"><span class="pre">'US/Eastern'</span></code> 、 <code class="docutils literal notranslate"><span class="pre">'Australia/Melbourne'</span></code> 、 <code class="docutils literal notranslate"><span class="pre">'Egypt'</span></code> 或 <code class="docutils literal notranslate"><span class="pre">'Europe/Amsterdam'</span></code>。</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">os</span><span class="o">.</span><span class="n">environ</span><span class="p">[</span><span class="s1">&#39;TZ&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;US/Eastern&#39;</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">time</span><span class="o">.</span><span class="n">tzset</span><span class="p">()</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">time</span><span class="o">.</span><span class="n">tzname</span>
<span class="go">(&#39;EST&#39;, &#39;EDT&#39;)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">os</span><span class="o">.</span><span class="n">environ</span><span class="p">[</span><span class="s1">&#39;TZ&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;Egypt&#39;</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">time</span><span class="o">.</span><span class="n">tzset</span><span class="p">()</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">time</span><span class="o">.</span><span class="n">tzname</span>
<span class="go">(&#39;EET&#39;, &#39;EEST&#39;)</span>
</pre></div>
</div>
</dd></dl>

</section>
<section id="clock-id-constants">
<span id="time-clock-id-constants"></span><h2>Clock ID 常量</h2>
<p>这些常量用作 <a class="reference internal" href="#time.clock_getres" title="time.clock_getres"><code class="xref py py-func docutils literal notranslate"><span class="pre">clock_getres()</span></code></a> 和 <a class="reference internal" href="#time.clock_gettime" title="time.clock_gettime"><code class="xref py py-func docutils literal notranslate"><span class="pre">clock_gettime()</span></code></a> 的参数。</p>
<dl class="py data">
<dt class="sig sig-object py" id="time.CLOCK_BOOTTIME">
<span class="sig-prename descclassname"><span class="pre">time.</span></span><span class="sig-name descname"><span class="pre">CLOCK_BOOTTIME</span></span></dt>
<dd><p>与 <a class="reference internal" href="#time.CLOCK_MONOTONIC" title="time.CLOCK_MONOTONIC"><code class="xref py py-data docutils literal notranslate"><span class="pre">CLOCK_MONOTONIC</span></code></a> 相同，除了它还包括系统暂停的任何时间。</p>
<p>这允许应用程序获得一个暂停感知的单调时钟，而不必处理 <a class="reference internal" href="#time.CLOCK_REALTIME" title="time.CLOCK_REALTIME"><code class="xref py py-data docutils literal notranslate"><span class="pre">CLOCK_REALTIME</span></code></a> 的复杂性，如果使用 <code class="docutils literal notranslate"><span class="pre">settimeofday()</span></code> 或类似的时间更改时间可能会有不连续性。</p>
<div class="availability docutils container">
<p><a class="reference internal" href="intro.xhtml#availability"><span class="std std-ref">可用性</span></a>: Linux &gt;= 2.6.39。</p>
</div>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.7.</span></p>
</div>
</dd></dl>

<dl class="py data">
<dt class="sig sig-object py" id="time.CLOCK_HIGHRES">
<span class="sig-prename descclassname"><span class="pre">time.</span></span><span class="sig-name descname"><span class="pre">CLOCK_HIGHRES</span></span></dt>
<dd><p>Solaris OS 有一个 <code class="docutils literal notranslate"><span class="pre">CLOCK_HIGHRES</span></code> 计时器，试图使用最佳硬件源，并可能提供接近纳秒的分辨率。 <code class="docutils literal notranslate"><span class="pre">CLOCK_HIGHRES</span></code> 是不可调节的高分辨率时钟。</p>
<div class="availability docutils container">
<p><a class="reference internal" href="intro.xhtml#availability"><span class="std std-ref">可用性</span></a>: Solaris.</p>
</div>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.3.</span></p>
</div>
</dd></dl>

<dl class="py data">
<dt class="sig sig-object py" id="time.CLOCK_MONOTONIC">
<span class="sig-prename descclassname"><span class="pre">time.</span></span><span class="sig-name descname"><span class="pre">CLOCK_MONOTONIC</span></span></dt>
<dd><p>无法设置的时钟，表示自某些未指定的起点以来的单调时间。</p>
<div class="availability docutils container">
<p><a class="reference internal" href="intro.xhtml#availability"><span class="std std-ref">可用性</span></a>: Unix。</p>
</div>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.3.</span></p>
</div>
</dd></dl>

<dl class="py data">
<dt class="sig sig-object py" id="time.CLOCK_MONOTONIC_RAW">
<span class="sig-prename descclassname"><span class="pre">time.</span></span><span class="sig-name descname"><span class="pre">CLOCK_MONOTONIC_RAW</span></span></dt>
<dd><p>类似于 <a class="reference internal" href="#time.CLOCK_MONOTONIC" title="time.CLOCK_MONOTONIC"><code class="xref py py-data docutils literal notranslate"><span class="pre">CLOCK_MONOTONIC</span></code></a> ，但可以访问不受NTP调整影响的原始硬件时间。</p>
<div class="availability docutils container">
<p><a class="reference internal" href="intro.xhtml#availability"><span class="std std-ref">可用性</span></a>: Linux &gt;= 2.6.28, macOS &gt;= 10.12。</p>
</div>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.3.</span></p>
</div>
</dd></dl>

<dl class="py data">
<dt class="sig sig-object py" id="time.CLOCK_PROCESS_CPUTIME_ID">
<span class="sig-prename descclassname"><span class="pre">time.</span></span><span class="sig-name descname"><span class="pre">CLOCK_PROCESS_CPUTIME_ID</span></span></dt>
<dd><p>来自CPU的高分辨率每进程计时器。</p>
<div class="availability docutils container">
<p><a class="reference internal" href="intro.xhtml#availability"><span class="std std-ref">可用性</span></a>: Unix。</p>
</div>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.3.</span></p>
</div>
</dd></dl>

<dl class="py data">
<dt class="sig sig-object py" id="time.CLOCK_PROF">
<span class="sig-prename descclassname"><span class="pre">time.</span></span><span class="sig-name descname"><span class="pre">CLOCK_PROF</span></span></dt>
<dd><p>来自CPU的高分辨率每进程计时器。</p>
<div class="availability docutils container">
<p><a class="reference internal" href="intro.xhtml#availability"><span class="std std-ref">可用性</span></a>: FreeBSD, NetBSD &gt;= 7, OpenBSD。</p>
</div>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.7.</span></p>
</div>
</dd></dl>

<dl class="py data">
<dt class="sig sig-object py" id="time.CLOCK_TAI">
<span class="sig-prename descclassname"><span class="pre">time.</span></span><span class="sig-name descname"><span class="pre">CLOCK_TAI</span></span></dt>
<dd><p><a class="reference external" href="https://www.nist.gov/pml/time-and-frequency-division/nist-time-frequently-asked-questions-faq#tai">国际原子时间</a><span class="link-target"> [https://www.nist.gov/pml/time-and-frequency-division/nist-time-frequently-asked-questions-faq#tai]</span></p>
<p>该系统必须有一个当前闰秒表以便能给出正确的回答。 PTP 或 NTP 软件可以用来维护闰秒表。</p>
<div class="availability docutils container">
<p><a class="reference internal" href="intro.xhtml#availability"><span class="std std-ref">可用性</span></a>: Linux。</p>
</div>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.9.</span></p>
</div>
</dd></dl>

<dl class="py data">
<dt class="sig sig-object py" id="time.CLOCK_THREAD_CPUTIME_ID">
<span class="sig-prename descclassname"><span class="pre">time.</span></span><span class="sig-name descname"><span class="pre">CLOCK_THREAD_CPUTIME_ID</span></span></dt>
<dd><p>特定于线程的CPU时钟。</p>
<div class="availability docutils container">
<p><a class="reference internal" href="intro.xhtml#availability"><span class="std std-ref">可用性</span></a>: Unix。</p>
</div>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.3.</span></p>
</div>
</dd></dl>

<dl class="py data">
<dt class="sig sig-object py" id="time.CLOCK_UPTIME">
<span class="sig-prename descclassname"><span class="pre">time.</span></span><span class="sig-name descname"><span class="pre">CLOCK_UPTIME</span></span></dt>
<dd><p>该时间的绝对值是系统运行且未暂停的时间，提供准确的正常运行时间测量，包括绝对值和间隔值。</p>
<div class="availability docutils container">
<p><a class="reference internal" href="intro.xhtml#availability"><span class="std std-ref">可用性</span></a>: FreeBSD, OpenBSD &gt;= 5.5。</p>
</div>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.7.</span></p>
</div>
</dd></dl>

<dl class="py data">
<dt class="sig sig-object py" id="time.CLOCK_UPTIME_RAW">
<span class="sig-prename descclassname"><span class="pre">time.</span></span><span class="sig-name descname"><span class="pre">CLOCK_UPTIME_RAW</span></span></dt>
<dd><p>单调递增的时钟，记录从一个任意起点开始的时间，不受频率或时间调整的影响，并且当系统休眠时将不会递增。</p>
<div class="availability docutils container">
<p><a class="reference internal" href="intro.xhtml#availability"><span class="std std-ref">可用性</span></a>: macOS &gt;= 10.12。</p>
</div>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.8.</span></p>
</div>
</dd></dl>

<p>以下常量是唯一可以发送到 <a class="reference internal" href="#time.clock_settime" title="time.clock_settime"><code class="xref py py-func docutils literal notranslate"><span class="pre">clock_settime()</span></code></a> 的参数。</p>
<dl class="py data">
<dt class="sig sig-object py" id="time.CLOCK_REALTIME">
<span class="sig-prename descclassname"><span class="pre">time.</span></span><span class="sig-name descname"><span class="pre">CLOCK_REALTIME</span></span></dt>
<dd><p>系统范围的实时时钟。 设置此时钟需要适当的权限。</p>
<div class="availability docutils container">
<p><a class="reference internal" href="intro.xhtml#availability"><span class="std std-ref">可用性</span></a>: Unix。</p>
</div>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.3.</span></p>
</div>
</dd></dl>

</section>
<section id="timezone-constants">
<span id="time-timezone-constants"></span><h2>时区常量</h2>
<dl class="py data">
<dt class="sig sig-object py" id="time.altzone">
<span class="sig-prename descclassname"><span class="pre">time.</span></span><span class="sig-name descname"><span class="pre">altzone</span></span></dt>
<dd><p>本地DST时区的偏移量，以UTC为单位的秒数，如果已定义。如果当地DST时区在UTC以东（如在西欧，包括英国），则是负数。 只有当 <code class="docutils literal notranslate"><span class="pre">daylight</span></code> 非零时才使用它。 见下面的注释。</p>
</dd></dl>

<dl class="py data">
<dt class="sig sig-object py" id="time.daylight">
<span class="sig-prename descclassname"><span class="pre">time.</span></span><span class="sig-name descname"><span class="pre">daylight</span></span></dt>
<dd><p>如果定义了DST时区，则为非零。 见下面的注释。</p>
</dd></dl>

<dl class="py data">
<dt class="sig sig-object py" id="time.timezone">
<span class="sig-prename descclassname"><span class="pre">time.</span></span><span class="sig-name descname"><span class="pre">timezone</span></span></dt>
<dd><p>本地（非DST）时区的偏移量，UTC以西的秒数（西欧大部分地区为负，美国为正，英国为零）。 见下面的注释。</p>
</dd></dl>

<dl class="py data">
<dt class="sig sig-object py" id="time.tzname">
<span class="sig-prename descclassname"><span class="pre">time.</span></span><span class="sig-name descname"><span class="pre">tzname</span></span></dt>
<dd><p>两个字符串的元组：第一个是本地非DST时区的名称，第二个是本地DST时区的名称。 如果未定义DST时区，则不应使用第二个字符串。 见下面的注释。</p>
</dd></dl>

<div class="admonition note">
<p class="admonition-title">备注</p>
<p>对于上述时区常量 (<a class="reference internal" href="#time.altzone" title="time.altzone"><code class="xref py py-data docutils literal notranslate"><span class="pre">altzone</span></code></a>, <a class="reference internal" href="#time.daylight" title="time.daylight"><code class="xref py py-data docutils literal notranslate"><span class="pre">daylight</span></code></a>, <a class="reference internal" href="#time.timezone" title="time.timezone"><code class="xref py py-data docutils literal notranslate"><span class="pre">timezone</span></code></a> 和 <a class="reference internal" href="#time.tzname" title="time.tzname"><code class="xref py py-data docutils literal notranslate"><span class="pre">tzname</span></code></a>)，该值由当模块加载或 <a class="reference internal" href="#time.tzset" title="time.tzset"><code class="xref py py-func docutils literal notranslate"><span class="pre">tzset()</span></code></a> 最后一次被调用时生效的时区规则确定并且对于已过去的时间可能不正确。 建议使用来自 <a class="reference internal" href="#time.localtime" title="time.localtime"><code class="xref py py-func docutils literal notranslate"><span class="pre">localtime()</span></code></a> 结果的 <a class="reference internal" href="#time.struct_time.tm_gmtoff" title="time.struct_time.tm_gmtoff"><code class="xref py py-attr docutils literal notranslate"><span class="pre">tm_gmtoff</span></code></a> 和 <a class="reference internal" href="#time.struct_time.tm_zone" title="time.struct_time.tm_zone"><code class="xref py py-attr docutils literal notranslate"><span class="pre">tm_zone</span></code></a> 来获取时区信息。</p>
</div>
<div class="admonition seealso">
<p class="admonition-title">参见</p>
<dl class="simple">
<dt>模块 <a class="reference internal" href="datetime.xhtml#module-datetime" title="datetime: Basic date and time types."><code class="xref py py-mod docutils literal notranslate"><span class="pre">datetime</span></code></a></dt><dd><p>更多面向对象的日期和时间接口。</p>
</dd>
<dt>模块 <a class="reference internal" href="locale.xhtml#module-locale" title="locale: Internationalization services."><code class="xref py py-mod docutils literal notranslate"><span class="pre">locale</span></code></a></dt><dd><p>国际化服务。 区域设置会影响 <a class="reference internal" href="#time.strftime" title="time.strftime"><code class="xref py py-func docutils literal notranslate"><span class="pre">strftime()</span></code></a> 和 <a class="reference internal" href="#time.strptime" title="time.strptime"><code class="xref py py-func docutils literal notranslate"><span class="pre">strptime()</span></code></a>  中许多格式说明符的解析。</p>
</dd>
<dt>模块 <a class="reference internal" href="calendar.xhtml#module-calendar" title="calendar: Functions for working with calendars, including some emulation of the Unix cal program."><code class="xref py py-mod docutils literal notranslate"><span class="pre">calendar</span></code></a></dt><dd><p>一般日历相关功能。这个模块的 <code class="xref py py-func docutils literal notranslate"><span class="pre">timegm()</span></code> 是函数 <a class="reference internal" href="#time.gmtime" title="time.gmtime"><code class="xref py py-func docutils literal notranslate"><span class="pre">gmtime()</span></code></a> 的反函数。</p>
</dd>
</dl>
</div>
<p class="rubric">备注</p>
<aside class="footnote-list brackets">
<aside class="footnote brackets" id="id4" role="doc-footnote">
<span class="label"><span class="fn-bracket">[</span>1<span class="fn-bracket">]</span></span>
<span class="backrefs">(<a role="doc-backlink" href="#id1">1</a>,<a role="doc-backlink" href="#id2">2</a>,<a role="doc-backlink" href="#id3">3</a>)</span>
<p>现在不推荐使用 <code class="docutils literal notranslate"><span class="pre">%Z</span></code> ，但是所有 ANSI C 库都不支持扩展为首选小时/分钟偏移量的 <code class="docutils literal notranslate"><span class="pre">%z</span></code> 转义符。 此外，严格的 1982 年原始 <span class="target" id="index-43"></span><a class="rfc reference external" href="https://datatracker.ietf.org/doc/html/rfc822.html"><strong>RFC 822</strong></a><span class="link-target"> [https://datatracker.ietf.org/doc/html/rfc822.html]</span> 标准要求两位数的年份（ <code class="docutils literal notranslate"><span class="pre">%y</span></code> 而不是 <code class="docutils literal notranslate"><span class="pre">%Y</span></code> ），但是实际在2000年之前很久就转移到了4位数年。之后， <span class="target" id="index-44"></span><a class="rfc reference external" href="https://datatracker.ietf.org/doc/html/rfc822.html"><strong>RFC 822</strong></a><span class="link-target"> [https://datatracker.ietf.org/doc/html/rfc822.html]</span> 已经废弃了，4位数的年份首先被推荐 <span class="target" id="index-45"></span><a class="rfc reference external" href="https://datatracker.ietf.org/doc/html/rfc1123.html"><strong>RFC 1123</strong></a><span class="link-target"> [https://datatracker.ietf.org/doc/html/rfc1123.html]</span> ，然后被 <span class="target" id="index-46"></span><a class="rfc reference external" href="https://datatracker.ietf.org/doc/html/rfc2822.html"><strong>RFC 2822</strong></a><span class="link-target"> [https://datatracker.ietf.org/doc/html/rfc2822.html]</span> 强制执行。</p>
</aside>
</aside>
</section>
</section>


            <div class="clearer"></div>
          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>