<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" /><meta name="viewport" content="width=device-width, initial-scale=1" />
<meta property="og:title" content="pickletools --- pickle 开发者工具" />
<meta property="og:type" content="website" />
<meta property="og:url" content="https://docs.python.org/3/library/pickletools.xhtml" />
<meta property="og:site_name" content="Python documentation" />
<meta property="og:description" content="源代码: Lib/pickletools.py[https://github.com/python/cpython/tree/3.12/Lib/pickletools.py] 此模块包含与 pickle 模块内部细节有关的多个常量，一些关于具体实现的详细注释，以及一些能够分析封存数据的有用函数。 此模块的内容对需要操作 pickle 的 Python 核心开发者来说很有用处； pickle ..." />
<meta property="og:image" content="https://docs.python.org/3/_static/og-image.png" />
<meta property="og:image:alt" content="Python documentation" />
<meta name="description" content="源代码: Lib/pickletools.py[https://github.com/python/cpython/tree/3.12/Lib/pickletools.py] 此模块包含与 pickle 模块内部细节有关的多个常量，一些关于具体实现的详细注释，以及一些能够分析封存数据的有用函数。 此模块的内容对需要操作 pickle 的 Python 核心开发者来说很有用处； pickle ..." />
<meta property="og:image:width" content="200" />
<meta property="og:image:height" content="200" />
<meta name="theme-color" content="#3776ab" />

    <title>pickletools --- pickle 开发者工具</title>
    <link rel="stylesheet" type="text/css" href="../_static/pygments.css" />
    <link rel="stylesheet" type="text/css" href="../_static/epub.css" />
    <link rel="canonical" href="https://docs.python.org/3/library/pickletools.html" />
    
      
    

    
    <style>
      @media only screen {
        table.full-width-table {
            width: 100%;
        }
      }
    </style>
 

  </head><body>


    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <section id="module-pickletools">
<span id="pickletools-tools-for-pickle-developers"></span><h1><code class="xref py py-mod docutils literal notranslate"><span class="pre">pickletools</span></code> --- pickle 开发者工具</h1>
<p><strong>源代码:</strong> <a class="reference external" href="https://github.com/python/cpython/tree/3.12/Lib/pickletools.py">Lib/pickletools.py</a><span class="link-target"> [https://github.com/python/cpython/tree/3.12/Lib/pickletools.py]</span></p>
<hr class="docutils" />
<p>此模块包含与 <a class="reference internal" href="pickle.xhtml#module-pickle" title="pickle: Convert Python objects to streams of bytes and back."><code class="xref py py-mod docutils literal notranslate"><span class="pre">pickle</span></code></a> 模块内部细节有关的多个常量，一些关于具体实现的详细注释，以及一些能够分析封存数据的有用函数。 此模块的内容对需要操作 <a class="reference internal" href="pickle.xhtml#module-pickle" title="pickle: Convert Python objects to streams of bytes and back."><code class="xref py py-mod docutils literal notranslate"><span class="pre">pickle</span></code></a> 的 Python 核心开发者来说很有用处；<a class="reference internal" href="pickle.xhtml#module-pickle" title="pickle: Convert Python objects to streams of bytes and back."><code class="xref py py-mod docutils literal notranslate"><span class="pre">pickle</span></code></a> 的一般用户则可能会感觉 <a class="reference internal" href="#module-pickletools" title="pickletools: Contains extensive comments about the pickle protocols and pickle-machine opcodes, as well as some useful functions."><code class="xref py py-mod docutils literal notranslate"><span class="pre">pickletools</span></code></a> 模块与他们无关。</p>
<section id="command-line-usage">
<span id="pickletools-cli"></span><h2>命令行语法</h2>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.2.</span></p>
</div>
<p>当从命令行发起调用时，<code class="docutils literal notranslate"><span class="pre">python</span> <span class="pre">-m</span> <span class="pre">pickletools</span></code> 将对一个或更多 pickle 文件的内容进行拆解。 请注意如果你查看 pickle 中保存的 Python 对象而非 pickle 格式的细节，你可能需要改用 <code class="docutils literal notranslate"><span class="pre">-m</span> <span class="pre">pickle</span></code>。 但是，当你想检查的 pickle 文件来自某个不受信任的源时，<code class="docutils literal notranslate"><span class="pre">-m</span> <span class="pre">pickletools</span></code> 是更安全的选择，因为它不会执行 pickle 字节码。</p>
<p>例如，对于一个封存在文件 <code class="docutils literal notranslate"><span class="pre">x.pickle</span></code> 中的元组 <code class="docutils literal notranslate"><span class="pre">(1,</span> <span class="pre">2)</span></code>:</p>
<div class="highlight-shell-session notranslate"><div class="highlight"><pre><span></span><span class="gp">$ </span>python<span class="w"> </span>-m<span class="w"> </span>pickle<span class="w"> </span>x.pickle
<span class="gp gp-VirtualEnv">(1, 2)</span>

<span class="gp">$ </span>python<span class="w"> </span>-m<span class="w"> </span>pickletools<span class="w"> </span>x.pickle
<span class="go">    0: \x80 PROTO      3</span>
<span class="go">    2: K    BININT1    1</span>
<span class="go">    4: K    BININT1    2</span>
<span class="go">    6: \x86 TUPLE2</span>
<span class="go">    7: q    BINPUT     0</span>
<span class="go">    9: .    STOP</span>
<span class="go">highest protocol among opcodes = 2</span>
</pre></div>
</div>
<section id="command-line-options">
<h3>命令行选项</h3>
<dl class="std option">
<dt class="sig sig-object std" id="cmdoption-pickletools-a">
<span id="cmdoption-pickletools-annotate"></span><span class="sig-name descname"><span class="pre">-a</span></span><span class="sig-prename descclassname"></span><span class="sig-prename descclassname"><span class="pre">,</span> </span><span class="sig-name descname"><span class="pre">--annotate</span></span><span class="sig-prename descclassname"></span></dt>
<dd><p>使用简短的操作码描述来标注每一行。</p>
</dd></dl>

<dl class="std option">
<dt class="sig sig-object std" id="cmdoption-pickletools-o">
<span id="cmdoption-pickletools-output"></span><span class="sig-name descname"><span class="pre">-o</span></span><span class="sig-prename descclassname"></span><span class="sig-prename descclassname"><span class="pre">,</span> </span><span class="sig-name descname"><span class="pre">--output</span></span><span class="sig-prename descclassname"><span class="pre">=&lt;file&gt;</span></span></dt>
<dd><p>输出应当写入到的文件名称。</p>
</dd></dl>

<dl class="std option">
<dt class="sig sig-object std" id="cmdoption-pickletools-l">
<span id="cmdoption-pickletools-indentlevel"></span><span class="sig-name descname"><span class="pre">-l</span></span><span class="sig-prename descclassname"></span><span class="sig-prename descclassname"><span class="pre">,</span> </span><span class="sig-name descname"><span class="pre">--indentlevel</span></span><span class="sig-prename descclassname"><span class="pre">=&lt;num&gt;</span></span></dt>
<dd><p>一个新的 MARK 层级所需缩进的空格数。</p>
</dd></dl>

<dl class="std option">
<dt class="sig sig-object std" id="cmdoption-pickletools-m">
<span id="cmdoption-pickletools-memo"></span><span class="sig-name descname"><span class="pre">-m</span></span><span class="sig-prename descclassname"></span><span class="sig-prename descclassname"><span class="pre">,</span> </span><span class="sig-name descname"><span class="pre">--memo</span></span><span class="sig-prename descclassname"></span></dt>
<dd><p>当反汇编多个对象时，保留各个反汇编的备忘记录。</p>
</dd></dl>

<dl class="std option">
<dt class="sig sig-object std" id="cmdoption-pickletools-p">
<span id="cmdoption-pickletools-preamble"></span><span class="sig-name descname"><span class="pre">-p</span></span><span class="sig-prename descclassname"></span><span class="sig-prename descclassname"><span class="pre">,</span> </span><span class="sig-name descname"><span class="pre">--preamble</span></span><span class="sig-prename descclassname"><span class="pre">=&lt;preamble&gt;</span></span></dt>
<dd><p>当指定一个以上的 pickle 文件时，在每次反汇编之前打印给定的前言。</p>
</dd></dl>

</section>
</section>
<section id="programmatic-interface">
<h2>编程接口</h2>
<dl class="py function">
<dt class="sig sig-object py" id="pickletools.dis">
<span class="sig-prename descclassname"><span class="pre">pickletools.</span></span><span class="sig-name descname"><span class="pre">dis</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">pickle</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">out</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">memo</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">indentlevel</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">4</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">annotate</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">0</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>将 pickle 的符号化反汇编数据输出到文件型对象 <em>out</em>，默认为 <code class="docutils literal notranslate"><span class="pre">sys.stdout</span></code>。 <em>pickle</em> 可以是一个字符串或一个文件型对象。 <em>memo</em> 可以是一个将被用作 pickle 的备忘记录的 Python 字典；它可被用来对由同一封存器创建的多个封存对象执行反汇编。 由 <code class="docutils literal notranslate"><span class="pre">MARK</span></code> 操作码指明的每个连续级别将会缩进 <em>indentlevel</em> 个空格。 如果为 <em>annotate</em> 指定了一个非零值，则输出中的每个操作码将以一个简短描述来标注。 <em>annotate</em> 的值会被用作标注所应开始的列的提示。</p>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.2 版本发生变更: </span>增加了 <em>annotate</em> 形参。</p>
</div>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="pickletools.genops">
<span class="sig-prename descclassname"><span class="pre">pickletools.</span></span><span class="sig-name descname"><span class="pre">genops</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">pickle</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>提供包含 pickle 中所有操作码的 <a class="reference internal" href="../glossary.xhtml#term-iterator"><span class="xref std std-term">iterator</span></a>，返回一个 <code class="docutils literal notranslate"><span class="pre">(opcode,</span> <span class="pre">arg,</span> <span class="pre">pos)</span></code> 三元组的序列。 <em>opcode</em> 是 <code class="xref py py-class docutils literal notranslate"><span class="pre">OpcodeInfo</span></code> 类的一个实例；<em>arg</em> 是 Python 对象形式的 opcode 参数的已解码值；<em>pos</em> 是 opcode 所在的位置。 <em>pickle</em> 可以是一个字符串或一个文件型对象。</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="pickletools.optimize">
<span class="sig-prename descclassname"><span class="pre">pickletools.</span></span><span class="sig-name descname"><span class="pre">optimize</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">picklestring</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>在消除未使用的 <code class="docutils literal notranslate"><span class="pre">PUT</span></code> 操作码之后返回一个新的等效 pickle 字符串。 优化后的 pickle 将更为简短，耗费更为的传输时间，要求更少的存储空间并能更高效地解封。</p>
</dd></dl>

</section>
</section>


            <div class="clearer"></div>
          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>