<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" /><meta name="viewport" content="width=device-width, initial-scale=1" />
<meta property="og:title" content="扩展" />
<meta property="og:type" content="website" />
<meta property="og:url" content="https://docs.python.org/3/library/asyncio-extending.xhtml" />
<meta property="og:site_name" content="Python documentation" />
<meta property="og:description" content="asyncio 扩展的主要方向是编写自定义的 事件循环 类。 asyncio 具有可以被用来简化此任务的辅助工具。 编写自定义事件循环: asyncio.AbstractEventLoop 声明了大量的方法。 从头开始全部实现它们将是一件烦琐的工作。 一个事件循环可以通过从 asyncio.BaseEventLoop 继承来自动地获得许多常用方法的实现。 相应地，继承者应当实现多个在 asy..." />
<meta property="og:image" content="https://docs.python.org/3/_static/og-image.png" />
<meta property="og:image:alt" content="Python documentation" />
<meta name="description" content="asyncio 扩展的主要方向是编写自定义的 事件循环 类。 asyncio 具有可以被用来简化此任务的辅助工具。 编写自定义事件循环: asyncio.AbstractEventLoop 声明了大量的方法。 从头开始全部实现它们将是一件烦琐的工作。 一个事件循环可以通过从 asyncio.BaseEventLoop 继承来自动地获得许多常用方法的实现。 相应地，继承者应当实现多个在 asy..." />
<meta property="og:image:width" content="200" />
<meta property="og:image:height" content="200" />
<meta name="theme-color" content="#3776ab" />

    <title>扩展</title>
    <link rel="stylesheet" type="text/css" href="../_static/pygments.css" />
    <link rel="stylesheet" type="text/css" href="../_static/epub.css" />
    <link rel="canonical" href="https://docs.python.org/3/library/asyncio-extending.html" />
    
      
    

    
    <style>
      @media only screen {
        table.full-width-table {
            width: 100%;
        }
      }
    </style>
 

  </head><body>


    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <section id="extending">
<h1>扩展</h1>
<p><a class="reference internal" href="asyncio.xhtml#module-asyncio" title="asyncio: Asynchronous I/O."><code class="xref py py-mod docutils literal notranslate"><span class="pre">asyncio</span></code></a> 扩展的主要方向是编写自定义的 <em>事件循环</em> 类。 asyncio 具有可以被用来简化此任务的辅助工具。</p>
<div class="admonition note">
<p class="admonition-title">备注</p>
<p>第三方应当小心谨慎地重用现有的异步代码，新的 Python 版本可以自由地打破 API 的 <em>内部</em> 部分的向下兼容性。</p>
</div>
<section id="writing-a-custom-event-loop">
<h2>编写自定义事件循环</h2>
<p><a class="reference internal" href="asyncio-eventloop.xhtml#asyncio.AbstractEventLoop" title="asyncio.AbstractEventLoop"><code class="xref py py-class docutils literal notranslate"><span class="pre">asyncio.AbstractEventLoop</span></code></a> 声明了大量的方法。 从头开始全部实现它们将是一件烦琐的工作。</p>
<p>一个事件循环可以通过从 <code class="xref py py-class docutils literal notranslate"><span class="pre">asyncio.BaseEventLoop</span></code> 继承来自动地获得许多常用方法的实现。</p>
<p>相应地，继承者应当实现多个在 <code class="xref py py-class docutils literal notranslate"><span class="pre">asyncio.BaseEventLoop</span></code> 中已声明但未实现的 <em>私有</em> 方法。</p>
<p>例如，<code class="docutils literal notranslate"><span class="pre">loop.create_connection()</span></code> 会检查参数，解析 DNS 地址，并调用应当由继承方类来实现的 <code class="docutils literal notranslate"><span class="pre">loop._make_socket_transport()</span></code>。 <code class="docutils literal notranslate"><span class="pre">_make_socket_transport()</span></code> 方法未被写入文档并被视为 <em>内部</em> API。</p>
</section>
<section id="future-and-task-private-constructors">
<h2>Future 和 Task 私有构造器</h2>
<p><a class="reference internal" href="asyncio-future.xhtml#asyncio.Future" title="asyncio.Future"><code class="xref py py-class docutils literal notranslate"><span class="pre">asyncio.Future</span></code></a> 和 <a class="reference internal" href="asyncio-task.xhtml#asyncio.Task" title="asyncio.Task"><code class="xref py py-class docutils literal notranslate"><span class="pre">asyncio.Task</span></code></a> 不应该被直接实例化，请使用对应的 <a class="reference internal" href="asyncio-eventloop.xhtml#asyncio.loop.create_future" title="asyncio.loop.create_future"><code class="xref py py-meth docutils literal notranslate"><span class="pre">loop.create_future()</span></code></a>, <a class="reference internal" href="asyncio-eventloop.xhtml#asyncio.loop.create_task" title="asyncio.loop.create_task"><code class="xref py py-meth docutils literal notranslate"><span class="pre">loop.create_task()</span></code></a> 或 <a class="reference internal" href="asyncio-task.xhtml#asyncio.create_task" title="asyncio.create_task"><code class="xref py py-func docutils literal notranslate"><span class="pre">asyncio.create_task()</span></code></a> 工厂函数。</p>
<p>但是，第三方 <em>事件循环</em> 可能会 <em>重用</em> 内置的 Future 和 Task 实现以自动获得复杂且高度优化的代码。</p>
<p>出于这个目的，下面列出了相应的 <em>私有</em> 构造器:</p>
<dl class="py method">
<dt class="sig sig-object py" id="asyncio.Future.__init__">
<span class="sig-prename descclassname"><span class="pre">Future.</span></span><span class="sig-name descname"><span class="pre">__init__</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="o"><span class="pre">*</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">loop</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>创建一个内置的 Future 实例。</p>
<p><em>loop</em> 是一个可选的事件循环实例。</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="asyncio.Task.__init__">
<span class="sig-prename descclassname"><span class="pre">Task.</span></span><span class="sig-name descname"><span class="pre">__init__</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">coro</span></span></em>, <em class="sig-param"><span class="o"><span class="pre">*</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">loop</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">name</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">context</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>创建一个内置的 Task 实例。</p>
<p><em>loop</em> 是一个可选的事件循环实例。 其余参数会在 <a class="reference internal" href="asyncio-eventloop.xhtml#asyncio.loop.create_task" title="asyncio.loop.create_task"><code class="xref py py-meth docutils literal notranslate"><span class="pre">loop.create_task()</span></code></a> 说明中加以描述。</p>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.11 版本发生变更: </span>添加了 <em>context</em> 参数。</p>
</div>
</dd></dl>

</section>
<section id="task-lifetime-support">
<h2>Task 生命周期支持</h2>
<p>第三方任务实现应当调用下列函数以使任务对 <a class="reference internal" href="asyncio-task.xhtml#asyncio.all_tasks" title="asyncio.all_tasks"><code class="xref py py-func docutils literal notranslate"><span class="pre">asyncio.all_tasks()</span></code></a> 和 <a class="reference internal" href="asyncio-task.xhtml#asyncio.current_task" title="asyncio.current_task"><code class="xref py py-func docutils literal notranslate"><span class="pre">asyncio.current_task()</span></code></a> 可见:</p>
<dl class="py function">
<dt class="sig sig-object py" id="asyncio._register_task">
<span class="sig-prename descclassname"><span class="pre">asyncio.</span></span><span class="sig-name descname"><span class="pre">_register_task</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">task</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>注册一个新的 <em>task</em> 并由 <em>asyncio</em> 管理。</p>
<p>调用来自任务构造器的函数。</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="asyncio._unregister_task">
<span class="sig-prename descclassname"><span class="pre">asyncio.</span></span><span class="sig-name descname"><span class="pre">_unregister_task</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">task</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>从 <em>asyncio</em> 内置结构体中注销 <em>task</em>。</p>
<p>此函数应当在任务将要结束时被调用。</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="asyncio._enter_task">
<span class="sig-prename descclassname"><span class="pre">asyncio.</span></span><span class="sig-name descname"><span class="pre">_enter_task</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">loop</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">task</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>将当前任务切换为 <em>task</em> 参数。</p>
<p>在执行嵌入的 <em>coroutine</em> (<a class="reference internal" href="../reference/datamodel.xhtml#coroutine.send" title="coroutine.send"><code class="xref py py-meth docutils literal notranslate"><span class="pre">coroutine.send()</span></code></a> 或 <a class="reference internal" href="../reference/datamodel.xhtml#coroutine.throw" title="coroutine.throw"><code class="xref py py-meth docutils literal notranslate"><span class="pre">coroutine.throw()</span></code></a>) 的一部分之前调用此函数。</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="asyncio._leave_task">
<span class="sig-prename descclassname"><span class="pre">asyncio.</span></span><span class="sig-name descname"><span class="pre">_leave_task</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">loop</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">task</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>将当前任务从 <em>task</em> 切换回 <code class="docutils literal notranslate"><span class="pre">None</span></code>。</p>
<p>在 <a class="reference internal" href="../reference/datamodel.xhtml#coroutine.send" title="coroutine.send"><code class="xref py py-meth docutils literal notranslate"><span class="pre">coroutine.send()</span></code></a> 或 <a class="reference internal" href="../reference/datamodel.xhtml#coroutine.throw" title="coroutine.throw"><code class="xref py py-meth docutils literal notranslate"><span class="pre">coroutine.throw()</span></code></a> 执行之后调用此函数。</p>
</dd></dl>

</section>
</section>


            <div class="clearer"></div>
          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>