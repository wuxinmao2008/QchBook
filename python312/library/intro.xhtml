<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" /><meta name="viewport" content="width=device-width, initial-scale=1" />
<meta property="og:title" content="概述" />
<meta property="og:type" content="website" />
<meta property="og:url" content="https://docs.python.org/3/library/intro.xhtml" />
<meta property="og:site_name" content="Python documentation" />
<meta property="og:description" content="&quot;Python 库&quot;中包含了几种不同的组件。 它包含通常被视为语言“核心”中的一部分的数据类型，例如数字和列表。对于这些类型，Python语言核心定义了文字的形式，并对它们的语义设置了一些约束，但没有完全定义语义。（另一方面，语言核心确实定义了语法属性，如操作符的拼写和优先级。） 这个库也包含了内置函数和异常 --- 不需要 import 语句就可以在所有Python代码中使用的对象。有一些..." />
<meta property="og:image" content="https://docs.python.org/3/_static/og-image.png" />
<meta property="og:image:alt" content="Python documentation" />
<meta name="description" content="&quot;Python 库&quot;中包含了几种不同的组件。 它包含通常被视为语言“核心”中的一部分的数据类型，例如数字和列表。对于这些类型，Python语言核心定义了文字的形式，并对它们的语义设置了一些约束，但没有完全定义语义。（另一方面，语言核心确实定义了语法属性，如操作符的拼写和优先级。） 这个库也包含了内置函数和异常 --- 不需要 import 语句就可以在所有Python代码中使用的对象。有一些..." />
<meta property="og:image:width" content="200" />
<meta property="og:image:height" content="200" />
<meta name="theme-color" content="#3776ab" />

    <title>概述</title>
    <link rel="stylesheet" type="text/css" href="../_static/pygments.css" />
    <link rel="stylesheet" type="text/css" href="../_static/epub.css" />
    <link rel="canonical" href="https://docs.python.org/3/library/intro.html" />
    
      
    

    
    <style>
      @media only screen {
        table.full-width-table {
            width: 100%;
        }
      }
    </style>
 

  </head><body>


    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <section id="introduction">
<span id="library-intro"></span><h1>概述</h1>
<p>&quot;Python 库&quot;中包含了几种不同的组件。</p>
<p>它包含通常被视为语言“核心”中的一部分的数据类型，例如数字和列表。对于这些类型，Python语言核心定义了文字的形式，并对它们的语义设置了一些约束，但没有完全定义语义。（另一方面，语言核心确实定义了语法属性，如操作符的拼写和优先级。）</p>
<p>这个库也包含了内置函数和异常 --- 不需要 <a class="reference internal" href="../reference/simple_stmts.xhtml#import"><code class="xref std std-keyword docutils literal notranslate"><span class="pre">import</span></code></a> 语句就可以在所有Python代码中使用的对象。有一些是由语言核心定义的，但是许多对于核心语义不是必需的，并且仅在这里描述。</p>
<p>不过这个库主要是由一系列的模块组成。这些模块集可以不同方式分类。有些模块是用 C 编写并内置于 Python 解释器中；另一些模块则是用 Python 编写并以源码形式导入。有些模块提供专用于 Python 的接口，例如打印栈追踪信息；有些模块提供专用于特定操作系统的接口，例如操作特定的硬件；另一些模块则提供针对特定应用领域的接口，例如万维网。有些模块在所有更新和移植版本的 Python 中可用；另一些模块仅在底层系统支持或要求时可用；还有些模块则仅当编译和安装 Python 时选择了特定配置选项时才可用。</p>
<p>本手册以 &quot;从内到外&quot; 的顺序组织：首先描述内置函数、数据类型和异常，最后是根据相关性进行分组的各种模块。</p>
<p>这意味着如果你从头开始阅读本手册，并在感到厌烦时跳到下一章，你仍能对 Python 库的可用模块和所支持的应用领域有个大致了解。当然，你并非 <em>必须</em> 如同读小说一样从头读到尾 --- 你也可以先浏览内容目录 (在手册开头)，或在索引 (在手册末尾) 中查找某个特定函数、模块或条目。最后，如果你喜欢随意学习某个主题，你可以选择一个随机页码 (参见 <a class="reference internal" href="random.xhtml#module-random" title="random: Generate pseudo-random numbers with various common distributions."><code class="xref py py-mod docutils literal notranslate"><span class="pre">random</span></code></a> 模块) 并读上一两小节。无论你想以怎样的顺序阅读本手册，还是建议先从 <a class="reference internal" href="functions.xhtml#built-in-funcs"><span class="std std-ref">内置函数</span></a> 这一章开始，因为本手册的其余内容都需要你熟悉其中的基本概念。</p>
<p>让我们开始吧！</p>
<section id="notes-on-availability">
<span id="availability"></span><h2>可用性注释</h2>
<ul class="simple">
<li><p>如果出现“适用：Unix”注释，意味着相应函数通常存在于 Unix 系统中。 但这并不保证其存在于某个特定的操作系统中。</p></li>
<li><p>If not separately noted, all functions that claim &quot;Availability: Unix&quot; are
supported on macOS, which builds on a Unix core.</p></li>
<li><p>如果一条可用性注释同时包含最低 Kernel 版本和最低 libc 版本，则两个条件都必须满足。 例如当某个特性带有注释 <em>可用性: Linux &gt;= 3.17 且 glibc &gt;= 2.27</em> 则表示同时要求 Linux 3.17 以上版本和 glibc 2.27 以上版本。</p></li>
</ul>
<section id="webassembly-platforms">
<span id="wasm-availability"></span><h3>WebAssembly 平台</h3>
<p><a class="reference external" href="https://webassembly.org/">WebAssembly</a><span class="link-target"> [https://webassembly.org/]</span> 平台 <code class="docutils literal notranslate"><span class="pre">wasm32-emscripten</span></code> (<a class="reference external" href="https://emscripten.org/">Emscripten</a><span class="link-target"> [https://emscripten.org/]</span>) 和 <code class="docutils literal notranslate"><span class="pre">wasm32-wasi</span></code> (<a class="reference external" href="https://wasi.dev/">WASI</a><span class="link-target"> [https://wasi.dev/]</span>) 分别提供了 POSIX API 的一个子集。 WebAssembly 运行时和浏览器都处于沙盒模式中并具有对主机和外部资源的受限访问权。 任何使用了进程、线程、网络、信号或其他形式的进程间通信 (IPC) 的 Python 标准库模块都或者不可用，或者其作用方式与在其他类 Unix 系统上不同。 文件 I/O, 文件系统和 Unix 权限相关的函数也同样会受限。 Emscripten 不允许阻塞式 I/O。 其他阻塞式操作如 <a class="reference internal" href="time.xhtml#time.sleep" title="time.sleep"><code class="xref py py-func docutils literal notranslate"><span class="pre">sleep()</span></code></a> 则会阻塞浏览器的事件循环。</p>
<p>Python 在 WebAssembly 平台上的特性与行为依赖于 <a class="reference external" href="https://emscripten.org/">Emscripten</a><span class="link-target"> [https://emscripten.org/]</span>-SDK 或 <a class="reference external" href="https://wasi.dev/">WASI</a><span class="link-target"> [https://wasi.dev/]</span>-SDK 的版本, WASM 运行时 (浏览器, NodeJS, <a class="reference external" href="https://wasmtime.dev/">wasmtime</a><span class="link-target"> [https://wasmtime.dev/]</span>) 以及 Python 编译时旗标。 WebAssembly, Emscripten 和 WASI 都是尚在不断演化中的标准；某些特性例如网络可能会在未来被支持。</p>
<p>对于在浏览器上运行的 Python，用户可以考虑 <a class="reference external" href="https://pyodide.org/">Pyodide</a><span class="link-target"> [https://pyodide.org/]</span> 或 <a class="reference external" href="https://pyscript.net/">PyScript</a><span class="link-target"> [https://pyscript.net/]</span>。 PyScript 是在 Pyodide 之上构建的，后者本身则是在 CPython 和 Emscripten 之上构建的。 Pyodide 提供了对浏览器的 JavaScript 和 DOM API 的访问并通过 JavaScript 的 <code class="docutils literal notranslate"><span class="pre">XMLHttpRequest</span></code> 和 <code class="docutils literal notranslate"><span class="pre">Fetch</span></code> API 提供了受限的网络功能。</p>
<ul class="simple">
<li><p>进程相关的 API 或者不可用或者将始终报错失败。 这包括生成新进程 (<a class="reference internal" href="os.xhtml#os.fork" title="os.fork"><code class="xref py py-func docutils literal notranslate"><span class="pre">fork()</span></code></a>, <a class="reference internal" href="os.xhtml#os.execve" title="os.execve"><code class="xref py py-func docutils literal notranslate"><span class="pre">execve()</span></code></a>), 等待进程 (<a class="reference internal" href="os.xhtml#os.waitpid" title="os.waitpid"><code class="xref py py-func docutils literal notranslate"><span class="pre">waitpid()</span></code></a>), 发送信号 (<a class="reference internal" href="os.xhtml#os.kill" title="os.kill"><code class="xref py py-func docutils literal notranslate"><span class="pre">kill()</span></code></a>) 或者以其他方式与进程交互的 API。 <a class="reference internal" href="subprocess.xhtml#module-subprocess" title="subprocess: Subprocess management."><code class="xref py py-mod docutils literal notranslate"><span class="pre">subprocess</span></code></a> 可以被导入但将没有任何作用。</p></li>
<li><p><a class="reference internal" href="socket.xhtml#module-socket" title="socket: Low-level networking interface."><code class="xref py py-mod docutils literal notranslate"><span class="pre">socket</span></code></a> 模块可以使用，但将会受限而使其行为与在其他平台上不一致。 在 Emscripten 上，套接字将始终为非阻塞式的并且要求额外的 JavaScript 代码和服务器上的辅助工具来代理通过 WebSockets 的 TCP；请参阅 <a class="reference external" href="https://emscripten.org/docs/porting/networking.html">Emscripten Networking</a><span class="link-target"> [https://emscripten.org/docs/porting/networking.html]</span> 了解详情。 WASI snapshot preview 1 只允许来自现有文件描述符的套接字。</p></li>
<li><p>某些函数是不执行任何操作的空壳或是始终返回硬编码的值。</p></li>
<li><p>有关文件描述符、文件访问权、文件所有权和链接的函数均受到限制并且不支持某些操作。 例如，WASI 不允许具有绝对文件名的符号链接。</p></li>
</ul>
</section>
</section>
</section>


            <div class="clearer"></div>
          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>