<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" /><meta name="viewport" content="width=device-width, initial-scale=1" />
<meta property="og:title" content="sys --- System-specific parameters and functions" />
<meta property="og:type" content="website" />
<meta property="og:url" content="https://docs.python.org/3/library/sys.xhtml" />
<meta property="og:site_name" content="Python documentation" />
<meta property="og:description" content="该模块提供了一些变量和函数。这些变量可能被解释器使用，也可能由解释器提供。这些函数会影响解释器。本模块总是可用的。 引用 C99, ISO/IEC 9899:1999. &quot;Programming languages -- C.&quot; 该标准的公开草案可从 https://www.open-std.org/jtc1/sc22/wg14/www/docs/n1256.pdf 获得。" />
<meta property="og:image" content="https://docs.python.org/3/_static/og-image.png" />
<meta property="og:image:alt" content="Python documentation" />
<meta name="description" content="该模块提供了一些变量和函数。这些变量可能被解释器使用，也可能由解释器提供。这些函数会影响解释器。本模块总是可用的。 引用 C99, ISO/IEC 9899:1999. &quot;Programming languages -- C.&quot; 该标准的公开草案可从 https://www.open-std.org/jtc1/sc22/wg14/www/docs/n1256.pdf 获得。" />
<meta property="og:image:width" content="200" />
<meta property="og:image:height" content="200" />
<meta name="theme-color" content="#3776ab" />

    <title>sys --- System-specific parameters and functions</title>
    <link rel="stylesheet" type="text/css" href="../_static/pygments.css" />
    <link rel="stylesheet" type="text/css" href="../_static/epub.css" />
    <link rel="canonical" href="https://docs.python.org/3/library/sys.html" />
    
      
    

    
    <style>
      @media only screen {
        table.full-width-table {
            width: 100%;
        }
      }
    </style>
 

  </head><body>


    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <section id="module-sys">
<span id="sys-system-specific-parameters-and-functions"></span><h1><code class="xref py py-mod docutils literal notranslate"><span class="pre">sys</span></code> --- System-specific parameters and functions</h1>
<hr class="docutils" />
<p>该模块提供了一些变量和函数。这些变量可能被解释器使用，也可能由解释器提供。这些函数会影响解释器。本模块总是可用的。</p>
<dl class="py data">
<dt class="sig sig-object py" id="sys.abiflags">
<span class="sig-prename descclassname"><span class="pre">sys.</span></span><span class="sig-name descname"><span class="pre">abiflags</span></span></dt>
<dd><p>在POSIX系统上，以标准的 <code class="docutils literal notranslate"><span class="pre">configure</span></code> 脚本构建的 Python 中，这个变量会包含 <span class="target" id="index-70"></span><a class="pep reference external" href="https://peps.python.org/pep-3149/"><strong>PEP 3149</strong></a><span class="link-target"> [https://peps.python.org/pep-3149/]</span> 中定义的ABI标签。</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.2.</span></p>
</div>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.8 版本发生变更: </span>默认的 flags 变为了空字符串（用于 pymalloc 的 <code class="docutils literal notranslate"><span class="pre">m</span></code> 旗标已经移除）</p>
</div>
<div class="availability docutils container">
<p><a class="reference internal" href="intro.xhtml#availability"><span class="std std-ref">可用性</span></a>: Unix。</p>
</div>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="sys.addaudithook">
<span class="sig-prename descclassname"><span class="pre">sys.</span></span><span class="sig-name descname"><span class="pre">addaudithook</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">hook</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>将可调用的对象 <em>hook</em> 附加到当前（子）解释器的活动的审计钩子列表中。</p>
<p>当通过 <a class="reference internal" href="#sys.audit" title="sys.audit"><code class="xref py py-func docutils literal notranslate"><span class="pre">sys.audit()</span></code></a> 函数引发审计事件时，每个钩子将按照其被加入的先后顺序被调用，调用时会传入事件名称和参数元组。 由 <a class="reference internal" href="../c-api/sys.xhtml#c.PySys_AddAuditHook" title="PySys_AddAuditHook"><code class="xref c c-func docutils literal notranslate"><span class="pre">PySys_AddAuditHook()</span></code></a> 添加的原生钩子会先被调用，然后是当前（子）解释器中添加的钩子。 接下来这些钩子会记录事件，引发异常来中止操作，或是完全终止进程。</p>
<p>请注意审计钩子主要是用于收集有关内部或在其他情况下不可观察操作的信息，可能是通过 Python 或者用 Python 编写的库。 它们不适合用于实现“沙盒”。 特别重要的一点是，恶意代码可以轻易地禁用或绕过使用此函数添加的钩子。 至少，在初始化运行时之前必须使用 C API <a class="reference internal" href="../c-api/sys.xhtml#c.PySys_AddAuditHook" title="PySys_AddAuditHook"><code class="xref c c-func docutils literal notranslate"><span class="pre">PySys_AddAuditHook()</span></code></a> 来添加任何安全敏感的钩子，并且应当完全删除或密切监视任何允许任意修改内存的模块 (如 <a class="reference internal" href="ctypes.xhtml#module-ctypes" title="ctypes: A foreign function library for Python."><code class="xref py py-mod docutils literal notranslate"><span class="pre">ctypes</span></code></a>)。</p>
<p class="audit-hook"><p>调用 <a class="reference internal" href="#sys.addaudithook" title="sys.addaudithook"><code class="xref py py-func docutils literal notranslate"><span class="pre">sys.addaudithook()</span></code></a> 时它自身将引发一个名为 <code class="docutils literal notranslate"><span class="pre">sys.addaudithook</span></code> 的审计事件且不附带参数。 如果任何现有的钩子引发了派生自 <a class="reference internal" href="exceptions.xhtml#RuntimeError" title="RuntimeError"><code class="xref py py-class docutils literal notranslate"><span class="pre">RuntimeError</span></code></a> 的异常，则新的钩子不会被添加并且该异常会被抑制。 其结果就是，调用者无法确保他们的钩子已经被添加，除非他们控制了全部现有的钩子。</p>
</p>
<p>请参阅 <a class="reference internal" href="audit_events.xhtml#audit-events"><span class="std std-ref">审计事件表</span></a> 以获取由 CPython 引发的所有事件，并参阅 <span class="target" id="index-71"></span><a class="pep reference external" href="https://peps.python.org/pep-0578/"><strong>PEP 578</strong></a><span class="link-target"> [https://peps.python.org/pep-0578/]</span> 了解最初的设计讨论。</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.8.</span></p>
</div>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.8.1 版本发生变更: </span>派生自 <a class="reference internal" href="exceptions.xhtml#Exception" title="Exception"><code class="xref py py-class docutils literal notranslate"><span class="pre">Exception</span></code></a> （而非 <a class="reference internal" href="exceptions.xhtml#RuntimeError" title="RuntimeError"><code class="xref py py-class docutils literal notranslate"><span class="pre">RuntimeError</span></code></a> ）的异常不会被抑制。</p>
</div>
<div class="impl-detail compound">
<p><strong>CPython 实现细节：</strong> 启用跟踪时（参阅 <a class="reference internal" href="#sys.settrace" title="sys.settrace"><code class="xref py py-func docutils literal notranslate"><span class="pre">settrace()</span></code></a> ），仅当可调用对象（钩子）的 <code class="docutils literal notranslate"><span class="pre">__cantrace__</span></code> 成员设置为 true 时，才会跟踪该钩子。否则，跟踪功能将跳过该钩子。</p>
</div>
</dd></dl>

<dl class="py data">
<dt class="sig sig-object py" id="sys.argv">
<span class="sig-prename descclassname"><span class="pre">sys.</span></span><span class="sig-name descname"><span class="pre">argv</span></span></dt>
<dd><p>一个列表，其中包含了被传递给 Python 脚本的命令行参数。 <code class="docutils literal notranslate"><span class="pre">argv[0]</span></code> 为脚本的名称（是否是完整的路径名取决于操作系统）。如果是通过 Python 解释器的命令行参数 <a class="reference internal" href="../using/cmdline.xhtml#cmdoption-c"><code class="xref std std-option docutils literal notranslate"><span class="pre">-c</span></code></a> 来执行的， <code class="docutils literal notranslate"><span class="pre">argv[0]</span></code> 会被设置成字符串 <code class="docutils literal notranslate"><span class="pre">'-c'</span></code> 。如果没有脚本名被传递给 Python 解释器， <code class="docutils literal notranslate"><span class="pre">argv[0]</span></code> 为空字符串。</p>
<p>为了遍历标准输入，或者通过命令行传递的文件列表，参照 <a class="reference internal" href="fileinput.xhtml#module-fileinput" title="fileinput: Loop over standard input or a list of files."><code class="xref py py-mod docutils literal notranslate"><span class="pre">fileinput</span></code></a> 模块</p>
<p>另请参阅 <a class="reference internal" href="#sys.orig_argv" title="sys.orig_argv"><code class="xref py py-data docutils literal notranslate"><span class="pre">sys.orig_argv</span></code></a>。</p>
<div class="admonition note">
<p class="admonition-title">备注</p>
<p>在 Unix 上，系统传递的命令行参数是字节类型的。Python 使用文件系统编码和 &quot;surrogateescape&quot; 错误处理方案对它们进行解码。当需要原始字节时，可以通过 <code class="docutils literal notranslate"><span class="pre">[os.fsencode(arg)</span> <span class="pre">for</span> <span class="pre">arg</span> <span class="pre">in</span> <span class="pre">sys.argv]</span></code> 来获取。</p>
</div>
</dd></dl>

<dl class="py function" id="auditing">
<dt class="sig sig-object py" id="sys.audit">
<span class="sig-prename descclassname"><span class="pre">sys.</span></span><span class="sig-name descname"><span class="pre">audit</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">event</span></span></em>, <em class="sig-param"><span class="o"><span class="pre">*</span></span><span class="n"><span class="pre">args</span></span></em><span class="sig-paren">)</span></dt>
<dd><p id="index-2">引发一个审计事件并触发任何激活的审计钩子。 <em>event</em> 是一个用于标识事件的字符串，<em>args</em> 会包含有关事件的更多信息的可选参数。 特定事件的参数的数量和类型会被视为是公有的稳定 API 且不应当在版本之间进行修改。</p>
<p>例如，有一个审计事件的名称为 <code class="docutils literal notranslate"><span class="pre">os.chdir</span></code>。 此事件具有一个名为 <em>path</em> 的参数，该参数将包含所请求的新工作目录。</p>
<p><a class="reference internal" href="#sys.audit" title="sys.audit"><code class="xref py py-func docutils literal notranslate"><span class="pre">sys.audit()</span></code></a> 将调用现有的审计钩子，传入事件名称和参数，并将重新引发来自任何钩子的第一个异常。 通常来说，如果有一个异常被引发，则它不应当被处理且其进程应当被尽可能快地终止。 这将允许钩子实现来决定对特定事件要如何反应：它们可以只是将事件写入日志或是通过引发异常来中止操作。</p>
<p>钩子程序由 <a class="reference internal" href="#sys.addaudithook" title="sys.addaudithook"><code class="xref py py-func docutils literal notranslate"><span class="pre">sys.addaudithook()</span></code></a> 或 <a class="reference internal" href="../c-api/sys.xhtml#c.PySys_AddAuditHook" title="PySys_AddAuditHook"><code class="xref c c-func docutils literal notranslate"><span class="pre">PySys_AddAuditHook()</span></code></a> 函数添加。</p>
<p>与本函数相等效的原生函数是 <a class="reference internal" href="../c-api/sys.xhtml#c.PySys_Audit" title="PySys_Audit"><code class="xref c c-func docutils literal notranslate"><span class="pre">PySys_Audit()</span></code></a>，应尽量使用原生函数。</p>
<p>参阅 <a class="reference internal" href="audit_events.xhtml#audit-events"><span class="std std-ref">审计事件表</span></a> 以获取 CPython 定义的所有审计事件。</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.8.</span></p>
</div>
</dd></dl>

<dl class="py data">
<dt class="sig sig-object py" id="sys.base_exec_prefix">
<span class="sig-prename descclassname"><span class="pre">sys.</span></span><span class="sig-name descname"><span class="pre">base_exec_prefix</span></span></dt>
<dd><p>在 <code class="docutils literal notranslate"><span class="pre">site.py</span></code> 运行之前， Python 启动的时候被设置为跟 <a class="reference internal" href="#sys.exec_prefix" title="sys.exec_prefix"><code class="xref py py-data docutils literal notranslate"><span class="pre">exec_prefix</span></code></a> 同样的值。如果不是运行在 <a class="reference internal" href="venv.xhtml#venv-def"><span class="std std-ref">虚拟环境</span></a> 中，两个值会保持相同；如果 <code class="docutils literal notranslate"><span class="pre">site.py</span></code> 发现处于一个虚拟环境中， <a class="reference internal" href="#sys.prefix" title="sys.prefix"><code class="xref py py-data docutils literal notranslate"><span class="pre">prefix</span></code></a> 和 <a class="reference internal" href="#sys.exec_prefix" title="sys.exec_prefix"><code class="xref py py-data docutils literal notranslate"><span class="pre">exec_prefix</span></code></a> 将会指向虚拟环境。然而 <a class="reference internal" href="#sys.base_prefix" title="sys.base_prefix"><code class="xref py py-data docutils literal notranslate"><span class="pre">base_prefix</span></code></a> 和 <a class="reference internal" href="#sys.base_exec_prefix" title="sys.base_exec_prefix"><code class="xref py py-data docutils literal notranslate"><span class="pre">base_exec_prefix</span></code></a> 将仍然会指向基础的 Python 环境（用来创建虚拟环境的 Python 环境）</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.3.</span></p>
</div>
</dd></dl>

<dl class="py data">
<dt class="sig sig-object py" id="sys.base_prefix">
<span class="sig-prename descclassname"><span class="pre">sys.</span></span><span class="sig-name descname"><span class="pre">base_prefix</span></span></dt>
<dd><p>在 <code class="docutils literal notranslate"><span class="pre">site.py</span></code> 运行之前， Python 启动的时候被设置为跟 <a class="reference internal" href="#sys.prefix" title="sys.prefix"><code class="xref py py-data docutils literal notranslate"><span class="pre">prefix</span></code></a> 同样的值。如果不是运行在 <a class="reference internal" href="venv.xhtml#venv-def"><span class="std std-ref">虚拟环境</span></a> 中, 两个值会保持相同；如果 <code class="docutils literal notranslate"><span class="pre">site.py</span></code> 发现处于一个虚拟环境中， <a class="reference internal" href="#sys.prefix" title="sys.prefix"><code class="xref py py-data docutils literal notranslate"><span class="pre">prefix</span></code></a> 和 <a class="reference internal" href="#sys.exec_prefix" title="sys.exec_prefix"><code class="xref py py-data docutils literal notranslate"><span class="pre">exec_prefix</span></code></a> 将会指向虚拟环境。然而 <a class="reference internal" href="#sys.base_prefix" title="sys.base_prefix"><code class="xref py py-data docutils literal notranslate"><span class="pre">base_prefix</span></code></a> 和 <a class="reference internal" href="#sys.base_exec_prefix" title="sys.base_exec_prefix"><code class="xref py py-data docutils literal notranslate"><span class="pre">base_exec_prefix</span></code></a> 将仍然会指向基础的 Python 环境（用来创建虚拟环境的 Python 环境）</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.3.</span></p>
</div>
</dd></dl>

<dl class="py data">
<dt class="sig sig-object py" id="sys.byteorder">
<span class="sig-prename descclassname"><span class="pre">sys.</span></span><span class="sig-name descname"><span class="pre">byteorder</span></span></dt>
<dd><p>本地字节顺序的指示符。在大端序（最高有效位优先）操作系统上值为 <code class="docutils literal notranslate"><span class="pre">'big'</span></code> ，在小端序（最低有效位优先）操作系统上为 <code class="docutils literal notranslate"><span class="pre">'little'</span></code> 。</p>
</dd></dl>

<dl class="py data">
<dt class="sig sig-object py" id="sys.builtin_module_names">
<span class="sig-prename descclassname"><span class="pre">sys.</span></span><span class="sig-name descname"><span class="pre">builtin_module_names</span></span></dt>
<dd><p>一个包含所有被编译进 Python 解释器的模块的名称的字符串元组。 （此信息无法通过任何其他办法获取 --- <code class="docutils literal notranslate"><span class="pre">modules.keys()</span></code> 仅会列出导入的模块。）</p>
<p>另请参阅 <a class="reference internal" href="#sys.stdlib_module_names" title="sys.stdlib_module_names"><code class="xref py py-data docutils literal notranslate"><span class="pre">sys.stdlib_module_names</span></code></a> 列表。</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="sys.call_tracing">
<span class="sig-prename descclassname"><span class="pre">sys.</span></span><span class="sig-name descname"><span class="pre">call_tracing</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">func</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">args</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>当启用跟踪时，调用 <code class="docutils literal notranslate"><span class="pre">func(*args)</span></code>。 跟踪状态将被保存，并在以后恢复。 这被设计为由调试器从某个检查点执行调用，以便递归地调试或分析某些其他代码。</p>
<p>在调用由 <a class="reference internal" href="#sys.settrace" title="sys.settrace"><code class="xref py py-func docutils literal notranslate"><span class="pre">settrace()</span></code></a> 或 <a class="reference internal" href="#sys.setprofile" title="sys.setprofile"><code class="xref py py-func docutils literal notranslate"><span class="pre">setprofile()</span></code></a> 设置的跟踪函数时跟踪将暂停以避免无限递归。 <code class="xref py py-func docutils literal notranslate"><span class="pre">call_tracing()</span></code> 会启用跟踪函数的显式递归。</p>
</dd></dl>

<dl class="py data">
<dt class="sig sig-object py" id="sys.copyright">
<span class="sig-prename descclassname"><span class="pre">sys.</span></span><span class="sig-name descname"><span class="pre">copyright</span></span></dt>
<dd><p>一个字符串，包含了 Python 解释器有关的版权信息</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="sys._clear_type_cache">
<span class="sig-prename descclassname"><span class="pre">sys.</span></span><span class="sig-name descname"><span class="pre">_clear_type_cache</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>清除内部的类型缓存。类型缓存是为了加速查找方法和属性的。在调试引用泄漏的时候调用这个函数 <em>只会</em> 清除不必要的引用。</p>
<p>这个函数应该只在内部为了一些特定的目的使用。</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="sys._current_frames">
<span class="sig-prename descclassname"><span class="pre">sys.</span></span><span class="sig-name descname"><span class="pre">_current_frames</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>返回一个字典，存放着每个线程的标识符与（调用本函数时）该线程栈顶的帧（当前活动的帧）之间的映射。注意 <a class="reference internal" href="traceback.xhtml#module-traceback" title="traceback: Print or retrieve a stack traceback."><code class="xref py py-mod docutils literal notranslate"><span class="pre">traceback</span></code></a> 模块中的函数可以在给定某一帧的情况下构建调用堆栈。</p>
<p>这对于调试死锁最有用：本函数不需要死锁线程的配合，并且只要这些线程的调用栈保持死锁，它们就是冻结的。在调用本代码来检查栈顶的帧的那一刻，非死锁线程返回的帧可能与该线程当前活动的帧没有任何关系。</p>
<p>这个函数应该只在内部为了一些特定的目的使用。</p>
<p class="audit-hook">引发一个 <a class="reference internal" href="#auditing"><span class="std std-ref">审计事件</span></a> <code class="docutils literal notranslate"><span class="pre">sys._current_frames</span></code>，没有附带参数。</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="sys._current_exceptions">
<span class="sig-prename descclassname"><span class="pre">sys.</span></span><span class="sig-name descname"><span class="pre">_current_exceptions</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>返回一个字典，存放着每个线程的标识与调用此函数时该线程当前活动帧的栈顶异常之间的映射。 如果某个线程当前未在处理异常，它将不被包括在结果字典中。</p>
<p>这对于静态性能分析来说最为有用。</p>
<p>这个函数应该只在内部为了一些特定的目的使用。</p>
<p class="audit-hook">引发一个 <a class="reference internal" href="#auditing"><span class="std std-ref">审计事件</span></a> <code class="docutils literal notranslate"><span class="pre">sys._current_exceptions</span></code>，不附带任何参数。</p>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.12 版本发生变更: </span>现在字典中的每个值都是单独的异常实例，而不是如 <code class="docutils literal notranslate"><span class="pre">sys.exc_info()</span></code> 所返回的 3 元组。</p>
</div>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="sys.breakpointhook">
<span class="sig-prename descclassname"><span class="pre">sys.</span></span><span class="sig-name descname"><span class="pre">breakpointhook</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>本钩子函数由内建函数 <a class="reference internal" href="functions.xhtml#breakpoint" title="breakpoint"><code class="xref py py-func docutils literal notranslate"><span class="pre">breakpoint()</span></code></a> 调用。默认情况下，它将进入 <a class="reference internal" href="pdb.xhtml#module-pdb" title="pdb: The Python debugger for interactive interpreters."><code class="xref py py-mod docutils literal notranslate"><span class="pre">pdb</span></code></a> 调试器，但可以将其改为任何其他函数，以选择使用哪个调试器。</p>
<p>该函数的特征取决于其调用的函数。例如，默认绑定（即 <code class="docutils literal notranslate"><span class="pre">pdb.set_trace()</span></code> ）不要求提供参数，但可以将绑定换成要求提供附加参数（位置参数/关键字参数）的函数。内建函数 <code class="docutils literal notranslate"><span class="pre">breakpoint()</span></code> 直接将其 <code class="docutils literal notranslate"><span class="pre">*args</span></code> 和 <code class="docutils literal notranslate"><span class="pre">**kws</span></code> 传入。<code class="docutils literal notranslate"><span class="pre">breakpointhooks()</span></code> 返回的所有内容都会从 <code class="docutils literal notranslate"><span class="pre">breakpoint()</span></code> 返回。</p>
<p>默认的实现首先会查询环境变量 <span class="target" id="index-72"></span><a class="reference internal" href="../using/cmdline.xhtml#envvar-PYTHONBREAKPOINT"><code class="xref std std-envvar docutils literal notranslate"><span class="pre">PYTHONBREAKPOINT</span></code></a>。如果将该变量设置为 <code class="docutils literal notranslate"><span class="pre">&quot;0&quot;</span></code>，则本函数立即返回，表示在断点处无操作。如果未设置该环境变量或将其设置为空字符串，则调用 <code class="docutils literal notranslate"><span class="pre">pdb.set_trace()</span></code>。否则，此变量应指定要运行的函数，指定函数时应使用 Python 的点导入命名法，如 <code class="docutils literal notranslate"><span class="pre">package.subpackage.module.function</span></code>。这种情况下将导入 <code class="docutils literal notranslate"><span class="pre">package.subpackage.module</span></code>，且导入的模块必须有一个名为 <code class="docutils literal notranslate"><span class="pre">function()</span></code> 的可调用对象。该可调用对象会运行，<code class="docutils literal notranslate"><span class="pre">*args</span></code> 和 <code class="docutils literal notranslate"><span class="pre">**kws</span></code> 会传入，且无论 <code class="docutils literal notranslate"><span class="pre">function()</span></code> 返回什么，<code class="docutils literal notranslate"><span class="pre">sys.breakpointhook()</span></code> 都将返回到內建函数 <a class="reference internal" href="functions.xhtml#breakpoint" title="breakpoint"><code class="xref py py-func docutils literal notranslate"><span class="pre">breakpoint()</span></code></a>。</p>
<p>请注意，如果在导入 <span class="target" id="index-73"></span><a class="reference internal" href="../using/cmdline.xhtml#envvar-PYTHONBREAKPOINT"><code class="xref std std-envvar docutils literal notranslate"><span class="pre">PYTHONBREAKPOINT</span></code></a> 指定的可调用对象时出错，则将报告一个 <a class="reference internal" href="exceptions.xhtml#RuntimeWarning" title="RuntimeWarning"><code class="xref py py-exc docutils literal notranslate"><span class="pre">RuntimeWarning</span></code></a> 并忽略断点。</p>
<p>另请注意，如果以编程方式覆盖 <code class="docutils literal notranslate"><span class="pre">sys.breakpointhook()</span></code>，则 <em>不会</em> 查询 <span class="target" id="index-74"></span><a class="reference internal" href="../using/cmdline.xhtml#envvar-PYTHONBREAKPOINT"><code class="xref std std-envvar docutils literal notranslate"><span class="pre">PYTHONBREAKPOINT</span></code></a>。</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.7.</span></p>
</div>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="sys._debugmallocstats">
<span class="sig-prename descclassname"><span class="pre">sys.</span></span><span class="sig-name descname"><span class="pre">_debugmallocstats</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>将有关 CPython 内存分配器状态的底层的信息打印至 stderr。</p>
<p>如果 Python 是 <a class="reference internal" href="../using/configure.xhtml#debug-build"><span class="std std-ref">以调试模式编译的</span></a> (<a class="reference internal" href="../using/configure.xhtml#cmdoption-with-pydebug"><code class="xref std std-option docutils literal notranslate"><span class="pre">使用</span> <span class="pre">--with-pydebug</span> <span class="pre">配置选项</span></code></a>)，它还会执行某些高开销的内部一致性检查。</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.3.</span></p>
</div>
<div class="impl-detail compound">
<p><strong>CPython 实现细节：</strong> 本函数仅限 CPython。此处没有定义确切的输出格式，且可能会更改。</p>
</div>
</dd></dl>

<dl class="py data">
<dt class="sig sig-object py" id="sys.dllhandle">
<span class="sig-prename descclassname"><span class="pre">sys.</span></span><span class="sig-name descname"><span class="pre">dllhandle</span></span></dt>
<dd><p>指向 Python DLL 句柄的整数。</p>
<div class="availability docutils container">
<p><a class="reference internal" href="intro.xhtml#availability"><span class="std std-ref">可用性</span></a>: Windows。</p>
</div>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="sys.displayhook">
<span class="sig-prename descclassname"><span class="pre">sys.</span></span><span class="sig-name descname"><span class="pre">displayhook</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">value</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>如果 <em>value</em> 不是 <code class="docutils literal notranslate"><span class="pre">None</span></code>，则本函数会将 <code class="docutils literal notranslate"><span class="pre">repr(value)</span></code> 打印至 <code class="docutils literal notranslate"><span class="pre">sys.stdout</span></code>，并将 <em>value</em> 保存在 <code class="docutils literal notranslate"><span class="pre">builtins._</span></code> 中。如果 <code class="docutils literal notranslate"><span class="pre">repr(value)</span></code> 无法用 <code class="docutils literal notranslate"><span class="pre">sys.stdout.errors</span></code> 错误处理方案（可能为 <code class="docutils literal notranslate"><span class="pre">'strict'</span></code> ）编码为 <code class="docutils literal notranslate"><span class="pre">sys.stdout.encoding</span></code>，则用 <code class="docutils literal notranslate"><span class="pre">'backslashreplace'</span></code> 错误处理方案将其编码为 <code class="docutils literal notranslate"><span class="pre">sys.stdout.encoding</span></code>。</p>
<p>在交互式 Python 会话中运行 <a class="reference internal" href="../glossary.xhtml#term-expression"><span class="xref std std-term">expression</span></a> 产生结果后，将在结果上调用 <code class="docutils literal notranslate"><span class="pre">sys.displayhook</span></code>。若要自定义这些 value 的显示，可以将 <code class="docutils literal notranslate"><span class="pre">sys.displayhook</span></code> 指定为另一个单参数函数。</p>
<p>伪代码:</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="k">def</span> <span class="nf">displayhook</span><span class="p">(</span><span class="n">value</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">value</span> <span class="ow">is</span> <span class="kc">None</span><span class="p">:</span>
        <span class="k">return</span>
    <span class="c1"># Set &#39;_&#39; to None to avoid recursion</span>
    <span class="n">builtins</span><span class="o">.</span><span class="n">_</span> <span class="o">=</span> <span class="kc">None</span>
    <span class="n">text</span> <span class="o">=</span> <span class="nb">repr</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">sys</span><span class="o">.</span><span class="n">stdout</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
    <span class="k">except</span> <span class="ne">UnicodeEncodeError</span><span class="p">:</span>
        <span class="nb">bytes</span> <span class="o">=</span> <span class="n">text</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">stdout</span><span class="o">.</span><span class="n">encoding</span><span class="p">,</span> <span class="s1">&#39;backslashreplace&#39;</span><span class="p">)</span>
        <span class="k">if</span> <span class="nb">hasattr</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">stdout</span><span class="p">,</span> <span class="s1">&#39;buffer&#39;</span><span class="p">):</span>
            <span class="n">sys</span><span class="o">.</span><span class="n">stdout</span><span class="o">.</span><span class="n">buffer</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="nb">bytes</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">text</span> <span class="o">=</span> <span class="nb">bytes</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">stdout</span><span class="o">.</span><span class="n">encoding</span><span class="p">,</span> <span class="s1">&#39;strict&#39;</span><span class="p">)</span>
            <span class="n">sys</span><span class="o">.</span><span class="n">stdout</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
    <span class="n">sys</span><span class="o">.</span><span class="n">stdout</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">)</span>
    <span class="n">builtins</span><span class="o">.</span><span class="n">_</span> <span class="o">=</span> <span class="n">value</span>
</pre></div>
</div>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.2 版本发生变更: </span>在发生 <a class="reference internal" href="exceptions.xhtml#UnicodeEncodeError" title="UnicodeEncodeError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">UnicodeEncodeError</span></code></a> 时使用 <code class="docutils literal notranslate"><span class="pre">'backslashreplace'</span></code> 错误处理方案。</p>
</div>
</dd></dl>

<dl class="py data">
<dt class="sig sig-object py" id="sys.dont_write_bytecode">
<span class="sig-prename descclassname"><span class="pre">sys.</span></span><span class="sig-name descname"><span class="pre">dont_write_bytecode</span></span></dt>
<dd><p>如果该值为 true，则 Python 在导入源码模块时将不会尝试写入 <code class="docutils literal notranslate"><span class="pre">.pyc</span></code> 文件。该值会被初始化为 <code class="docutils literal notranslate"><span class="pre">True</span></code> 或 <code class="docutils literal notranslate"><span class="pre">False</span></code>，依据是 <a class="reference internal" href="../using/cmdline.xhtml#cmdoption-B"><code class="xref std std-option docutils literal notranslate"><span class="pre">-B</span></code></a> 命令行选项和 <span class="target" id="index-75"></span><a class="reference internal" href="../using/cmdline.xhtml#envvar-PYTHONDONTWRITEBYTECODE"><code class="xref std std-envvar docutils literal notranslate"><span class="pre">PYTHONDONTWRITEBYTECODE</span></code></a> 环境变量，可以自行设置该值，来控制是否生成字节码文件。</p>
</dd></dl>

<dl class="py data">
<dt class="sig sig-object py" id="sys._emscripten_info">
<span class="sig-prename descclassname"><span class="pre">sys.</span></span><span class="sig-name descname"><span class="pre">_emscripten_info</span></span></dt>
<dd><p>这个 <a class="reference internal" href="../glossary.xhtml#term-named-tuple"><span class="xref std std-term">named tuple</span></a> 保存了 <em>wasm32-emscripten</em> 平台中环境的相关信息。 该命名元组处于暂定状态并可能在将来被更改。</p>
<dl class="py attribute">
<dt class="sig sig-object py" id="sys._emscripten_info.emscripten_version">
<span class="sig-prename descclassname"><span class="pre">_emscripten_info.</span></span><span class="sig-name descname"><span class="pre">emscripten_version</span></span></dt>
<dd><p>以整数元组 (major, minor, micro) 表示的 Emscripten 版本，例如 <code class="docutils literal notranslate"><span class="pre">(3,</span> <span class="pre">1,</span> <span class="pre">8)</span></code>。</p>
</dd></dl>

<dl class="py attribute">
<dt class="sig sig-object py" id="sys._emscripten_info.runtime">
<span class="sig-prename descclassname"><span class="pre">_emscripten_info.</span></span><span class="sig-name descname"><span class="pre">runtime</span></span></dt>
<dd><p>运行时字符串，例如 browser user agent, <code class="docutils literal notranslate"><span class="pre">'Node.js</span> <span class="pre">v14.18.2'</span></code> 或 <code class="docutils literal notranslate"><span class="pre">'UNKNOWN'</span></code>。</p>
</dd></dl>

<dl class="py attribute">
<dt class="sig sig-object py" id="sys._emscripten_info.pthreads">
<span class="sig-prename descclassname"><span class="pre">_emscripten_info.</span></span><span class="sig-name descname"><span class="pre">pthreads</span></span></dt>
<dd><p>如果 Python 编译附带了 Emscripten pthreads 支持则为 <code class="docutils literal notranslate"><span class="pre">True</span></code>。</p>
</dd></dl>

<dl class="py attribute">
<dt class="sig sig-object py" id="sys._emscripten_info.shared_memory">
<span class="sig-prename descclassname"><span class="pre">_emscripten_info.</span></span><span class="sig-name descname"><span class="pre">shared_memory</span></span></dt>
<dd><p>如果 Python 编译附带了共享内存支持则为 <code class="docutils literal notranslate"><span class="pre">True</span></code>。</p>
</dd></dl>

<div class="availability docutils container">
<p><a class="reference internal" href="intro.xhtml#availability"><span class="std std-ref">可用性</span></a>: Emscripten。</p>
</div>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.11.</span></p>
</div>
</dd></dl>

<dl class="py data">
<dt class="sig sig-object py" id="sys.pycache_prefix">
<span class="sig-prename descclassname"><span class="pre">sys.</span></span><span class="sig-name descname"><span class="pre">pycache_prefix</span></span></dt>
<dd><p>如果设置了该值 (不能为 <code class="docutils literal notranslate"><span class="pre">None</span></code>)，Python 会将字节码缓存文件 <code class="docutils literal notranslate"><span class="pre">.pyc</span></code> 写入到以该值指定的目录为根的并行目录树中（并从中读取），而不是在源代码树的 <code class="docutils literal notranslate"><span class="pre">__pycache__</span></code> 目录下读写。 源代码树中所有的 <code class="docutils literal notranslate"><span class="pre">__pycache__</span></code> 目录都将被忽略并且新的 <code class="docutils literal notranslate"><span class="pre">.pyc</span></code> 文件将被写入到 pycache 前缀指定的位置。 因此如果你使用 <a class="reference internal" href="compileall.xhtml#module-compileall" title="compileall: Tools for byte-compiling all Python source files in a directory tree."><code class="xref py py-mod docutils literal notranslate"><span class="pre">compileall</span></code></a> 作为预编译步骤，你必须确保使用与在运行时相同的 pycache 前缀（如果有的话）来运行它。</p>
<p>相对路径将解释为相对于当前工作目录。</p>
<p>该值的初值设置，依据 <a class="reference internal" href="../using/cmdline.xhtml#cmdoption-X"><code class="xref std std-option docutils literal notranslate"><span class="pre">-X</span></code></a> <code class="docutils literal notranslate"><span class="pre">pycache_prefix=PATH</span></code> 命令行选项或 <span class="target" id="index-76"></span><a class="reference internal" href="../using/cmdline.xhtml#envvar-PYTHONPYCACHEPREFIX"><code class="xref std std-envvar docutils literal notranslate"><span class="pre">PYTHONPYCACHEPREFIX</span></code></a> 环境变量的值（命令行优先）。如果两者均未设置，则为 <code class="docutils literal notranslate"><span class="pre">None</span></code>。</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.8.</span></p>
</div>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="sys.excepthook">
<span class="sig-prename descclassname"><span class="pre">sys.</span></span><span class="sig-name descname"><span class="pre">excepthook</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">type</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">value</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">traceback</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>本函数会将所给的回溯和异常输出到 <code class="docutils literal notranslate"><span class="pre">sys.stderr</span></code> 中。</p>
<p>当有 <a class="reference internal" href="exceptions.xhtml#SystemExit" title="SystemExit"><code class="xref py py-exc docutils literal notranslate"><span class="pre">SystemExit</span></code></a> 以外的异常被引发且未被捕获时，解释器会调用 <code class="docutils literal notranslate"><span class="pre">sys.excepthook</span></code> 并附带三个参数：异常类、异常实例和回溯对象。 在交互会话中这将发生在控制返回提示符之前；在 Python 程序中这将发生在程序退出之前。 这种最高层级异常的处理可以通过为 <code class="docutils literal notranslate"><span class="pre">sys.excepthook</span></code> 指定另一个三参数函数来实现自定义。</p>
<p class="audit-hook">引发一个 <a class="reference internal" href="#auditing"><span class="std std-ref">审计事件</span></a> <code class="docutils literal notranslate"><span class="pre">sys.excepthook</span></code>，附带参数 <code class="docutils literal notranslate"><span class="pre">hook</span></code>, <code class="docutils literal notranslate"><span class="pre">type</span></code>, <code class="docutils literal notranslate"><span class="pre">value</span></code>, <code class="docutils literal notranslate"><span class="pre">traceback</span></code>。</p>
<div class="admonition seealso">
<p class="admonition-title">参见</p>
<p><a class="reference internal" href="#sys.unraisablehook" title="sys.unraisablehook"><code class="xref py py-func docutils literal notranslate"><span class="pre">sys.unraisablehook()</span></code></a> 函数处理无法抛出的异常，<a class="reference internal" href="threading.xhtml#threading.excepthook" title="threading.excepthook"><code class="xref py py-func docutils literal notranslate"><span class="pre">threading.excepthook()</span></code></a> 函数处理 <a class="reference internal" href="threading.xhtml#threading.Thread.run" title="threading.Thread.run"><code class="xref py py-func docutils literal notranslate"><span class="pre">threading.Thread.run()</span></code></a> 抛出的异常。</p>
</div>
</dd></dl>

<dl class="py data">
<dt class="sig sig-object py" id="sys.__breakpointhook__">
<span class="sig-prename descclassname"><span class="pre">sys.</span></span><span class="sig-name descname"><span class="pre">__breakpointhook__</span></span></dt>
<dt class="sig sig-object py" id="sys.__displayhook__">
<span class="sig-prename descclassname"><span class="pre">sys.</span></span><span class="sig-name descname"><span class="pre">__displayhook__</span></span></dt>
<dt class="sig sig-object py" id="sys.__excepthook__">
<span class="sig-prename descclassname"><span class="pre">sys.</span></span><span class="sig-name descname"><span class="pre">__excepthook__</span></span></dt>
<dt class="sig sig-object py" id="sys.__unraisablehook__">
<span class="sig-prename descclassname"><span class="pre">sys.</span></span><span class="sig-name descname"><span class="pre">__unraisablehook__</span></span></dt>
<dd><p>程序开始时，这些对象存有 <code class="docutils literal notranslate"><span class="pre">breakpointhook</span></code>、<code class="docutils literal notranslate"><span class="pre">displayhook</span></code>、<code class="docutils literal notranslate"><span class="pre">excepthook</span></code> 和 <code class="docutils literal notranslate"><span class="pre">unraisablehook</span></code> 的初始值。保存它们是为了可以在 <code class="docutils literal notranslate"><span class="pre">breakpointhook</span></code>、<code class="docutils literal notranslate"><span class="pre">displayhook</span></code> 和 <code class="docutils literal notranslate"><span class="pre">excepthook</span></code>、<code class="docutils literal notranslate"><span class="pre">unraisablehook</span></code> 被破坏或被替换时恢复它们。</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.7: </span>__breakpointhook__</p>
</div>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.8: </span>__unraisablehook__</p>
</div>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="sys.exception">
<span class="sig-prename descclassname"><span class="pre">sys.</span></span><span class="sig-name descname"><span class="pre">exception</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>当此函数在某个异常处理器执行过程中（如 <code class="docutils literal notranslate"><span class="pre">except</span></code> 或 <code class="docutils literal notranslate"><span class="pre">except*</span></code> 子句）被调用时，将返回被该处理器所捕获的异常实例。 当有多个异常处理器彼此嵌套时，只有最内层处理器所处理的异常可以被访问到。</p>
<p>如果没有任何异常处理器在执行，此函数将返回 <code class="docutils literal notranslate"><span class="pre">None</span></code>。</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.11.</span></p>
</div>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="sys.exc_info">
<span class="sig-prename descclassname"><span class="pre">sys.</span></span><span class="sig-name descname"><span class="pre">exc_info</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>此函数返回被处理异常的旧式表示形式。 如果异常 <code class="docutils literal notranslate"><span class="pre">e</span></code> 当前已被处理 (因此 <a class="reference internal" href="#sys.exception" title="sys.exception"><code class="xref py py-func docutils literal notranslate"><span class="pre">exception()</span></code></a> 将会返回 <code class="docutils literal notranslate"><span class="pre">e</span></code>)，则 <a class="reference internal" href="#sys.exc_info" title="sys.exc_info"><code class="xref py py-func docutils literal notranslate"><span class="pre">exc_info()</span></code></a> 将返回元组 <code class="docutils literal notranslate"><span class="pre">(type(e),</span> <span class="pre">e,</span> <span class="pre">e.__traceback__)</span></code>。 也就是说，包含该异常类型 (<a class="reference internal" href="exceptions.xhtml#BaseException" title="BaseException"><code class="xref py py-exc docutils literal notranslate"><span class="pre">BaseException</span></code></a> 的子类) 的元组，异常本身，以及一个通常封装了异常最后发生位置上调用栈的 <a class="reference internal" href="../reference/datamodel.xhtml#traceback-objects"><span class="std std-ref">回溯对象</span></a>。</p>
<p id="index-8">如果堆栈上的任何地方都没有处理异常，则此函数将返回一个包含三个 <code class="docutils literal notranslate"><span class="pre">None</span></code> 的元组。</p>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.11 版本发生变更: </span><code class="docutils literal notranslate"><span class="pre">type</span></code> 和 <code class="docutils literal notranslate"><span class="pre">traceback</span></code> 字段现在是派生自 <code class="docutils literal notranslate"><span class="pre">value</span></code> (异常实例)，因此当一个异常在处理期间被修改时，其变化会在后续对 <a class="reference internal" href="#sys.exc_info" title="sys.exc_info"><code class="xref py py-func docutils literal notranslate"><span class="pre">exc_info()</span></code></a> 的调用结果中反映出来。</p>
</div>
</dd></dl>

<dl class="py data">
<dt class="sig sig-object py" id="sys.exec_prefix">
<span class="sig-prename descclassname"><span class="pre">sys.</span></span><span class="sig-name descname"><span class="pre">exec_prefix</span></span></dt>
<dd><p>一个字符串，提供特定域的目录前缀，该目录中安装了与平台相关的 Python 文件，默认也是 <code class="docutils literal notranslate"><span class="pre">'/usr/local'</span></code>。该目录前缀可以在构建时使用 <strong class="program">configure</strong> 脚本的 <code class="docutils literal notranslate"><span class="pre">--exec-prefix</span></code> 参数进行设置。具体而言，所有配置文件（如 <code class="file docutils literal notranslate"><span class="pre">pyconfig.h</span></code> 头文件）都安装在目录 <code class="file docutils literal notranslate"><em><span class="pre">exec_prefix</span></em><span class="pre">/lib/python</span><em><span class="pre">X.Y</span></em><span class="pre">/config</span></code> 中，共享库模块安装在 <code class="file docutils literal notranslate"><em><span class="pre">exec_prefix</span></em><span class="pre">/lib/python</span><em><span class="pre">X.Y</span></em><span class="pre">/lib-dynload</span></code> 中，其中 <em>X.Y</em> 是 Python 的版本号，如 <code class="docutils literal notranslate"><span class="pre">3.2</span></code>。</p>
<div class="admonition note">
<p class="admonition-title">备注</p>
<p>如果在一个 <a class="reference internal" href="venv.xhtml#venv-def"><span class="std std-ref">虚拟环境</span></a> 中，那么该值将在 <code class="docutils literal notranslate"><span class="pre">site.py</span></code> 中被修改，指向虚拟环境。Python 安装位置仍然可以用 <a class="reference internal" href="#sys.base_exec_prefix" title="sys.base_exec_prefix"><code class="xref py py-data docutils literal notranslate"><span class="pre">base_exec_prefix</span></code></a> 来获取。</p>
</div>
</dd></dl>

<dl class="py data">
<dt class="sig sig-object py" id="sys.executable">
<span class="sig-prename descclassname"><span class="pre">sys.</span></span><span class="sig-name descname"><span class="pre">executable</span></span></dt>
<dd><p>一个字符串，提供 Python 解释器的可执行二进制文件的绝对路径，仅在部分系统中此值有意义。如果 Python 无法获取其可执行文件的真实路径，则 <a class="reference internal" href="#sys.executable" title="sys.executable"><code class="xref py py-data docutils literal notranslate"><span class="pre">sys.executable</span></code></a> 将为空字符串或 <code class="docutils literal notranslate"><span class="pre">None</span></code>。</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="sys.exit">
<span class="sig-prename descclassname"><span class="pre">sys.</span></span><span class="sig-name descname"><span class="pre">exit</span></span><span class="sig-paren">(</span><span class="optional">[</span><em class="sig-param"><span class="n"><span class="pre">arg</span></span></em><span class="optional">]</span><span class="sig-paren">)</span></dt>
<dd><p>引发一个 <a class="reference internal" href="exceptions.xhtml#SystemExit" title="SystemExit"><code class="xref py py-exc docutils literal notranslate"><span class="pre">SystemExit</span></code></a> 异常，表示打算退出解释器。</p>
<p>可选参数 <em>arg</em> 可以是表示退出状态的整数（默认为 0），也可以是其他类型的对象。如果它是整数，则 shell 等将 0 视为“成功终止”，非零值视为“异常终止”。大多数系统要求该值的范围是 0--127，否则会产生不确定的结果。某些系统为退出代码约定了特定的含义，但通常尚不完善；Unix 程序通常用 2 表示命令行语法错误，用 1 表示所有其他类型的错误。传入其他类型的对象，如果传入 <code class="docutils literal notranslate"><span class="pre">None</span></code> 等同于传入 0，如果传入其他对象则将其打印至 <a class="reference internal" href="#sys.stderr" title="sys.stderr"><code class="xref py py-data docutils literal notranslate"><span class="pre">stderr</span></code></a>，且退出代码为 1。特别地，<code class="docutils literal notranslate"><span class="pre">sys.exit(&quot;some</span> <span class="pre">error</span> <span class="pre">message&quot;)</span></code> 可以在发生错误时快速退出程序。</p>
<p>由于 <a class="reference internal" href="constants.xhtml#exit" title="exit"><code class="xref py py-func docutils literal notranslate"><span class="pre">exit()</span></code></a> 最终 &quot;只&quot; 引发了一个异常，它只在从主线程调用时退出进程，而异常不会被拦截。 <a class="reference internal" href="../reference/compound_stmts.xhtml#try"><code class="xref std std-keyword docutils literal notranslate"><span class="pre">try</span></code></a> 语句的 finally 子句所指定的清理动作会被遵守，并且有可能在外层拦截退出的尝试。</p>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.6 版本发生变更: </span>在 Python 解释器捕获 <a class="reference internal" href="exceptions.xhtml#SystemExit" title="SystemExit"><code class="xref py py-exc docutils literal notranslate"><span class="pre">SystemExit</span></code></a> 后，如果在清理中发生错误（如清除标准流中的缓冲数据时出错），则退出状态码将变为 120。</p>
</div>
</dd></dl>

<dl class="py data">
<dt class="sig sig-object py" id="sys.flags">
<span class="sig-prename descclassname"><span class="pre">sys.</span></span><span class="sig-name descname"><span class="pre">flags</span></span></dt>
<dd><p><a class="reference internal" href="../glossary.xhtml#term-named-tuple"><span class="xref std std-term">具名元组</span></a> <em>flags</em> 含有命令行标志的状态。这些属性是只读的。</p>
<table class="docutils align-default">
<tbody>
<tr class="row-odd"><td><dl class="py attribute">
<dt class="sig sig-object py" id="sys.flags.debug">
<span class="sig-prename descclassname"><span class="pre">flags.</span></span><span class="sig-name descname"><span class="pre">debug</span></span></dt>
<dd></dd></dl>

</td>
<td><p><a class="reference internal" href="../using/cmdline.xhtml#cmdoption-d"><code class="xref std std-option docutils literal notranslate"><span class="pre">-d</span></code></a></p></td>
</tr>
<tr class="row-even"><td><dl class="py attribute">
<dt class="sig sig-object py" id="sys.flags.inspect">
<span class="sig-prename descclassname"><span class="pre">flags.</span></span><span class="sig-name descname"><span class="pre">inspect</span></span></dt>
<dd></dd></dl>

</td>
<td><p><a class="reference internal" href="../using/cmdline.xhtml#cmdoption-i"><code class="xref std std-option docutils literal notranslate"><span class="pre">-i</span></code></a></p></td>
</tr>
<tr class="row-odd"><td><dl class="py attribute">
<dt class="sig sig-object py" id="sys.flags.interactive">
<span class="sig-prename descclassname"><span class="pre">flags.</span></span><span class="sig-name descname"><span class="pre">interactive</span></span></dt>
<dd></dd></dl>

</td>
<td><p><a class="reference internal" href="../using/cmdline.xhtml#cmdoption-i"><code class="xref std std-option docutils literal notranslate"><span class="pre">-i</span></code></a></p></td>
</tr>
<tr class="row-even"><td><dl class="py attribute">
<dt class="sig sig-object py" id="sys.flags.isolated">
<span class="sig-prename descclassname"><span class="pre">flags.</span></span><span class="sig-name descname"><span class="pre">isolated</span></span></dt>
<dd></dd></dl>

</td>
<td><p><a class="reference internal" href="../using/cmdline.xhtml#cmdoption-I"><code class="xref std std-option docutils literal notranslate"><span class="pre">-I</span></code></a></p></td>
</tr>
<tr class="row-odd"><td><dl class="py attribute">
<dt class="sig sig-object py" id="sys.flags.optimize">
<span class="sig-prename descclassname"><span class="pre">flags.</span></span><span class="sig-name descname"><span class="pre">optimize</span></span></dt>
<dd></dd></dl>

</td>
<td><p><a class="reference internal" href="../using/cmdline.xhtml#cmdoption-O"><code class="xref std std-option docutils literal notranslate"><span class="pre">-O</span></code></a> 或 <a class="reference internal" href="../using/cmdline.xhtml#cmdoption-OO"><code class="xref std std-option docutils literal notranslate"><span class="pre">-OO</span></code></a></p></td>
</tr>
<tr class="row-even"><td><dl class="py attribute">
<dt class="sig sig-object py" id="sys.flags.dont_write_bytecode">
<span class="sig-prename descclassname"><span class="pre">flags.</span></span><span class="sig-name descname"><span class="pre">dont_write_bytecode</span></span></dt>
<dd></dd></dl>

</td>
<td><p><a class="reference internal" href="../using/cmdline.xhtml#cmdoption-B"><code class="xref std std-option docutils literal notranslate"><span class="pre">-B</span></code></a></p></td>
</tr>
<tr class="row-odd"><td><dl class="py attribute">
<dt class="sig sig-object py" id="sys.flags.no_user_site">
<span class="sig-prename descclassname"><span class="pre">flags.</span></span><span class="sig-name descname"><span class="pre">no_user_site</span></span></dt>
<dd></dd></dl>

</td>
<td><p><a class="reference internal" href="../using/cmdline.xhtml#cmdoption-s"><code class="xref std std-option docutils literal notranslate"><span class="pre">-s</span></code></a></p></td>
</tr>
<tr class="row-even"><td><dl class="py attribute">
<dt class="sig sig-object py" id="sys.flags.no_site">
<span class="sig-prename descclassname"><span class="pre">flags.</span></span><span class="sig-name descname"><span class="pre">no_site</span></span></dt>
<dd></dd></dl>

</td>
<td><p><a class="reference internal" href="../using/cmdline.xhtml#cmdoption-S"><code class="xref std std-option docutils literal notranslate"><span class="pre">-S</span></code></a></p></td>
</tr>
<tr class="row-odd"><td><dl class="py attribute">
<dt class="sig sig-object py" id="sys.flags.ignore_environment">
<span class="sig-prename descclassname"><span class="pre">flags.</span></span><span class="sig-name descname"><span class="pre">ignore_environment</span></span></dt>
<dd></dd></dl>

</td>
<td><p><a class="reference internal" href="../using/cmdline.xhtml#cmdoption-E"><code class="xref std std-option docutils literal notranslate"><span class="pre">-E</span></code></a></p></td>
</tr>
<tr class="row-even"><td><dl class="py attribute">
<dt class="sig sig-object py" id="sys.flags.verbose">
<span class="sig-prename descclassname"><span class="pre">flags.</span></span><span class="sig-name descname"><span class="pre">verbose</span></span></dt>
<dd></dd></dl>

</td>
<td><p><a class="reference internal" href="../using/cmdline.xhtml#cmdoption-v"><code class="xref std std-option docutils literal notranslate"><span class="pre">-v</span></code></a></p></td>
</tr>
<tr class="row-odd"><td><dl class="py attribute">
<dt class="sig sig-object py" id="sys.flags.bytes_warning">
<span class="sig-prename descclassname"><span class="pre">flags.</span></span><span class="sig-name descname"><span class="pre">bytes_warning</span></span></dt>
<dd></dd></dl>

</td>
<td><p><a class="reference internal" href="../using/cmdline.xhtml#cmdoption-b"><code class="xref std std-option docutils literal notranslate"><span class="pre">-b</span></code></a></p></td>
</tr>
<tr class="row-even"><td><dl class="py attribute">
<dt class="sig sig-object py" id="sys.flags.quiet">
<span class="sig-prename descclassname"><span class="pre">flags.</span></span><span class="sig-name descname"><span class="pre">quiet</span></span></dt>
<dd></dd></dl>

</td>
<td><p><a class="reference internal" href="../using/cmdline.xhtml#cmdoption-q"><code class="xref std std-option docutils literal notranslate"><span class="pre">-q</span></code></a></p></td>
</tr>
<tr class="row-odd"><td><dl class="py attribute">
<dt class="sig sig-object py" id="sys.flags.hash_randomization">
<span class="sig-prename descclassname"><span class="pre">flags.</span></span><span class="sig-name descname"><span class="pre">hash_randomization</span></span></dt>
<dd></dd></dl>

</td>
<td><p><a class="reference internal" href="../using/cmdline.xhtml#cmdoption-R"><code class="xref std std-option docutils literal notranslate"><span class="pre">-R</span></code></a></p></td>
</tr>
<tr class="row-even"><td><dl class="py attribute">
<dt class="sig sig-object py" id="sys.flags.dev_mode">
<span class="sig-prename descclassname"><span class="pre">flags.</span></span><span class="sig-name descname"><span class="pre">dev_mode</span></span></dt>
<dd></dd></dl>

</td>
<td><p><a class="reference internal" href="../using/cmdline.xhtml#cmdoption-X"><code class="xref std std-option docutils literal notranslate"><span class="pre">-X</span> <span class="pre">dev</span></code></a> (<a class="reference internal" href="devmode.xhtml#devmode"><span class="std std-ref">Python 开发模式</span></a>)</p></td>
</tr>
<tr class="row-odd"><td><dl class="py attribute">
<dt class="sig sig-object py" id="sys.flags.utf8_mode">
<span class="sig-prename descclassname"><span class="pre">flags.</span></span><span class="sig-name descname"><span class="pre">utf8_mode</span></span></dt>
<dd></dd></dl>

</td>
<td><p><a class="reference internal" href="../using/cmdline.xhtml#cmdoption-X"><code class="xref std std-option docutils literal notranslate"><span class="pre">-X</span> <span class="pre">utf8</span></code></a></p></td>
</tr>
<tr class="row-even"><td><dl class="py attribute">
<dt class="sig sig-object py" id="sys.flags.safe_path">
<span class="sig-prename descclassname"><span class="pre">flags.</span></span><span class="sig-name descname"><span class="pre">safe_path</span></span></dt>
<dd></dd></dl>

</td>
<td><p><a class="reference internal" href="../using/cmdline.xhtml#cmdoption-P"><code class="xref std std-option docutils literal notranslate"><span class="pre">-P</span></code></a></p></td>
</tr>
<tr class="row-odd"><td><dl class="py attribute">
<dt class="sig sig-object py" id="sys.flags.int_max_str_digits">
<span class="sig-prename descclassname"><span class="pre">flags.</span></span><span class="sig-name descname"><span class="pre">int_max_str_digits</span></span></dt>
<dd></dd></dl>

</td>
<td><p><a class="reference internal" href="../using/cmdline.xhtml#cmdoption-X"><code class="xref std std-option docutils literal notranslate"><span class="pre">-X</span> <span class="pre">int_max_str_digits</span></code></a>
(<a class="reference internal" href="stdtypes.xhtml#int-max-str-digits"><span class="std std-ref">integer string conversion length limitation</span></a>)</p></td>
</tr>
<tr class="row-even"><td><dl class="py attribute">
<dt class="sig sig-object py" id="sys.flags.warn_default_encoding">
<span class="sig-prename descclassname"><span class="pre">flags.</span></span><span class="sig-name descname"><span class="pre">warn_default_encoding</span></span></dt>
<dd></dd></dl>

</td>
<td><p><a class="reference internal" href="../using/cmdline.xhtml#cmdoption-X"><code class="xref std std-option docutils literal notranslate"><span class="pre">-X</span> <span class="pre">warn_default_encoding</span></code></a></p></td>
</tr>
</tbody>
</table>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.2 版本发生变更: </span>为新的 <a class="reference internal" href="../using/cmdline.xhtml#cmdoption-q"><code class="xref std std-option docutils literal notranslate"><span class="pre">-q</span></code></a> 标志添加了 <code class="docutils literal notranslate"><span class="pre">quiet</span></code> 属性</p>
</div>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.2.3: </span><code class="docutils literal notranslate"><span class="pre">hash_randomization</span></code> 属性</p>
</div>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.3 版本发生变更: </span>删除了过时的 <code class="docutils literal notranslate"><span class="pre">division_warning</span></code> 属性</p>
</div>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.4 版本发生变更: </span>为 <a class="reference internal" href="../using/cmdline.xhtml#cmdoption-I"><code class="xref std std-option docutils literal notranslate"><span class="pre">-I</span></code></a> <code class="docutils literal notranslate"><span class="pre">isolated</span></code> 标志添加了 <code class="docutils literal notranslate"><span class="pre">isolated</span></code> 属性。</p>
</div>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.7 版本发生变更: </span>为新的 <a class="reference internal" href="devmode.xhtml#devmode"><span class="std std-ref">Python 开发模式</span></a> 添加了 <code class="docutils literal notranslate"><span class="pre">dev_mode</span></code> 属性，为新的 <a class="reference internal" href="../using/cmdline.xhtml#cmdoption-X"><code class="xref std std-option docutils literal notranslate"><span class="pre">-X</span></code></a> <code class="docutils literal notranslate"><span class="pre">utf8</span></code> 标志添加了 <code class="docutils literal notranslate"><span class="pre">utf8_mode</span></code> 属性。</p>
</div>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.10 版本发生变更: </span>为 <a class="reference internal" href="../using/cmdline.xhtml#cmdoption-X"><code class="xref std std-option docutils literal notranslate"><span class="pre">-X</span></code></a> <code class="docutils literal notranslate"><span class="pre">warn_default_encoding</span></code> 旗标添加了 <code class="docutils literal notranslate"><span class="pre">warn_default_encoding</span></code> 属性。</p>
</div>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.11 版本发生变更: </span>添加了用于 <a class="reference internal" href="../using/cmdline.xhtml#cmdoption-P"><code class="xref std std-option docutils literal notranslate"><span class="pre">-P</span></code></a> 选项的 <code class="docutils literal notranslate"><span class="pre">safe_path</span></code> 属性。</p>
</div>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.11 版本发生变更: </span>增加了 <code class="docutils literal notranslate"><span class="pre">int_max_str_digits</span></code> 属性。</p>
</div>
</dd></dl>

<dl class="py data">
<dt class="sig sig-object py" id="sys.float_info">
<span class="sig-prename descclassname"><span class="pre">sys.</span></span><span class="sig-name descname"><span class="pre">float_info</span></span></dt>
<dd><p>一个 <a class="reference internal" href="../glossary.xhtml#term-named-tuple"><span class="xref std std-term">具名元组</span></a>，存有浮点型的相关信息。它包含的是关于精度和内部表示的底层信息。这些值与标准头文件 <code class="file docutils literal notranslate"><span class="pre">float.h</span></code> 中为 C 语言定义的各种浮点常量对应，详情请参阅 1999 ISO/IEC C 标准 <a class="reference internal" href="#c99" id="id1"><span>[C99]</span></a> 的 5.2.4.2.2 节，'Characteristics of floating types（浮点型的特性）'。</p>
<table class="docutils align-default" id="id2">
<caption><span class="caption-text"><code class="xref py py-data docutils literal notranslate"><span class="pre">float_info</span></code> <a class="reference internal" href="../glossary.xhtml#term-named-tuple"><span class="xref std std-term">named tuple</span></a> 的属性</span></caption>
<thead>
<tr class="row-odd"><th class="head"><p>attribute -- 属性</p></th>
<th class="head"><p>float.h 宏</p></th>
<th class="head"><p>说明</p></th>
</tr>
</thead>
<tbody>
<tr class="row-even"><td><dl class="py attribute">
<dt class="sig sig-object py" id="sys.float_info.epsilon">
<span class="sig-prename descclassname"><span class="pre">float_info.</span></span><span class="sig-name descname"><span class="pre">epsilon</span></span></dt>
<dd></dd></dl>

</td>
<td><p><code class="xref c c-macro docutils literal notranslate"><span class="pre">DBL_EPSILON</span></code></p></td>
<td><p>1.0 与可表示为浮点数的大于 1.0 的最小值之间的差。</p>
<p>另请参阅 <a class="reference internal" href="math.xhtml#math.ulp" title="math.ulp"><code class="xref py py-func docutils literal notranslate"><span class="pre">math.ulp()</span></code></a>。</p>
</td>
</tr>
<tr class="row-odd"><td><dl class="py attribute">
<dt class="sig sig-object py" id="sys.float_info.dig">
<span class="sig-prename descclassname"><span class="pre">float_info.</span></span><span class="sig-name descname"><span class="pre">dig</span></span></dt>
<dd></dd></dl>

</td>
<td><p><code class="xref c c-macro docutils literal notranslate"><span class="pre">DBL_DIG</span></code></p></td>
<td><p>浮点数可以真实表示的十进制数的最大位数；见下文。</p></td>
</tr>
<tr class="row-even"><td><dl class="py attribute">
<dt class="sig sig-object py" id="sys.float_info.mant_dig">
<span class="sig-prename descclassname"><span class="pre">float_info.</span></span><span class="sig-name descname"><span class="pre">mant_dig</span></span></dt>
<dd></dd></dl>

</td>
<td><p><code class="xref c c-macro docutils literal notranslate"><span class="pre">DBL_MANT_DIG</span></code></p></td>
<td><p>浮点数精度：以 <code class="docutils literal notranslate"><span class="pre">radix</span></code> 为基数浮点数的有效位数。</p></td>
</tr>
<tr class="row-odd"><td><dl class="py attribute">
<dt class="sig sig-object py" id="sys.float_info.max">
<span class="sig-prename descclassname"><span class="pre">float_info.</span></span><span class="sig-name descname"><span class="pre">max</span></span></dt>
<dd></dd></dl>

</td>
<td><p><code class="xref c c-macro docutils literal notranslate"><span class="pre">DBL_MAX</span></code></p></td>
<td><p>可表示的最大正有限浮点数。</p></td>
</tr>
<tr class="row-even"><td><dl class="py attribute">
<dt class="sig sig-object py" id="sys.float_info.max_exp">
<span class="sig-prename descclassname"><span class="pre">float_info.</span></span><span class="sig-name descname"><span class="pre">max_exp</span></span></dt>
<dd></dd></dl>

</td>
<td><p><code class="xref c c-macro docutils literal notranslate"><span class="pre">DBL_MAX_EXP</span></code></p></td>
<td><p>使得 <code class="docutils literal notranslate"><span class="pre">radix**(e-1)</span></code> 是可表示的有限浮点数的最大整数 <em>e</em>。</p></td>
</tr>
<tr class="row-odd"><td><dl class="py attribute">
<dt class="sig sig-object py" id="sys.float_info.max_10_exp">
<span class="sig-prename descclassname"><span class="pre">float_info.</span></span><span class="sig-name descname"><span class="pre">max_10_exp</span></span></dt>
<dd></dd></dl>

</td>
<td><p><code class="xref c c-macro docutils literal notranslate"><span class="pre">DBL_MAX_10_EXP</span></code></p></td>
<td><p>使得 <code class="docutils literal notranslate"><span class="pre">10**e</span></code> 在可表示的有限浮点数范围内的最大整数 <em>e</em>。</p></td>
</tr>
<tr class="row-even"><td><dl class="py attribute">
<dt class="sig sig-object py" id="sys.float_info.min">
<span class="sig-prename descclassname"><span class="pre">float_info.</span></span><span class="sig-name descname"><span class="pre">min</span></span></dt>
<dd></dd></dl>

</td>
<td><p><code class="xref c c-macro docutils literal notranslate"><span class="pre">DBL_MIN</span></code></p></td>
<td><p>可表示的最小正 <em>规范化</em> 浮点数。</p>
<p>使用 <a class="reference internal" href="math.xhtml#math.ulp" title="math.ulp"><code class="xref py py-func docutils literal notranslate"><span class="pre">math.ulp(0.0)</span></code></a> 获取可表示的最小正 <em>非规格化</em> 浮点数</p>
</td>
</tr>
<tr class="row-odd"><td><dl class="py attribute">
<dt class="sig sig-object py" id="sys.float_info.min_exp">
<span class="sig-prename descclassname"><span class="pre">float_info.</span></span><span class="sig-name descname"><span class="pre">min_exp</span></span></dt>
<dd></dd></dl>

</td>
<td><p><code class="xref c c-macro docutils literal notranslate"><span class="pre">DBL_MIN_EXP</span></code></p></td>
<td><p>使得 <code class="docutils literal notranslate"><span class="pre">radix**(e-1)</span></code> 是规范化浮点数的最小整数 <em>e</em>。</p></td>
</tr>
<tr class="row-even"><td><dl class="py attribute">
<dt class="sig sig-object py" id="sys.float_info.min_10_exp">
<span class="sig-prename descclassname"><span class="pre">float_info.</span></span><span class="sig-name descname"><span class="pre">min_10_exp</span></span></dt>
<dd></dd></dl>

</td>
<td><p><code class="xref c c-macro docutils literal notranslate"><span class="pre">DBL_MIN_10_EXP</span></code></p></td>
<td><p>使得 <code class="docutils literal notranslate"><span class="pre">10**e</span></code> 是归范化浮点数的最小整数 <em>e</em>。</p></td>
</tr>
<tr class="row-odd"><td><dl class="py attribute">
<dt class="sig sig-object py" id="sys.float_info.radix">
<span class="sig-prename descclassname"><span class="pre">float_info.</span></span><span class="sig-name descname"><span class="pre">radix</span></span></dt>
<dd></dd></dl>

</td>
<td><p><code class="xref c c-macro docutils literal notranslate"><span class="pre">FLT_RADIX</span></code></p></td>
<td><p>指数表示法中采用的基数。</p></td>
</tr>
<tr class="row-even"><td><dl class="py attribute">
<dt class="sig sig-object py" id="sys.float_info.rounds">
<span class="sig-prename descclassname"><span class="pre">float_info.</span></span><span class="sig-name descname"><span class="pre">rounds</span></span></dt>
<dd></dd></dl>

</td>
<td><p><code class="xref c c-macro docutils literal notranslate"><span class="pre">FLT_ROUNDS</span></code></p></td>
<td><p>一个代表浮点运算舍入模式的整数。 它反映了解释器启动时系统 <code class="xref c c-macro docutils literal notranslate"><span class="pre">FLT_ROUNDS</span></code> 宏的值：</p>
<ul class="simple">
<li><p><code class="docutils literal notranslate"><span class="pre">-1</span></code>: 不确定</p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">0</span></code>: 向零值</p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">1</span></code>: 向最近值</p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">2</span></code>: 向正无穷</p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">3</span></code>: 向负无穷</p></li>
</ul>
<p><code class="xref c c-macro docutils literal notranslate"><span class="pre">FLT_ROUNDS</span></code> 的所有其他值被用于代表具体实现所定义的舍入行为。</p>
</td>
</tr>
</tbody>
</table>
<p>属性 <a class="reference internal" href="#sys.float_info.dig" title="sys.float_info.dig"><code class="xref py py-attr docutils literal notranslate"><span class="pre">sys.float_info.dig</span></code></a> 需要进一步的解释。 如果 <code class="docutils literal notranslate"><span class="pre">s</span></code> 是表示十进制数的字符串，且最多有 <code class="xref py py-attr docutils literal notranslate"><span class="pre">sys.float_info.dig</span></code> 位有效数字，那么将 <code class="docutils literal notranslate"><span class="pre">s</span></code> 转换为浮点数再转换回来将恢复为一个表示相同十进制值的字符串:</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="kn">import</span> <span class="nn">sys</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">sys</span><span class="o">.</span><span class="n">float_info</span><span class="o">.</span><span class="n">dig</span>
<span class="go">15</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">s</span> <span class="o">=</span> <span class="s1">&#39;3.14159265358979&#39;</span>    <span class="c1"># decimal string with 15 significant digits</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">format</span><span class="p">(</span><span class="nb">float</span><span class="p">(</span><span class="n">s</span><span class="p">),</span> <span class="s1">&#39;.15g&#39;</span><span class="p">)</span>  <span class="c1"># convert to float and back -&gt; same value</span>
<span class="go">&#39;3.14159265358979&#39;</span>
</pre></div>
</div>
<p>但是对于超过 <a class="reference internal" href="#sys.float_info.dig" title="sys.float_info.dig"><code class="xref py py-attr docutils literal notranslate"><span class="pre">sys.float_info.dig</span></code></a> 位有效数字的字符串，转换前后并非总是相同:</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">s</span> <span class="o">=</span> <span class="s1">&#39;9876543211234567&#39;</span>    <span class="c1"># 16 significant digits is too many!</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">format</span><span class="p">(</span><span class="nb">float</span><span class="p">(</span><span class="n">s</span><span class="p">),</span> <span class="s1">&#39;.16g&#39;</span><span class="p">)</span>  <span class="c1"># conversion changes value</span>
<span class="go">&#39;9876543211234568&#39;</span>
</pre></div>
</div>
</dd></dl>

<dl class="py data">
<dt class="sig sig-object py" id="sys.float_repr_style">
<span class="sig-prename descclassname"><span class="pre">sys.</span></span><span class="sig-name descname"><span class="pre">float_repr_style</span></span></dt>
<dd><p>一个字符串，反映 <a class="reference internal" href="functions.xhtml#repr" title="repr"><code class="xref py py-func docutils literal notranslate"><span class="pre">repr()</span></code></a> 函数在浮点数上的行为。如果该字符串是 <code class="docutils literal notranslate"><span class="pre">'short'</span></code>，那么对于（非无穷的）浮点数 <code class="docutils literal notranslate"><span class="pre">x</span></code>，<code class="docutils literal notranslate"><span class="pre">repr(x)</span></code> 将会生成一个短字符串，满足 <code class="docutils literal notranslate"><span class="pre">float(repr(x))</span> <span class="pre">==</span> <span class="pre">x</span></code> 的特性。这是 Python 3.1 及更高版本中的常见行为。否则 <code class="docutils literal notranslate"><span class="pre">float_repr_style</span></code> 的值将是 <code class="docutils literal notranslate"><span class="pre">'legacy'</span></code>，此时 <code class="docutils literal notranslate"><span class="pre">repr(x)</span></code> 的行为方式将与 Python 3.1 之前的版本相同。</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.1.</span></p>
</div>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="sys.getallocatedblocks">
<span class="sig-prename descclassname"><span class="pre">sys.</span></span><span class="sig-name descname"><span class="pre">getallocatedblocks</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Return the number of memory blocks currently allocated by the interpreter,
regardless of their size.  This function is mainly useful for tracking
and debugging memory leaks.  Because of the interpreter's internal
caches, the result can vary from call to call; you may have to call
<a class="reference internal" href="#sys._clear_type_cache" title="sys._clear_type_cache"><code class="xref py py-func docutils literal notranslate"><span class="pre">_clear_type_cache()</span></code></a> and <a class="reference internal" href="gc.xhtml#gc.collect" title="gc.collect"><code class="xref py py-func docutils literal notranslate"><span class="pre">gc.collect()</span></code></a> to get more
predictable results.</p>
<p>如果当前 Python 构建或实现无法合理地计算此信息，允许 <a class="reference internal" href="#sys.getallocatedblocks" title="sys.getallocatedblocks"><code class="xref py py-func docutils literal notranslate"><span class="pre">getallocatedblocks()</span></code></a> 返回 0。</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.4.</span></p>
</div>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="sys.getunicodeinternedsize">
<span class="sig-prename descclassname"><span class="pre">sys.</span></span><span class="sig-name descname"><span class="pre">getunicodeinternedsize</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>返回已被处置的 unicode 对象数量。</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.12.</span></p>
</div>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="sys.getandroidapilevel">
<span class="sig-prename descclassname"><span class="pre">sys.</span></span><span class="sig-name descname"><span class="pre">getandroidapilevel</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Return the build time API version of Android as an integer.</p>
<div class="availability docutils container">
<p><a class="reference internal" href="intro.xhtml#availability"><span class="std std-ref">可用性</span></a>：Android。</p>
</div>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.7.</span></p>
</div>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="sys.getdefaultencoding">
<span class="sig-prename descclassname"><span class="pre">sys.</span></span><span class="sig-name descname"><span class="pre">getdefaultencoding</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>返回当前 Unicode 实现所使用的默认字符串编码格式名称。</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="sys.getdlopenflags">
<span class="sig-prename descclassname"><span class="pre">sys.</span></span><span class="sig-name descname"><span class="pre">getdlopenflags</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>返回用于 <code class="xref c c-func docutils literal notranslate"><span class="pre">dlopen()</span></code> 调用的旗标的当前值。 旗标值的符号名称可在 <a class="reference internal" href="os.xhtml#module-os" title="os: Miscellaneous operating system interfaces."><code class="xref py py-mod docutils literal notranslate"><span class="pre">os</span></code></a> 模块中找到 (<code class="samp docutils literal notranslate"><span class="pre">RTLD_</span><em><span class="pre">xxx</span></em></code> 常量，例如 <a class="reference internal" href="os.xhtml#os.RTLD_LAZY" title="os.RTLD_LAZY"><code class="xref py py-const docutils literal notranslate"><span class="pre">os.RTLD_LAZY</span></code></a>)。</p>
<div class="availability docutils container">
<p><a class="reference internal" href="intro.xhtml#availability"><span class="std std-ref">可用性</span></a>: Unix。</p>
</div>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="sys.getfilesystemencoding">
<span class="sig-prename descclassname"><span class="pre">sys.</span></span><span class="sig-name descname"><span class="pre">getfilesystemencoding</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>获取 <a class="reference internal" href="../glossary.xhtml#term-filesystem-encoding-and-error-handler"><span class="xref std std-term">文件系统编码格式</span></a>: 该编码格式与 <a class="reference internal" href="../glossary.xhtml#term-filesystem-encoding-and-error-handler"><span class="xref std std-term">文件系统错误处理器</span></a> 一起使用以便在 Unicode 文件名和字节文件名之间进行转换。 文件系统错误处理器是从 <a class="reference internal" href="#sys.getfilesystemencodeerrors" title="sys.getfilesystemencodeerrors"><code class="xref py py-func docutils literal notranslate"><span class="pre">getfilesystemencodeerrors()</span></code></a> 返回的。</p>
<p>为获得最佳兼容性，在任何时候都应使用 str 来表示文件名，尽管使用 bytes 来表示文件名也是受支持的。 接受还返回文件名的函数应当支持 str 或 bytes 并在内部将其转换为系统首选的表示形式。</p>
<p>应使用 <a class="reference internal" href="os.xhtml#os.fsencode" title="os.fsencode"><code class="xref py py-func docutils literal notranslate"><span class="pre">os.fsencode()</span></code></a> 和 <a class="reference internal" href="os.xhtml#os.fsdecode" title="os.fsdecode"><code class="xref py py-func docutils literal notranslate"><span class="pre">os.fsdecode()</span></code></a> 来保证所采用的编码和错误处理方案都是正确的。</p>
<p><a class="reference internal" href="../glossary.xhtml#term-filesystem-encoding-and-error-handler"><span class="xref std std-term">filesystem encoding and error handler</span></a> 是在 Python 启动时通过 <a class="reference internal" href="../c-api/init_config.xhtml#c.PyConfig_Read" title="PyConfig_Read"><code class="xref c c-func docutils literal notranslate"><span class="pre">PyConfig_Read()</span></code></a> 函数来配置的：请参阅 <a class="reference internal" href="../c-api/init_config.xhtml#c.PyConfig" title="PyConfig"><code class="xref c c-type docutils literal notranslate"><span class="pre">PyConfig</span></code></a> 的 <a class="reference internal" href="../c-api/init_config.xhtml#c.PyConfig.filesystem_encoding" title="PyConfig.filesystem_encoding"><code class="xref c c-member docutils literal notranslate"><span class="pre">filesystem_encoding</span></code></a> 和 <a class="reference internal" href="../c-api/init_config.xhtml#c.PyConfig.filesystem_errors" title="PyConfig.filesystem_errors"><code class="xref c c-member docutils literal notranslate"><span class="pre">filesystem_errors</span></code></a> 等成员。</p>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.2 版本发生变更: </span><a class="reference internal" href="#sys.getfilesystemencoding" title="sys.getfilesystemencoding"><code class="xref py py-func docutils literal notranslate"><span class="pre">getfilesystemencoding()</span></code></a> 的结果将不再有可能是 <code class="docutils literal notranslate"><span class="pre">None</span></code>。</p>
</div>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.6 版本发生变更: </span>Windows 不再保证会返回 <code class="docutils literal notranslate"><span class="pre">'mbcs'</span></code>。详情请参阅 <span class="target" id="index-77"></span><a class="pep reference external" href="https://peps.python.org/pep-0529/"><strong>PEP 529</strong></a><span class="link-target"> [https://peps.python.org/pep-0529/]</span> 和 <a class="reference internal" href="#sys._enablelegacywindowsfsencoding" title="sys._enablelegacywindowsfsencoding"><code class="xref py py-func docutils literal notranslate"><span class="pre">_enablelegacywindowsfsencoding()</span></code></a>。</p>
</div>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.7 版本发生变更: </span>返回 <code class="docutils literal notranslate"><span class="pre">'utf-8'</span></code>，如果启用了 <a class="reference internal" href="os.xhtml#utf8-mode"><span class="std std-ref">Python UTF-8 模式</span></a> 的话。</p>
</div>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="sys.getfilesystemencodeerrors">
<span class="sig-prename descclassname"><span class="pre">sys.</span></span><span class="sig-name descname"><span class="pre">getfilesystemencodeerrors</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>获取 <a class="reference internal" href="../glossary.xhtml#term-filesystem-encoding-and-error-handler"><span class="xref std std-term">文件系统错误处理器</span></a>: 该错误处理器与 <a class="reference internal" href="../glossary.xhtml#term-filesystem-encoding-and-error-handler"><span class="xref std std-term">文件系统编码格式</span></a> 一起使用以便在 Unicode 文件名和字节文件名之间进程转换。 文件系统编码格式是由 <a class="reference internal" href="#sys.getfilesystemencoding" title="sys.getfilesystemencoding"><code class="xref py py-func docutils literal notranslate"><span class="pre">getfilesystemencoding()</span></code></a> 来返回的。</p>
<p>应使用 <a class="reference internal" href="os.xhtml#os.fsencode" title="os.fsencode"><code class="xref py py-func docutils literal notranslate"><span class="pre">os.fsencode()</span></code></a> 和 <a class="reference internal" href="os.xhtml#os.fsdecode" title="os.fsdecode"><code class="xref py py-func docutils literal notranslate"><span class="pre">os.fsdecode()</span></code></a> 来保证所采用的编码和错误处理方案都是正确的。</p>
<p><a class="reference internal" href="../glossary.xhtml#term-filesystem-encoding-and-error-handler"><span class="xref std std-term">filesystem encoding and error handler</span></a> 是在 Python 启动时通过 <a class="reference internal" href="../c-api/init_config.xhtml#c.PyConfig_Read" title="PyConfig_Read"><code class="xref c c-func docutils literal notranslate"><span class="pre">PyConfig_Read()</span></code></a> 函数来配置的：请参阅 <a class="reference internal" href="../c-api/init_config.xhtml#c.PyConfig" title="PyConfig"><code class="xref c c-type docutils literal notranslate"><span class="pre">PyConfig</span></code></a> 的 <a class="reference internal" href="../c-api/init_config.xhtml#c.PyConfig.filesystem_encoding" title="PyConfig.filesystem_encoding"><code class="xref c c-member docutils literal notranslate"><span class="pre">filesystem_encoding</span></code></a> 和 <a class="reference internal" href="../c-api/init_config.xhtml#c.PyConfig.filesystem_errors" title="PyConfig.filesystem_errors"><code class="xref c c-member docutils literal notranslate"><span class="pre">filesystem_errors</span></code></a> 等成员。</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.6.</span></p>
</div>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="sys.get_int_max_str_digits">
<span class="sig-prename descclassname"><span class="pre">sys.</span></span><span class="sig-name descname"><span class="pre">get_int_max_str_digits</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>返回 <a class="reference internal" href="stdtypes.xhtml#int-max-str-digits"><span class="std std-ref">整数字符串转换长度限制</span></a> 的当前值。 另请参阅 <a class="reference internal" href="#sys.set_int_max_str_digits" title="sys.set_int_max_str_digits"><code class="xref py py-func docutils literal notranslate"><span class="pre">set_int_max_str_digits()</span></code></a>。</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.11.</span></p>
</div>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="sys.getrefcount">
<span class="sig-prename descclassname"><span class="pre">sys.</span></span><span class="sig-name descname"><span class="pre">getrefcount</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">object</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>返回 <em>object</em> 的引用计数。返回的计数通常比预期的多一，因为它包括了作为 <a class="reference internal" href="#sys.getrefcount" title="sys.getrefcount"><code class="xref py py-func docutils literal notranslate"><span class="pre">getrefcount()</span></code></a> 参数的这一次（临时）引用。</p>
<p>请注意返回的值可能并不真正反映对象的实际持有的引用数。 例如，有些对象是“永生”的并具有非常高的 refcount 值，这并不反映实际的引用数。 因此，除了 0 或 1 这两个值，不要依赖返回值的准确性。</p>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.12 版本发生变更: </span>永生对象具有与对象的实际引用次数不相符的非常大的引用计数。</p>
</div>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="sys.getrecursionlimit">
<span class="sig-prename descclassname"><span class="pre">sys.</span></span><span class="sig-name descname"><span class="pre">getrecursionlimit</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>返回当前的递归限制值，即 Python 解释器堆栈的最大深度。此限制可防止无限递归导致的 C 堆栈溢出和 Python 崩溃。该值可以通过 <a class="reference internal" href="#sys.setrecursionlimit" title="sys.setrecursionlimit"><code class="xref py py-func docutils literal notranslate"><span class="pre">setrecursionlimit()</span></code></a> 设置。</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="sys.getsizeof">
<span class="sig-prename descclassname"><span class="pre">sys.</span></span><span class="sig-name descname"><span class="pre">getsizeof</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">object</span></span></em><span class="optional">[</span>, <em class="sig-param"><span class="n"><span class="pre">default</span></span></em><span class="optional">]</span><span class="sig-paren">)</span></dt>
<dd><p>返回对象的大小（以字节为单位）。该对象可以是任何类型。所有内建对象返回的结果都是正确的，但对于第三方扩展不一定正确，因为这与具体实现有关。</p>
<p>只计算直接分配给对象的内存消耗，不计算它所引用的对象的内存消耗。</p>
<p>对象不提供计算大小的方法时，如果传入过 <em>default</em> 则返回它，否则抛出 <a class="reference internal" href="exceptions.xhtml#TypeError" title="TypeError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">TypeError</span></code></a> 异常。</p>
<p>如果对象由垃圾回收器管理，则 <a class="reference internal" href="#sys.getsizeof" title="sys.getsizeof"><code class="xref py py-func docutils literal notranslate"><span class="pre">getsizeof()</span></code></a> 将调用对象的 <code class="docutils literal notranslate"><span class="pre">__sizeof__</span></code> 方法，并在上层添加额外的垃圾回收器。</p>
<p>See <a class="reference external" href="https://code.activestate.com/recipes/577504-compute-memory-footprint-of-an-object-and-its-cont/">recursive sizeof recipe</a><span class="link-target"> [https://code.activestate.com/recipes/577504-compute-memory-footprint-of-an-object-and-its-cont/]</span>
for an example of using <a class="reference internal" href="#sys.getsizeof" title="sys.getsizeof"><code class="xref py py-func docutils literal notranslate"><span class="pre">getsizeof()</span></code></a> recursively to find the size of
containers and all their contents.</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="sys.getswitchinterval">
<span class="sig-prename descclassname"><span class="pre">sys.</span></span><span class="sig-name descname"><span class="pre">getswitchinterval</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>返回解释器的“线程切换间隔时间”，请参阅 <a class="reference internal" href="#sys.setswitchinterval" title="sys.setswitchinterval"><code class="xref py py-func docutils literal notranslate"><span class="pre">setswitchinterval()</span></code></a>。</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.2.</span></p>
</div>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="sys._getframe">
<span class="sig-prename descclassname"><span class="pre">sys.</span></span><span class="sig-name descname"><span class="pre">_getframe</span></span><span class="sig-paren">(</span><span class="optional">[</span><em class="sig-param"><span class="n"><span class="pre">depth</span></span></em><span class="optional">]</span><span class="sig-paren">)</span></dt>
<dd><p>返回来自调用栈的一个帧对象。如果传入可选整数 <em>depth</em>，则返回从栈顶往下相应调用层数的帧对象。如果该数比调用栈更深，则抛出 <a class="reference internal" href="exceptions.xhtml#ValueError" title="ValueError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">ValueError</span></code></a>。<em>depth</em> 的默认值是 0，返回调用栈顶部的帧。</p>
<p class="audit-hook">引发一个 <a class="reference internal" href="#auditing"><span class="std std-ref">审计事件</span></a> <code class="docutils literal notranslate"><span class="pre">sys._getframe</span></code>，附带参数 <code class="docutils literal notranslate"><span class="pre">frame</span></code>。</p>
<div class="impl-detail compound">
<p><strong>CPython 实现细节：</strong> 这个函数应该只在内部为了一些特定的目的使用。不保证它在所有 Python 实现中都存在。</p>
</div>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="sys._getframemodulename">
<span class="sig-prename descclassname"><span class="pre">sys.</span></span><span class="sig-name descname"><span class="pre">_getframemodulename</span></span><span class="sig-paren">(</span><span class="optional">[</span><em class="sig-param"><span class="n"><span class="pre">depth</span></span></em><span class="optional">]</span><span class="sig-paren">)</span></dt>
<dd><p>从调用栈返回一个模块的名称。 如果给出了可选的整数 <em>depth</em>，则返回从栈顶往下相应调用层数的模块。 如果该数值比调用栈更深，或者如果该模块不可被标识，则返回 <code class="docutils literal notranslate"><span class="pre">None</span></code>。 <em>depth</em> 的默认值为零，即返回位于调用栈顶端的模块。</p>
<p class="audit-hook">引发一个 <a class="reference internal" href="#auditing"><span class="std std-ref">审计事件</span></a> <code class="docutils literal notranslate"><span class="pre">sys._getframemodulename</span></code>，附带参数 <code class="docutils literal notranslate"><span class="pre">depth</span></code>。</p>
<div class="impl-detail compound">
<p><strong>CPython 实现细节：</strong> 这个函数应该只在内部为了一些特定的目的使用。不保证它在所有 Python 实现中都存在。</p>
</div>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="sys.getprofile">
<span class="sig-prename descclassname"><span class="pre">sys.</span></span><span class="sig-name descname"><span class="pre">getprofile</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p id="index-10">返回由 <a class="reference internal" href="#sys.setprofile" title="sys.setprofile"><code class="xref py py-func docutils literal notranslate"><span class="pre">setprofile()</span></code></a> 设置的性能分析函数。</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="sys.gettrace">
<span class="sig-prename descclassname"><span class="pre">sys.</span></span><span class="sig-name descname"><span class="pre">gettrace</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p id="index-11">返回由 <a class="reference internal" href="#sys.settrace" title="sys.settrace"><code class="xref py py-func docutils literal notranslate"><span class="pre">settrace()</span></code></a> 设置的跟踪函数。</p>
<div class="impl-detail compound">
<p><strong>CPython 实现细节：</strong> <a class="reference internal" href="#sys.gettrace" title="sys.gettrace"><code class="xref py py-func docutils literal notranslate"><span class="pre">gettrace()</span></code></a> 函数仅用于实现调试器，性能分析器，打包工具等。它的行为是实现平台的一部分，而不是语言定义的一部分，因此并非在所有 Python 实现中都可用。</p>
</div>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="sys.getwindowsversion">
<span class="sig-prename descclassname"><span class="pre">sys.</span></span><span class="sig-name descname"><span class="pre">getwindowsversion</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>返回一个具名元组，描述当前正在运行的 Windows 版本。元素名称包括 <em>major</em>, <em>minor</em>, <em>build</em>, <em>platform</em>, <em>service_pack</em>, <em>service_pack_minor</em>, <em>service_pack_major</em>, <em>suite_mask</em>, <em>product_type</em> 和 <em>platform_version</em>。<em>service_pack</em> 包含一个字符串，<em>platform_version</em> 包含一个三元组，其他所有值都是整数。元素也可以通过名称来访问，所以 <code class="docutils literal notranslate"><span class="pre">sys.getwindowsversion()[0]</span></code> 与 <code class="docutils literal notranslate"><span class="pre">sys.getwindowsversion().major</span></code> 是等效的。为保持与旧版本的兼容性，只有前 5 个元素可以用索引检索。</p>
<p><em>platform</em> 将为 <code class="docutils literal notranslate"><span class="pre">2</span></code> (VER_PLATFORM_WIN32_NT)。</p>
<p><em>product_type</em> 可能是以下值之一：</p>
<table class="docutils align-default">
<thead>
<tr class="row-odd"><th class="head"><p>常量</p></th>
<th class="head"><p>含意</p></th>
</tr>
</thead>
<tbody>
<tr class="row-even"><td><p><code class="docutils literal notranslate"><span class="pre">1</span></code> (VER_NT_WORKSTATION)</p></td>
<td><p>系统是工作站。</p></td>
</tr>
<tr class="row-odd"><td><p><code class="docutils literal notranslate"><span class="pre">2</span></code> (VER_NT_DOMAIN_CONTROLLER)</p></td>
<td><p>系统是域控制器。</p></td>
</tr>
<tr class="row-even"><td><p><code class="docutils literal notranslate"><span class="pre">3</span></code> (VER_NT_SERVER)</p></td>
<td><p>系统是服务器，但不是域控制器。</p></td>
</tr>
</tbody>
</table>
<p>该函数包装了 Win32 <code class="xref c c-func docutils literal notranslate"><span class="pre">GetVersionEx()</span></code> 函数；有关这些字段的更多信息请参阅 <code class="xref c c-func docutils literal notranslate"><span class="pre">OSVERSIONINFOEX()</span></code> 的 Microsoft 文档。</p>
<p><em>platform_version</em> 返回当前操作系统的主要版本、次要版本和编译版本号，而不是为该进程所模拟的版本。 它旨在用于日志记录而非特性检测。</p>
<div class="admonition note">
<p class="admonition-title">备注</p>
<p><em>platform_version</em> 会从 kernel32.dll 获取版本号，这个版本可能与 OS 版本不同。 请使用 <a class="reference internal" href="platform.xhtml#module-platform" title="platform: Retrieves as much platform identifying data as possible."><code class="xref py py-mod docutils literal notranslate"><span class="pre">platform</span></code></a> 模块来获取准确的 OS 版本号。</p>
</div>
<div class="availability docutils container">
<p><a class="reference internal" href="intro.xhtml#availability"><span class="std std-ref">可用性</span></a>: Windows。</p>
</div>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.2 版本发生变更: </span>更改为具名元组，添加 <em>service_pack_minor</em>, <em>service_pack_major</em>, <em>suite_mask</em> 和 <em>product_type</em>。</p>
</div>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.6 版本发生变更: </span>添加了 <em>platform_version</em></p>
</div>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="sys.get_asyncgen_hooks">
<span class="sig-prename descclassname"><span class="pre">sys.</span></span><span class="sig-name descname"><span class="pre">get_asyncgen_hooks</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>返回一个 <em>asyncgen_hooks</em> 对象，该对象类似于 <code class="docutils literal notranslate"><span class="pre">(firstiter,</span> <span class="pre">finalizer)</span></code> 形式的 <a class="reference internal" href="collections.xhtml#collections.namedtuple" title="collections.namedtuple"><code class="xref py py-class docutils literal notranslate"><span class="pre">namedtuple</span></code></a>，其中 <em>firstiter</em> 和 <em>finalizer</em> 应为 <code class="docutils literal notranslate"><span class="pre">None</span></code> 或是一个接受 <a class="reference internal" href="../glossary.xhtml#term-asynchronous-generator-iterator"><span class="xref std std-term">asynchronous generator iterator</span></a> 作为参数的函数，并被用来在事件循环中调度异步生成器的最终化。</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.6: </span>详情请参阅 <span class="target" id="index-78"></span><a class="pep reference external" href="https://peps.python.org/pep-0525/"><strong>PEP 525</strong></a><span class="link-target"> [https://peps.python.org/pep-0525/]</span>。</p>
</div>
<div class="admonition note">
<p class="admonition-title">备注</p>
<p>本函数已添加至暂定软件包（详情请参阅 <span class="target" id="index-79"></span><a class="pep reference external" href="https://peps.python.org/pep-0411/"><strong>PEP 411</strong></a><span class="link-target"> [https://peps.python.org/pep-0411/]</span> ）。</p>
</div>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="sys.get_coroutine_origin_tracking_depth">
<span class="sig-prename descclassname"><span class="pre">sys.</span></span><span class="sig-name descname"><span class="pre">get_coroutine_origin_tracking_depth</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>获取由 <a class="reference internal" href="#sys.set_coroutine_origin_tracking_depth" title="sys.set_coroutine_origin_tracking_depth"><code class="xref py py-func docutils literal notranslate"><span class="pre">set_coroutine_origin_tracking_depth()</span></code></a> 设置的协程来源的追踪深度。</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.7.</span></p>
</div>
<div class="admonition note">
<p class="admonition-title">备注</p>
<p>本函数已添加至暂定软件包（详情请参阅 <span class="target" id="index-80"></span><a class="pep reference external" href="https://peps.python.org/pep-0411/"><strong>PEP 411</strong></a><span class="link-target"> [https://peps.python.org/pep-0411/]</span> ）。仅将其用于调试目的。</p>
</div>
</dd></dl>

<dl class="py data">
<dt class="sig sig-object py" id="sys.hash_info">
<span class="sig-prename descclassname"><span class="pre">sys.</span></span><span class="sig-name descname"><span class="pre">hash_info</span></span></dt>
<dd><p>一个 <a class="reference internal" href="../glossary.xhtml#term-named-tuple"><span class="xref std std-term">具名元组</span></a>，给出数字类型的哈希的实现参数。关于数字类型的哈希的详情请参阅 <a class="reference internal" href="stdtypes.xhtml#numeric-hash"><span class="std std-ref">数字类型的哈希运算</span></a>。</p>
<dl class="py attribute">
<dt class="sig sig-object py" id="sys.hash_info.width">
<span class="sig-prename descclassname"><span class="pre">hash_info.</span></span><span class="sig-name descname"><span class="pre">width</span></span></dt>
<dd><p>用于哈希值的位宽度</p>
</dd></dl>

<dl class="py attribute">
<dt class="sig sig-object py" id="sys.hash_info.modulus">
<span class="sig-prename descclassname"><span class="pre">hash_info.</span></span><span class="sig-name descname"><span class="pre">modulus</span></span></dt>
<dd><p>用于数字哈案方案的质数模数 P</p>
</dd></dl>

<dl class="py attribute">
<dt class="sig sig-object py" id="sys.hash_info.inf">
<span class="sig-prename descclassname"><span class="pre">hash_info.</span></span><span class="sig-name descname"><span class="pre">inf</span></span></dt>
<dd><p>为正无穷大返回的哈希值</p>
</dd></dl>

<dl class="py attribute">
<dt class="sig sig-object py" id="sys.hash_info.nan">
<span class="sig-prename descclassname"><span class="pre">hash_info.</span></span><span class="sig-name descname"><span class="pre">nan</span></span></dt>
<dd><p>（该属性已不再被使用）</p>
</dd></dl>

<dl class="py attribute">
<dt class="sig sig-object py" id="sys.hash_info.imag">
<span class="sig-prename descclassname"><span class="pre">hash_info.</span></span><span class="sig-name descname"><span class="pre">imag</span></span></dt>
<dd><p>用于复数虚部的乘数</p>
</dd></dl>

<dl class="py attribute">
<dt class="sig sig-object py" id="sys.hash_info.algorithm">
<span class="sig-prename descclassname"><span class="pre">hash_info.</span></span><span class="sig-name descname"><span class="pre">algorithm</span></span></dt>
<dd><p>对字符串、字节串和内存视图进行哈希的算法名称</p>
</dd></dl>

<dl class="py attribute">
<dt class="sig sig-object py" id="sys.hash_info.hash_bits">
<span class="sig-prename descclassname"><span class="pre">hash_info.</span></span><span class="sig-name descname"><span class="pre">hash_bits</span></span></dt>
<dd><p>哈希算法的内部输出大小</p>
</dd></dl>

<dl class="py attribute">
<dt class="sig sig-object py" id="sys.hash_info.seed_bits">
<span class="sig-prename descclassname"><span class="pre">hash_info.</span></span><span class="sig-name descname"><span class="pre">seed_bits</span></span></dt>
<dd><p>哈希算法种子密钥的大小</p>
</dd></dl>

<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.2.</span></p>
</div>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.4 版本发生变更: </span>添加了 <em>algorithm</em>, <em>hash_bits</em> 和 <em>seed_bits</em></p>
</div>
</dd></dl>

<dl class="py data">
<dt class="sig sig-object py" id="sys.hexversion">
<span class="sig-prename descclassname"><span class="pre">sys.</span></span><span class="sig-name descname"><span class="pre">hexversion</span></span></dt>
<dd><p>编码为单个整数的版本号。该整数会确保每个版本都自增，其中适当包括了未发布版本。举例来说，要测试 Python 解释器的版本不低于 1.5.2，请使用:</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="k">if</span> <span class="n">sys</span><span class="o">.</span><span class="n">hexversion</span> <span class="o">&gt;=</span> <span class="mh">0x010502F0</span><span class="p">:</span>
    <span class="c1"># use some advanced feature</span>
    <span class="o">...</span>
<span class="k">else</span><span class="p">:</span>
    <span class="c1"># use an alternative implementation or warn the user</span>
    <span class="o">...</span>
</pre></div>
</div>
<p>之所以称它为 <code class="docutils literal notranslate"><span class="pre">hexversion</span></code>，是因为只有将它传入内置函数 <a class="reference internal" href="functions.xhtml#hex" title="hex"><code class="xref py py-func docutils literal notranslate"><span class="pre">hex()</span></code></a> 后，其结果才看起来有意义。也可以使用 <a class="reference internal" href="../glossary.xhtml#term-named-tuple"><span class="xref std std-term">具名元组</span></a> <a class="reference internal" href="#sys.version_info" title="sys.version_info"><code class="xref py py-data docutils literal notranslate"><span class="pre">sys.version_info</span></code></a>，它对相同信息有着更人性化的编码。</p>
<p>关于 <code class="docutils literal notranslate"><span class="pre">hexversion</span></code> 的更多信息可以在 <a class="reference internal" href="../c-api/apiabiversion.xhtml#apiabiversion"><span class="std std-ref">API 和 ABI 版本管理</span></a> 中找到。</p>
</dd></dl>

<dl class="py data">
<dt class="sig sig-object py" id="sys.implementation">
<span class="sig-prename descclassname"><span class="pre">sys.</span></span><span class="sig-name descname"><span class="pre">implementation</span></span></dt>
<dd><p>一个对象，该对象包含当前运行的 Python 解释器的实现信息。所有 Python 实现中都必须存在下列属性。</p>
<p><em>name</em> 是当前实现的标识符，如 <code class="docutils literal notranslate"><span class="pre">'cpython'</span></code>。实际的字符串由 Python 实现定义，但保证是小写字母。</p>
<p><em>version</em> 是一个具名元组，格式与 <a class="reference internal" href="#sys.version_info" title="sys.version_info"><code class="xref py py-data docutils literal notranslate"><span class="pre">sys.version_info</span></code></a> 相同。它表示 Python <em>实现</em> 的版本。 另一个（由 <code class="docutils literal notranslate"><span class="pre">sys.version_info</span></code> 表示）是当前解释器遵循的相应 Python <em>语言</em> 的版本，两者具有不同的含义。 例如，对于 PyPy 1.8，<code class="docutils literal notranslate"><span class="pre">sys.implementation.version</span></code> 可能是 <code class="docutils literal notranslate"><span class="pre">sys.version_info(1,</span> <span class="pre">8,</span> <span class="pre">0,</span> <span class="pre">'final',</span> <span class="pre">0)</span></code>，而 <code class="docutils literal notranslate"><span class="pre">sys.version_info</span></code> 则是 <code class="docutils literal notranslate"><span class="pre">sys.version_info(2,</span> <span class="pre">7,</span> <span class="pre">2,</span> <span class="pre">'final',</span> <span class="pre">0)</span></code>。对于 CPython 而言两个值是相同的，因为它是参考实现。</p>
<p><em>hexversion</em> 是十六进制的实现版本，类似于 <a class="reference internal" href="#sys.hexversion" title="sys.hexversion"><code class="xref py py-data docutils literal notranslate"><span class="pre">sys.hexversion</span></code></a>。</p>
<p><em>cache_tag</em> 是导入机制使用的标记，用于已缓存模块的文件名。按照惯例，它将由实现的名称和版本组成，如 <code class="docutils literal notranslate"><span class="pre">'cpython-33'</span></code>。但如果合适，Python 实现可以使用其他值。如果 <code class="docutils literal notranslate"><span class="pre">cache_tag</span></code> 被置为 <code class="docutils literal notranslate"><span class="pre">None</span></code>，表示模块缓存已禁用。</p>
<p><a class="reference internal" href="#sys.implementation" title="sys.implementation"><code class="xref py py-data docutils literal notranslate"><span class="pre">sys.implementation</span></code></a> 可能包含相应 Python 实现的其他属性。这些非标准属性必须以下划线开头，此处不详细阐述。无论其内容如何，<a class="reference internal" href="#sys.implementation" title="sys.implementation"><code class="xref py py-data docutils literal notranslate"><span class="pre">sys.implementation</span></code></a> 在解释器运行期间或不同实现版本之间都不会更改。（但是不同 Python 语言版本间可能会不同。）详情请参阅 <span class="target" id="index-81"></span><a class="pep reference external" href="https://peps.python.org/pep-0421/"><strong>PEP 421</strong></a><span class="link-target"> [https://peps.python.org/pep-0421/]</span>。</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.3.</span></p>
</div>
<div class="admonition note">
<p class="admonition-title">备注</p>
<p>新的必要属性的添加必须经过常规的 PEP 过程。详情请参阅 <span class="target" id="index-82"></span><a class="pep reference external" href="https://peps.python.org/pep-0421/"><strong>PEP 421</strong></a><span class="link-target"> [https://peps.python.org/pep-0421/]</span>。</p>
</div>
</dd></dl>

<dl class="py data">
<dt class="sig sig-object py" id="sys.int_info">
<span class="sig-prename descclassname"><span class="pre">sys.</span></span><span class="sig-name descname"><span class="pre">int_info</span></span></dt>
<dd><p>一个 <a class="reference internal" href="../glossary.xhtml#term-named-tuple"><span class="xref std std-term">具名元组</span></a>，包含 Python 内部整数表示形式的信息。这些属性是只读的。</p>
<dl class="py attribute">
<dt class="sig sig-object py" id="sys.int_info.bits_per_digit">
<span class="sig-prename descclassname"><span class="pre">int_info.</span></span><span class="sig-name descname"><span class="pre">bits_per_digit</span></span></dt>
<dd><p>每个数位占用的比特位数。 Python 整数在内部以 <code class="docutils literal notranslate"><span class="pre">2**int_info.bits_per_digit</span></code> 为基数存储。</p>
</dd></dl>

<dl class="py attribute">
<dt class="sig sig-object py" id="sys.int_info.sizeof_digit">
<span class="sig-prename descclassname"><span class="pre">int_info.</span></span><span class="sig-name descname"><span class="pre">sizeof_digit</span></span></dt>
<dd><p>用于表示一个数位的 C 类型的以字节为单位的大小。</p>
</dd></dl>

<dl class="py attribute">
<dt class="sig sig-object py" id="sys.int_info.default_max_str_digits">
<span class="sig-prename descclassname"><span class="pre">int_info.</span></span><span class="sig-name descname"><span class="pre">default_max_str_digits</span></span></dt>
<dd><p><a class="reference internal" href="#sys.get_int_max_str_digits" title="sys.get_int_max_str_digits"><code class="xref py py-func docutils literal notranslate"><span class="pre">sys.get_int_max_str_digits()</span></code></a> 在未被显式配置时所使用的默认值。</p>
</dd></dl>

<dl class="py attribute">
<dt class="sig sig-object py" id="sys.int_info.str_digits_check_threshold">
<span class="sig-prename descclassname"><span class="pre">int_info.</span></span><span class="sig-name descname"><span class="pre">str_digits_check_threshold</span></span></dt>
<dd><p><a class="reference internal" href="#sys.set_int_max_str_digits" title="sys.set_int_max_str_digits"><code class="xref py py-func docutils literal notranslate"><span class="pre">sys.set_int_max_str_digits()</span></code></a>, <span class="target" id="index-83"></span><a class="reference internal" href="../using/cmdline.xhtml#envvar-PYTHONINTMAXSTRDIGITS"><code class="xref std std-envvar docutils literal notranslate"><span class="pre">PYTHONINTMAXSTRDIGITS</span></code></a> 或 <a class="reference internal" href="../using/cmdline.xhtml#cmdoption-X"><code class="xref std std-option docutils literal notranslate"><span class="pre">-X</span> <span class="pre">int_max_str_digits</span></code></a> 的最小非零值。</p>
</dd></dl>

<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.1.</span></p>
</div>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.11 版本发生变更: </span>添加了 <a class="reference internal" href="#sys.int_info.default_max_str_digits" title="sys.int_info.default_max_str_digits"><code class="xref py py-attr docutils literal notranslate"><span class="pre">default_max_str_digits</span></code></a> 和 <a class="reference internal" href="#sys.int_info.str_digits_check_threshold" title="sys.int_info.str_digits_check_threshold"><code class="xref py py-attr docutils literal notranslate"><span class="pre">str_digits_check_threshold</span></code></a>。</p>
</div>
</dd></dl>

<dl class="py data">
<dt class="sig sig-object py" id="sys.__interactivehook__">
<span class="sig-prename descclassname"><span class="pre">sys.</span></span><span class="sig-name descname"><span class="pre">__interactivehook__</span></span></dt>
<dd><p>当本属性存在，则以 <a class="reference internal" href="../tutorial/interpreter.xhtml#tut-interactive"><span class="std std-ref">交互模式</span></a> 启动解释器时，将自动（不带参数地）调用本属性的值。该过程是在读取 <span class="target" id="index-84"></span><a class="reference internal" href="../using/cmdline.xhtml#envvar-PYTHONSTARTUP"><code class="xref std std-envvar docutils literal notranslate"><span class="pre">PYTHONSTARTUP</span></code></a> 文件之后完成的，所以可以在该文件中设置这一钩子。<a class="reference internal" href="site.xhtml#module-site" title="site: Module responsible for site-specific configuration."><code class="xref py py-mod docutils literal notranslate"><span class="pre">site</span></code></a> 模块 <a class="reference internal" href="site.xhtml#rlcompleter-config"><span class="std std-ref">设置了这一属性</span></a>。</p>
<p class="audit-hook">引发一个 <a class="reference internal" href="#auditing"><span class="std std-ref">审计事件</span></a> <code class="docutils literal notranslate"><span class="pre">cpython.run_interactivehook</span></code>，附带参数 <code class="docutils literal notranslate"><span class="pre">hook</span></code>。</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.4.</span></p>
</div>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="sys.intern">
<span class="sig-prename descclassname"><span class="pre">sys.</span></span><span class="sig-name descname"><span class="pre">intern</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">string</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>将 <em>string</em> 插入 &quot;interned&quot; （驻留）字符串表，返回被插入的字符串 -- 它是 <em>string</em> 本身或副本。驻留字符串对提高字典查找的性能很有用 -- 如果字典中的键已驻留，且所查找的键也已驻留，则键（取散列后）的比较可以用指针代替字符串来比较。通常，Python 程序使用到的名称会被自动驻留，且用于保存模块、类或实例属性的字典的键也已驻留。</p>
<p>Interned strings are not immortal; you must keep a reference to the return
value of <a class="reference internal" href="#sys.intern" title="sys.intern"><code class="xref py py-func docutils literal notranslate"><span class="pre">intern()</span></code></a> around to benefit from it.</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="sys.is_finalizing">
<span class="sig-prename descclassname"><span class="pre">sys.</span></span><span class="sig-name descname"><span class="pre">is_finalizing</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Return <a class="reference internal" href="constants.xhtml#True" title="True"><code class="xref py py-const docutils literal notranslate"><span class="pre">True</span></code></a> if the Python interpreter is
<a class="reference internal" href="../glossary.xhtml#term-interpreter-shutdown"><span class="xref std std-term">shutting down</span></a>, <a class="reference internal" href="constants.xhtml#False" title="False"><code class="xref py py-const docutils literal notranslate"><span class="pre">False</span></code></a> otherwise.</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.5.</span></p>
</div>
</dd></dl>

<dl class="py data">
<dt class="sig sig-object py" id="sys.last_exc">
<span class="sig-prename descclassname"><span class="pre">sys.</span></span><span class="sig-name descname"><span class="pre">last_exc</span></span></dt>
<dd><p>该变量并非总是会被定义；当有未处理的异常时它将被设为相应的异常实例并且解释器将打印异常消息和栈回溯。它的预期用途是允许交互用户导入调试器模块并进行事后调试而不必重新运行导致了错误的命令。 （典型用法是执行 <code class="docutils literal notranslate"><span class="pre">import</span> <span class="pre">pdb;</span> <span class="pre">pdb.pm()</span></code> 来进入事后调试器；请参阅 <a class="reference internal" href="pdb.xhtml#module-pdb" title="pdb: The Python debugger for interactive interpreters."><code class="xref py py-mod docutils literal notranslate"><span class="pre">pdb</span></code></a> 了解详情。）</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.12.</span></p>
</div>
</dd></dl>

<dl class="py data">
<dt class="sig sig-object py" id="sys.last_type">
<span class="sig-prename descclassname"><span class="pre">sys.</span></span><span class="sig-name descname"><span class="pre">last_type</span></span></dt>
<dt class="sig sig-object py" id="sys.last_value">
<span class="sig-prename descclassname"><span class="pre">sys.</span></span><span class="sig-name descname"><span class="pre">last_value</span></span></dt>
<dt class="sig sig-object py" id="sys.last_traceback">
<span class="sig-prename descclassname"><span class="pre">sys.</span></span><span class="sig-name descname"><span class="pre">last_traceback</span></span></dt>
<dd><p>这三个变量已被弃用；请改用 <a class="reference internal" href="#sys.last_exc" title="sys.last_exc"><code class="xref py py-data docutils literal notranslate"><span class="pre">sys.last_exc</span></code></a>。 它们将保存 <code class="docutils literal notranslate"><span class="pre">sys.last_exc</span></code> 的旧表示形式，如上面 <a class="reference internal" href="#sys.exc_info" title="sys.exc_info"><code class="xref py py-func docutils literal notranslate"><span class="pre">exc_info()</span></code></a> 所返回的。</p>
</dd></dl>

<dl class="py data">
<dt class="sig sig-object py" id="sys.maxsize">
<span class="sig-prename descclassname"><span class="pre">sys.</span></span><span class="sig-name descname"><span class="pre">maxsize</span></span></dt>
<dd><p>一个整数，表示 <a class="reference internal" href="../c-api/intro.xhtml#c.Py_ssize_t" title="Py_ssize_t"><code class="xref c c-type docutils literal notranslate"><span class="pre">Py_ssize_t</span></code></a> 类型的变量可以取到的最大值。在 32 位平台上通常为 <code class="docutils literal notranslate"><span class="pre">2**31</span> <span class="pre">-</span> <span class="pre">1</span></code>，在 64 位平台上通常为 <code class="docutils literal notranslate"><span class="pre">2**63</span> <span class="pre">-</span> <span class="pre">1</span></code>。</p>
</dd></dl>

<dl class="py data">
<dt class="sig sig-object py" id="sys.maxunicode">
<span class="sig-prename descclassname"><span class="pre">sys.</span></span><span class="sig-name descname"><span class="pre">maxunicode</span></span></dt>
<dd><p>一个整数，表示最大的 Unicode 码点值，如 <code class="docutils literal notranslate"><span class="pre">1114111</span></code> （十六进制为 <code class="docutils literal notranslate"><span class="pre">0x10FFFF</span></code> ）。</p>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.3 版本发生变更: </span>在 <span class="target" id="index-85"></span><a class="pep reference external" href="https://peps.python.org/pep-0393/"><strong>PEP 393</strong></a><span class="link-target"> [https://peps.python.org/pep-0393/]</span> 之前，<code class="docutils literal notranslate"><span class="pre">sys.maxunicode</span></code> 曾是 <code class="docutils literal notranslate"><span class="pre">0xFFFF</span></code> 或 <code class="docutils literal notranslate"><span class="pre">0x10FFFF</span></code>，具体取决于配置选项，该选项指定将 Unicode 字符存储为 UCS-2 还是 UCS-4。</p>
</div>
</dd></dl>

<dl class="py data">
<dt class="sig sig-object py" id="sys.meta_path">
<span class="sig-prename descclassname"><span class="pre">sys.</span></span><span class="sig-name descname"><span class="pre">meta_path</span></span></dt>
<dd><p>一个由 <a class="reference internal" href="../glossary.xhtml#term-meta-path-finder"><span class="xref std std-term">元路径查找器</span></a> 对象组成的列表，将会调用这些对象的 <a class="reference internal" href="importlib.xhtml#importlib.abc.MetaPathFinder.find_spec" title="importlib.abc.MetaPathFinder.find_spec"><code class="xref py py-meth docutils literal notranslate"><span class="pre">find_spec()</span></code></a> 方法来确定其中的某个对象能否找到要导入的模块。 在默认情况下，它将存放实现了 Python 默认导入语法的条目。 调用 <a class="reference internal" href="importlib.xhtml#importlib.abc.MetaPathFinder.find_spec" title="importlib.abc.MetaPathFinder.find_spec"><code class="xref py py-meth docutils literal notranslate"><span class="pre">find_spec()</span></code></a> 方法至少需要附带待导入模块的绝对名称。 如果待导入模块包含在一个包中，则父包的 <a class="reference internal" href="../reference/import.xhtml#path__" title="__path__"><code class="xref py py-attr docutils literal notranslate"><span class="pre">__path__</span></code></a> 属性将作为第二个参数被传入。 此方法将返回一个 <a class="reference internal" href="../glossary.xhtml#term-module-spec"><span class="xref std std-term">模块规格说明</span></a>，或者如果找不到模块则返回 <code class="docutils literal notranslate"><span class="pre">None</span></code>。</p>
<div class="admonition seealso">
<p class="admonition-title">参见</p>
<dl class="simple">
<dt><a class="reference internal" href="importlib.xhtml#importlib.abc.MetaPathFinder" title="importlib.abc.MetaPathFinder"><code class="xref py py-class docutils literal notranslate"><span class="pre">importlib.abc.MetaPathFinder</span></code></a></dt><dd><p>抽象基类，定义了 <a class="reference internal" href="#sys.meta_path" title="sys.meta_path"><code class="xref py py-data docutils literal notranslate"><span class="pre">meta_path</span></code></a> 内的查找器对象的接口。</p>
</dd>
<dt><a class="reference internal" href="importlib.xhtml#importlib.machinery.ModuleSpec" title="importlib.machinery.ModuleSpec"><code class="xref py py-class docutils literal notranslate"><span class="pre">importlib.machinery.ModuleSpec</span></code></a></dt><dd><p><a class="reference internal" href="importlib.xhtml#importlib.abc.MetaPathFinder.find_spec" title="importlib.abc.MetaPathFinder.find_spec"><code class="xref py py-meth docutils literal notranslate"><span class="pre">find_spec()</span></code></a> 返回的实例所对应的具体类。</p>
</dd>
</dl>
</div>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.4 版本发生变更: </span><a class="reference internal" href="../glossary.xhtml#term-module-spec"><span class="xref std std-term">模块规格说明</span></a> 是在 Python 3.4 中根据 <span class="target" id="index-86"></span><a class="pep reference external" href="https://peps.python.org/pep-0451/"><strong>PEP 451</strong></a><span class="link-target"> [https://peps.python.org/pep-0451/]</span> 引入的。</p>
</div>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.12 版本发生变更: </span>移除了当 <a class="reference internal" href="#sys.meta_path" title="sys.meta_path"><code class="xref py py-data docutils literal notranslate"><span class="pre">meta_path</span></code></a> 条目没有 <a class="reference internal" href="importlib.xhtml#importlib.abc.MetaPathFinder.find_spec" title="importlib.abc.MetaPathFinder.find_spec"><code class="xref py py-meth docutils literal notranslate"><span class="pre">find_spec()</span></code></a> 方法时查找 <code class="xref py py-meth docutils literal notranslate"><span class="pre">find_module()</span></code> 方法的回调。</p>
</div>
</dd></dl>

<dl class="py data">
<dt class="sig sig-object py" id="sys.modules">
<span class="sig-prename descclassname"><span class="pre">sys.</span></span><span class="sig-name descname"><span class="pre">modules</span></span></dt>
<dd><p>这是一个字典，它将模块名称映射到已经被加载的模块。 这可以被操纵来强制重新加载模块和其他技巧。然而，替换这个字典不一定会像预期的那样工作，从字典中删除重要的项目可能会导致 Python 出错。 如果你想对这个全局字典进行迭代，一定要使用 <code class="docutils literal notranslate"><span class="pre">sys.modules.copy()</span></code> 或 <code class="docutils literal notranslate"><span class="pre">tuple(sys.modules)</span></code> 来避免异常，因为它的大小在迭代过程中可能会因为其他线程中的代码或活动的副作用而改变。</p>
</dd></dl>

<dl class="py data">
<dt class="sig sig-object py" id="sys.orig_argv">
<span class="sig-prename descclassname"><span class="pre">sys.</span></span><span class="sig-name descname"><span class="pre">orig_argv</span></span></dt>
<dd><p>传给 Python 可执行文件的原始命令行参数列表。</p>
<p><a class="reference internal" href="#sys.orig_argv" title="sys.orig_argv"><code class="xref py py-data docutils literal notranslate"><span class="pre">sys.orig_argv</span></code></a> 中的元素是传给 Python 解释器的参数，而 <a class="reference internal" href="#sys.argv" title="sys.argv"><code class="xref py py-data docutils literal notranslate"><span class="pre">sys.argv</span></code></a> 中的元素则是传给用户程序的参数。 解释器本身所使用的参数将出现在 <a class="reference internal" href="#sys.orig_argv" title="sys.orig_argv"><code class="xref py py-data docutils literal notranslate"><span class="pre">sys.orig_argv</span></code></a> 中而不会出现在 <a class="reference internal" href="#sys.argv" title="sys.argv"><code class="xref py py-data docutils literal notranslate"><span class="pre">sys.argv</span></code></a> 中。</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.10.</span></p>
</div>
</dd></dl>

<dl class="py data">
<dt class="sig sig-object py" id="sys.path">
<span class="sig-prename descclassname"><span class="pre">sys.</span></span><span class="sig-name descname"><span class="pre">path</span></span></dt>
<dd><p id="index-21">一个由字符串组成的列表，用于指定模块的搜索路径。初始化自环境变量 <span class="target" id="index-87"></span><a class="reference internal" href="../using/cmdline.xhtml#envvar-PYTHONPATH"><code class="xref std std-envvar docutils literal notranslate"><span class="pre">PYTHONPATH</span></code></a>，再加上一条与安装有关的默认路径。</p>
<p>在默认情况下，如在程序启动时被初始化的时候，会有潜在的不安全路径被添加到 <a class="reference internal" href="#sys.path" title="sys.path"><code class="xref py py-data docutils literal notranslate"><span class="pre">sys.path</span></code></a> 的开头 (在作为的 <span class="target" id="index-88"></span><a class="reference internal" href="../using/cmdline.xhtml#envvar-PYTHONPATH"><code class="xref std std-envvar docutils literal notranslate"><span class="pre">PYTHONPATH</span></code></a> 结果被插入的条目 <em>之前</em> 位置):</p>
<ul class="simple">
<li><p><code class="docutils literal notranslate"><span class="pre">python</span> <span class="pre">-m</span> <span class="pre">module</span></code> 命令行：添加当前工作目录。</p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">python</span> <span class="pre">script.py</span></code> 命令行：添加脚本的目录。 如果是一个符号链接，则会解析符号链接。</p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">python</span> <span class="pre">-c</span> <span class="pre">code</span></code> 和 <code class="docutils literal notranslate"><span class="pre">python</span></code> (REPL) 命令行：添加一个空字符串，这表示当前工作目录。</p></li>
</ul>
<p>如果不想添加这个具有潜在不安全性的路径，请使用 <a class="reference internal" href="../using/cmdline.xhtml#cmdoption-P"><code class="xref std std-option docutils literal notranslate"><span class="pre">-P</span></code></a> 命令行选项或 <span class="target" id="index-89"></span><a class="reference internal" href="../using/cmdline.xhtml#envvar-PYTHONSAFEPATH"><code class="xref std std-envvar docutils literal notranslate"><span class="pre">PYTHONSAFEPATH</span></code></a> 环境变量。</p>
<p>程序可以出于自己的目的随意修改此列表。 应当只将字符串添加到 <a class="reference internal" href="#sys.path" title="sys.path"><code class="xref py py-data docutils literal notranslate"><span class="pre">sys.path</span></code></a> 中；所有其他数据类型都将在导入期间被忽略。</p>
<div class="admonition seealso">
<p class="admonition-title">参见</p>
<ul class="simple">
<li><p><a class="reference internal" href="site.xhtml#module-site" title="site: Module responsible for site-specific configuration."><code class="xref py py-mod docutils literal notranslate"><span class="pre">site</span></code></a> 模块，该模块描述了如何使用 .pth 文件来扩展 <a class="reference internal" href="#sys.path" title="sys.path"><code class="xref py py-data docutils literal notranslate"><span class="pre">sys.path</span></code></a>。</p></li>
</ul>
</div>
</dd></dl>

<dl class="py data">
<dt class="sig sig-object py" id="sys.path_hooks">
<span class="sig-prename descclassname"><span class="pre">sys.</span></span><span class="sig-name descname"><span class="pre">path_hooks</span></span></dt>
<dd><p>一个由可调用对象组成的列表，这些对象接受一个路径作为参数，并尝试为该路径创建一个 <a class="reference internal" href="../glossary.xhtml#term-finder"><span class="xref std std-term">查找器</span></a>。如果成功创建查找器，则可调用对象将返回它，否则将引发 <a class="reference internal" href="exceptions.xhtml#ImportError" title="ImportError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">ImportError</span></code></a> 异常。</p>
<p>本特性最早在 <span class="target" id="index-90"></span><a class="pep reference external" href="https://peps.python.org/pep-0302/"><strong>PEP 302</strong></a><span class="link-target"> [https://peps.python.org/pep-0302/]</span> 中被提及。</p>
</dd></dl>

<dl class="py data">
<dt class="sig sig-object py" id="sys.path_importer_cache">
<span class="sig-prename descclassname"><span class="pre">sys.</span></span><span class="sig-name descname"><span class="pre">path_importer_cache</span></span></dt>
<dd><p>一个字典，作为 <a class="reference internal" href="../glossary.xhtml#term-finder"><span class="xref std std-term">查找器</span></a> 对象的缓存。key 是传入 <a class="reference internal" href="#sys.path_hooks" title="sys.path_hooks"><code class="xref py py-data docutils literal notranslate"><span class="pre">sys.path_hooks</span></code></a> 的路径，value 是相应已找到的查找器。如果路径是有效的文件系统路径，但在 <a class="reference internal" href="#sys.path_hooks" title="sys.path_hooks"><code class="xref py py-data docutils literal notranslate"><span class="pre">sys.path_hooks</span></code></a> 中未找到查找器，则存入 <code class="docutils literal notranslate"><span class="pre">None</span></code>。</p>
<p>本特性最早在 <span class="target" id="index-91"></span><a class="pep reference external" href="https://peps.python.org/pep-0302/"><strong>PEP 302</strong></a><span class="link-target"> [https://peps.python.org/pep-0302/]</span> 中被提及。</p>
</dd></dl>

<dl class="py data">
<dt class="sig sig-object py" id="sys.platform">
<span class="sig-prename descclassname"><span class="pre">sys.</span></span><span class="sig-name descname"><span class="pre">platform</span></span></dt>
<dd><p>This string contains a platform identifier that can be used to append
platform-specific components to <a class="reference internal" href="#sys.path" title="sys.path"><code class="xref py py-data docutils literal notranslate"><span class="pre">sys.path</span></code></a>, for instance.</p>
<p>For Unix systems, except on Linux and AIX, this is the lowercased OS name as
returned by <code class="docutils literal notranslate"><span class="pre">uname</span> <span class="pre">-s</span></code> with the first part of the version as returned by
<code class="docutils literal notranslate"><span class="pre">uname</span> <span class="pre">-r</span></code> appended, e.g. <code class="docutils literal notranslate"><span class="pre">'sunos5'</span></code> or <code class="docutils literal notranslate"><span class="pre">'freebsd8'</span></code>, <em>at the time
when Python was built</em>.  Unless you want to test for a specific system
version, it is therefore recommended to use the following idiom:</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="k">if</span> <span class="n">sys</span><span class="o">.</span><span class="n">platform</span><span class="o">.</span><span class="n">startswith</span><span class="p">(</span><span class="s1">&#39;freebsd&#39;</span><span class="p">):</span>
    <span class="c1"># FreeBSD-specific code here...</span>
<span class="k">elif</span> <span class="n">sys</span><span class="o">.</span><span class="n">platform</span><span class="o">.</span><span class="n">startswith</span><span class="p">(</span><span class="s1">&#39;linux&#39;</span><span class="p">):</span>
    <span class="c1"># Linux-specific code here...</span>
<span class="k">elif</span> <span class="n">sys</span><span class="o">.</span><span class="n">platform</span><span class="o">.</span><span class="n">startswith</span><span class="p">(</span><span class="s1">&#39;aix&#39;</span><span class="p">):</span>
    <span class="c1"># AIX-specific code here...</span>
</pre></div>
</div>
<p>For other systems, the values are:</p>
<table class="docutils align-default">
<thead>
<tr class="row-odd"><th class="head"><p>系统</p></th>
<th class="head"><p><code class="docutils literal notranslate"><span class="pre">平台</span></code> 值</p></th>
</tr>
</thead>
<tbody>
<tr class="row-even"><td><p>AIX</p></td>
<td><p><code class="docutils literal notranslate"><span class="pre">'aix'</span></code></p></td>
</tr>
<tr class="row-odd"><td><p>Emscripten</p></td>
<td><p><code class="docutils literal notranslate"><span class="pre">'emscripten'</span></code></p></td>
</tr>
<tr class="row-even"><td><p>Linux</p></td>
<td><p><code class="docutils literal notranslate"><span class="pre">'linux'</span></code></p></td>
</tr>
<tr class="row-odd"><td><p>WASI</p></td>
<td><p><code class="docutils literal notranslate"><span class="pre">'wasi'</span></code></p></td>
</tr>
<tr class="row-even"><td><p>Windows</p></td>
<td><p><code class="docutils literal notranslate"><span class="pre">'win32'</span></code></p></td>
</tr>
<tr class="row-odd"><td><p>Windows/Cygwin</p></td>
<td><p><code class="docutils literal notranslate"><span class="pre">'cygwin'</span></code></p></td>
</tr>
<tr class="row-even"><td><p>macOS</p></td>
<td><p><code class="docutils literal notranslate"><span class="pre">'darwin'</span></code></p></td>
</tr>
</tbody>
</table>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.3 版本发生变更: </span>On Linux, <a class="reference internal" href="#sys.platform" title="sys.platform"><code class="xref py py-data docutils literal notranslate"><span class="pre">sys.platform</span></code></a> doesn't contain the major version anymore.
It is always <code class="docutils literal notranslate"><span class="pre">'linux'</span></code>, instead of <code class="docutils literal notranslate"><span class="pre">'linux2'</span></code> or <code class="docutils literal notranslate"><span class="pre">'linux3'</span></code>.  Since
older Python versions include the version number, it is recommended to
always use the <code class="docutils literal notranslate"><span class="pre">startswith</span></code> idiom presented above.</p>
</div>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.8 版本发生变更: </span>On AIX, <a class="reference internal" href="#sys.platform" title="sys.platform"><code class="xref py py-data docutils literal notranslate"><span class="pre">sys.platform</span></code></a> doesn't contain the major version anymore.
It is always <code class="docutils literal notranslate"><span class="pre">'aix'</span></code>, instead of <code class="docutils literal notranslate"><span class="pre">'aix5'</span></code> or <code class="docutils literal notranslate"><span class="pre">'aix7'</span></code>.  Since
older Python versions include the version number, it is recommended to
always use the <code class="docutils literal notranslate"><span class="pre">startswith</span></code> idiom presented above.</p>
</div>
<div class="admonition seealso">
<p class="admonition-title">参见</p>
<p><a class="reference internal" href="os.xhtml#os.name" title="os.name"><code class="xref py py-data docutils literal notranslate"><span class="pre">os.name</span></code></a> 具有更粗的粒度。 <a class="reference internal" href="os.xhtml#os.uname" title="os.uname"><code class="xref py py-func docutils literal notranslate"><span class="pre">os.uname()</span></code></a> 将给出依赖于具体系统的版本信息。</p>
<p><a class="reference internal" href="platform.xhtml#module-platform" title="platform: Retrieves as much platform identifying data as possible."><code class="xref py py-mod docutils literal notranslate"><span class="pre">platform</span></code></a> 模块对系统的标识有更详细的检查。</p>
</div>
</dd></dl>

<dl class="py data">
<dt class="sig sig-object py" id="sys.platlibdir">
<span class="sig-prename descclassname"><span class="pre">sys.</span></span><span class="sig-name descname"><span class="pre">platlibdir</span></span></dt>
<dd><p>平台专用库目录。用于构建标准库的路径和已安装扩展模块的路径。</p>
<p>在大多数平台上，它等同于 <code class="docutils literal notranslate"><span class="pre">&quot;lib&quot;</span></code> 。在 Fedora 和 SuSE 上，它等同于给出了以下 <code class="docutils literal notranslate"><span class="pre">sys.path</span></code> 路径的 64 位平台上的 <code class="docutils literal notranslate"><span class="pre">&quot;lib64&quot;</span></code> （其中 <code class="docutils literal notranslate"><span class="pre">X.Y</span></code> 是 Python 的 <code class="docutils literal notranslate"><span class="pre">major.minor</span></code> 版本）。</p>
<ul class="simple">
<li><p><code class="docutils literal notranslate"><span class="pre">/usr/lib64/pythonX.Y/</span></code>：标准库（如 <a class="reference internal" href="os.xhtml#module-os" title="os: Miscellaneous operating system interfaces."><code class="xref py py-mod docutils literal notranslate"><span class="pre">os</span></code></a> 模块的 <code class="docutils literal notranslate"><span class="pre">os.py</span></code> ）</p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">/usr/lib64/pythonX.Y/lib-dynload/</span></code>：标准库的 C 扩展模块（如 <a class="reference internal" href="errno.xhtml#module-errno" title="errno: Standard errno system symbols."><code class="xref py py-mod docutils literal notranslate"><span class="pre">errno</span></code></a> 模块，确切的文件名取决于平台）</p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">/usr/lib/pythonX.Y/site-packages/</span></code> (请使用 <code class="docutils literal notranslate"><span class="pre">lib</span></code>, 而非 <a class="reference internal" href="#sys.platlibdir" title="sys.platlibdir"><code class="xref py py-data docutils literal notranslate"><span class="pre">sys.platlibdir</span></code></a>): 第三方模块</p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">/usr/lib64/pythonX.Y/site-packages/</span></code>: 第三方包的 C 扩展模块</p></li>
</ul>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.9.</span></p>
</div>
</dd></dl>

<dl class="py data">
<dt class="sig sig-object py" id="sys.prefix">
<span class="sig-prename descclassname"><span class="pre">sys.</span></span><span class="sig-name descname"><span class="pre">prefix</span></span></dt>
<dd><p>一个指定用于安装与平台无关的 Python 文件的站点专属目录前缀的字符串；在 Unix 上，默认为 <code class="file docutils literal notranslate"><span class="pre">/usr/local</span></code>。 这可以在构建时通过将 <a class="reference internal" href="../using/configure.xhtml#cmdoption-prefix"><code class="xref std std-option docutils literal notranslate"><span class="pre">--prefix</span></code></a> 参数传入 <strong class="program">configure</strong> 脚本来设置。 请参阅 <a class="reference internal" href="sysconfig.xhtml#installation-paths"><span class="std std-ref">安装路径</span></a> 了解衍生的路径。</p>
<div class="admonition note">
<p class="admonition-title">备注</p>
<p>如果在一个 <a class="reference internal" href="venv.xhtml#venv-def"><span class="std std-ref">虚拟环境</span></a> 中，那么该值将在 <code class="docutils literal notranslate"><span class="pre">site.py</span></code> 中被修改，指向虚拟环境。Python 安装位置仍然可以用 <a class="reference internal" href="#sys.base_prefix" title="sys.base_prefix"><code class="xref py py-data docutils literal notranslate"><span class="pre">base_prefix</span></code></a> 来获取。</p>
</div>
</dd></dl>

<dl class="py data">
<dt class="sig sig-object py" id="sys.ps1">
<span class="sig-prename descclassname"><span class="pre">sys.</span></span><span class="sig-name descname"><span class="pre">ps1</span></span></dt>
<dt class="sig sig-object py" id="sys.ps2">
<span class="sig-prename descclassname"><span class="pre">sys.</span></span><span class="sig-name descname"><span class="pre">ps2</span></span></dt>
<dd><p id="index-27">字符串，指定解释器的首要和次要提示符。仅当解释器处于交互模式时，它们才有定义。这种情况下，它们的初值为 <code class="docutils literal notranslate"><span class="pre">'&gt;&gt;&gt;</span> <span class="pre">'</span></code> 和 <code class="docutils literal notranslate"><span class="pre">'...</span> <span class="pre">'</span></code>。如果赋给其中某个变量的是非字符串对象，则每次解释器准备读取新的交互式命令时，都会重新运行该对象的 <a class="reference internal" href="stdtypes.xhtml#str" title="str"><code class="xref py py-func docutils literal notranslate"><span class="pre">str()</span></code></a>，这可以用来实现动态的提示符。</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="sys.setdlopenflags">
<span class="sig-prename descclassname"><span class="pre">sys.</span></span><span class="sig-name descname"><span class="pre">setdlopenflags</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">n</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>设置解释器在调用 <code class="xref c c-func docutils literal notranslate"><span class="pre">dlopen()</span></code> 时使用的旗标，例如当解释器加载扩展模块的时候。 首先，如果以 <code class="docutils literal notranslate"><span class="pre">sys.setdlopenflags(0)</span></code> 的形式调用的话这将在导入模块时启用符号的惰性求值。 要在扩展模块之间共享符号，请以 <code class="docutils literal notranslate"><span class="pre">sys.setdlopenflags(os.RTLD_GLOBAL)</span></code> 的形式调用。 旗标志值的符号名称可以在 <a class="reference internal" href="os.xhtml#module-os" title="os: Miscellaneous operating system interfaces."><code class="xref py py-mod docutils literal notranslate"><span class="pre">os</span></code></a> 模块中找到 (<code class="samp docutils literal notranslate"><span class="pre">RTLD_</span><em><span class="pre">xxx</span></em></code> 常量，例如 <a class="reference internal" href="os.xhtml#os.RTLD_LAZY" title="os.RTLD_LAZY"><code class="xref py py-const docutils literal notranslate"><span class="pre">os.RTLD_LAZY</span></code></a>)。</p>
<div class="availability docutils container">
<p><a class="reference internal" href="intro.xhtml#availability"><span class="std std-ref">可用性</span></a>: Unix。</p>
</div>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="sys.set_int_max_str_digits">
<span class="sig-prename descclassname"><span class="pre">sys.</span></span><span class="sig-name descname"><span class="pre">set_int_max_str_digits</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">maxdigits</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>设置解释器所使用的 <a class="reference internal" href="stdtypes.xhtml#int-max-str-digits"><span class="std std-ref">整数字符串转换长度限制</span></a>。 另请参阅 <a class="reference internal" href="#sys.get_int_max_str_digits" title="sys.get_int_max_str_digits"><code class="xref py py-func docutils literal notranslate"><span class="pre">get_int_max_str_digits()</span></code></a>。</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.11.</span></p>
</div>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="sys.setprofile">
<span class="sig-prename descclassname"><span class="pre">sys.</span></span><span class="sig-name descname"><span class="pre">setprofile</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">profilefunc</span></span></em><span class="sig-paren">)</span></dt>
<dd><p id="index-28">设置系统的性能分析函数，该函数使得在 Py​​thon 中能够实现一个 Python 源代码性能分析器。关于 Python Profiler 的更多信息请参阅 <a class="reference internal" href="profile.xhtml#profile"><span class="std std-ref">Python 性能分析器</span></a> 章节。性能分析函数的调用方式类似于系统的跟踪函数（参阅 <a class="reference internal" href="#sys.settrace" title="sys.settrace"><code class="xref py py-func docutils literal notranslate"><span class="pre">settrace()</span></code></a> ），但它是通过不同的事件调用的，例如，不是每执行一行代码就调用它一次（仅在调用某函数和从某函数返回时才会调用性能分析函数，但即使某函数发生异常也会算作返回事件）。该函数是特定于单个线程的，但是性能分析器无法得知线程之间的上下文切换，因此在存在多个线程的情况下使用它是没有意义的。另外，因为它的返回值不会被用到，所以可以简单地返回 <code class="docutils literal notranslate"><span class="pre">None</span></code>。性能分析函数中的错误将导致其自身被解除设置。</p>
<div class="admonition note">
<p class="admonition-title">备注</p>
<p><code class="xref py py-func docutils literal notranslate"><span class="pre">setprofile()</span></code> 使用与 <a class="reference internal" href="#sys.settrace" title="sys.settrace"><code class="xref py py-func docutils literal notranslate"><span class="pre">settrace()</span></code></a> 相同的跟踪机制。 要在跟踪函数内部使用 <code class="xref py py-func docutils literal notranslate"><span class="pre">setprofile()</span></code> 来跟踪调用（例如在调试器断点内），请参阅 <a class="reference internal" href="#sys.call_tracing" title="sys.call_tracing"><code class="xref py py-func docutils literal notranslate"><span class="pre">call_tracing()</span></code></a>。</p>
</div>
<p>性能分析函数应接收三个参数：<em>frame</em>、<em>event</em> 和 <em>arg</em>。<em>frame</em> 是当前的堆栈帧。<em>event</em> 是一个字符串：<code class="docutils literal notranslate"><span class="pre">'call'</span></code>、<code class="docutils literal notranslate"><span class="pre">'return'</span></code>、<code class="docutils literal notranslate"><span class="pre">'c_call'</span></code>、<code class="docutils literal notranslate"><span class="pre">'c_return'</span></code> 或 <code class="docutils literal notranslate"><span class="pre">'c_exception'</span></code>。<em>arg</em> 取决于事件类型。</p>
<p>这些事件具有以下含义：</p>
<dl class="simple">
<dt><code class="docutils literal notranslate"><span class="pre">'call'</span></code></dt><dd><p>表示调用了某个函数（或进入了其他的代码块）。性能分析函数将被调用，<em>arg</em> 为 <code class="docutils literal notranslate"><span class="pre">None</span></code>。</p>
</dd>
<dt><code class="docutils literal notranslate"><span class="pre">'return'</span></code></dt><dd><p>表示某个函数（或别的代码块）即将返回。性能分析函数将被调用，<em>arg</em> 是即将返回的值，如果此次返回事件是由于抛出异常，<em>arg</em> 为 <code class="docutils literal notranslate"><span class="pre">None</span></code>。</p>
</dd>
<dt><code class="docutils literal notranslate"><span class="pre">'c_call'</span></code></dt><dd><p>表示即将调用某个 C 函数。它可能是扩展函数或是内建函数。<em>arg</em> 是 C 函数对象。</p>
</dd>
<dt><code class="docutils literal notranslate"><span class="pre">'c_return'</span></code></dt><dd><p>表示返回了某个 C 函数。<em>arg</em> 是 C 函数对象。</p>
</dd>
<dt><code class="docutils literal notranslate"><span class="pre">'c_exception'</span></code></dt><dd><p>表示某个 C 函数抛出了异常。<em>arg</em> 是 C 函数对象。</p>
</dd>
</dl>
<p class="audit-hook">引发一个 <a class="reference internal" href="#auditing"><span class="std std-ref">审计事件</span></a> <code class="docutils literal notranslate"><span class="pre">sys.setprofile</span></code>，不附带任何参数。</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="sys.setrecursionlimit">
<span class="sig-prename descclassname"><span class="pre">sys.</span></span><span class="sig-name descname"><span class="pre">setrecursionlimit</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">limit</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>将 Python 解释器堆栈的最大深度设置为 <em>limit</em>。此限制可防止无限递归导致的 C 堆栈溢出和 Python 崩溃。</p>
<p>不同平台所允许的最高限值不同。当用户有需要深度递归的程序且平台支持更高的限值，可能就需要调高限值。进行该操作需要谨慎，因为过高的限值可能会导致崩溃。</p>
<p>如果新的限值低于当前的递归深度，将抛出 <a class="reference internal" href="exceptions.xhtml#RecursionError" title="RecursionError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">RecursionError</span></code></a> 异常。</p>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.5.1 版本发生变更: </span>如果新的限值低于当前的递归深度，现在将抛出 <a class="reference internal" href="exceptions.xhtml#RecursionError" title="RecursionError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">RecursionError</span></code></a> 异常。</p>
</div>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="sys.setswitchinterval">
<span class="sig-prename descclassname"><span class="pre">sys.</span></span><span class="sig-name descname"><span class="pre">setswitchinterval</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">interval</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>设置解释器的线程切换间隔时间（单位为秒）。该浮点数决定了“时间片”的理想持续时间，时间片将分配给同时运行的 Python 线程。请注意，实际值可能更高，尤其是使用了运行时间长的内部函数或方法时。同时，在时间间隔末尾调度哪个线程是操作系统的决定。解释器没有自己的调度程序。</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.2.</span></p>
</div>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="sys.settrace">
<span class="sig-prename descclassname"><span class="pre">sys.</span></span><span class="sig-name descname"><span class="pre">settrace</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">tracefunc</span></span></em><span class="sig-paren">)</span></dt>
<dd><p id="index-29">设置系统的跟踪函数，使得用户在 Python 中就可以实现 Python 源代码调试器。该函数是特定于单个线程的，所以要让调试器支持多线程，必须为正在调试的每个线程都用 <a class="reference internal" href="#sys.settrace" title="sys.settrace"><code class="xref py py-func docutils literal notranslate"><span class="pre">settrace()</span></code></a> 注册一个跟踪函数，或使用 <a class="reference internal" href="threading.xhtml#threading.settrace" title="threading.settrace"><code class="xref py py-func docutils literal notranslate"><span class="pre">threading.settrace()</span></code></a>。</p>
<p>跟踪函数应接收三个参数：<em>frame</em>、<em>event</em> 和 <em>arg</em>。<em>frame</em> 是当前的堆栈帧。<em>event</em> 是一个字符串：<code class="docutils literal notranslate"><span class="pre">'call'</span></code>、<code class="docutils literal notranslate"><span class="pre">'line'</span></code>、<code class="docutils literal notranslate"><span class="pre">'return'</span></code>、<code class="docutils literal notranslate"><span class="pre">'exception'</span></code> 或 <code class="docutils literal notranslate"><span class="pre">'opcode'</span></code>。<em>arg</em> 取决于事件类型。</p>
<p>每次进入 trace 函数的新的局部作用范围，都会调用 trace 函数（ <em>event</em> 会被设置为 <code class="docutils literal notranslate"><span class="pre">'call'</span></code> ），它应该返回一个引用，指向即将用在新作用范围上的局部跟踪函数；如果不需要跟踪当前的作用范围，则返回 <code class="docutils literal notranslate"><span class="pre">None</span></code>。</p>
<p>本地跟踪函数应返回对自身的引用，或对另一个函数的引用然后将其用作本作用域的局部跟踪函数。</p>
<p>如果跟踪函数出错，则该跟踪函数将被取消设置，类似于调用 <code class="docutils literal notranslate"><span class="pre">settrace(None)</span></code>。</p>
<div class="admonition note">
<p class="admonition-title">备注</p>
<p>在调用跟踪函数（例如由 <code class="xref py py-func docutils literal notranslate"><span class="pre">settrace()</span></code> 设置的函数）时将禁用跟踪。 有关递归跟踪请参阅 <a class="reference internal" href="#sys.call_tracing" title="sys.call_tracing"><code class="xref py py-func docutils literal notranslate"><span class="pre">call_tracing()</span></code></a>。</p>
</div>
<p>这些事件具有以下含义：</p>
<dl class="simple">
<dt><code class="docutils literal notranslate"><span class="pre">'call'</span></code></dt><dd><p>表示调用了某个函数（或进入了其他的代码块）。全局跟踪函数将被调用，<em>arg</em> 为 <code class="docutils literal notranslate"><span class="pre">None</span></code>。返回值将指定局部跟踪函数。</p>
</dd>
<dt><code class="docutils literal notranslate"><span class="pre">'line'</span></code></dt><dd><p>解释器即将执行一个新的代码行或重新执行一个循环的条件。 局部跟踪函数将被调用；<em>arg</em> 为 <code class="docutils literal notranslate"><span class="pre">None</span></code>；其返回值将指定新的局部跟踪函数。 请参阅 <code class="file docutils literal notranslate"><span class="pre">Objects/lnotab_notes.txt</span></code> 查看有关其工作原理的详细说明。 可以通过在某个 <a class="reference internal" href="../reference/datamodel.xhtml#frame-objects"><span class="std std-ref">帧</span></a> 上把 <a class="reference internal" href="../reference/datamodel.xhtml#frame.f_trace_lines" title="frame.f_trace_lines"><code class="xref py py-attr docutils literal notranslate"><span class="pre">f_trace_lines</span></code></a> 设为 <a class="reference internal" href="constants.xhtml#False" title="False"><code class="xref py py-const docutils literal notranslate"><span class="pre">False</span></code></a> 来禁用相应帧的每行触发事件。</p>
</dd>
<dt><code class="docutils literal notranslate"><span class="pre">'return'</span></code></dt><dd><p>表示某个函数（或别的代码块）即将返回。局部跟踪函数将被调用，<em>arg</em> 是即将返回的值，如果此次返回事件是由于抛出异常，<em>arg</em> 为 <code class="docutils literal notranslate"><span class="pre">None</span></code>。跟踪函数的返回值将被忽略。</p>
</dd>
<dt><code class="docutils literal notranslate"><span class="pre">'exception'</span></code></dt><dd><p>表示发生了某个异常。局部跟踪函数将被调用，<em>arg</em> 是一个 <code class="docutils literal notranslate"><span class="pre">(exception,</span> <span class="pre">value,</span> <span class="pre">traceback)</span></code> 元组，返回值将指定新的局部跟踪函数。</p>
</dd>
<dt><code class="docutils literal notranslate"><span class="pre">'opcode'</span></code></dt><dd><p>解释器即将执行一个新的操作码（请参阅 <a class="reference internal" href="dis.xhtml#module-dis" title="dis: Disassembler for Python bytecode."><code class="xref py py-mod docutils literal notranslate"><span class="pre">dis</span></code></a> 了解有关操作码的详情）。 局部跟踪函数将被调用；<em>arg</em> 为 <code class="docutils literal notranslate"><span class="pre">None</span></code>；共返回值将指定新的局部跟踪函数。 在默认情况下不会发出每个操作码触发事件：必须通过在某个 <a class="reference internal" href="../reference/datamodel.xhtml#frame-objects"><span class="std std-ref">帧</span></a> 上把 <a class="reference internal" href="../reference/datamodel.xhtml#frame.f_trace_opcodes" title="frame.f_trace_opcodes"><code class="xref py py-attr docutils literal notranslate"><span class="pre">f_trace_opcodes</span></code></a> 设为 <a class="reference internal" href="constants.xhtml#True" title="True"><code class="xref py py-const docutils literal notranslate"><span class="pre">True</span></code></a> 来显式地发出请求。</p>
</dd>
</dl>
<p>注意，由于异常是在链式调用中传播的，所以每一级都会产生一个 <code class="docutils literal notranslate"><span class="pre">'exception'</span></code> 事件。</p>
<p>更细微的用法是，可以显式地通过赋值 <code class="docutils literal notranslate"><span class="pre">frame.f_trace</span> <span class="pre">=</span> <span class="pre">tracefunc</span></code> 来设置跟踪函数，而不是用现有跟踪函数的返回值去间接设置它。当前帧上的跟踪函数必须激活，而 <a class="reference internal" href="#sys.settrace" title="sys.settrace"><code class="xref py py-func docutils literal notranslate"><span class="pre">settrace()</span></code></a> 还没有做这件事。注意，为了使上述设置起效，必须使用 <a class="reference internal" href="#sys.settrace" title="sys.settrace"><code class="xref py py-func docutils literal notranslate"><span class="pre">settrace()</span></code></a> 来安装全局跟踪函数才能启用运行时跟踪机制，但是它不必与上述是同一个跟踪函数（它可以是一个开销很低的跟踪函数，只返回 <code class="docutils literal notranslate"><span class="pre">None</span></code>，即在各个帧上立即将其自身禁用）。</p>
<p>关于代码对象和帧对象的更多信息请参考 <a class="reference internal" href="../reference/datamodel.xhtml#types"><span class="std std-ref">标准类型层级结构</span></a>。</p>
<p class="audit-hook">引发一个 <a class="reference internal" href="#auditing"><span class="std std-ref">审计事件</span></a> <code class="docutils literal notranslate"><span class="pre">sys.settrace</span></code>，不附带任何参数。</p>
<div class="impl-detail compound">
<p><strong>CPython 实现细节：</strong> <a class="reference internal" href="#sys.settrace" title="sys.settrace"><code class="xref py py-func docutils literal notranslate"><span class="pre">settrace()</span></code></a> 函数仅用于实现调试器，性能分析器，打包工具等。它的行为是实现平台的一部分，而不是语言定义的一部分，因此并非在所有 Python 实现中都可用。</p>
</div>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.7 版本发生变更: </span>添加了 <code class="docutils literal notranslate"><span class="pre">'opcode'</span></code> 事件类型；为帧添加了 <a class="reference internal" href="../reference/datamodel.xhtml#frame.f_trace_lines" title="frame.f_trace_lines"><code class="xref py py-attr docutils literal notranslate"><span class="pre">f_trace_lines</span></code></a> 和 <a class="reference internal" href="../reference/datamodel.xhtml#frame.f_trace_opcodes" title="frame.f_trace_opcodes"><code class="xref py py-attr docutils literal notranslate"><span class="pre">f_trace_opcodes</span></code></a> 属性</p>
</div>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.12 版本发生变更: </span><code class="docutils literal notranslate"><span class="pre">'opcode'</span></code> event will only be emitted if <a class="reference internal" href="../reference/datamodel.xhtml#frame.f_trace_opcodes" title="frame.f_trace_opcodes"><code class="xref py py-attr docutils literal notranslate"><span class="pre">f_trace_opcodes</span></code></a>
of at least one frame has been set to <a class="reference internal" href="constants.xhtml#True" title="True"><code class="xref py py-const docutils literal notranslate"><span class="pre">True</span></code></a> before <a class="reference internal" href="#sys.settrace" title="sys.settrace"><code class="xref py py-func docutils literal notranslate"><span class="pre">settrace()</span></code></a>
is called. This behavior will be changed back in 3.13 to be consistent with
previous versions.</p>
</div>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="sys.set_asyncgen_hooks">
<span class="sig-prename descclassname"><span class="pre">sys.</span></span><span class="sig-name descname"><span class="pre">set_asyncgen_hooks</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="pre">[firstiter]</span> <span class="pre">[,</span> <span class="pre">finalizer]</span></em><span class="sig-paren">)</span></dt>
<dd><p>接受两个可选的关键字参数，要求它们是可调用对象，且接受一个 <a class="reference internal" href="../glossary.xhtml#term-asynchronous-generator-iterator"><span class="xref std std-term">异步生成器迭代器</span></a> 作为参数。<em>firstiter</em> 对象将在异步生成器第一次迭代时调用。<em>finalizer</em> 将在异步生成器即将被销毁时调用。</p>
<p class="audit-hook">引发一个 <a class="reference internal" href="#auditing"><span class="std std-ref">审计事件</span></a> <code class="docutils literal notranslate"><span class="pre">sys.set_asyncgen_hooks_firstiter</span></code>，不附带任何参数。</p>
<p class="audit-hook">引发一个 <a class="reference internal" href="#auditing"><span class="std std-ref">审计事件</span></a> <code class="docutils literal notranslate"><span class="pre">sys.set_asyncgen_hooks_finalizer</span></code>，不附带任何参数。</p>
<p>之所以会引发两个审计事件，是因为底层的 API 由两个调用组成，每个调用都须要引发自己的事件。</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.6: </span>更多详情请参阅 <span class="target" id="index-92"></span><a class="pep reference external" href="https://peps.python.org/pep-0525/"><strong>PEP 525</strong></a><span class="link-target"> [https://peps.python.org/pep-0525/]</span>，<em>finalizer</em> 方法的参考示例可参阅 <a class="reference external" href="https://github.com/python/cpython/tree/3.12/Lib/asyncio/base_events.py">Lib/asyncio/base_events.py</a><span class="link-target"> [https://github.com/python/cpython/tree/3.12/Lib/asyncio/base_events.py]</span> 中 <code class="docutils literal notranslate"><span class="pre">asyncio.Loop.shutdown_asyncgens</span></code> 的实现。</p>
</div>
<div class="admonition note">
<p class="admonition-title">备注</p>
<p>本函数已添加至暂定软件包（详情请参阅 <span class="target" id="index-93"></span><a class="pep reference external" href="https://peps.python.org/pep-0411/"><strong>PEP 411</strong></a><span class="link-target"> [https://peps.python.org/pep-0411/]</span> ）。</p>
</div>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="sys.set_coroutine_origin_tracking_depth">
<span class="sig-prename descclassname"><span class="pre">sys.</span></span><span class="sig-name descname"><span class="pre">set_coroutine_origin_tracking_depth</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">depth</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Allows enabling or disabling coroutine origin tracking. When
enabled, the <code class="docutils literal notranslate"><span class="pre">cr_origin</span></code> attribute on coroutine objects will
contain a tuple of (filename, line number, function name) tuples
describing the traceback where the coroutine object was created,
with the most recent call first. When disabled, <code class="docutils literal notranslate"><span class="pre">cr_origin</span></code> will
be <code class="docutils literal notranslate"><span class="pre">None</span></code>.</p>
<p>要启用，请向 <em>depth</em> 传递一个大于零的值，它指定了有多少帧将被捕获信息。要禁用，请将 <em>depth</em> 置为零。</p>
<p>该设置是特定于单个线程的。</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.7.</span></p>
</div>
<div class="admonition note">
<p class="admonition-title">备注</p>
<p>本函数已添加至暂定软件包（详情请参阅 <span class="target" id="index-94"></span><a class="pep reference external" href="https://peps.python.org/pep-0411/"><strong>PEP 411</strong></a><span class="link-target"> [https://peps.python.org/pep-0411/]</span> ）。仅将其用于调试目的。</p>
</div>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="sys.activate_stack_trampoline">
<span class="sig-prename descclassname"><span class="pre">sys.</span></span><span class="sig-name descname"><span class="pre">activate_stack_trampoline</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">backend</span></span></em>, <em class="sig-param"><span class="o"><span class="pre">/</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>激活栈性能分析器 trampoline <em>backend</em>。 唯一受支持的后端是 <code class="docutils literal notranslate"><span class="pre">&quot;perf&quot;</span></code>。</p>
<div class="availability docutils container">
<p><a class="reference internal" href="intro.xhtml#availability"><span class="std std-ref">可用性</span></a>: Linux。</p>
</div>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.12.</span></p>
</div>
<div class="admonition seealso">
<p class="admonition-title">参见</p>
<ul class="simple">
<li><p><a class="reference internal" href="../howto/perf_profiling.xhtml#perf-profiling"><span class="std std-ref">Python 对 Linux perf 性能分析器的支持</span></a></p></li>
<li><p><a class="reference external" href="https://perf.wiki.kernel.org">https://perf.wiki.kernel.org</a></p></li>
</ul>
</div>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="sys.deactivate_stack_trampoline">
<span class="sig-prename descclassname"><span class="pre">sys.</span></span><span class="sig-name descname"><span class="pre">deactivate_stack_trampoline</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>取消激活当前的栈性能分析器 trampoline 后端。</p>
<p>如果没有激活的栈性能分析器，此函数将没有任何效果。</p>
<div class="availability docutils container">
<p><a class="reference internal" href="intro.xhtml#availability"><span class="std std-ref">可用性</span></a>: Linux。</p>
</div>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.12.</span></p>
</div>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="sys.is_stack_trampoline_active">
<span class="sig-prename descclassname"><span class="pre">sys.</span></span><span class="sig-name descname"><span class="pre">is_stack_trampoline_active</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>如果激活了栈性能分析器 trampoline 则返回 <code class="docutils literal notranslate"><span class="pre">True</span></code>。</p>
<div class="availability docutils container">
<p><a class="reference internal" href="intro.xhtml#availability"><span class="std std-ref">可用性</span></a>: Linux。</p>
</div>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.12.</span></p>
</div>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="sys._enablelegacywindowsfsencoding">
<span class="sig-prename descclassname"><span class="pre">sys.</span></span><span class="sig-name descname"><span class="pre">_enablelegacywindowsfsencoding</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>将 <a class="reference internal" href="../glossary.xhtml#term-filesystem-encoding-and-error-handler"><span class="xref std std-term">filesystem encoding and error handler</span></a> 分别修改为 'mbcs' 和 'replace'，以便与 3.6 之前版本的 Python 保持一致。</p>
<p>这等同于在启动 Python 前先定义好 <span class="target" id="index-95"></span><a class="reference internal" href="../using/cmdline.xhtml#envvar-PYTHONLEGACYWINDOWSFSENCODING"><code class="xref std std-envvar docutils literal notranslate"><span class="pre">PYTHONLEGACYWINDOWSFSENCODING</span></code></a> 环境变量。</p>
<p>另请参阅 <a class="reference internal" href="#sys.getfilesystemencoding" title="sys.getfilesystemencoding"><code class="xref py py-func docutils literal notranslate"><span class="pre">sys.getfilesystemencoding()</span></code></a> 和 <a class="reference internal" href="#sys.getfilesystemencodeerrors" title="sys.getfilesystemencodeerrors"><code class="xref py py-func docutils literal notranslate"><span class="pre">sys.getfilesystemencodeerrors()</span></code></a>。</p>
<div class="availability docutils container">
<p><a class="reference internal" href="intro.xhtml#availability"><span class="std std-ref">可用性</span></a>: Windows。</p>
</div>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.6: </span>更多详情请参阅 <span class="target" id="index-96"></span><a class="pep reference external" href="https://peps.python.org/pep-0529/"><strong>PEP 529</strong></a><span class="link-target"> [https://peps.python.org/pep-0529/]</span>。</p>
</div>
</dd></dl>

<dl class="py data">
<dt class="sig sig-object py" id="sys.stdin">
<span class="sig-prename descclassname"><span class="pre">sys.</span></span><span class="sig-name descname"><span class="pre">stdin</span></span></dt>
<dt class="sig sig-object py" id="sys.stdout">
<span class="sig-prename descclassname"><span class="pre">sys.</span></span><span class="sig-name descname"><span class="pre">stdout</span></span></dt>
<dt class="sig sig-object py" id="sys.stderr">
<span class="sig-prename descclassname"><span class="pre">sys.</span></span><span class="sig-name descname"><span class="pre">stderr</span></span></dt>
<dd><p>解释器用于标准输入、标准输出和标准错误的 <a class="reference internal" href="../glossary.xhtml#term-file-object"><span class="xref std std-term">文件对象</span></a>：</p>
<ul class="simple">
<li><p><code class="docutils literal notranslate"><span class="pre">stdin</span></code> 用于所有交互式输入（包括对 <a class="reference internal" href="functions.xhtml#input" title="input"><code class="xref py py-func docutils literal notranslate"><span class="pre">input()</span></code></a> 的调用）；</p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">stdout</span></code> 用于 <a class="reference internal" href="functions.xhtml#print" title="print"><code class="xref py py-func docutils literal notranslate"><span class="pre">print()</span></code></a> 和 <a class="reference internal" href="../glossary.xhtml#term-expression"><span class="xref std std-term">expression</span></a> 语句的输出，以及用于 <a class="reference internal" href="functions.xhtml#input" title="input"><code class="xref py py-func docutils literal notranslate"><span class="pre">input()</span></code></a> 的提示符；</p></li>
<li><p>解释器自身的提示符和它的错误消息都发往 <code class="docutils literal notranslate"><span class="pre">stderr</span></code>。</p></li>
</ul>
<p>这些流都是常规 <a class="reference internal" href="../glossary.xhtml#term-text-file"><span class="xref std std-term">文本文件</span></a>，与 <a class="reference internal" href="functions.xhtml#open" title="open"><code class="xref py py-func docutils literal notranslate"><span class="pre">open()</span></code></a> 函数返回的对象一致。它们的参数选择如下：</p>
<ul>
<li><p>编码格式和错误处理器是由 <a class="reference internal" href="../c-api/init_config.xhtml#c.PyConfig.stdio_encoding" title="PyConfig.stdio_encoding"><code class="xref c c-member docutils literal notranslate"><span class="pre">PyConfig.stdio_encoding</span></code></a> 和 <a class="reference internal" href="../c-api/init_config.xhtml#c.PyConfig.stdio_errors" title="PyConfig.stdio_errors"><code class="xref c c-member docutils literal notranslate"><span class="pre">PyConfig.stdio_errors</span></code></a> 来初始化的。</p>
<p>在 Windows 上，控制台设备使用 UTF-8。 非字符设备如磁盘文件和管道使用系统语言区域编码格式（例如 ANSI 代码页）。 非控制台字符设备如 NUL（例如当 <code class="docutils literal notranslate"><span class="pre">isatty()</span></code> 返回 <code class="docutils literal notranslate"><span class="pre">True</span></code> 时）会在启动时分别让 stdin 和 stdout/stderr 使用控制台输入和输出代码页。 如果进程初始化时没有被附加到控制台则会使用默认的系统 <a class="reference internal" href="../glossary.xhtml#term-locale-encoding"><span class="xref std std-term">locale encoding</span></a>。</p>
<p>要重写控制台的特殊行为，可以在启动 Python 前设置 PYTHONLEGACYWINDOWSSTDIO 环境变量。此时，控制台代码页将用于其他字符设备。</p>
<p>在所有平台上，都可以通过在 Python 启动前设置 <span class="target" id="index-97"></span><a class="reference internal" href="../using/cmdline.xhtml#envvar-PYTHONIOENCODING"><code class="xref std std-envvar docutils literal notranslate"><span class="pre">PYTHONIOENCODING</span></code></a> 环境变量来重写字符编码，或通过新的 <a class="reference internal" href="../using/cmdline.xhtml#cmdoption-X"><code class="xref std std-option docutils literal notranslate"><span class="pre">-X</span></code></a> <code class="docutils literal notranslate"><span class="pre">utf8</span></code> 命令行选项和 <span class="target" id="index-98"></span><a class="reference internal" href="../using/cmdline.xhtml#envvar-PYTHONUTF8"><code class="xref std std-envvar docutils literal notranslate"><span class="pre">PYTHONUTF8</span></code></a> 环境变量来设置。但是，对 Windows 控制台来说，上述方法仅在设置了 <span class="target" id="index-99"></span><a class="reference internal" href="../using/cmdline.xhtml#envvar-PYTHONLEGACYWINDOWSSTDIO"><code class="xref std std-envvar docutils literal notranslate"><span class="pre">PYTHONLEGACYWINDOWSSTDIO</span></code></a> 后才起效。</p>
</li>
<li><p>交互模式下，<code class="docutils literal notranslate"><span class="pre">stdout</span></code> 流是行缓冲的。其他情况下，它像常规文本文件一样是块缓冲的。两种情况下的 <code class="docutils literal notranslate"><span class="pre">stderr</span></code> 流都是行缓冲的。要使得两个流都变成无缓冲，可以传入 <a class="reference internal" href="../using/cmdline.xhtml#cmdoption-u"><code class="xref std std-option docutils literal notranslate"><span class="pre">-u</span></code></a> 命令行选项或设置 <span class="target" id="index-100"></span><a class="reference internal" href="../using/cmdline.xhtml#envvar-PYTHONUNBUFFERED"><code class="xref std std-envvar docutils literal notranslate"><span class="pre">PYTHONUNBUFFERED</span></code></a> 环境变量。</p></li>
</ul>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.9 版本发生变更: </span>非交互模式下，<code class="docutils literal notranslate"><span class="pre">stderr</span></code> 现在是行缓冲的，而不是全缓冲的。</p>
</div>
<div class="admonition note">
<p class="admonition-title">备注</p>
<p>要从标准流写入或读取二进制数据，请使用底层二进制 <a class="reference internal" href="io.xhtml#io.TextIOBase.buffer" title="io.TextIOBase.buffer"><code class="xref py py-data docutils literal notranslate"><span class="pre">buffer</span></code></a> 对象。例如，要将字节写入 <a class="reference internal" href="#sys.stdout" title="sys.stdout"><code class="xref py py-data docutils literal notranslate"><span class="pre">stdout</span></code></a>，请使用 <code class="docutils literal notranslate"><span class="pre">sys.stdout.buffer.write(b'abc')</span></code>。</p>
<p>但是，如果你正在编写一个库（并且不能控制其代码执行所在的上下文），请注意标准流可能会被不支持 <code class="xref py py-attr docutils literal notranslate"><span class="pre">buffer</span></code> 属性的文件型对象如 <a class="reference internal" href="io.xhtml#io.StringIO" title="io.StringIO"><code class="xref py py-class docutils literal notranslate"><span class="pre">io.StringIO</span></code></a> 所取代。</p>
</div>
</dd></dl>

<dl class="py data">
<dt class="sig sig-object py" id="sys.__stdin__">
<span class="sig-prename descclassname"><span class="pre">sys.</span></span><span class="sig-name descname"><span class="pre">__stdin__</span></span></dt>
<dt class="sig sig-object py" id="sys.__stdout__">
<span class="sig-prename descclassname"><span class="pre">sys.</span></span><span class="sig-name descname"><span class="pre">__stdout__</span></span></dt>
<dt class="sig sig-object py" id="sys.__stderr__">
<span class="sig-prename descclassname"><span class="pre">sys.</span></span><span class="sig-name descname"><span class="pre">__stderr__</span></span></dt>
<dd><p>程序开始时，这些对象存有 <code class="docutils literal notranslate"><span class="pre">stdin</span></code>、<code class="docutils literal notranslate"><span class="pre">stderr</span></code> 和 <code class="docutils literal notranslate"><span class="pre">stdout</span></code> 的初始值。它们在程序结束前都可以使用，且在需要向实际的标准流打印内容时很有用，无论 <code class="docutils literal notranslate"><span class="pre">sys.std*</span></code> 对象是否已重定向。</p>
<p>如果实际文件已经被覆盖成一个损坏的对象了，那它也可用于将实际文件还原成能正常工作的文件对象。但是，本过程的最佳方法应该是，在原来的流被替换之前就显式地保存它，并使用这一保存的对象来还原。</p>
<div class="admonition note">
<p class="admonition-title">备注</p>
<p>某些情况下的 <code class="docutils literal notranslate"><span class="pre">stdin</span></code>、<code class="docutils literal notranslate"><span class="pre">stdout</span></code> 和 <code class="docutils literal notranslate"><span class="pre">stderr</span></code> 以及初始值 <code class="docutils literal notranslate"><span class="pre">__stdin__</span></code>、<code class="docutils literal notranslate"><span class="pre">__stdout__</span></code> 和 <code class="docutils literal notranslate"><span class="pre">__stderr__</span></code> 可以是 <code class="docutils literal notranslate"><span class="pre">None</span></code>。通常发生在未连接到控制台的 Windows GUI app 中，以及在用 <strong class="program">pythonw</strong> 启动的 Python app 中。</p>
</div>
</dd></dl>

<dl class="py data">
<dt class="sig sig-object py" id="sys.stdlib_module_names">
<span class="sig-prename descclassname"><span class="pre">sys.</span></span><span class="sig-name descname"><span class="pre">stdlib_module_names</span></span></dt>
<dd><p>一个包含标准库模组名称字符串的冻结集合。</p>
<p>它在所有平台上都保持一致。 在某些平台上不可用的模块和在 Python 编译时被禁用的模块也会被列出。 所有种类的模块都会被列出：纯 Python 模块、内置模块、冻结模块和扩展模块等。  测试模块则会被排除掉。</p>
<p>对于包来说，仅会列出主包：子包和子模块不会被列出。 例如，<code class="docutils literal notranslate"><span class="pre">email</span></code> 包会被列出，但 <code class="docutils literal notranslate"><span class="pre">email.mime</span></code> 子包和 <code class="docutils literal notranslate"><span class="pre">email.message</span></code> 子模块不会被列出。</p>
<p>另请参阅 <a class="reference internal" href="#sys.builtin_module_names" title="sys.builtin_module_names"><code class="xref py py-data docutils literal notranslate"><span class="pre">sys.builtin_module_names</span></code></a> 列表。</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.10.</span></p>
</div>
</dd></dl>

<dl class="py data">
<dt class="sig sig-object py" id="sys.thread_info">
<span class="sig-prename descclassname"><span class="pre">sys.</span></span><span class="sig-name descname"><span class="pre">thread_info</span></span></dt>
<dd><p>一个 <a class="reference internal" href="../glossary.xhtml#term-named-tuple"><span class="xref std std-term">具名元组</span></a>，包含线程实现的信息。</p>
<dl class="py attribute">
<dt class="sig sig-object py" id="sys.thread_info.name">
<span class="sig-prename descclassname"><span class="pre">thread_info.</span></span><span class="sig-name descname"><span class="pre">name</span></span></dt>
<dd><p>线程实现的名称：</p>
<ul class="simple">
<li><p><code class="docutils literal notranslate"><span class="pre">&quot;nt&quot;</span></code>: Windows 线程</p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">&quot;pthread&quot;</span></code>: POSIX 线程</p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">&quot;pthread-stubs&quot;</span></code>: 转存 POSIX 线程（在不支持线程的 WebAssembly 平台上）</p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">&quot;solaris&quot;</span></code>: Solaris 线程</p></li>
</ul>
</dd></dl>

<dl class="py attribute">
<dt class="sig sig-object py" id="sys.thread_info.lock">
<span class="sig-prename descclassname"><span class="pre">thread_info.</span></span><span class="sig-name descname"><span class="pre">lock</span></span></dt>
<dd><p>锁实现的名称：</p>
<ul class="simple">
<li><p><code class="docutils literal notranslate"><span class="pre">&quot;semaphore&quot;</span></code>: 锁使用一个寄存器</p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">&quot;mutex+cond&quot;</span></code>: 锁使用互斥和条件变量</p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">None</span></code> 如果此信息未知</p></li>
</ul>
</dd></dl>

<dl class="py attribute">
<dt class="sig sig-object py" id="sys.thread_info.version">
<span class="sig-prename descclassname"><span class="pre">thread_info.</span></span><span class="sig-name descname"><span class="pre">version</span></span></dt>
<dd><p>线程库的名称和版本。 它是一个字符串，如果此信息未知则为 <code class="docutils literal notranslate"><span class="pre">None</span></code>。</p>
</dd></dl>

<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.3.</span></p>
</div>
</dd></dl>

<dl class="py data">
<dt class="sig sig-object py" id="sys.tracebacklimit">
<span class="sig-prename descclassname"><span class="pre">sys.</span></span><span class="sig-name descname"><span class="pre">tracebacklimit</span></span></dt>
<dd><p>当该变量值设置为整数，在发生未处理的异常时，它将决定打印的回溯信息的最大层级数。默认为 <code class="docutils literal notranslate"><span class="pre">1000</span></code>。当将其设置为 <code class="docutils literal notranslate"><span class="pre">0</span></code> 或小于 0，将关闭所有回溯信息，并且只打印异常类型和异常值。</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="sys.unraisablehook">
<span class="sig-prename descclassname"><span class="pre">sys.</span></span><span class="sig-name descname"><span class="pre">unraisablehook</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">unraisable</span></span></em>, <em class="sig-param"><span class="o"><span class="pre">/</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>处理一个无法抛出的异常。</p>
<p>它会在发生了一个异常但 Python 没有办法处理时被调用。例如，当一个析构器引发了异常，或在垃圾回收 (<a class="reference internal" href="gc.xhtml#gc.collect" title="gc.collect"><code class="xref py py-func docutils literal notranslate"><span class="pre">gc.collect()</span></code></a>) 期间引发了异常。</p>
<p><em>unraisable</em> 参数具有以下属性:</p>
<ul class="simple">
<li><p><code class="xref py py-attr docutils literal notranslate"><span class="pre">exc_type</span></code>: 异常类型。</p></li>
<li><p><code class="xref py py-attr docutils literal notranslate"><span class="pre">exc_value</span></code>: 异常值，可以为 <code class="docutils literal notranslate"><span class="pre">None</span></code>。</p></li>
<li><p><code class="xref py py-attr docutils literal notranslate"><span class="pre">exc_traceback</span></code>: 异常回溯，可以为 <code class="docutils literal notranslate"><span class="pre">None</span></code>。</p></li>
<li><p><code class="xref py py-attr docutils literal notranslate"><span class="pre">err_msg</span></code>: 错误消息，可以为 <code class="docutils literal notranslate"><span class="pre">None</span></code>。</p></li>
<li><p><code class="xref py py-attr docutils literal notranslate"><span class="pre">object</span></code>: 导致异常的对象，可以为 <code class="docutils literal notranslate"><span class="pre">None</span></code>。</p></li>
</ul>
<p>默认的钩子会将 <code class="xref py py-attr docutils literal notranslate"><span class="pre">err_msg</span></code> 和 <code class="xref py py-attr docutils literal notranslate"><span class="pre">object</span></code> 格式化为: <code class="docutils literal notranslate"><span class="pre">f'{err_msg}:</span> <span class="pre">{object!r}'</span></code>；如果 <code class="xref py py-attr docutils literal notranslate"><span class="pre">err_msg</span></code> 为 <code class="docutils literal notranslate"><span class="pre">None</span></code> 则会使用 &quot;Exception ignored in&quot; 错误消息。</p>
<p>要改变无法抛出的异常的处理过程，可以重写 <a class="reference internal" href="#sys.unraisablehook" title="sys.unraisablehook"><code class="xref py py-func docutils literal notranslate"><span class="pre">sys.unraisablehook()</span></code></a>。</p>
<div class="admonition seealso">
<p class="admonition-title">参见</p>
<p><a class="reference internal" href="#sys.excepthook" title="sys.excepthook"><code class="xref py py-func docutils literal notranslate"><span class="pre">excepthook()</span></code></a> 处理未捕获的异常。</p>
</div>
<div class="admonition warning">
<p class="admonition-title">警告</p>
<p>使用自定义钩子存储 <code class="xref py py-attr docutils literal notranslate"><span class="pre">exc_value</span></code> 可能会创建引用循环。 当该异常不再需要时应当显式地清空以打破引用循环。</p>
<p>使用自定义钩子存储 <code class="xref py py-attr docutils literal notranslate"><span class="pre">object</span></code> 可能会在它被设为正在终结的对象时将其复活。 为避免对象复活应当避免在自定义钩子完成后存储 <code class="xref py py-attr docutils literal notranslate"><span class="pre">object</span></code>。</p>
</div>
<p class="audit-hook">引发一个审计事件 <code class="docutils literal notranslate"><span class="pre">sys.unraisablehook</span></code> 并附带参数 <code class="docutils literal notranslate"><span class="pre">hook</span></code>, <code class="docutils literal notranslate"><span class="pre">unraisable</span></code>。</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.8.</span></p>
</div>
</dd></dl>

<dl class="py data">
<dt class="sig sig-object py" id="sys.version">
<span class="sig-prename descclassname"><span class="pre">sys.</span></span><span class="sig-name descname"><span class="pre">version</span></span></dt>
<dd><p>一个包含 Python 解释器版本号加编译版本号以及所用编译器等额外信息的字符串。 此字符串会在交互式解释器启动时显示。 请不要从中提取版本信息，而应当使用 <a class="reference internal" href="#sys.version_info" title="sys.version_info"><code class="xref py py-data docutils literal notranslate"><span class="pre">version_info</span></code></a> 以及 <a class="reference internal" href="platform.xhtml#module-platform" title="platform: Retrieves as much platform identifying data as possible."><code class="xref py py-mod docutils literal notranslate"><span class="pre">platform</span></code></a> 模块所提供的函数。</p>
</dd></dl>

<dl class="py data">
<dt class="sig sig-object py" id="sys.api_version">
<span class="sig-prename descclassname"><span class="pre">sys.</span></span><span class="sig-name descname"><span class="pre">api_version</span></span></dt>
<dd><p>这个解释器的 C API 版本。当你在调试 Python及期扩展模板的版本冲突这个功能非常有用。</p>
</dd></dl>

<dl class="py data">
<dt class="sig sig-object py" id="sys.version_info">
<span class="sig-prename descclassname"><span class="pre">sys.</span></span><span class="sig-name descname"><span class="pre">version_info</span></span></dt>
<dd><p>一个包含版本号五部分的元组: <em>major</em>, <em>minor</em>, <em>micro</em>, <em>releaselevel</em> 和 <em>serial</em>。 除 <em>releaselevel</em> 外的所有值均为整数；发布级别值则为 <code class="docutils literal notranslate"><span class="pre">'alpha'</span></code>, <code class="docutils literal notranslate"><span class="pre">'beta'</span></code>, <code class="docutils literal notranslate"><span class="pre">'candidate'</span></code> 或 <code class="docutils literal notranslate"><span class="pre">'final'</span></code>。 对应于 Python 版本 2.0 的 <code class="docutils literal notranslate"><span class="pre">version_info</span></code> 值为 <code class="docutils literal notranslate"><span class="pre">(2,</span> <span class="pre">0,</span> <span class="pre">0,</span> <span class="pre">'final',</span> <span class="pre">0)</span></code>。 这些部分也可按名称访问，因此 <code class="docutils literal notranslate"><span class="pre">sys.version_info[0]</span></code> 就等价于 <code class="docutils literal notranslate"><span class="pre">sys.version_info.major</span></code>，依此类推。</p>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.1 版本发生变更: </span>增加了以名称表示的各部分属性。</p>
</div>
</dd></dl>

<dl class="py data">
<dt class="sig sig-object py" id="sys.warnoptions">
<span class="sig-prename descclassname"><span class="pre">sys.</span></span><span class="sig-name descname"><span class="pre">warnoptions</span></span></dt>
<dd><p>这是警告框架的一个实现细节；请不要修改此值。 有关警告框架的更多信息请参阅 <a class="reference internal" href="warnings.xhtml#module-warnings" title="warnings: Issue warning messages and control their disposition."><code class="xref py py-mod docutils literal notranslate"><span class="pre">warnings</span></code></a> 模块。</p>
</dd></dl>

<dl class="py data">
<dt class="sig sig-object py" id="sys.winver">
<span class="sig-prename descclassname"><span class="pre">sys.</span></span><span class="sig-name descname"><span class="pre">winver</span></span></dt>
<dd><p>用于在 Windows 平台上作为注册表键的版本号。这在 Python DLL 中被存储为 1000 号字符串资源。 其值通常是正在运行的 Python 解释器的主要和次要版本号。 它在 <a class="reference internal" href="#module-sys" title="sys: Access system-specific parameters and functions."><code class="xref py py-mod docutils literal notranslate"><span class="pre">sys</span></code></a> 模块中提供是为了信息展示目的；修改此值不会影响 Python 所使用的注册表键。</p>
<div class="availability docutils container">
<p><a class="reference internal" href="intro.xhtml#availability"><span class="std std-ref">可用性</span></a>: Windows。</p>
</div>
</dd></dl>

<dl class="py data">
<dt class="sig sig-object py">
<span class="sig-prename descclassname"><span class="pre">sys.</span></span><span class="sig-name descname"><span class="pre">monitoring</span></span></dt>
<dd><p>包含用于注册回调和控制监控事件的函数和常量的命名空间。 详情参见 <a class="reference internal" href="sys.monitoring.xhtml#module-sys.monitoring" title="sys.monitoring: Access and control event monitoring"><code class="xref py py-mod docutils literal notranslate"><span class="pre">sys.monitoring</span></code></a>。</p>
</dd></dl>

<dl class="py data">
<dt class="sig sig-object py" id="sys._xoptions">
<span class="sig-prename descclassname"><span class="pre">sys.</span></span><span class="sig-name descname"><span class="pre">_xoptions</span></span></dt>
<dd><p>一个字典，包含通过 <a class="reference internal" href="../using/cmdline.xhtml#cmdoption-X"><code class="xref std std-option docutils literal notranslate"><span class="pre">-X</span></code></a> 命令行选项传递的旗标，这些旗标专属于各种具体实现。选项名称将会映射到对应的值（如果显式指定）或者 <a class="reference internal" href="constants.xhtml#True" title="True"><code class="xref py py-const docutils literal notranslate"><span class="pre">True</span></code></a>。例如:</p>
<div class="highlight-shell-session notranslate"><div class="highlight"><pre><span></span><span class="gp">$ </span>./python<span class="w"> </span>-Xa<span class="o">=</span>b<span class="w"> </span>-Xc
<span class="go">Python 3.2a3+ (py3k, Oct 16 2010, 20:14:50)</span>
<span class="go">[GCC 4.4.3] on linux2</span>
<span class="go">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</span>
<span class="go">&gt;&gt;&gt; import sys</span>
<span class="go">&gt;&gt;&gt; sys._xoptions</span>
<span class="go">{&#39;a&#39;: &#39;b&#39;, &#39;c&#39;: True}</span>
</pre></div>
</div>
<div class="impl-detail compound">
<p><strong>CPython 实现细节：</strong> 这是 CPython 专属的访问通过 <a class="reference internal" href="../using/cmdline.xhtml#cmdoption-X"><code class="xref std std-option docutils literal notranslate"><span class="pre">-X</span></code></a> 传递的选项的方式。 其他实现可能会通过其他方式导出它们，或者完全不导出。</p>
</div>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.2.</span></p>
</div>
</dd></dl>

<p class="rubric">引用</p>
<div role="list" class="citation-list">
<div class="citation" id="c99" role="doc-biblioentry">
<span class="label"><span class="fn-bracket">[</span><a role="doc-backlink" href="#id1">C99</a><span class="fn-bracket">]</span></span>
<p>ISO/IEC 9899:1999.  &quot;Programming languages -- C.&quot;  该标准的公开草案可从 <a class="reference external" href="https://www.open-std.org/jtc1/sc22/wg14/www/docs/n1256.pdf">https://www.open-std.org/jtc1/sc22/wg14/www/docs/n1256.pdf</a> 获得。</p>
</div>
</div>
</section>


            <div class="clearer"></div>
          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>