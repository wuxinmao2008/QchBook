<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" /><meta name="viewport" content="width=device-width, initial-scale=1" />
<meta property="og:title" content="stringprep --- 因特网字符串预处理" />
<meta property="og:type" content="website" />
<meta property="og:url" content="https://docs.python.org/3/library/stringprep.xhtml" />
<meta property="og:site_name" content="Python documentation" />
<meta property="og:description" content="源代码: Lib/stringprep.py[https://github.com/python/cpython/tree/3.12/Lib/stringprep.py] 在标识因特网上的事物（例如主机名），经常需要比较这些标识是否（相等）。 这种比较的具体执行可能会取决于应用域的不同，例如是否要区分大小写等等。 有时也可能需要限制允许的标识为仅由“可打印”字符组成。 RFC 3454[ht..." />
<meta property="og:image" content="https://docs.python.org/3/_static/og-image.png" />
<meta property="og:image:alt" content="Python documentation" />
<meta name="description" content="源代码: Lib/stringprep.py[https://github.com/python/cpython/tree/3.12/Lib/stringprep.py] 在标识因特网上的事物（例如主机名），经常需要比较这些标识是否（相等）。 这种比较的具体执行可能会取决于应用域的不同，例如是否要区分大小写等等。 有时也可能需要限制允许的标识为仅由“可打印”字符组成。 RFC 3454[ht..." />
<meta property="og:image:width" content="200" />
<meta property="og:image:height" content="200" />
<meta name="theme-color" content="#3776ab" />

    <title>stringprep --- 因特网字符串预处理</title>
    <link rel="stylesheet" type="text/css" href="../_static/pygments.css" />
    <link rel="stylesheet" type="text/css" href="../_static/epub.css" />
    <link rel="canonical" href="https://docs.python.org/3/library/stringprep.html" />
    
      
    

    
    <style>
      @media only screen {
        table.full-width-table {
            width: 100%;
        }
      }
    </style>
 

  </head><body>


    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <section id="module-stringprep">
<span id="stringprep-internet-string-preparation"></span><h1><code class="xref py py-mod docutils literal notranslate"><span class="pre">stringprep</span></code> --- 因特网字符串预处理</h1>
<p><strong>源代码:</strong> <a class="reference external" href="https://github.com/python/cpython/tree/3.12/Lib/stringprep.py">Lib/stringprep.py</a><span class="link-target"> [https://github.com/python/cpython/tree/3.12/Lib/stringprep.py]</span></p>
<hr class="docutils" />
<p>在标识因特网上的事物（例如主机名），经常需要比较这些标识是否（相等）。 这种比较的具体执行可能会取决于应用域的不同，例如是否要区分大小写等等。 有时也可能需要限制允许的标识为仅由“可打印”字符组成。</p>
<p><span class="target" id="index-4"></span><a class="rfc reference external" href="https://datatracker.ietf.org/doc/html/rfc3454.html"><strong>RFC 3454</strong></a><span class="link-target"> [https://datatracker.ietf.org/doc/html/rfc3454.html]</span> 定义了在因特网协议中 Unicode 字符串的“预备”过程。 在将字符串连线传输之前，它们会先使用预备过程进行处理，之后它们将具有特定的标准形式。 该 RFC 定义了一系列表格，它们可以被组合为选项配置。 每个配置必须定义所使用的表格，<code class="docutils literal notranslate"><span class="pre">stringprep</span></code> 过程的其他可选项也是配置的组成部分。 <code class="docutils literal notranslate"><span class="pre">stringprep</span></code> 配置的一个例子是 <code class="docutils literal notranslate"><span class="pre">nameprep</span></code>，它被用于国际化域名。</p>
<p><a class="reference internal" href="#module-stringprep" title="stringprep: String preparation, as per RFC 3453"><code class="xref py py-mod docutils literal notranslate"><span class="pre">stringprep</span></code></a> 模块只公开了来自 <span class="target" id="index-5"></span><a class="rfc reference external" href="https://datatracker.ietf.org/doc/html/rfc3454.html"><strong>RFC 3454</strong></a><span class="link-target"> [https://datatracker.ietf.org/doc/html/rfc3454.html]</span> 的表格。 由于以字典或列表形式表示这些表格将会非常庞大，因此该模块在内部使用 Unicode 字符数据库。 该模块本身的源代码是使用 <code class="docutils literal notranslate"><span class="pre">mkstringprep.py</span></code> 工具生成的。</p>
<p>因此，这些表格以函数而非数据结构的形式公开。 在 RFC 中有两种表格：集合与映射。 对于集合，<a class="reference internal" href="#module-stringprep" title="stringprep: String preparation, as per RFC 3453"><code class="xref py py-mod docutils literal notranslate"><span class="pre">stringprep</span></code></a> 提供了“特征函数”，即如果形参是集合的一部分则返回值为 <code class="docutils literal notranslate"><span class="pre">True</span></code> 的函数。 对于映射，它提供了映射函数：它会根据给定的键返回所关联的值。 以下是模块中所有可用函数的列表。</p>
<dl class="py function">
<dt class="sig sig-object py" id="stringprep.in_table_a1">
<span class="sig-prename descclassname"><span class="pre">stringprep.</span></span><span class="sig-name descname"><span class="pre">in_table_a1</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">code</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>确定 <em>code</em> 是否属于 tableA.1 (Unicode 3.2 中的未分配码位)。</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="stringprep.in_table_b1">
<span class="sig-prename descclassname"><span class="pre">stringprep.</span></span><span class="sig-name descname"><span class="pre">in_table_b1</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">code</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>确定 <em>code</em> 是否属于 tableB.1 (通常映射为空值)。</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="stringprep.map_table_b2">
<span class="sig-prename descclassname"><span class="pre">stringprep.</span></span><span class="sig-name descname"><span class="pre">map_table_b2</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">code</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>返回 <em>code</em> 依据 tableB.2 (配合 NFKC 使用的大小写转换映射) 所映射的值。</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="stringprep.map_table_b3">
<span class="sig-prename descclassname"><span class="pre">stringprep.</span></span><span class="sig-name descname"><span class="pre">map_table_b3</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">code</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>返回 <em>code</em> 依据 tableB.3 (不附带正规化的大小写折叠映射) 所映射的值。</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="stringprep.in_table_c11">
<span class="sig-prename descclassname"><span class="pre">stringprep.</span></span><span class="sig-name descname"><span class="pre">in_table_c11</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">code</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>确定 <em>code</em> 是否属于 tableC.1.1  (ASCII 空白字符)。</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="stringprep.in_table_c12">
<span class="sig-prename descclassname"><span class="pre">stringprep.</span></span><span class="sig-name descname"><span class="pre">in_table_c12</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">code</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>确定 <em>code</em> 是否属于 tableC.1.2  (非 ASCII 空白字符)。</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="stringprep.in_table_c11_c12">
<span class="sig-prename descclassname"><span class="pre">stringprep.</span></span><span class="sig-name descname"><span class="pre">in_table_c11_c12</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">code</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>确定 <em>code</em> 是否属于 tableC.1  (空白字符，C.1.1 和 C.1.2 的并集)。</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="stringprep.in_table_c21">
<span class="sig-prename descclassname"><span class="pre">stringprep.</span></span><span class="sig-name descname"><span class="pre">in_table_c21</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">code</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>确定 <em>code</em> 是否属于 tableC.2.1  (ASCII 控制字符)。</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="stringprep.in_table_c22">
<span class="sig-prename descclassname"><span class="pre">stringprep.</span></span><span class="sig-name descname"><span class="pre">in_table_c22</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">code</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>确定 <em>code</em> 是否属于 tableC.2.2  (非 ASCII 控制字符)。</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="stringprep.in_table_c21_c22">
<span class="sig-prename descclassname"><span class="pre">stringprep.</span></span><span class="sig-name descname"><span class="pre">in_table_c21_c22</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">code</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>确定 <em>code</em> 是否属于 tableC.2  (控制字符，C.2.1 和 C.2.2 的并集)。</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="stringprep.in_table_c3">
<span class="sig-prename descclassname"><span class="pre">stringprep.</span></span><span class="sig-name descname"><span class="pre">in_table_c3</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">code</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>确定 <em>code</em> 是否属于 tableC.3  (私有使用)。</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="stringprep.in_table_c4">
<span class="sig-prename descclassname"><span class="pre">stringprep.</span></span><span class="sig-name descname"><span class="pre">in_table_c4</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">code</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>确定 <em>code</em> 是否属于 tableC.4  (非字符码位)。</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="stringprep.in_table_c5">
<span class="sig-prename descclassname"><span class="pre">stringprep.</span></span><span class="sig-name descname"><span class="pre">in_table_c5</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">code</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>确定 <em>code</em> 是否属于 tableC.5  (替代码)。</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="stringprep.in_table_c6">
<span class="sig-prename descclassname"><span class="pre">stringprep.</span></span><span class="sig-name descname"><span class="pre">in_table_c6</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">code</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>确定 <em>code</em> 是否属于 tableC.6  (不适用于纯文本)。</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="stringprep.in_table_c7">
<span class="sig-prename descclassname"><span class="pre">stringprep.</span></span><span class="sig-name descname"><span class="pre">in_table_c7</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">code</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>确定 <em>code</em> 是否属于 tableC.7  (不适用于规范表示)。</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="stringprep.in_table_c8">
<span class="sig-prename descclassname"><span class="pre">stringprep.</span></span><span class="sig-name descname"><span class="pre">in_table_c8</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">code</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>确定 <em>code</em> 是否属于 tableC.8  (改变显示属性或已弃用)。</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="stringprep.in_table_c9">
<span class="sig-prename descclassname"><span class="pre">stringprep.</span></span><span class="sig-name descname"><span class="pre">in_table_c9</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">code</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>确定 <em>code</em> 是否属于 tableC.9  (标记字符)。</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="stringprep.in_table_d1">
<span class="sig-prename descclassname"><span class="pre">stringprep.</span></span><span class="sig-name descname"><span class="pre">in_table_d1</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">code</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>确定 <em>code</em> 是否属于 tableD.1  (带有双向属性 &quot;R&quot; 或 &quot;AL&quot; 的字符)。</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="stringprep.in_table_d2">
<span class="sig-prename descclassname"><span class="pre">stringprep.</span></span><span class="sig-name descname"><span class="pre">in_table_d2</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">code</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>确定 <em>code</em> 是否属于 tableD.2  (带有双向属性 &quot;L&quot; 的字符)。</p>
</dd></dl>

</section>


            <div class="clearer"></div>
          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>