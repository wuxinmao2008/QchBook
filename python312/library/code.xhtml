<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" /><meta name="viewport" content="width=device-width, initial-scale=1" />
<meta property="og:title" content="code --- 解释器基类" />
<meta property="og:type" content="website" />
<meta property="og:url" content="https://docs.python.org/3/library/code.xhtml" />
<meta property="og:site_name" content="Python documentation" />
<meta property="og:description" content="源代码： Lib/code.py[https://github.com/python/cpython/tree/3.12/Lib/code.py] code 模块提供了在 Python 中实现 read-eval-print 循环的功能。它包含两个类和一些快捷功能，可用于构建提供交互式解释器的应用程序。 交互解释器对象: 交互式控制台对象: InteractiveConsole 类是 Int..." />
<meta property="og:image" content="https://docs.python.org/3/_static/og-image.png" />
<meta property="og:image:alt" content="Python documentation" />
<meta name="description" content="源代码： Lib/code.py[https://github.com/python/cpython/tree/3.12/Lib/code.py] code 模块提供了在 Python 中实现 read-eval-print 循环的功能。它包含两个类和一些快捷功能，可用于构建提供交互式解释器的应用程序。 交互解释器对象: 交互式控制台对象: InteractiveConsole 类是 Int..." />
<meta property="og:image:width" content="200" />
<meta property="og:image:height" content="200" />
<meta name="theme-color" content="#3776ab" />

    <title>code --- 解释器基类</title>
    <link rel="stylesheet" type="text/css" href="../_static/pygments.css" />
    <link rel="stylesheet" type="text/css" href="../_static/epub.css" />
    <link rel="canonical" href="https://docs.python.org/3/library/code.html" />
    
      
    

    
    <style>
      @media only screen {
        table.full-width-table {
            width: 100%;
        }
      }
    </style>
 

  </head><body>


    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <section id="module-code">
<span id="code-interpreter-base-classes"></span><h1><code class="xref py py-mod docutils literal notranslate"><span class="pre">code</span></code> --- 解释器基类</h1>
<p><strong>源代码：</strong> <a class="reference external" href="https://github.com/python/cpython/tree/3.12/Lib/code.py">Lib/code.py</a><span class="link-target"> [https://github.com/python/cpython/tree/3.12/Lib/code.py]</span></p>
<hr class="docutils" />
<p><code class="docutils literal notranslate"><span class="pre">code</span></code> 模块提供了在 Python 中实现 read-eval-print 循环的功能。它包含两个类和一些快捷功能，可用于构建提供交互式解释器的应用程序。</p>
<dl class="py class">
<dt class="sig sig-object py" id="code.InteractiveInterpreter">
<em class="property"><span class="pre">class</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">code.</span></span><span class="sig-name descname"><span class="pre">InteractiveInterpreter</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">locals</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>这个类处理解析器和解释器状态（用户命名空间的）；它不处理缓冲器、终端提示区或着输入文件名（文件名总是显示地传递）。可选的 <em>locals</em> 参数指定一个字典，字典里面包含将在此类执行的代码；它默认创建新的字典，其键 <code class="docutils literal notranslate"><span class="pre">'__name__'</span></code> 设置为 <code class="docutils literal notranslate"><span class="pre">'__console__'</span></code> ，键 <code class="docutils literal notranslate"><span class="pre">'__doc__'</span></code> 设置为 <code class="docutils literal notranslate"><span class="pre">None</span></code> 。</p>
</dd></dl>

<dl class="py class">
<dt class="sig sig-object py" id="code.InteractiveConsole">
<em class="property"><span class="pre">class</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">code.</span></span><span class="sig-name descname"><span class="pre">InteractiveConsole</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">locals</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">filename</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">'&lt;console&gt;'</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>尽可能模拟交互式 Python 解释器的行为。此类建立在 <a class="reference internal" href="#code.InteractiveInterpreter" title="code.InteractiveInterpreter"><code class="xref py py-class docutils literal notranslate"><span class="pre">InteractiveInterpreter</span></code></a> 的基础上，使用熟悉的 <code class="docutils literal notranslate"><span class="pre">sys.ps1</span></code> 和 <code class="docutils literal notranslate"><span class="pre">sys.ps2</span></code> 作为输入提示符，并有输入缓冲。</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="code.interact">
<span class="sig-prename descclassname"><span class="pre">code.</span></span><span class="sig-name descname"><span class="pre">interact</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">banner</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">readfunc</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">local</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">exitmsg</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>运行一个读取-求值-打印循环的便捷函数。 这会创建一个新的 <a class="reference internal" href="#code.InteractiveConsole" title="code.InteractiveConsole"><code class="xref py py-class docutils literal notranslate"><span class="pre">InteractiveConsole</span></code></a> 实例并设置 <em>readfunc</em> 作为 <a class="reference internal" href="#code.InteractiveConsole.raw_input" title="code.InteractiveConsole.raw_input"><code class="xref py py-meth docutils literal notranslate"><span class="pre">InteractiveConsole.raw_input()</span></code></a> 方法，如果有提供的话。 如果提供了 <em>local</em>，它将被传给 <a class="reference internal" href="#code.InteractiveConsole" title="code.InteractiveConsole"><code class="xref py py-class docutils literal notranslate"><span class="pre">InteractiveConsole</span></code></a> 构造器以用作解析器循环的默认命名空间。 实例的 <a class="reference internal" href="#code.InteractiveConsole.interact" title="code.InteractiveConsole.interact"><code class="xref py py-meth docutils literal notranslate"><span class="pre">interact()</span></code></a> 方法将随后运行并传入 <em>banner</em> 和 <em>exitmsg</em> 以用作标题和退出消息，如果有提供的话。 控制台对象在使用后将被丢弃。</p>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.6 版本发生变更: </span>加入 <em>exitmsg</em> 参数。</p>
</div>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="code.compile_command">
<span class="sig-prename descclassname"><span class="pre">code.</span></span><span class="sig-name descname"><span class="pre">compile_command</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">source</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">filename</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">'&lt;input&gt;'</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">symbol</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">'single'</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>这个函数主要用来模拟 Python 解释器的主循环（即 read-eval-print 循环）。难点的部分是当用户输入不完整命令时，判断能否通过之后的输入来完成（要么成为完整的命令，要么语法错误）。该函数  <em>几乎</em> 和实际的解释器主循环的判断是相同的。</p>
<p><em>source</em> 是源字符串；<em>filename</em> 是可选的用作读取源的文件名，默认为 <code class="docutils literal notranslate"><span class="pre">'&lt;input&gt;'</span></code>；<em>symbol</em> 是可选的语法开启符号，应为 <code class="docutils literal notranslate"><span class="pre">'single'</span></code> (默认), <code class="docutils literal notranslate"><span class="pre">'eval'</span></code> 或 <code class="docutils literal notranslate"><span class="pre">'exec'</span></code>。</p>
<p>如果命令完整且有效则返回一个代码对象 (等价于 <code class="docutils literal notranslate"><span class="pre">compile(source,</span> <span class="pre">filename,</span> <span class="pre">symbol)</span></code>)；如果命令不完整则返回 <code class="docutils literal notranslate"><span class="pre">None</span></code>；如果命令完整但包含语法错误则会引发 <a class="reference internal" href="exceptions.xhtml#SyntaxError" title="SyntaxError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">SyntaxError</span></code></a> 或 <a class="reference internal" href="exceptions.xhtml#OverflowError" title="OverflowError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">OverflowError</span></code></a> 而如果命令包含无效字面值则将引发 <a class="reference internal" href="exceptions.xhtml#ValueError" title="ValueError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">ValueError</span></code></a>。</p>
</dd></dl>

<section id="interactive-interpreter-objects">
<span id="interpreter-objects"></span><h2>交互解释器对象</h2>
<dl class="py method">
<dt class="sig sig-object py" id="code.InteractiveInterpreter.runsource">
<span class="sig-prename descclassname"><span class="pre">InteractiveInterpreter.</span></span><span class="sig-name descname"><span class="pre">runsource</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">source</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">filename</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">'&lt;input&gt;'</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">symbol</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">'single'</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>在解释器中编译并运行一段源码。 所用参数与 <a class="reference internal" href="#code.compile_command" title="code.compile_command"><code class="xref py py-func docutils literal notranslate"><span class="pre">compile_command()</span></code></a> 一样；<em>filename</em> 的默认值为 <code class="docutils literal notranslate"><span class="pre">'&lt;input&gt;'</span></code>，<em>symbol</em> 则为 <code class="docutils literal notranslate"><span class="pre">'single'</span></code>。 可能发生以下情况之一：</p>
<ul class="simple">
<li><p>输入不正确；<a class="reference internal" href="#code.compile_command" title="code.compile_command"><code class="xref py py-func docutils literal notranslate"><span class="pre">compile_command()</span></code></a> 引发了一个异常 (<a class="reference internal" href="exceptions.xhtml#SyntaxError" title="SyntaxError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">SyntaxError</span></code></a> 或 <a class="reference internal" href="exceptions.xhtml#OverflowError" title="OverflowError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">OverflowError</span></code></a>)。 将通过调用 <a class="reference internal" href="#code.InteractiveInterpreter.showsyntaxerror" title="code.InteractiveInterpreter.showsyntaxerror"><code class="xref py py-meth docutils literal notranslate"><span class="pre">showsyntaxerror()</span></code></a> 方法打印语法回溯信息。 <a class="reference internal" href="#code.InteractiveInterpreter.runsource" title="code.InteractiveInterpreter.runsource"><code class="xref py py-meth docutils literal notranslate"><span class="pre">runsource()</span></code></a> 返回 <code class="docutils literal notranslate"><span class="pre">False</span></code>。</p></li>
<li><p>输入不完整，需要更多输入；函数 <a class="reference internal" href="#code.compile_command" title="code.compile_command"><code class="xref py py-func docutils literal notranslate"><span class="pre">compile_command()</span></code></a> 返回 <code class="docutils literal notranslate"><span class="pre">None</span></code> 。方法 <a class="reference internal" href="#code.InteractiveInterpreter.runsource" title="code.InteractiveInterpreter.runsource"><code class="xref py py-meth docutils literal notranslate"><span class="pre">runsource()</span></code></a> 返回 <code class="docutils literal notranslate"><span class="pre">True</span></code> 。</p></li>
<li><p>输入完整；<a class="reference internal" href="#code.compile_command" title="code.compile_command"><code class="xref py py-func docutils literal notranslate"><span class="pre">compile_command()</span></code></a> 返回了一个代码对象。 将通过调用 <a class="reference internal" href="#code.InteractiveInterpreter.runcode" title="code.InteractiveInterpreter.runcode"><code class="xref py py-meth docutils literal notranslate"><span class="pre">runcode()</span></code></a> 执行代码（该方法也会处理运行时异常，<a class="reference internal" href="exceptions.xhtml#SystemExit" title="SystemExit"><code class="xref py py-exc docutils literal notranslate"><span class="pre">SystemExit</span></code></a> 除外）。 <a class="reference internal" href="#code.InteractiveInterpreter.runsource" title="code.InteractiveInterpreter.runsource"><code class="xref py py-meth docutils literal notranslate"><span class="pre">runsource()</span></code></a> 返回 <code class="docutils literal notranslate"><span class="pre">False</span></code>。</p></li>
</ul>
<p>该返回值用于决定使用 <code class="docutils literal notranslate"><span class="pre">sys.ps1</span></code> 还是 <code class="docutils literal notranslate"><span class="pre">sys.ps2</span></code> 来作为下一行的输入提示符。</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="code.InteractiveInterpreter.runcode">
<span class="sig-prename descclassname"><span class="pre">InteractiveInterpreter.</span></span><span class="sig-name descname"><span class="pre">runcode</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">code</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>执行一个代码对象。当发生异常时，调用 <a class="reference internal" href="#code.InteractiveInterpreter.showtraceback" title="code.InteractiveInterpreter.showtraceback"><code class="xref py py-meth docutils literal notranslate"><span class="pre">showtraceback()</span></code></a> 来显示回溯。除 <a class="reference internal" href="exceptions.xhtml#SystemExit" title="SystemExit"><code class="xref py py-exc docutils literal notranslate"><span class="pre">SystemExit</span></code></a> （允许传播）以外的所有异常都会被捕获。</p>
<p>有关 <a class="reference internal" href="exceptions.xhtml#KeyboardInterrupt" title="KeyboardInterrupt"><code class="xref py py-exc docutils literal notranslate"><span class="pre">KeyboardInterrupt</span></code></a> 的说明，该异常可能发生于此代码的其他位置，并且并不总能被捕获。 调用者应当准备好处理它。</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="code.InteractiveInterpreter.showsyntaxerror">
<span class="sig-prename descclassname"><span class="pre">InteractiveInterpreter.</span></span><span class="sig-name descname"><span class="pre">showsyntaxerror</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">filename</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>显示刚发生的语法错误。 这不会显示堆栈回溯因为语法错误并无此种信息。 如果给出了 <em>filename</em>，它会被放入异常来替代 Python 解析器所提供的默认文件名，因为它在从一个字符串读取时总是会使用 <code class="docutils literal notranslate"><span class="pre">'&lt;string&gt;'</span></code>。 输出将由 <a class="reference internal" href="#code.InteractiveInterpreter.write" title="code.InteractiveInterpreter.write"><code class="xref py py-meth docutils literal notranslate"><span class="pre">write()</span></code></a> 方法来写入。</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="code.InteractiveInterpreter.showtraceback">
<span class="sig-prename descclassname"><span class="pre">InteractiveInterpreter.</span></span><span class="sig-name descname"><span class="pre">showtraceback</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>显示刚发生的异常。 我们移除了第一个堆栈条目因为它从属于解释器对象的实现。 输出将由 <a class="reference internal" href="#code.InteractiveInterpreter.write" title="code.InteractiveInterpreter.write"><code class="xref py py-meth docutils literal notranslate"><span class="pre">write()</span></code></a> 方法来写入。</p>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.5 版本发生变更: </span>将显示完整的链式回溯，而不只是主回溯。</p>
</div>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="code.InteractiveInterpreter.write">
<span class="sig-prename descclassname"><span class="pre">InteractiveInterpreter.</span></span><span class="sig-name descname"><span class="pre">write</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">data</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>将一个字符串写入到标准错误流 (<code class="docutils literal notranslate"><span class="pre">sys.stderr</span></code>)。 所有派生类都应重写此方法以提供必要的正确输出处理。</p>
</dd></dl>

</section>
<section id="interactive-console-objects">
<span id="console-objects"></span><h2>交互式控制台对象</h2>
<p><a class="reference internal" href="#code.InteractiveConsole" title="code.InteractiveConsole"><code class="xref py py-class docutils literal notranslate"><span class="pre">InteractiveConsole</span></code></a> 类是 <a class="reference internal" href="#code.InteractiveInterpreter" title="code.InteractiveInterpreter"><code class="xref py py-class docutils literal notranslate"><span class="pre">InteractiveInterpreter</span></code></a> 的子类，因此它提供了解释器对象的所有方法，还有以下的额外方法。</p>
<dl class="py method">
<dt class="sig sig-object py" id="code.InteractiveConsole.interact">
<span class="sig-prename descclassname"><span class="pre">InteractiveConsole.</span></span><span class="sig-name descname"><span class="pre">interact</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">banner</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">exitmsg</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>近似地模拟交互式 Python 终端。 可选的 <em>banner</em> 参数指定要在第一次交互前打印的条幅；默认情况下会类似于标准 Python 解释器所打印的内容，并附上外加圆括号的终端对象类名（这样就不会与真正的解释器混淆 —— 因为确实太像了！）</p>
<p>可选的 <em>exitmsg</em> 参数指定要在退出时打印的退出消息。 传入空字符串可以屏蔽退出消息。 如果 <em>exitmsg</em> 未给出或为 <code class="docutils literal notranslate"><span class="pre">None</span></code>，则将打印默认消息。</p>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.4 版本发生变更: </span>要禁止打印任何条幅消息，请传递一个空字符串。</p>
</div>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.6 版本发生变更: </span>退出时打印退出消息。</p>
</div>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="code.InteractiveConsole.push">
<span class="sig-prename descclassname"><span class="pre">InteractiveConsole.</span></span><span class="sig-name descname"><span class="pre">push</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">line</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>将一行源代码文本推入解释器。 行内容不应带有末尾换行符；它可以有内部换行符。 行内容会被添加到一缓冲区然后调用解释器的 <a class="reference internal" href="#code.InteractiveInterpreter.runsource" title="code.InteractiveInterpreter.runsource"><code class="xref py py-meth docutils literal notranslate"><span class="pre">runsource()</span></code></a> 方法并附带缓冲区内容的拼接结果作为源文本。 如果提示命令已执行或不合法，缓冲区将被重置；在其他情况下，则命令结束，缓冲区将在添加行后保持原样。 如果需要更多的输入则返回值为 <code class="docutils literal notranslate"><span class="pre">True</span></code>，如果行已按某种方式被处理则返回值为 <code class="docutils literal notranslate"><span class="pre">False</span></code> (这与 <code class="xref py py-meth docutils literal notranslate"><span class="pre">runsource()</span></code> 相同)。</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="code.InteractiveConsole.resetbuffer">
<span class="sig-prename descclassname"><span class="pre">InteractiveConsole.</span></span><span class="sig-name descname"><span class="pre">resetbuffer</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>从输入缓冲区中删除所有未处理的内容。</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="code.InteractiveConsole.raw_input">
<span class="sig-prename descclassname"><span class="pre">InteractiveConsole.</span></span><span class="sig-name descname"><span class="pre">raw_input</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">prompt</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">''</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>输出提示并读取一行。返回的行不包含末尾的换行符。当用户输入 EOF 键序列时，会引发 <a class="reference internal" href="exceptions.xhtml#EOFError" title="EOFError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">EOFError</span></code></a> 异常。默认实现是从 <code class="docutils literal notranslate"><span class="pre">sys.stdin</span></code> 读取；子类可以用其他实现代替。</p>
</dd></dl>

</section>
</section>


            <div class="clearer"></div>
          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>