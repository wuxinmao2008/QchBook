<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" /><meta name="viewport" content="width=device-width, initial-scale=1" />
<meta property="og:title" content="warnings --- 警告信息控制" />
<meta property="og:type" content="website" />
<meta property="og:url" content="https://docs.python.org/3/library/warnings.xhtml" />
<meta property="og:site_name" content="Python documentation" />
<meta property="og:description" content="源代码： Lib/warnings.py[https://github.com/python/cpython/tree/3.12/Lib/warnings.py] 通常以下情况会引发警告：提醒用户注意程序中的某些情况，而这些情况（通常）还不值得触发异常并终止程序。例如，当程序用到了某个过时的模块时，就可能需要发出一条警告。 Python 程序员可调用本模块中定义的 warn() 函数来发布警..." />
<meta property="og:image" content="https://docs.python.org/3/_static/og-image.png" />
<meta property="og:image:alt" content="Python documentation" />
<meta name="description" content="源代码： Lib/warnings.py[https://github.com/python/cpython/tree/3.12/Lib/warnings.py] 通常以下情况会引发警告：提醒用户注意程序中的某些情况，而这些情况（通常）还不值得触发异常并终止程序。例如，当程序用到了某个过时的模块时，就可能需要发出一条警告。 Python 程序员可调用本模块中定义的 warn() 函数来发布警..." />
<meta property="og:image:width" content="200" />
<meta property="og:image:height" content="200" />
<meta name="theme-color" content="#3776ab" />

    <title>warnings --- 警告信息控制</title>
    <link rel="stylesheet" type="text/css" href="../_static/pygments.css" />
    <link rel="stylesheet" type="text/css" href="../_static/epub.css" />
    <link rel="canonical" href="https://docs.python.org/3/library/warnings.html" />
    
      
    

    
    <style>
      @media only screen {
        table.full-width-table {
            width: 100%;
        }
      }
    </style>
 

  </head><body>


    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <section id="module-warnings">
<span id="warnings-warning-control"></span><h1><code class="xref py py-mod docutils literal notranslate"><span class="pre">warnings</span></code> --- 警告信息控制</h1>
<p><strong>源代码：</strong> <a class="reference external" href="https://github.com/python/cpython/tree/3.12/Lib/warnings.py">Lib/warnings.py</a><span class="link-target"> [https://github.com/python/cpython/tree/3.12/Lib/warnings.py]</span></p>
<hr class="docutils" id="index-0" />
<p>通常以下情况会引发警告：提醒用户注意程序中的某些情况，而这些情况（通常）还不值得触发异常并终止程序。例如，当程序用到了某个过时的模块时，就可能需要发出一条警告。</p>
<p>Python 程序员可调用本模块中定义的 <a class="reference internal" href="#warnings.warn" title="warnings.warn"><code class="xref py py-func docutils literal notranslate"><span class="pre">warn()</span></code></a> 函数来发布警告。（C 语言程序员则用 <a class="reference internal" href="../c-api/exceptions.xhtml#c.PyErr_WarnEx" title="PyErr_WarnEx"><code class="xref c c-func docutils literal notranslate"><span class="pre">PyErr_WarnEx()</span></code></a> ； 详见 <a class="reference internal" href="../c-api/exceptions.xhtml#exceptionhandling"><span class="std std-ref">异常处理</span></a> ）。</p>
<p>警告信息通常会写入 <a class="reference internal" href="sys.xhtml#sys.stderr" title="sys.stderr"><code class="xref py py-data docutils literal notranslate"><span class="pre">sys.stderr</span></code></a> ，但可以灵活改变，从忽略所有警告到变成异常都可以。警告的处理方式可以依据 <a class="reference internal" href="#warning-categories"><span class="std std-ref">警告类型</span></a> 、警告信息的文本和发出警告的源位置而进行变化。同一源位置重复出现的警告通常会被抑制。</p>
<p>控制警告信息有两个阶段：首先，每次引发警告时，决定信息是否要发出；然后，如果要发出信息，就用可由用户设置的钩子进行格式化并打印输出。</p>
<p><a class="reference internal" href="#warning-filter"><span class="std std-ref">警告过滤器</span></a> 控制着是否发出警告信息，也即一系列的匹配规则和动作。调用 <a class="reference internal" href="#warnings.filterwarnings" title="warnings.filterwarnings"><code class="xref py py-func docutils literal notranslate"><span class="pre">filterwarnings()</span></code></a> 可将规则加入过滤器，调用  <a class="reference internal" href="#warnings.resetwarnings" title="warnings.resetwarnings"><code class="xref py py-func docutils literal notranslate"><span class="pre">resetwarnings()</span></code></a> 则可重置为默认状态。</p>
<p>警告信息的打印输出是通过调用 <a class="reference internal" href="#warnings.showwarning" title="warnings.showwarning"><code class="xref py py-func docutils literal notranslate"><span class="pre">showwarning()</span></code></a> 完成的，该函数可被重写；默认的实现代码是调用 <a class="reference internal" href="#warnings.formatwarning" title="warnings.formatwarning"><code class="xref py py-func docutils literal notranslate"><span class="pre">formatwarning()</span></code></a> 进行格式化，自己编写的代码也可以调用此格式化函数。</p>
<div class="admonition seealso">
<p class="admonition-title">参见</p>
<p>利用 <a class="reference internal" href="logging.xhtml#logging.captureWarnings" title="logging.captureWarnings"><code class="xref py py-func docutils literal notranslate"><span class="pre">logging.captureWarnings()</span></code></a> 可以采用标准的日志架构处理所有警告。</p>
</div>
<section id="warning-categories">
<span id="id1"></span><h2>警告类别</h2>
<p>警告的类别由一些内置的异常表示。这种分类有助于对警告信息进行分组过滤。</p>
<p>虽然在技术上警告类别属于 <a class="reference internal" href="exceptions.xhtml#warning-categories-as-exceptions"><span class="std std-ref">内置异常</span></a>，但也只是在此记录一下而已，因为在概念上他们属于警告机制的一部分。</p>
<p>通过对某个标准的警告类别进行派生，用户代码可以定义其他的警告类别。 警告类别必须是 <a class="reference internal" href="exceptions.xhtml#Warning" title="Warning"><code class="xref py py-exc docutils literal notranslate"><span class="pre">Warning</span></code></a> 类的子类。</p>
<p>目前已定义了以下警告类别的类：</p>
<table class="docutils align-default">
<thead>
<tr class="row-odd"><th class="head"><p>类</p></th>
<th class="head"><p>描述</p></th>
</tr>
</thead>
<tbody>
<tr class="row-even"><td><p><a class="reference internal" href="exceptions.xhtml#Warning" title="Warning"><code class="xref py py-exc docutils literal notranslate"><span class="pre">Warning</span></code></a></p></td>
<td><p>这是所有警告类别的基类。它是 <a class="reference internal" href="exceptions.xhtml#Exception" title="Exception"><code class="xref py py-exc docutils literal notranslate"><span class="pre">Exception</span></code></a> 的子类。</p></td>
</tr>
<tr class="row-odd"><td><p><a class="reference internal" href="exceptions.xhtml#UserWarning" title="UserWarning"><code class="xref py py-exc docutils literal notranslate"><span class="pre">UserWarning</span></code></a></p></td>
<td><p>The default category for <a class="reference internal" href="#warnings.warn" title="warnings.warn"><code class="xref py py-func docutils literal notranslate"><span class="pre">warn()</span></code></a>.</p></td>
</tr>
<tr class="row-even"><td><p><a class="reference internal" href="exceptions.xhtml#DeprecationWarning" title="DeprecationWarning"><code class="xref py py-exc docutils literal notranslate"><span class="pre">DeprecationWarning</span></code></a></p></td>
<td><p>已废弃特性警告的基类，这些警告是为其他 Python 开发者准备的（默认会忽略，除非在 <code class="docutils literal notranslate"><span class="pre">__main__</span></code> 中用代码触发）。</p></td>
</tr>
<tr class="row-odd"><td><p><a class="reference internal" href="exceptions.xhtml#SyntaxWarning" title="SyntaxWarning"><code class="xref py py-exc docutils literal notranslate"><span class="pre">SyntaxWarning</span></code></a></p></td>
<td><p>用于警告可疑语法的基类。</p></td>
</tr>
<tr class="row-even"><td><p><a class="reference internal" href="exceptions.xhtml#RuntimeWarning" title="RuntimeWarning"><code class="xref py py-exc docutils literal notranslate"><span class="pre">RuntimeWarning</span></code></a></p></td>
<td><p>用于警告可疑运行时特性的基类。</p></td>
</tr>
<tr class="row-odd"><td><p><a class="reference internal" href="exceptions.xhtml#FutureWarning" title="FutureWarning"><code class="xref py py-exc docutils literal notranslate"><span class="pre">FutureWarning</span></code></a></p></td>
<td><p>用于警告已废弃特性的基类，这些警告是为 Python 应用程序的最终用户准备的。</p></td>
</tr>
<tr class="row-even"><td><p><a class="reference internal" href="exceptions.xhtml#PendingDeprecationWarning" title="PendingDeprecationWarning"><code class="xref py py-exc docutils literal notranslate"><span class="pre">PendingDeprecationWarning</span></code></a></p></td>
<td><p>用于警告即将废弃功能的基类（默认忽略）。</p></td>
</tr>
<tr class="row-odd"><td><p><a class="reference internal" href="exceptions.xhtml#ImportWarning" title="ImportWarning"><code class="xref py py-exc docutils literal notranslate"><span class="pre">ImportWarning</span></code></a></p></td>
<td><p>导入模块时触发的警告的基类（默认忽略）。</p></td>
</tr>
<tr class="row-even"><td><p><a class="reference internal" href="exceptions.xhtml#UnicodeWarning" title="UnicodeWarning"><code class="xref py py-exc docutils literal notranslate"><span class="pre">UnicodeWarning</span></code></a></p></td>
<td><p>用于 Unicode 相关警告的基类。</p></td>
</tr>
<tr class="row-odd"><td><p><a class="reference internal" href="exceptions.xhtml#BytesWarning" title="BytesWarning"><code class="xref py py-exc docutils literal notranslate"><span class="pre">BytesWarning</span></code></a></p></td>
<td><p><a class="reference internal" href="stdtypes.xhtml#bytes" title="bytes"><code class="xref py py-class docutils literal notranslate"><span class="pre">bytes</span></code></a> 和 <a class="reference internal" href="stdtypes.xhtml#bytearray" title="bytearray"><code class="xref py py-class docutils literal notranslate"><span class="pre">bytearray</span></code></a> 相关警告的基类。</p></td>
</tr>
<tr class="row-even"><td><p><a class="reference internal" href="exceptions.xhtml#ResourceWarning" title="ResourceWarning"><code class="xref py py-exc docutils literal notranslate"><span class="pre">ResourceWarning</span></code></a></p></td>
<td><p>资源使用相关警告的基础类别（默认会被忽略）。ignored by default).</p></td>
</tr>
</tbody>
</table>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.7 版本发生变更: </span>以前 <a class="reference internal" href="exceptions.xhtml#DeprecationWarning" title="DeprecationWarning"><code class="xref py py-exc docutils literal notranslate"><span class="pre">DeprecationWarning</span></code></a> 和 <a class="reference internal" href="exceptions.xhtml#FutureWarning" title="FutureWarning"><code class="xref py py-exc docutils literal notranslate"><span class="pre">FutureWarning</span></code></a> 是根据某个功能是否完全删除或改变其行为来区分的。现在是根据受众和默认警告过滤器的处理方式来区分的。</p>
</div>
</section>
<section id="the-warnings-filter">
<span id="warning-filter"></span><h2>警告过滤器</h2>
<p>警告过滤器控制着警告是否被忽略、显示或转为错误（触发异常）。</p>
<p>从概念上讲，警告过滤器维护着一个经过排序的过滤器类别列表；任何具体的警告都会依次与列表中的每种过滤器进行匹配，直到找到一个匹配项；过滤器决定了匹配项的处理方式。每个列表项均为 ( <em>action</em> ,  <em>message</em> ,  <em>category</em> ,  <em>module</em> ,  <em>lineno</em> ) 格式的元组，其中：</p>
<ul>
<li><p><em>action</em> 是以下字符串之一：</p>
<table class="docutils align-default">
<thead>
<tr class="row-odd"><th class="head"><p>值</p></th>
<th class="head"><p>处置</p></th>
</tr>
</thead>
<tbody>
<tr class="row-even"><td><p><code class="docutils literal notranslate"><span class="pre">&quot;default&quot;</span></code></p></td>
<td><p>为发出警告的每个位置（模块+行号）打印第一个匹配警告</p></td>
</tr>
<tr class="row-odd"><td><p><code class="docutils literal notranslate"><span class="pre">&quot;error&quot;</span></code></p></td>
<td><p>将匹配警告转换为异常</p></td>
</tr>
<tr class="row-even"><td><p><code class="docutils literal notranslate"><span class="pre">&quot;ignore&quot;</span></code></p></td>
<td><p>从不打印匹配的警告</p></td>
</tr>
<tr class="row-odd"><td><p><code class="docutils literal notranslate"><span class="pre">&quot;always&quot;</span></code></p></td>
<td><p>总是打印匹配的警告</p></td>
</tr>
<tr class="row-even"><td><p><code class="docutils literal notranslate"><span class="pre">&quot;module&quot;</span></code></p></td>
<td><p>为发出警告的每个模块打印第一次匹配警告（无论行号如何）</p></td>
</tr>
<tr class="row-odd"><td><p><code class="docutils literal notranslate"><span class="pre">&quot;once&quot;</span></code></p></td>
<td><p>无论位置如何，仅打印第一次出现的匹配警告</p></td>
</tr>
</tbody>
</table>
</li>
<li><p><em>message</em> 是一个包含警告消息的开头需要匹配的正则表达式的字符串，对大小写不敏感。 在 <a class="reference internal" href="../using/cmdline.xhtml#cmdoption-W"><code class="xref std std-option docutils literal notranslate"><span class="pre">-W</span></code></a> 和 <span class="target" id="index-11"></span><a class="reference internal" href="../using/cmdline.xhtml#envvar-PYTHONWARNINGS"><code class="xref std std-envvar docutils literal notranslate"><span class="pre">PYTHONWARNINGS</span></code></a> 中，<em>message</em> 是警告消息的开头需要包含的字符串字面值（对大小写不敏感），将忽略 <em>message</em> 开头和末尾的任何空格。</p></li>
<li><p><em>category</em> 是警告类别的类（<a class="reference internal" href="exceptions.xhtml#Warning" title="Warning"><code class="xref py py-exc docutils literal notranslate"><span class="pre">Warning</span></code></a> 的子类），警告类别必须是其子类，才能匹配。</p></li>
<li><p><em>module</em> 是一个包含完整限定模块名称的开头需要匹配的正则表达式的字符串，对大小写敏感。 在 <a class="reference internal" href="../using/cmdline.xhtml#cmdoption-W"><code class="xref std std-option docutils literal notranslate"><span class="pre">-W</span></code></a> 和 <span class="target" id="index-12"></span><a class="reference internal" href="../using/cmdline.xhtml#envvar-PYTHONWARNINGS"><code class="xref std std-envvar docutils literal notranslate"><span class="pre">PYTHONWARNINGS</span></code></a> 中，<em>module</em> 是完整限定模块名称需要与之相等的字符串字面值（对大小写敏感），将忽略 <em>module</em> 开头和末尾的任何空格。</p></li>
<li><p><em>lineno</em> 是个整数，发生警告的行号必须与之匹配，或为 <code class="docutils literal notranslate"><span class="pre">0</span></code> 表示与所有行号匹配。</p></li>
</ul>
<p>由于 <a class="reference internal" href="exceptions.xhtml#Warning" title="Warning"><code class="xref py py-exc docutils literal notranslate"><span class="pre">Warning</span></code></a> 类是由内置类 <a class="reference internal" href="exceptions.xhtml#Exception" title="Exception"><code class="xref py py-exc docutils literal notranslate"><span class="pre">Exception</span></code></a> 派生出来的，要把某个警告变成错误，只要触发 <code class="docutils literal notranslate"><span class="pre">category(message)</span></code> 即可。</p>
<p>如果警告不匹配所有已注册的过滤器，那就会应用 “default” 动作（正如其名）。</p>
<section id="describing-warning-filters">
<span id="id2"></span><h3>警告过滤器的介绍</h3>
<p>警告过滤器由传给 Python 解释器的命令行 <a class="reference internal" href="../using/cmdline.xhtml#cmdoption-W"><code class="xref std std-option docutils literal notranslate"><span class="pre">-W</span></code></a> 选项和 <span class="target" id="index-13"></span><a class="reference internal" href="../using/cmdline.xhtml#envvar-PYTHONWARNINGS"><code class="xref std std-envvar docutils literal notranslate"><span class="pre">PYTHONWARNINGS</span></code></a> 环境变量初始化。解释器在  <code class="xref py py-data docutils literal notranslate"><span class="pre">sys.warningoptions</span></code> 中保存了所有给出的参数，但不作解释；<a class="reference internal" href="#module-warnings" title="warnings: Issue warning messages and control their disposition."><code class="xref py py-mod docutils literal notranslate"><span class="pre">warnings</span></code></a> 模块在第一次导入时会解析这些参数（无效的选项被忽略，并会先向 <a class="reference internal" href="sys.xhtml#sys.stderr" title="sys.stderr"><code class="xref py py-data docutils literal notranslate"><span class="pre">sys.stderr</span></code></a> 打印一条信息）。</p>
<p>每个警告过滤器的设定格式为冒号分隔的字段序列：</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="n">action</span><span class="p">:</span><span class="n">message</span><span class="p">:</span><span class="n">category</span><span class="p">:</span><span class="n">module</span><span class="p">:</span><span class="n">line</span>
</pre></div>
</div>
<p>这些字段的含义在 <a class="reference internal" href="#warning-filter"><span class="std std-ref">警告过滤器</span></a> 中描述。当一行中列出多个过滤器时（如 <span class="target" id="index-14"></span><a class="reference internal" href="../using/cmdline.xhtml#envvar-PYTHONWARNINGS"><code class="xref std std-envvar docutils literal notranslate"><span class="pre">PYTHONWARNINGS</span></code></a>），过滤器间用逗号隔开，后面的优先于前面的（因为是从左到右应用的，最近应用的过滤器优先于前面的）。</p>
<p>常用的警告过滤器适用于所有的警告、特定类别的警告、由特定模块和包引发的警告。下面是一些例子：</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="n">default</span>                      <span class="c1"># Show all warnings (even those ignored by default)</span>
<span class="n">ignore</span>                       <span class="c1"># Ignore all warnings</span>
<span class="n">error</span>                        <span class="c1"># Convert all warnings to errors</span>
<span class="n">error</span><span class="p">::</span><span class="ne">ResourceWarning</span>       <span class="c1"># Treat ResourceWarning messages as errors</span>
<span class="n">default</span><span class="p">::</span><span class="ne">DeprecationWarning</span>  <span class="c1"># Show DeprecationWarning messages</span>
<span class="n">ignore</span><span class="p">,</span><span class="n">default</span><span class="p">:::</span><span class="n">mymodule</span>    <span class="c1"># Only report warnings triggered by &quot;mymodule&quot;</span>
<span class="n">error</span><span class="p">:::</span><span class="n">mymodule</span>             <span class="c1"># Convert warnings to errors in &quot;mymodule&quot;</span>
</pre></div>
</div>
</section>
<section id="default-warning-filter">
<span id="id3"></span><h3>默认警告过滤器</h3>
<p>Python 默认安装了几个警告过滤器，可以通过 <a class="reference internal" href="../using/cmdline.xhtml#cmdoption-W"><code class="xref std std-option docutils literal notranslate"><span class="pre">-W</span></code></a> 命令行参数、 <span class="target" id="index-15"></span><a class="reference internal" href="../using/cmdline.xhtml#envvar-PYTHONWARNINGS"><code class="xref std std-envvar docutils literal notranslate"><span class="pre">PYTHONWARNINGS</span></code></a> 环境变量及调用 <a class="reference internal" href="#warnings.filterwarnings" title="warnings.filterwarnings"><code class="xref py py-func docutils literal notranslate"><span class="pre">filterwarnings()</span></code></a> 进行覆盖。</p>
<p>在常规发布的版本中，默认的警告过滤器包括（按优先顺序排列）：</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="n">default</span><span class="p">::</span><span class="ne">DeprecationWarning</span><span class="p">:</span><span class="n">__main__</span>
<span class="n">ignore</span><span class="p">::</span><span class="ne">DeprecationWarning</span>
<span class="n">ignore</span><span class="p">::</span><span class="ne">PendingDeprecationWarning</span>
<span class="n">ignore</span><span class="p">::</span><span class="ne">ImportWarning</span>
<span class="n">ignore</span><span class="p">::</span><span class="ne">ResourceWarning</span>
</pre></div>
</div>
<p>在 <a class="reference internal" href="../using/configure.xhtml#debug-build"><span class="std std-ref">调试版本</span></a> 中，默认警告过滤器的列表是空的。</p>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.2 版本发生变更: </span>除了 <a class="reference internal" href="exceptions.xhtml#PendingDeprecationWarning" title="PendingDeprecationWarning"><code class="xref py py-exc docutils literal notranslate"><span class="pre">PendingDeprecationWarning</span></code></a> 之外，<a class="reference internal" href="exceptions.xhtml#DeprecationWarning" title="DeprecationWarning"><code class="xref py py-exc docutils literal notranslate"><span class="pre">DeprecationWarning</span></code></a> 现在默认会被忽略。</p>
</div>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.7 版本发生变更: </span><a class="reference internal" href="exceptions.xhtml#DeprecationWarning" title="DeprecationWarning"><code class="xref py py-exc docutils literal notranslate"><span class="pre">DeprecationWarning</span></code></a> 在被 <code class="docutils literal notranslate"><span class="pre">__main__</span></code> 中的代码直接触发时，默认会再次显示。</p>
</div>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.7 版本发生变更: </span>如果指定两次 <a class="reference internal" href="../using/cmdline.xhtml#cmdoption-b"><code class="xref std std-option docutils literal notranslate"><span class="pre">-b</span></code></a>，则 <a class="reference internal" href="exceptions.xhtml#BytesWarning" title="BytesWarning"><code class="xref py py-exc docutils literal notranslate"><span class="pre">BytesWarning</span></code></a> 不再出现在默认的过滤器列表中，而是通过 <code class="xref py py-data docutils literal notranslate"><span class="pre">sys.warningoptions</span></code> 进行配置。</p>
</div>
</section>
<section id="overriding-the-default-filter">
<span id="warning-disable"></span><h3>重写默认的过滤器</h3>
<p>Python 应用程序的开发人员可能希望在默认情况下向用户隐藏 <em>所有</em> Python级别的警告，而只在运行测试或其他调试时显示这些警告。用于向解释器传递过滤器配置的 <code class="xref py py-data docutils literal notranslate"><span class="pre">sys.warningoptions</span></code> 属性可以作为一个标记，表示是否应该禁用警告：</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="kn">import</span> <span class="nn">sys</span>

<span class="k">if</span> <span class="ow">not</span> <span class="n">sys</span><span class="o">.</span><span class="n">warnoptions</span><span class="p">:</span>
    <span class="kn">import</span> <span class="nn">warnings</span>
    <span class="n">warnings</span><span class="o">.</span><span class="n">simplefilter</span><span class="p">(</span><span class="s2">&quot;ignore&quot;</span><span class="p">)</span>
</pre></div>
</div>
<p>建议 Python 代码测试的开发者使用如下代码，以确保被测代码默认显示 <em>所有</em> 警告：</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="kn">import</span> <span class="nn">sys</span>

<span class="k">if</span> <span class="ow">not</span> <span class="n">sys</span><span class="o">.</span><span class="n">warnoptions</span><span class="p">:</span>
    <span class="kn">import</span> <span class="nn">os</span><span class="o">,</span> <span class="nn">warnings</span>
    <span class="n">warnings</span><span class="o">.</span><span class="n">simplefilter</span><span class="p">(</span><span class="s2">&quot;default&quot;</span><span class="p">)</span> <span class="c1"># Change the filter in this process</span>
    <span class="n">os</span><span class="o">.</span><span class="n">environ</span><span class="p">[</span><span class="s2">&quot;PYTHONWARNINGS&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="s2">&quot;default&quot;</span> <span class="c1"># Also affect subprocesses</span>
</pre></div>
</div>
<p>最后，建议在 <code class="docutils literal notranslate"><span class="pre">__main__</span></code> 以外的命名空间运行用户代码的交互式开发者，请确保 <a class="reference internal" href="exceptions.xhtml#DeprecationWarning" title="DeprecationWarning"><code class="xref py py-exc docutils literal notranslate"><span class="pre">DeprecationWarning</span></code></a> 在默认情况下是可见的，可采用如下代码（这里 <code class="docutils literal notranslate"><span class="pre">user_ns</span></code> 是用于执行交互式输入代码的模块）：</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="kn">import</span> <span class="nn">warnings</span>
<span class="n">warnings</span><span class="o">.</span><span class="n">filterwarnings</span><span class="p">(</span><span class="s2">&quot;default&quot;</span><span class="p">,</span> <span class="n">category</span><span class="o">=</span><span class="ne">DeprecationWarning</span><span class="p">,</span>
                                   <span class="n">module</span><span class="o">=</span><span class="n">user_ns</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;__name__&quot;</span><span class="p">))</span>
</pre></div>
</div>
</section>
</section>
<section id="temporarily-suppressing-warnings">
<span id="warning-suppress"></span><h2>暂时禁止警告</h2>
<p>如果明知正在使用会引起警告的代码，比如某个废弃函数，但不想看到警告（即便警告已经通过命令行作了显式配置），那么可以使用 <a class="reference internal" href="#warnings.catch_warnings" title="warnings.catch_warnings"><code class="xref py py-class docutils literal notranslate"><span class="pre">catch_warnings</span></code></a> 上下文管理器来抑制警告。</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="kn">import</span> <span class="nn">warnings</span>

<span class="k">def</span> <span class="nf">fxn</span><span class="p">():</span>
    <span class="n">warnings</span><span class="o">.</span><span class="n">warn</span><span class="p">(</span><span class="s2">&quot;deprecated&quot;</span><span class="p">,</span> <span class="ne">DeprecationWarning</span><span class="p">)</span>

<span class="k">with</span> <span class="n">warnings</span><span class="o">.</span><span class="n">catch_warnings</span><span class="p">():</span>
    <span class="n">warnings</span><span class="o">.</span><span class="n">simplefilter</span><span class="p">(</span><span class="s2">&quot;ignore&quot;</span><span class="p">)</span>
    <span class="n">fxn</span><span class="p">()</span>
</pre></div>
</div>
<p>在上下文管理器中，所有的警告将被简单地忽略。这样就能使用已知的过时代码而又不必看到警告，同时也不会限制警告其他可能不知过时的代码。注意：只能保证在单线程应用程序中生效。如果两个以上的线程同时使用 <a class="reference internal" href="#warnings.catch_warnings" title="warnings.catch_warnings"><code class="xref py py-class docutils literal notranslate"><span class="pre">catch_warnings</span></code></a> 上下文管理器，行为不可预知。</p>
</section>
<section id="testing-warnings">
<span id="warning-testing"></span><h2>测试警告</h2>
<p>要测试由代码引发的警告，请采用 <a class="reference internal" href="#warnings.catch_warnings" title="warnings.catch_warnings"><code class="xref py py-class docutils literal notranslate"><span class="pre">catch_warnings</span></code></a> 上下文管理器。有了它，就可以临时改变警告过滤器以方便测试。例如，以下代码可捕获所有的警告以便查看：</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="kn">import</span> <span class="nn">warnings</span>

<span class="k">def</span> <span class="nf">fxn</span><span class="p">():</span>
    <span class="n">warnings</span><span class="o">.</span><span class="n">warn</span><span class="p">(</span><span class="s2">&quot;deprecated&quot;</span><span class="p">,</span> <span class="ne">DeprecationWarning</span><span class="p">)</span>

<span class="k">with</span> <span class="n">warnings</span><span class="o">.</span><span class="n">catch_warnings</span><span class="p">(</span><span class="n">record</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span> <span class="k">as</span> <span class="n">w</span><span class="p">:</span>
    <span class="c1"># Cause all warnings to always be triggered.</span>
    <span class="n">warnings</span><span class="o">.</span><span class="n">simplefilter</span><span class="p">(</span><span class="s2">&quot;always&quot;</span><span class="p">)</span>
    <span class="c1"># Trigger a warning.</span>
    <span class="n">fxn</span><span class="p">()</span>
    <span class="c1"># Verify some things</span>
    <span class="k">assert</span> <span class="nb">len</span><span class="p">(</span><span class="n">w</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span>
    <span class="k">assert</span> <span class="nb">issubclass</span><span class="p">(</span><span class="n">w</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">category</span><span class="p">,</span> <span class="ne">DeprecationWarning</span><span class="p">)</span>
    <span class="k">assert</span> <span class="s2">&quot;deprecated&quot;</span> <span class="ow">in</span> <span class="nb">str</span><span class="p">(</span><span class="n">w</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">message</span><span class="p">)</span>
</pre></div>
</div>
<p>也可以用 <code class="docutils literal notranslate"><span class="pre">error</span></code> 取代 <code class="docutils literal notranslate"><span class="pre">always</span></code> ，让所有的警告都成为异常。需要注意的是，如果某条警告已经因为 <code class="docutils literal notranslate"><span class="pre">once</span></code> / <code class="docutils literal notranslate"><span class="pre">default</span></code> 规则而被引发，那么无论设置什么过滤器，该条警告都不会再出现，除非该警告有关的注册数据被清除。</p>
<p>一旦上下文管理器退出，警告过滤器将恢复到刚进此上下文时的状态。这样在多次测试时可防止意外改变警告过滤器，从而导致不确定的测试结果。模块中的 <a class="reference internal" href="#warnings.showwarning" title="warnings.showwarning"><code class="xref py py-func docutils literal notranslate"><span class="pre">showwarning()</span></code></a> 函数也被恢复到初始值。注意：这只能在单线程应用程序中得到保证。如果两个以上的线程同时使用 <a class="reference internal" href="#warnings.catch_warnings" title="warnings.catch_warnings"><code class="xref py py-class docutils literal notranslate"><span class="pre">catch_warnings</span></code></a> 上下文管理器，行为未定义。</p>
<p>当测试多项操作会引发同类警告时，重点是要确保每次操作都会触发新的警告（比如，将警告设置为异常并检查操作是否触发异常，检查每次操作后警告列表的长度是否有增加，否则就在每次新操作前将以前的警告列表项删除）。</p>
</section>
<section id="updating-code-for-new-versions-of-dependencies">
<span id="warning-ignored"></span><h2>为新版本的依赖关系更新代码</h2>
<p>在默认情况下，主要针对 Python 开发者（而不是 Python 应用程序的最终用户）的警告类别，会被忽略。</p>
<p>值得注意的是，这个“默认忽略”的列表包含 <a class="reference internal" href="exceptions.xhtml#DeprecationWarning" title="DeprecationWarning"><code class="xref py py-exc docutils literal notranslate"><span class="pre">DeprecationWarning</span></code></a> （适用于每个模块，除了 <code class="docutils literal notranslate"><span class="pre">__main__</span></code>），这意味着开发人员应该确保在测试代码时应将通常忽略的警告显示出来，以便未来破坏性 API 变化时及时收到通知（无论是在标准库还是第三方包）。</p>
<p>理想情况下，代码会有一个合适的测试套件，在运行测试时会隐含地启用所有警告（由 <a class="reference internal" href="unittest.xhtml#module-unittest" title="unittest: Unit testing framework for Python."><code class="xref py py-mod docutils literal notranslate"><span class="pre">unittest</span></code></a> 模块提供的测试运行程序就是如此）。</p>
<p>在不太理想的情况下，可以通过向 Python 解释器传入 <a class="reference internal" href="../using/cmdline.xhtml#cmdoption-W"><code class="xref std std-option docutils literal notranslate"><span class="pre">-Wd</span></code></a>  (这是 <code class="xref std std-option docutils literal notranslate"><span class="pre">-W</span> <span class="pre">default</span></code> 的简写) 或设置环境变量 <code class="docutils literal notranslate"><span class="pre">PYTHONWARNINGS=default</span></code> 来检查应用程序是否用到了已弃用的接口。 这样可以启用对所有警告的默认处理操作，包括那些默认忽略的警告。 要改变遇到警告后执行的动作，可以改变传给 <a class="reference internal" href="../using/cmdline.xhtml#cmdoption-W"><code class="xref std std-option docutils literal notranslate"><span class="pre">-W</span></code></a> 的参数 (例如 <code class="xref std std-option docutils literal notranslate"><span class="pre">-W</span> <span class="pre">error</span></code>)。 请参阅 <a class="reference internal" href="../using/cmdline.xhtml#cmdoption-W"><code class="xref std std-option docutils literal notranslate"><span class="pre">-W</span></code></a> 旗标来了解更多的细节。</p>
</section>
<section id="available-functions">
<span id="warning-functions"></span><h2>可用的函数</h2>
<dl class="py function">
<dt class="sig sig-object py" id="warnings.warn">
<span class="sig-prename descclassname"><span class="pre">warnings.</span></span><span class="sig-name descname"><span class="pre">warn</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">message</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">category</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">stacklevel</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">1</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">source</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="o"><span class="pre">*</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">skip_file_prefixes</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>引发警告、忽略或者触发异常。 如果给出 <em>category</em> 参数，则必须是  <a class="reference internal" href="#warning-categories"><span class="std std-ref">警告类别类</span></a> ；默认为 <a class="reference internal" href="exceptions.xhtml#UserWarning" title="UserWarning"><code class="xref py py-exc docutils literal notranslate"><span class="pre">UserWarning</span></code></a>。 或者 <em>message</em> 可为 <a class="reference internal" href="exceptions.xhtml#Warning" title="Warning"><code class="xref py py-exc docutils literal notranslate"><span class="pre">Warning</span></code></a> 的实例，这时 <em>category</em> 将被忽略，转而采用 <code class="docutils literal notranslate"><span class="pre">message.__class__</span></code>。 在这种情况下，错误信息文本将是 <code class="docutils literal notranslate"><span class="pre">str(message)</span></code>。 如果某条警告被 <a class="reference internal" href="#warning-filter"><span class="std std-ref">警告过滤器</span></a> 改成了错误，本函数将触发一条异常。 参数 <em>stacklevel</em> 可供 Python 包装函数使用，比如:</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="k">def</span> <span class="nf">deprecated_api</span><span class="p">(</span><span class="n">message</span><span class="p">):</span>
    <span class="n">warnings</span><span class="o">.</span><span class="n">warn</span><span class="p">(</span><span class="n">message</span><span class="p">,</span> <span class="ne">DeprecationWarning</span><span class="p">,</span> <span class="n">stacklevel</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
</pre></div>
</div>
<p>这会让警告指向 <code class="docutils literal notranslate"><span class="pre">deprecated_api</span></code> 的调用者，而不是 <code class="docutils literal notranslate"><span class="pre">deprecated_api</span></code> 本身的来源（因为后者会破坏警告消息的目的）。</p>
<p><em>skip_file_prefixes</em> 关键字参数可被用来指明在栈层级计数时哪些栈帧要被忽略。 当常数 <em>stacklevel</em> 不能适应所有调用路径或在其他情况下难以维护如果你希望警告总是在一个包以外的调用位置上出现这将会很有用处。 如果提供，则它必须是一个字符串元组。 当提供了 prefixes 前缀时，stacklevel 会被隐式地覆盖为 <code class="docutils literal notranslate"><span class="pre">max(2,</span> <span class="pre">stacklevel)</span></code>。 要使得一个警告被归因至当前包以外的调用方你可以这样写:</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="c1"># example/lower.py</span>
<span class="n">_warn_skips</span> <span class="o">=</span> <span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">dirname</span><span class="p">(</span><span class="vm">__file__</span><span class="p">),)</span>

<span class="k">def</span> <span class="nf">one_way</span><span class="p">(</span><span class="n">r_luxury_yacht</span><span class="o">=</span><span class="kc">None</span><span class="p">,</span> <span class="n">t_wobbler_mangrove</span><span class="o">=</span><span class="kc">None</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">r_luxury_yacht</span><span class="p">:</span>
        <span class="n">warnings</span><span class="o">.</span><span class="n">warn</span><span class="p">(</span><span class="s2">&quot;Please migrate to t_wobbler_mangrove=.&quot;</span><span class="p">,</span>
                      <span class="n">skip_file_prefixes</span><span class="o">=</span><span class="n">_warn_skips</span><span class="p">)</span>

<span class="c1"># example/higher.py</span>
<span class="kn">from</span> <span class="nn">.</span> <span class="kn">import</span> <span class="n">lower</span>

<span class="k">def</span> <span class="nf">another_way</span><span class="p">(</span><span class="o">**</span><span class="n">kw</span><span class="p">):</span>
    <span class="n">lower</span><span class="o">.</span><span class="n">one_way</span><span class="p">(</span><span class="o">**</span><span class="n">kw</span><span class="p">)</span>
</pre></div>
</div>
<p>这将使得警告同时指向 <code class="docutils literal notranslate"><span class="pre">example.lower.one_way()</span></code> 和来自 <code class="docutils literal notranslate"><span class="pre">example</span></code> 包以外的调用代码的 <code class="docutils literal notranslate"><span class="pre">package.higher.another_way()</span></code> 调用位置。</p>
<p><em>source</em> 是发出 <a class="reference internal" href="exceptions.xhtml#ResourceWarning" title="ResourceWarning"><code class="xref py py-exc docutils literal notranslate"><span class="pre">ResourceWarning</span></code></a> 的被销毁对象。</p>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.6 版本发生变更: </span>加入  <em>source</em>  参数。</p>
</div>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.12 版本发生变更: </span>增加了 <em>skip_file_prefixes</em>。</p>
</div>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="warnings.warn_explicit">
<span class="sig-prename descclassname"><span class="pre">warnings.</span></span><span class="sig-name descname"><span class="pre">warn_explicit</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">message</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">category</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">filename</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">lineno</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">module</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">registry</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">module_globals</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">source</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>这是 <a class="reference internal" href="#warnings.warn" title="warnings.warn"><code class="xref py py-func docutils literal notranslate"><span class="pre">warn()</span></code></a> 函数的底层接口，显式传入消息、类别、文件名和行号，以及可选的模块名和注册表（应为模块的 <code class="docutils literal notranslate"><span class="pre">__warningregistry__</span></code> 字典）。 模块名称默认为去除了 <code class="docutils literal notranslate"><span class="pre">.py</span></code> 的文件名；如果未传递注册表，警告就不会被抑制。 <em>message</em> 必须是个字符串，<em>category</em> 是 <a class="reference internal" href="exceptions.xhtml#Warning" title="Warning"><code class="xref py py-exc docutils literal notranslate"><span class="pre">Warning</span></code></a> 的子类；或者*message* 可为 <a class="reference internal" href="exceptions.xhtml#Warning" title="Warning"><code class="xref py py-exc docutils literal notranslate"><span class="pre">Warning</span></code></a> 的实例，且 <em>category</em> 将被忽略。</p>
<p><em>module_globals</em> 应为发出警告的代码所用的全局命名空间。（该参数用于从 zip 文件或其他非文件系统导入模块时显式源码）。</p>
<p><em>source</em> 是发出 <a class="reference internal" href="exceptions.xhtml#ResourceWarning" title="ResourceWarning"><code class="xref py py-exc docutils literal notranslate"><span class="pre">ResourceWarning</span></code></a> 的被销毁对象。</p>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.6 版本发生变更: </span>加入  <em>source</em> 参数。</p>
</div>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="warnings.showwarning">
<span class="sig-prename descclassname"><span class="pre">warnings.</span></span><span class="sig-name descname"><span class="pre">showwarning</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">message</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">category</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">filename</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">lineno</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">file</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">line</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>将警告信息写入文件。默认的实现代码是调用 <code class="docutils literal notranslate"><span class="pre">formatwarning(message,</span> <span class="pre">category,</span> <span class="pre">filename,</span> <span class="pre">lineno,</span> <span class="pre">line)</span></code> 并将结果字符串写入 <em>file</em> ，默认文件为 <a class="reference internal" href="sys.xhtml#sys.stderr" title="sys.stderr"><code class="xref py py-data docutils literal notranslate"><span class="pre">sys.stderr</span></code></a>。通过将任何可调用对象赋给 <code class="docutils literal notranslate"><span class="pre">warnings.showwarning</span></code> 可替换掉该函数。<em>line</em> 是要包含在警告信息中的一行源代码；如果未提供 <em>line</em>，<a class="reference internal" href="#warnings.showwarning" title="warnings.showwarning"><code class="xref py py-func docutils literal notranslate"><span class="pre">showwarning()</span></code></a> 将尝试读取由*filename* 和 <em>lineno</em> 指定的行。</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="warnings.formatwarning">
<span class="sig-prename descclassname"><span class="pre">warnings.</span></span><span class="sig-name descname"><span class="pre">formatwarning</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">message</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">category</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">filename</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">lineno</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">line</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>以标准方式格式化一条警告信息。将返回一个字符串，可能包含内嵌的换行符，并以换行符结束。如果未提供 <em>line</em>，<a class="reference internal" href="#warnings.formatwarning" title="warnings.formatwarning"><code class="xref py py-func docutils literal notranslate"><span class="pre">formatwarning()</span></code></a> 将尝试读取由 <em>filename</em> 和 <em>lineno</em> 指定的行。</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="warnings.filterwarnings">
<span class="sig-prename descclassname"><span class="pre">warnings.</span></span><span class="sig-name descname"><span class="pre">filterwarnings</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">action</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">message</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">''</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">category</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">Warning</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">module</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">''</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">lineno</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">0</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">append</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>在 <a class="reference internal" href="#warning-filter"><span class="std std-ref">警告过滤器种类</span></a> 列表中插入一条数据项。默认情况下，该数据项将被插到前面；如果 <em>append</em> 为 True，则会插到后面。这里会检查参数的类型，编译 <em>message</em> 和 <em>module</em> 正则表达式，并将他们作为一个元组插入警告过滤器的列表中。如果两者都与某种警告匹配，那么靠近列表前面的数据项就会覆盖后面的项。省略的参数默认匹配任意值。</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="warnings.simplefilter">
<span class="sig-prename descclassname"><span class="pre">warnings.</span></span><span class="sig-name descname"><span class="pre">simplefilter</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">action</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">category</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">Warning</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">lineno</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">0</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">append</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>在 <a class="reference internal" href="#warning-filter"><span class="std std-ref">警告过滤器种类</span></a> 列表中插入一条简单数据项。函数参数的含义与 <a class="reference internal" href="#warnings.filterwarnings" title="warnings.filterwarnings"><code class="xref py py-func docutils literal notranslate"><span class="pre">filterwarnings()</span></code></a> 相同，但不需要正则表达式，因为插入的过滤器总是匹配任何模块中的任何信息，只要类别和行号匹配即可。</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="warnings.resetwarnings">
<span class="sig-prename descclassname"><span class="pre">warnings.</span></span><span class="sig-name descname"><span class="pre">resetwarnings</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>重置警告过滤器。这将丢弃之前对 <a class="reference internal" href="#warnings.filterwarnings" title="warnings.filterwarnings"><code class="xref py py-func docutils literal notranslate"><span class="pre">filterwarnings()</span></code></a> 的所有调用，包括 <a class="reference internal" href="../using/cmdline.xhtml#cmdoption-W"><code class="xref std std-option docutils literal notranslate"><span class="pre">-W</span></code></a> 命令行选项和对 <a class="reference internal" href="#warnings.simplefilter" title="warnings.simplefilter"><code class="xref py py-func docutils literal notranslate"><span class="pre">simplefilter()</span></code></a> 的调用效果。</p>
</dd></dl>

</section>
<section id="available-context-managers">
<h2>可用的上下文管理器</h2>
<dl class="py class">
<dt class="sig sig-object py" id="warnings.catch_warnings">
<em class="property"><span class="pre">class</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">warnings.</span></span><span class="sig-name descname"><span class="pre">catch_warnings</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="o"><span class="pre">*</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">record</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">module</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">action</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">category</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">Warning</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">lineno</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">0</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">append</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>该上下文管理器会复制警告过滤器和 <a class="reference internal" href="#warnings.showwarning" title="warnings.showwarning"><code class="xref py py-func docutils literal notranslate"><span class="pre">showwarning()</span></code></a> 函数，并在退出时恢复。 如果 <em>record</em> 参数是 <a class="reference internal" href="constants.xhtml#False" title="False"><code class="xref py py-const docutils literal notranslate"><span class="pre">False</span></code></a> (默认)，则在进入时会返回 <a class="reference internal" href="constants.xhtml#None" title="None"><code class="xref py py-class docutils literal notranslate"><span class="pre">None</span></code></a>。 如果 <em>record</em> 为 <a class="reference internal" href="constants.xhtml#True" title="True"><code class="xref py py-const docutils literal notranslate"><span class="pre">True</span></code></a>，则返回一个列表，列表由自定义 <a class="reference internal" href="#warnings.showwarning" title="warnings.showwarning"><code class="xref py py-func docutils literal notranslate"><span class="pre">showwarning()</span></code></a> 函数所用对象逐步填充（该函数还会抑制 <code class="docutils literal notranslate"><span class="pre">sys.stdout</span></code> 的输出）。 列表中每个对象的属性与 <a class="reference internal" href="#warnings.showwarning" title="warnings.showwarning"><code class="xref py py-func docutils literal notranslate"><span class="pre">showwarning()</span></code></a> 的参数名称相同。</p>
<p><em>module</em> 参数代表一个模块，当导入 <a class="reference internal" href="#module-warnings" title="warnings: Issue warning messages and control their disposition."><code class="xref py py-mod docutils literal notranslate"><span class="pre">warnings</span></code></a> 时，将被用于代替返回的模块，其过滤器将被保护。该参数主要是为了测试 <a class="reference internal" href="#module-warnings" title="warnings: Issue warning messages and control their disposition."><code class="xref py py-mod docutils literal notranslate"><span class="pre">warnings</span></code></a> 模块自身。</p>
<p>如果 <em>action</em> 参数不为 <code class="docutils literal notranslate"><span class="pre">None</span></code>，则剩余的参数会被传递给 <a class="reference internal" href="#warnings.simplefilter" title="warnings.simplefilter"><code class="xref py py-func docutils literal notranslate"><span class="pre">simplefilter()</span></code></a> 就如同它在进入上下文时被立即调用一样。</p>
<div class="admonition note">
<p class="admonition-title">备注</p>
<p><a class="reference internal" href="#warnings.catch_warnings" title="warnings.catch_warnings"><code class="xref py py-class docutils literal notranslate"><span class="pre">catch_warnings</span></code></a> 管理器的工作方式，是替换并随后恢复模块的 <a class="reference internal" href="#warnings.showwarning" title="warnings.showwarning"><code class="xref py py-func docutils literal notranslate"><span class="pre">showwarning()</span></code></a> 函数和内部的过滤器种类列表。这意味着上下文管理器将会修改全局状态，因此不是线程安全的。</p>
</div>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.11 版本发生变更: </span>增加了 <em>action</em>, <em>category</em>, <em>lineno</em> 和 <em>append</em> 形参。</p>
</div>
</dd></dl>

</section>
</section>


            <div class="clearer"></div>
          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>