<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" /><meta name="viewport" content="width=device-width, initial-scale=1" />
<meta property="og:title" content="高层级 API 索引" />
<meta property="og:type" content="website" />
<meta property="og:url" content="https://docs.python.org/3/library/asyncio-api-index.xhtml" />
<meta property="og:site_name" content="Python documentation" />
<meta property="og:description" content="这个页面列举了所有能用于 async/wait 的高层级asyncio API 集。 任务: 运行异步程序，创建Task对象，等待多件事运行超时的公共集。,, run(), 创建事件循环，运行一个协程，关闭事件循环。,, Runner, 一个能够简化多次异步函数调用操作的上下文管理器。,, Task, Task对象,, TaskGroup, 持有一组任务的上下文管理器。 它提供了一种等待分组..." />
<meta property="og:image" content="https://docs.python.org/3/_static/og-image.png" />
<meta property="og:image:alt" content="Python documentation" />
<meta name="description" content="这个页面列举了所有能用于 async/wait 的高层级asyncio API 集。 任务: 运行异步程序，创建Task对象，等待多件事运行超时的公共集。,, run(), 创建事件循环，运行一个协程，关闭事件循环。,, Runner, 一个能够简化多次异步函数调用操作的上下文管理器。,, Task, Task对象,, TaskGroup, 持有一组任务的上下文管理器。 它提供了一种等待分组..." />
<meta property="og:image:width" content="200" />
<meta property="og:image:height" content="200" />
<meta name="theme-color" content="#3776ab" />

    <title>高层级 API 索引</title>
    <link rel="stylesheet" type="text/css" href="../_static/pygments.css" />
    <link rel="stylesheet" type="text/css" href="../_static/epub.css" />
    <link rel="canonical" href="https://docs.python.org/3/library/asyncio-api-index.html" />
    
      
    

    
    <style>
      @media only screen {
        table.full-width-table {
            width: 100%;
        }
      }
    </style>
 

  </head><body>


    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <section id="high-level-api-index">
<h1>高层级 API 索引</h1>
<p>这个页面列举了所有能用于 async/wait 的高层级asyncio API 集。</p>
<section id="tasks">
<h2>任务</h2>
<p>运行异步程序，创建Task对象，等待多件事运行超时的公共集。</p>
<table class="full-width-table docutils align-default">
<colgroup>
<col style="width: 50.0%" />
<col style="width: 50.0%" />
</colgroup>
<tbody>
<tr class="row-odd"><td><p><a class="reference internal" href="asyncio-runner.xhtml#asyncio.run" title="asyncio.run"><code class="xref py py-func docutils literal notranslate"><span class="pre">run()</span></code></a></p></td>
<td><p>创建事件循环，运行一个协程，关闭事件循环。</p></td>
</tr>
<tr class="row-even"><td><p><a class="reference internal" href="asyncio-runner.xhtml#asyncio.Runner" title="asyncio.Runner"><code class="xref py py-class docutils literal notranslate"><span class="pre">Runner</span></code></a></p></td>
<td><p>一个能够简化多次异步函数调用操作的上下文管理器。</p></td>
</tr>
<tr class="row-odd"><td><p><a class="reference internal" href="asyncio-task.xhtml#asyncio.Task" title="asyncio.Task"><code class="xref py py-class docutils literal notranslate"><span class="pre">Task</span></code></a></p></td>
<td><p>Task对象</p></td>
</tr>
<tr class="row-even"><td><p><a class="reference internal" href="asyncio-task.xhtml#asyncio.TaskGroup" title="asyncio.TaskGroup"><code class="xref py py-class docutils literal notranslate"><span class="pre">TaskGroup</span></code></a></p></td>
<td><p>持有一组任务的上下文管理器。 它提供了一种等待分组中所有任务完成的方便可靠的方式。</p></td>
</tr>
<tr class="row-odd"><td><p><a class="reference internal" href="asyncio-task.xhtml#asyncio.create_task" title="asyncio.create_task"><code class="xref py py-func docutils literal notranslate"><span class="pre">create_task()</span></code></a></p></td>
<td><p>启动一个异步 Task，然后将其返回。</p></td>
</tr>
<tr class="row-even"><td><p><a class="reference internal" href="asyncio-task.xhtml#asyncio.current_task" title="asyncio.current_task"><code class="xref py py-func docutils literal notranslate"><span class="pre">current_task()</span></code></a></p></td>
<td><p>返回当前Task对象</p></td>
</tr>
<tr class="row-odd"><td><p><a class="reference internal" href="asyncio-task.xhtml#asyncio.all_tasks" title="asyncio.all_tasks"><code class="xref py py-func docutils literal notranslate"><span class="pre">all_tasks()</span></code></a></p></td>
<td><p>返回一个事件循环的所有尚未完成的任务。</p></td>
</tr>
<tr class="row-even"><td><p><code class="docutils literal notranslate"><span class="pre">await</span></code> <a class="reference internal" href="asyncio-task.xhtml#asyncio.sleep" title="asyncio.sleep"><code class="xref py py-func docutils literal notranslate"><span class="pre">sleep()</span></code></a></p></td>
<td><p>休眠几秒。</p></td>
</tr>
<tr class="row-odd"><td><p><code class="docutils literal notranslate"><span class="pre">await</span></code> <a class="reference internal" href="asyncio-task.xhtml#asyncio.gather" title="asyncio.gather"><code class="xref py py-func docutils literal notranslate"><span class="pre">gather()</span></code></a></p></td>
<td><p>并发执行所有事件的调度和等待。</p></td>
</tr>
<tr class="row-even"><td><p><code class="docutils literal notranslate"><span class="pre">await</span></code> <a class="reference internal" href="asyncio-task.xhtml#asyncio.wait_for" title="asyncio.wait_for"><code class="xref py py-func docutils literal notranslate"><span class="pre">wait_for()</span></code></a></p></td>
<td><p>有超时控制的运行。</p></td>
</tr>
<tr class="row-odd"><td><p><code class="docutils literal notranslate"><span class="pre">await</span></code> <a class="reference internal" href="asyncio-task.xhtml#asyncio.shield" title="asyncio.shield"><code class="xref py py-func docutils literal notranslate"><span class="pre">shield()</span></code></a></p></td>
<td><p>屏蔽取消操作</p></td>
</tr>
<tr class="row-even"><td><p><code class="docutils literal notranslate"><span class="pre">await</span></code> <a class="reference internal" href="asyncio-task.xhtml#asyncio.wait" title="asyncio.wait"><code class="xref py py-func docutils literal notranslate"><span class="pre">wait()</span></code></a></p></td>
<td><p>完成情况的监控器</p></td>
</tr>
<tr class="row-odd"><td><p><a class="reference internal" href="asyncio-task.xhtml#asyncio.timeout" title="asyncio.timeout"><code class="xref py py-func docutils literal notranslate"><span class="pre">timeout()</span></code></a></p></td>
<td><p>设置超时运行。 在 <code class="docutils literal notranslate"><span class="pre">wait_for</span></code> 不适合的情况下会很有用。</p></td>
</tr>
<tr class="row-even"><td><p><a class="reference internal" href="asyncio-task.xhtml#asyncio.to_thread" title="asyncio.to_thread"><code class="xref py py-func docutils literal notranslate"><span class="pre">to_thread()</span></code></a></p></td>
<td><p>在不同的 OS 线程中异步地运行一个函数。</p></td>
</tr>
<tr class="row-odd"><td><p><a class="reference internal" href="asyncio-task.xhtml#asyncio.run_coroutine_threadsafe" title="asyncio.run_coroutine_threadsafe"><code class="xref py py-func docutils literal notranslate"><span class="pre">run_coroutine_threadsafe()</span></code></a></p></td>
<td><p>从其他OS线程中调度一个协程。</p></td>
</tr>
<tr class="row-even"><td><p><code class="docutils literal notranslate"><span class="pre">for</span> <span class="pre">in</span></code> <a class="reference internal" href="asyncio-task.xhtml#asyncio.as_completed" title="asyncio.as_completed"><code class="xref py py-func docutils literal notranslate"><span class="pre">as_completed()</span></code></a></p></td>
<td><p>用 <code class="docutils literal notranslate"><span class="pre">for</span></code> 循环监控完成情况。</p></td>
</tr>
</tbody>
</table>
<p class="rubric">例子</p>
<ul class="simple">
<li><p><a class="reference internal" href="asyncio-task.xhtml#asyncio-example-gather"><span class="std std-ref">使用 asyncio.gather() 并行运行</span></a>.</p></li>
<li><p><a class="reference internal" href="asyncio-task.xhtml#asyncio-example-waitfor"><span class="std std-ref">使用 asyncio.wait_for() 强制超时</span></a>.</p></li>
<li><p><a class="reference internal" href="asyncio-task.xhtml#asyncio-example-task-cancel"><span class="std std-ref">撤销协程</span></a>.</p></li>
<li><p><a class="reference internal" href="asyncio-task.xhtml#asyncio-example-sleep"><span class="std std-ref">asyncio.sleep() 的用法</span></a>.</p></li>
<li><p>请主要参阅 <a class="reference internal" href="asyncio-task.xhtml#coroutine"><span class="std std-ref">协程与任务文档</span></a>.</p></li>
</ul>
</section>
<section id="queues">
<h2>队列集</h2>
<p>队列集被用于多个异步Task对象的运行调度，实现连接池以及发布/订阅模式。</p>
<table class="full-width-table docutils align-default">
<colgroup>
<col style="width: 50.0%" />
<col style="width: 50.0%" />
</colgroup>
<tbody>
<tr class="row-odd"><td><p><a class="reference internal" href="asyncio-queue.xhtml#asyncio.Queue" title="asyncio.Queue"><code class="xref py py-class docutils literal notranslate"><span class="pre">Queue</span></code></a></p></td>
<td><p>先进先出队列</p></td>
</tr>
<tr class="row-even"><td><p><a class="reference internal" href="asyncio-queue.xhtml#asyncio.PriorityQueue" title="asyncio.PriorityQueue"><code class="xref py py-class docutils literal notranslate"><span class="pre">PriorityQueue</span></code></a></p></td>
<td><p>优先级队列。</p></td>
</tr>
<tr class="row-odd"><td><p><a class="reference internal" href="asyncio-queue.xhtml#asyncio.LifoQueue" title="asyncio.LifoQueue"><code class="xref py py-class docutils literal notranslate"><span class="pre">LifoQueue</span></code></a></p></td>
<td><p>后进先出队列。</p></td>
</tr>
</tbody>
</table>
<p class="rubric">例子</p>
<ul class="simple">
<li><p><a class="reference internal" href="asyncio-queue.xhtml#asyncio-example-queue-dist"><span class="std std-ref">使用 asyncio.Queue 在多个并发任务间分配工作量</span></a>.</p></li>
<li><p>请参阅 <a class="reference internal" href="asyncio-queue.xhtml#asyncio-queues"><span class="std std-ref">队列集文档</span></a>.</p></li>
</ul>
</section>
<section id="subprocesses">
<h2>子进程集</h2>
<p>用于生成子进程和运行shell命令的工具包。</p>
<table class="full-width-table docutils align-default">
<colgroup>
<col style="width: 50.0%" />
<col style="width: 50.0%" />
</colgroup>
<tbody>
<tr class="row-odd"><td><p><code class="docutils literal notranslate"><span class="pre">await</span></code> <a class="reference internal" href="asyncio-subprocess.xhtml#asyncio.create_subprocess_exec" title="asyncio.create_subprocess_exec"><code class="xref py py-func docutils literal notranslate"><span class="pre">create_subprocess_exec()</span></code></a></p></td>
<td><p>创建一个子进程。</p></td>
</tr>
<tr class="row-even"><td><p><code class="docutils literal notranslate"><span class="pre">await</span></code> <a class="reference internal" href="asyncio-subprocess.xhtml#asyncio.create_subprocess_shell" title="asyncio.create_subprocess_shell"><code class="xref py py-func docutils literal notranslate"><span class="pre">create_subprocess_shell()</span></code></a></p></td>
<td><p>运行一个shell命令。</p></td>
</tr>
</tbody>
</table>
<p class="rubric">例子</p>
<ul class="simple">
<li><p><a class="reference internal" href="asyncio-subprocess.xhtml#asyncio-example-subprocess-shell"><span class="std std-ref">执行一个shell命令</span></a>.</p></li>
<li><p>请参阅 <a class="reference internal" href="asyncio-subprocess.xhtml#asyncio-subprocess"><span class="std std-ref">子进程 APIs</span></a> 相关文档.</p></li>
</ul>
</section>
<section id="streams">
<h2>流</h2>
<p>用于网络IO处理的高级API集。</p>
<table class="full-width-table docutils align-default">
<colgroup>
<col style="width: 50.0%" />
<col style="width: 50.0%" />
</colgroup>
<tbody>
<tr class="row-odd"><td><p><code class="docutils literal notranslate"><span class="pre">await</span></code> <a class="reference internal" href="asyncio-stream.xhtml#asyncio.open_connection" title="asyncio.open_connection"><code class="xref py py-func docutils literal notranslate"><span class="pre">open_connection()</span></code></a></p></td>
<td><p>建立一个TCP连接。</p></td>
</tr>
<tr class="row-even"><td><p><code class="docutils literal notranslate"><span class="pre">await</span></code> <a class="reference internal" href="asyncio-stream.xhtml#asyncio.open_unix_connection" title="asyncio.open_unix_connection"><code class="xref py py-func docutils literal notranslate"><span class="pre">open_unix_connection()</span></code></a></p></td>
<td><p>建立一个Unix socket连接。</p></td>
</tr>
<tr class="row-odd"><td><p><code class="docutils literal notranslate"><span class="pre">await</span></code> <a class="reference internal" href="asyncio-stream.xhtml#asyncio.start_server" title="asyncio.start_server"><code class="xref py py-func docutils literal notranslate"><span class="pre">start_server()</span></code></a></p></td>
<td><p>启动TCP服务。</p></td>
</tr>
<tr class="row-even"><td><p><code class="docutils literal notranslate"><span class="pre">await</span></code> <a class="reference internal" href="asyncio-stream.xhtml#asyncio.start_unix_server" title="asyncio.start_unix_server"><code class="xref py py-func docutils literal notranslate"><span class="pre">start_unix_server()</span></code></a></p></td>
<td><p>启动一个 Unix 套接字服务。</p></td>
</tr>
<tr class="row-odd"><td><p><a class="reference internal" href="asyncio-stream.xhtml#asyncio.StreamReader" title="asyncio.StreamReader"><code class="xref py py-class docutils literal notranslate"><span class="pre">StreamReader</span></code></a></p></td>
<td><p>接收网络数据的高级async/await对象。</p></td>
</tr>
<tr class="row-even"><td><p><a class="reference internal" href="asyncio-stream.xhtml#asyncio.StreamWriter" title="asyncio.StreamWriter"><code class="xref py py-class docutils literal notranslate"><span class="pre">StreamWriter</span></code></a></p></td>
<td><p>发送网络数据的高级async/await对象。</p></td>
</tr>
</tbody>
</table>
<p class="rubric">例子</p>
<ul class="simple">
<li><p><a class="reference internal" href="asyncio-stream.xhtml#asyncio-example-stream"><span class="std std-ref">TCP 客户端样例</span></a>.</p></li>
<li><p>请参阅 <a class="reference internal" href="asyncio-stream.xhtml#asyncio-streams"><span class="std std-ref">streams APIs</span></a> 文档。</p></li>
</ul>
</section>
<section id="synchronization">
<h2>同步</h2>
<p>能被用于Task对象集的，类似线程的同步基元组件。</p>
<table class="full-width-table docutils align-default">
<colgroup>
<col style="width: 50.0%" />
<col style="width: 50.0%" />
</colgroup>
<tbody>
<tr class="row-odd"><td><p><a class="reference internal" href="asyncio-sync.xhtml#asyncio.Lock" title="asyncio.Lock"><code class="xref py py-class docutils literal notranslate"><span class="pre">Lock</span></code></a></p></td>
<td><p>互斥锁。</p></td>
</tr>
<tr class="row-even"><td><p><a class="reference internal" href="asyncio-sync.xhtml#asyncio.Event" title="asyncio.Event"><code class="xref py py-class docutils literal notranslate"><span class="pre">Event</span></code></a></p></td>
<td><p>事件对象。</p></td>
</tr>
<tr class="row-odd"><td><p><a class="reference internal" href="asyncio-sync.xhtml#asyncio.Condition" title="asyncio.Condition"><code class="xref py py-class docutils literal notranslate"><span class="pre">Condition</span></code></a></p></td>
<td><p>条件对象</p></td>
</tr>
<tr class="row-even"><td><p><a class="reference internal" href="asyncio-sync.xhtml#asyncio.Semaphore" title="asyncio.Semaphore"><code class="xref py py-class docutils literal notranslate"><span class="pre">Semaphore</span></code></a></p></td>
<td><p>信号量</p></td>
</tr>
<tr class="row-odd"><td><p><a class="reference internal" href="asyncio-sync.xhtml#asyncio.BoundedSemaphore" title="asyncio.BoundedSemaphore"><code class="xref py py-class docutils literal notranslate"><span class="pre">BoundedSemaphore</span></code></a></p></td>
<td><p>有界的信号量。</p></td>
</tr>
<tr class="row-even"><td><p><a class="reference internal" href="asyncio-sync.xhtml#asyncio.Barrier" title="asyncio.Barrier"><code class="xref py py-class docutils literal notranslate"><span class="pre">Barrier</span></code></a></p></td>
<td><p>一个 Barrier 对象。</p></td>
</tr>
</tbody>
</table>
<p class="rubric">例子</p>
<ul class="simple">
<li><p><a class="reference internal" href="asyncio-sync.xhtml#asyncio-example-sync-event"><span class="std std-ref">asyncio.Event 的用法</span></a>.</p></li>
<li><p><a class="reference internal" href="asyncio-sync.xhtml#asyncio-example-barrier"><span class="std std-ref">使用 asyncio.Barrier</span></a>。</p></li>
<li><p>请参阅asyncio文档 <a class="reference internal" href="asyncio-sync.xhtml#asyncio-sync"><span class="std std-ref">synchronization primitives</span></a>.</p></li>
</ul>
</section>
<section id="exceptions">
<h2>异常</h2>
<table class="full-width-table docutils align-default">
<colgroup>
<col style="width: 50.0%" />
<col style="width: 50.0%" />
</colgroup>
<tbody>
<tr class="row-odd"><td><p><a class="reference internal" href="asyncio-exceptions.xhtml#asyncio.CancelledError" title="asyncio.CancelledError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">asyncio.CancelledError</span></code></a></p></td>
<td><p>当一个Task对象被取消的时候被引发。请参阅 <a class="reference internal" href="asyncio-task.xhtml#asyncio.Task.cancel" title="asyncio.Task.cancel"><code class="xref py py-meth docutils literal notranslate"><span class="pre">Task.cancel()</span></code></a>。</p></td>
</tr>
<tr class="row-even"><td><p><a class="reference internal" href="asyncio-sync.xhtml#asyncio.BrokenBarrierError" title="asyncio.BrokenBarrierError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">asyncio.BrokenBarrierError</span></code></a></p></td>
<td><p>当一个 Barrier 对象被破坏时引发。 另请参阅 <a class="reference internal" href="asyncio-sync.xhtml#asyncio.Barrier.wait" title="asyncio.Barrier.wait"><code class="xref py py-meth docutils literal notranslate"><span class="pre">Barrier.wait()</span></code></a>。</p></td>
</tr>
</tbody>
</table>
<p class="rubric">例子</p>
<ul class="simple">
<li><p><a class="reference internal" href="asyncio-task.xhtml#asyncio-example-task-cancel"><span class="std std-ref">在取消请求发生的运行代码中如何处理CancelledError异常</span></a>.</p></li>
<li><p>请参阅完整的 <a class="reference internal" href="asyncio-exceptions.xhtml#asyncio-exceptions"><span class="std std-ref">asyncio 专用异常</span></a> 列表.</p></li>
</ul>
</section>
</section>


            <div class="clearer"></div>
          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>