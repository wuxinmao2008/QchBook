<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" /><meta name="viewport" content="width=device-width, initial-scale=1" />
<meta property="og:title" content="http.client --- HTTP 协议客户端" />
<meta property="og:type" content="website" />
<meta property="og:url" content="https://docs.python.org/3/library/http.client.xhtml" />
<meta property="og:site_name" content="Python documentation" />
<meta property="og:description" content="源代码： Lib/http/client.py[https://github.com/python/cpython/tree/3.12/Lib/http/client.py] 这个模块定义了实现 HTTP 和 HTTPS 协议客户端的类。 它通常不直接使用 --- 模块 urllib.request 会用它来处理使用 HTTP 和 HTTPS 的 URL。 可用性: 非 Emscripten..." />
<meta property="og:image" content="https://docs.python.org/3/_static/og-image.png" />
<meta property="og:image:alt" content="Python documentation" />
<meta name="description" content="源代码： Lib/http/client.py[https://github.com/python/cpython/tree/3.12/Lib/http/client.py] 这个模块定义了实现 HTTP 和 HTTPS 协议客户端的类。 它通常不直接使用 --- 模块 urllib.request 会用它来处理使用 HTTP 和 HTTPS 的 URL。 可用性: 非 Emscripten..." />
<meta property="og:image:width" content="200" />
<meta property="og:image:height" content="200" />
<meta name="theme-color" content="#3776ab" />

    <title>http.client --- HTTP 协议客户端</title>
    <link rel="stylesheet" type="text/css" href="../_static/pygments.css" />
    <link rel="stylesheet" type="text/css" href="../_static/epub.css" />
    <link rel="canonical" href="https://docs.python.org/3/library/http.client.html" />
    
      
    

    
    <style>
      @media only screen {
        table.full-width-table {
            width: 100%;
        }
      }
    </style>
 

  </head><body>


    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <section id="module-http.client">
<span id="http-client-http-protocol-client"></span><h1><code class="xref py py-mod docutils literal notranslate"><span class="pre">http.client</span></code> --- HTTP 协议客户端</h1>
<p><strong>源代码：</strong> <a class="reference external" href="https://github.com/python/cpython/tree/3.12/Lib/http/client.py">Lib/http/client.py</a><span class="link-target"> [https://github.com/python/cpython/tree/3.12/Lib/http/client.py]</span></p>
<span id="index-0"></span><hr class="docutils" id="index-1" />
<p>这个模块定义了实现 HTTP 和 HTTPS 协议客户端的类。 它通常不直接使用 --- 模块 <a class="reference internal" href="urllib.request.xhtml#module-urllib.request" title="urllib.request: Extensible library for opening URLs."><code class="xref py py-mod docutils literal notranslate"><span class="pre">urllib.request</span></code></a> 会用它来处理使用 HTTP 和 HTTPS 的 URL。</p>
<div class="admonition seealso">
<p class="admonition-title">参见</p>
<p>对于更高层级的 HTTP 客户端接口，建议使用 <a class="reference external" href="https://requests.readthedocs.io/en/latest/">Requests 包</a><span class="link-target"> [https://requests.readthedocs.io/en/latest/]</span>。</p>
</div>
<div class="admonition note">
<p class="admonition-title">备注</p>
<p>HTTPS 支持仅在编译 Python 时启用了 SSL 支持的情况下（通过 <a class="reference internal" href="ssl.xhtml#module-ssl" title="ssl: TLS/SSL wrapper for socket objects"><code class="xref py py-mod docutils literal notranslate"><span class="pre">ssl</span></code></a> 模块）可用。</p>
</div>
<div class="availability docutils container">
<p><a class="reference internal" href="intro.xhtml#availability"><span class="std std-ref">可用性</span></a>: 非 Emscripten，非 WASI。</p>
<p>此模块在 WebAssembly 平台 <code class="docutils literal notranslate"><span class="pre">wasm32-emscripten</span></code> 和 <code class="docutils literal notranslate"><span class="pre">wasm32-wasi</span></code> 上不适用或不可用。 请参阅 <a class="reference internal" href="intro.xhtml#wasm-availability"><span class="std std-ref">WebAssembly 平台</span></a> 了解详情。</p>
</div>
<p>该模块支持以下类：</p>
<dl class="py class">
<dt class="sig sig-object py" id="http.client.HTTPConnection">
<em class="property"><span class="pre">class</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">http.client.</span></span><span class="sig-name descname"><span class="pre">HTTPConnection</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">host</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">port=None</span></span></em>, <span class="optional">[</span><em class="sig-param"><span class="n"><span class="pre">timeout</span></span></em>, <span class="optional">]</span><em class="sig-param"><span class="n"><span class="pre">source_address=None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">blocksize=8192</span></span></em><span class="sig-paren">)</span></dt>
<dd><p><a class="reference internal" href="#http.client.HTTPConnection" title="http.client.HTTPConnection"><code class="xref py py-class docutils literal notranslate"><span class="pre">HTTPConnection</span></code></a> 的实例代表与 HTTP 服务器的一个连接事务。 它在实例化时应当传入一个主机和可选的端口号。 若未传入端口号，则如果主机字符串的形式为 <code class="docutils literal notranslate"><span class="pre">host:port</span></code> 则会从中提取端口，否则将使用默认的 HTTP 端口（80）。 如果给出了可选的 <em>timeout</em> 形参，则阻塞操作（如连接尝试）将在指定的秒数之后超时（如果未给出，则使用全局默认超时设置）。 可选的 <em>source_address</em> 形参可以是一个 (host, port) 元组，用作进行 HTTP 连接的源地址。 可选的 <em>blocksize</em> 形参以字节为单位设置缓冲区的大小，用来发送文件类消息体。</p>
<p>举个例子，以下调用都是创建连接到同一主机和端口的服务器的实例：</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">h1</span> <span class="o">=</span> <span class="n">http</span><span class="o">.</span><span class="n">client</span><span class="o">.</span><span class="n">HTTPConnection</span><span class="p">(</span><span class="s1">&#39;www.python.org&#39;</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">h2</span> <span class="o">=</span> <span class="n">http</span><span class="o">.</span><span class="n">client</span><span class="o">.</span><span class="n">HTTPConnection</span><span class="p">(</span><span class="s1">&#39;www.python.org:80&#39;</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">h3</span> <span class="o">=</span> <span class="n">http</span><span class="o">.</span><span class="n">client</span><span class="o">.</span><span class="n">HTTPConnection</span><span class="p">(</span><span class="s1">&#39;www.python.org&#39;</span><span class="p">,</span> <span class="mi">80</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">h4</span> <span class="o">=</span> <span class="n">http</span><span class="o">.</span><span class="n">client</span><span class="o">.</span><span class="n">HTTPConnection</span><span class="p">(</span><span class="s1">&#39;www.python.org&#39;</span><span class="p">,</span> <span class="mi">80</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
</pre></div>
</div>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.2 版本发生变更: </span>添加了*source_address* 参数</p>
</div>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.4 版本发生变更: </span>移除了 <em>strict</em> 形参。 不再支持 HTTP 0.9 风格的“简单响应”。</p>
</div>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.7 版本发生变更: </span>添加了 <em>blocksize</em> 参数。</p>
</div>
</dd></dl>

<dl class="py class">
<dt class="sig sig-object py" id="http.client.HTTPSConnection">
<em class="property"><span class="pre">class</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">http.client.</span></span><span class="sig-name descname"><span class="pre">HTTPSConnection</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">host</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">port=None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">*</span></span></em>, <span class="optional">[</span><em class="sig-param"><span class="n"><span class="pre">timeout</span></span></em>, <span class="optional">]</span><em class="sig-param"><span class="n"><span class="pre">source_address=None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">context=None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">blocksize=8192</span></span></em><span class="sig-paren">)</span></dt>
<dd><p><a class="reference internal" href="#http.client.HTTPConnection" title="http.client.HTTPConnection"><code class="xref py py-class docutils literal notranslate"><span class="pre">HTTPConnection</span></code></a> 的子类，使用 SSL 与安全服务器进行通信。 默认端口为 <code class="docutils literal notranslate"><span class="pre">443</span></code>。 如果指定了 <em>context</em>，它必须为一个描述 SSL 各选项的 <a class="reference internal" href="ssl.xhtml#ssl.SSLContext" title="ssl.SSLContext"><code class="xref py py-class docutils literal notranslate"><span class="pre">ssl.SSLContext</span></code></a> 实例。</p>
<p>请参阅 <a class="reference internal" href="ssl.xhtml#ssl-security"><span class="std std-ref">安全考量</span></a> 了解有关最佳实践的更多信息。</p>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.2 版本发生变更: </span>添加了 <em>source_address</em>, <em>context</em> 和 <em>check_hostname</em>。</p>
</div>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.2 版本发生变更: </span>这个类现在会在可能的情况下（即当 <a class="reference internal" href="ssl.xhtml#ssl.HAS_SNI" title="ssl.HAS_SNI"><code class="xref py py-const docutils literal notranslate"><span class="pre">ssl.HAS_SNI</span></code></a> 为真值时）支持 HTTPS 虚拟主机。</p>
</div>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.4 版本发生变更: </span>删除了 <em>strict</em> 参数，不再支持 HTTP 0.9 风格的“简单响应”。</p>
</div>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.4.3 版本发生变更: </span>目前这个类在默认情况下会执行所有必要的证书和主机检查。 要回复到先前的非验证行为，可以将 <code class="xref py py-func docutils literal notranslate"><span class="pre">ssl._create_unverified_context()</span></code> 传给 <em>context</em> 形参。</p>
</div>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.8 版本发生变更: </span>该类现在对于默认的 <em>context</em> 或在传入 <em>cert_file</em> 并附带自定义 <em>context</em> 时会启用 TLS 1.3 <a class="reference internal" href="ssl.xhtml#ssl.SSLContext.post_handshake_auth" title="ssl.SSLContext.post_handshake_auth"><code class="xref py py-attr docutils literal notranslate"><span class="pre">ssl.SSLContext.post_handshake_auth</span></code></a>。</p>
</div>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.10 版本发生变更: </span>现在这个类在未给出 <em>context</em> 的时候会发送一个带有协议指示符 <code class="docutils literal notranslate"><span class="pre">http/1.1</span></code> 的 ALPN 扩展。 自定义 <em>context</em> 应当使用 <a class="reference internal" href="ssl.xhtml#ssl.SSLContext.set_alpn_protocols" title="ssl.SSLContext.set_alpn_protocols"><code class="xref py py-meth docutils literal notranslate"><span class="pre">set_alpn_protocols()</span></code></a> 来设置 ALPN 协议。</p>
</div>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.12 版本发生变更: </span>已弃用的 <em>key_file</em>, <em>cert_file</em> 和 <em>check_hostname</em> 形参已被移除。</p>
</div>
</dd></dl>

<dl class="py class">
<dt class="sig sig-object py" id="http.client.HTTPResponse">
<em class="property"><span class="pre">class</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">http.client.</span></span><span class="sig-name descname"><span class="pre">HTTPResponse</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">sock</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">debuglevel</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">0</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">method</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">url</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>在成功连接后返回类的实例，而不是由用户直接实例化。</p>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.4 版本发生变更: </span>删除了 <em>strict</em> 参数，不再支持HTTP 0.9 风格的“简单响应”。</p>
</div>
</dd></dl>

<p>这个模块定义了以下函数：</p>
<dl class="py function">
<dt class="sig sig-object py" id="http.client.parse_headers">
<span class="sig-prename descclassname"><span class="pre">http.client.</span></span><span class="sig-name descname"><span class="pre">parse_headers</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">fp</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>从一个代表 HTTP 请求/响应的文件指针 <em>fp</em> 解析标头。 该文件必须是一个 <a class="reference internal" href="io.xhtml#io.BufferedIOBase" title="io.BufferedIOBase"><code class="xref py py-class docutils literal notranslate"><span class="pre">BufferedIOBase</span></code></a> 读取器（即不为文本）并且必须提供有效的 <span class="target" id="index-14"></span><a class="rfc reference external" href="https://datatracker.ietf.org/doc/html/rfc2822.html"><strong>RFC 2822</strong></a><span class="link-target"> [https://datatracker.ietf.org/doc/html/rfc2822.html]</span> 样式标头。</p>
<p>该函数返回 <a class="reference internal" href="#http.client.HTTPMessage" title="http.client.HTTPMessage"><code class="xref py py-class docutils literal notranslate"><span class="pre">http.client.HTTPMessage</span></code></a> 的实例，带有头部各个字段，但不带正文数据（与 <a class="reference internal" href="#http.client.HTTPResponse.msg" title="http.client.HTTPResponse.msg"><code class="xref py py-attr docutils literal notranslate"><span class="pre">HTTPResponse.msg</span></code></a> 和 <a class="reference internal" href="http.server.xhtml#http.server.BaseHTTPRequestHandler.headers" title="http.server.BaseHTTPRequestHandler.headers"><code class="xref py py-attr docutils literal notranslate"><span class="pre">http.server.BaseHTTPRequestHandler.headers</span></code></a> 一样）。返回之后，文件指针 <em>fp</em> 已为读取 HTTP 正文做好准备了。</p>
<div class="admonition note">
<p class="admonition-title">备注</p>
<p><a class="reference internal" href="#http.client.parse_headers" title="http.client.parse_headers"><code class="xref py py-meth docutils literal notranslate"><span class="pre">parse_headers()</span></code></a> 不会解析 HTTP 消息的开始行；只会解析各 <code class="docutils literal notranslate"><span class="pre">Name:</span> <span class="pre">value</span></code> 行。文件必须为读取这些字段做好准备，所以在调用该函数之前，第一行应该已经被读取过了。</p>
</div>
</dd></dl>

<p>下列异常可以适当地被引发:</p>
<dl class="py exception">
<dt class="sig sig-object py" id="http.client.HTTPException">
<em class="property"><span class="pre">exception</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">http.client.</span></span><span class="sig-name descname"><span class="pre">HTTPException</span></span></dt>
<dd><p>此模块中其他异常的基类。 它是 <a class="reference internal" href="exceptions.xhtml#Exception" title="Exception"><code class="xref py py-exc docutils literal notranslate"><span class="pre">Exception</span></code></a> 的一个子类。</p>
</dd></dl>

<dl class="py exception">
<dt class="sig sig-object py" id="http.client.NotConnected">
<em class="property"><span class="pre">exception</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">http.client.</span></span><span class="sig-name descname"><span class="pre">NotConnected</span></span></dt>
<dd><p><a class="reference internal" href="#http.client.HTTPException" title="http.client.HTTPException"><code class="xref py py-exc docutils literal notranslate"><span class="pre">HTTPException</span></code></a> 的一个子类。</p>
</dd></dl>

<dl class="py exception">
<dt class="sig sig-object py" id="http.client.InvalidURL">
<em class="property"><span class="pre">exception</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">http.client.</span></span><span class="sig-name descname"><span class="pre">InvalidURL</span></span></dt>
<dd><p><a class="reference internal" href="#http.client.HTTPException" title="http.client.HTTPException"><code class="xref py py-exc docutils literal notranslate"><span class="pre">HTTPException</span></code></a> 的一个子类，如果给出了一个非数字或为空值的端口就会被引发。</p>
</dd></dl>

<dl class="py exception">
<dt class="sig sig-object py" id="http.client.UnknownProtocol">
<em class="property"><span class="pre">exception</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">http.client.</span></span><span class="sig-name descname"><span class="pre">UnknownProtocol</span></span></dt>
<dd><p><a class="reference internal" href="#http.client.HTTPException" title="http.client.HTTPException"><code class="xref py py-exc docutils literal notranslate"><span class="pre">HTTPException</span></code></a> 的一个子类。</p>
</dd></dl>

<dl class="py exception">
<dt class="sig sig-object py" id="http.client.UnknownTransferEncoding">
<em class="property"><span class="pre">exception</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">http.client.</span></span><span class="sig-name descname"><span class="pre">UnknownTransferEncoding</span></span></dt>
<dd><p><a class="reference internal" href="#http.client.HTTPException" title="http.client.HTTPException"><code class="xref py py-exc docutils literal notranslate"><span class="pre">HTTPException</span></code></a> 的一个子类。</p>
</dd></dl>

<dl class="py exception">
<dt class="sig sig-object py" id="http.client.UnimplementedFileMode">
<em class="property"><span class="pre">exception</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">http.client.</span></span><span class="sig-name descname"><span class="pre">UnimplementedFileMode</span></span></dt>
<dd><p><a class="reference internal" href="#http.client.HTTPException" title="http.client.HTTPException"><code class="xref py py-exc docutils literal notranslate"><span class="pre">HTTPException</span></code></a> 的一个子类。</p>
</dd></dl>

<dl class="py exception">
<dt class="sig sig-object py" id="http.client.IncompleteRead">
<em class="property"><span class="pre">exception</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">http.client.</span></span><span class="sig-name descname"><span class="pre">IncompleteRead</span></span></dt>
<dd><p><a class="reference internal" href="#http.client.HTTPException" title="http.client.HTTPException"><code class="xref py py-exc docutils literal notranslate"><span class="pre">HTTPException</span></code></a> 的一个子类。</p>
</dd></dl>

<dl class="py exception">
<dt class="sig sig-object py" id="http.client.ImproperConnectionState">
<em class="property"><span class="pre">exception</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">http.client.</span></span><span class="sig-name descname"><span class="pre">ImproperConnectionState</span></span></dt>
<dd><p><a class="reference internal" href="#http.client.HTTPException" title="http.client.HTTPException"><code class="xref py py-exc docutils literal notranslate"><span class="pre">HTTPException</span></code></a> 的一个子类。</p>
</dd></dl>

<dl class="py exception">
<dt class="sig sig-object py" id="http.client.CannotSendRequest">
<em class="property"><span class="pre">exception</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">http.client.</span></span><span class="sig-name descname"><span class="pre">CannotSendRequest</span></span></dt>
<dd><p><a class="reference internal" href="#http.client.ImproperConnectionState" title="http.client.ImproperConnectionState"><code class="xref py py-exc docutils literal notranslate"><span class="pre">ImproperConnectionState</span></code></a> 的一个子类。</p>
</dd></dl>

<dl class="py exception">
<dt class="sig sig-object py" id="http.client.CannotSendHeader">
<em class="property"><span class="pre">exception</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">http.client.</span></span><span class="sig-name descname"><span class="pre">CannotSendHeader</span></span></dt>
<dd><p><a class="reference internal" href="#http.client.ImproperConnectionState" title="http.client.ImproperConnectionState"><code class="xref py py-exc docutils literal notranslate"><span class="pre">ImproperConnectionState</span></code></a> 的一个子类。</p>
</dd></dl>

<dl class="py exception">
<dt class="sig sig-object py" id="http.client.ResponseNotReady">
<em class="property"><span class="pre">exception</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">http.client.</span></span><span class="sig-name descname"><span class="pre">ResponseNotReady</span></span></dt>
<dd><p><a class="reference internal" href="#http.client.ImproperConnectionState" title="http.client.ImproperConnectionState"><code class="xref py py-exc docutils literal notranslate"><span class="pre">ImproperConnectionState</span></code></a> 的一个子类。</p>
</dd></dl>

<dl class="py exception">
<dt class="sig sig-object py" id="http.client.BadStatusLine">
<em class="property"><span class="pre">exception</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">http.client.</span></span><span class="sig-name descname"><span class="pre">BadStatusLine</span></span></dt>
<dd><p><a class="reference internal" href="#http.client.HTTPException" title="http.client.HTTPException"><code class="xref py py-exc docutils literal notranslate"><span class="pre">HTTPException</span></code></a> 的一个子类。 如果服务器反馈了一个我们不理解的 HTTP 状态码就会被引发。</p>
</dd></dl>

<dl class="py exception">
<dt class="sig sig-object py" id="http.client.LineTooLong">
<em class="property"><span class="pre">exception</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">http.client.</span></span><span class="sig-name descname"><span class="pre">LineTooLong</span></span></dt>
<dd><p><a class="reference internal" href="#http.client.HTTPException" title="http.client.HTTPException"><code class="xref py py-exc docutils literal notranslate"><span class="pre">HTTPException</span></code></a> 的一个子类。 如果在 HTTP 协议中从服务器接收到过长的行就会被引发。</p>
</dd></dl>

<dl class="py exception">
<dt class="sig sig-object py" id="http.client.RemoteDisconnected">
<em class="property"><span class="pre">exception</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">http.client.</span></span><span class="sig-name descname"><span class="pre">RemoteDisconnected</span></span></dt>
<dd><p><a class="reference internal" href="exceptions.xhtml#ConnectionResetError" title="ConnectionResetError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">ConnectionResetError</span></code></a> 和 <a class="reference internal" href="#http.client.BadStatusLine" title="http.client.BadStatusLine"><code class="xref py py-exc docutils literal notranslate"><span class="pre">BadStatusLine</span></code></a> 的一个子类。 当尝试读取响应时的结果是未从连接读取到数据时由 <a class="reference internal" href="#http.client.HTTPConnection.getresponse" title="http.client.HTTPConnection.getresponse"><code class="xref py py-meth docutils literal notranslate"><span class="pre">HTTPConnection.getresponse()</span></code></a> 引发，表明远端已关闭连接。</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.5: </span>在此之前引发的异常为 <a class="reference internal" href="#http.client.BadStatusLine" title="http.client.BadStatusLine"><code class="xref py py-exc docutils literal notranslate"><span class="pre">BadStatusLine</span></code></a><code class="docutils literal notranslate"><span class="pre">('')</span></code>。</p>
</div>
</dd></dl>

<p>此模块中定义的常量为：</p>
<dl class="py data">
<dt class="sig sig-object py" id="http.client.HTTP_PORT">
<span class="sig-prename descclassname"><span class="pre">http.client.</span></span><span class="sig-name descname"><span class="pre">HTTP_PORT</span></span></dt>
<dd><p>HTTP 协议默认的端口号 (总是 <code class="docutils literal notranslate"><span class="pre">80</span></code>)。</p>
</dd></dl>

<dl class="py data">
<dt class="sig sig-object py" id="http.client.HTTPS_PORT">
<span class="sig-prename descclassname"><span class="pre">http.client.</span></span><span class="sig-name descname"><span class="pre">HTTPS_PORT</span></span></dt>
<dd><p>HTTPS 协议默认的端口号 (总是 <code class="docutils literal notranslate"><span class="pre">443</span></code>)。</p>
</dd></dl>

<dl class="py data">
<dt class="sig sig-object py" id="http.client.responses">
<span class="sig-prename descclassname"><span class="pre">http.client.</span></span><span class="sig-name descname"><span class="pre">responses</span></span></dt>
<dd><p>这个字典把 HTTP 1.1 状态码映射到 W3C 名称。</p>
<p>例如：<code class="docutils literal notranslate"><span class="pre">http.client.responses[http.client.NOT_FOUND]</span></code> 是 <code class="docutils literal notranslate"><span class="pre">'NOT</span> <span class="pre">FOUND</span></code> （未发现）。</p>
</dd></dl>

<p>本模块中可用的 HTTP 状态码常量可以参见 <a class="reference internal" href="http.xhtml#http-status-codes"><span class="std std-ref">HTTP 状态码</span></a> 。</p>
<section id="httpconnection-objects">
<span id="id1"></span><h2>HTTPConnection 对象</h2>
<p><a class="reference internal" href="#http.client.HTTPConnection" title="http.client.HTTPConnection"><code class="xref py py-class docutils literal notranslate"><span class="pre">HTTPConnection</span></code></a> 实例拥有以下方法：</p>
<dl class="py method">
<dt class="sig sig-object py" id="http.client.HTTPConnection.request">
<span class="sig-prename descclassname"><span class="pre">HTTPConnection.</span></span><span class="sig-name descname"><span class="pre">request</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">method</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">url</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">body</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">headers</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">{}</span></span></em>, <em class="sig-param"><span class="o"><span class="pre">*</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">encode_chunked</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>这将使用 HTTP 请求方法 <em>method</em> 和请求 URI <em>url</em> 将服务器发送一个请求。 所提供的 <em>url</em> 必须是符合 <span class="target" id="index-15"></span><a class="rfc reference external" href="https://datatracker.ietf.org/doc/html/rfc2616.html#section-5.1.2"><strong>RFC 2616 §5.1.2</strong></a><span class="link-target"> [https://datatracker.ietf.org/doc/html/rfc2616.html#section-5.1.2]</span> 规范的绝对路径（除非是连接到一个 HTTP 代理服务器或者使用 <code class="docutils literal notranslate"><span class="pre">OPTIONS</span></code> 或 <code class="docutils literal notranslate"><span class="pre">CONNECT</span></code> 方法）。</p>
<p>如果给定 <em>body</em>，那么给定的数据会在信息头完成之后发送。它可能是一个 <code class="xref py py-class docutils literal notranslate"><span class="pre">字符串</span></code>，一个 <a class="reference internal" href="../glossary.xhtml#term-bytes-like-object"><span class="xref std std-term">bytes-like object</span></a>，一个打开的 <a class="reference internal" href="../glossary.xhtml#term-file-object"><span class="xref std std-term">file object</span></a>，或者 <a class="reference internal" href="stdtypes.xhtml#bytes" title="bytes"><code class="xref py py-class docutils literal notranslate"><span class="pre">bytes</span></code></a> 迭代器。如果 <em>body</em> 是字符串，它会按 HTTP 默认的 ISO-8859-1 编码。如果是一个字节类对象，它会按原样发送。如果是 <a class="reference internal" href="../glossary.xhtml#term-file-object"><span class="xref std std-term">file object</span></a>，文件的内容会被发送，这个文件对象应该至少支持 <code class="docutils literal notranslate"><span class="pre">read()</span></code> 方法。如果这个文件对象是一个 <a class="reference internal" href="io.xhtml#io.TextIOBase" title="io.TextIOBase"><code class="xref py py-class docutils literal notranslate"><span class="pre">io.TextIOBase</span></code></a> 实例，由 <code class="docutils literal notranslate"><span class="pre">read()</span></code> 方法返回的数据会按 ISO-8859-1 编码，否则由 <code class="docutils literal notranslate"><span class="pre">read()</span></code> 方法返回的数据会按原样发送。如果 <em>body</em> 是一个迭代器，迭代器中的元素会被发送，直到迭代器耗尽。</p>
<p><em>headers</em> 参数应为由要与请求一同发送的额外 HTTP 标头组成的映射。 必须提供一个 <span class="target" id="index-16"></span><a class="rfc reference external" href="https://datatracker.ietf.org/doc/html/rfc2616.html#section-14.23"><strong>主机标头</strong></a><span class="link-target"> [https://datatracker.ietf.org/doc/html/rfc2616.html#section-14.23]</span> 以符合 <span class="target" id="index-17"></span><a class="rfc reference external" href="https://datatracker.ietf.org/doc/html/rfc2616.html#section-5.1.2"><strong>RFC 2616 §5.1.2</strong></a><span class="link-target"> [https://datatracker.ietf.org/doc/html/rfc2616.html#section-5.1.2]</span> 规范（除非是连接到一个 HTTP 代理服务器或者使用 <code class="docutils literal notranslate"><span class="pre">OPTIONS</span></code> 或 <code class="docutils literal notranslate"><span class="pre">CONNECT</span></code> 方法）。</p>
<p>如果 <em>headers</em> 既不包含 Content-Length 也没有 Transfer-Encoding，但存在请求正文，那么这些头字段中的一个会自动设定。如果 <em>body</em> 是 <code class="docutils literal notranslate"><span class="pre">None</span></code>，那么对于要求正文的方法 (<code class="docutils literal notranslate"><span class="pre">PUT</span></code>，<code class="docutils literal notranslate"><span class="pre">POST</span></code>，和 <code class="docutils literal notranslate"><span class="pre">PATCH</span></code>)，Content-Length 头会被设为 <code class="docutils literal notranslate"><span class="pre">0</span></code>。如果 <em>body</em> 是字符串或者类似字节的对象，并且也不是 <a class="reference internal" href="../glossary.xhtml#term-file-object"><span class="xref std std-term">文件</span></a>，Content-Length 头会设为正文的长度。任何其他类型的 <em>body</em> （一般是文件或迭代器）会按块编码，这时会自动设定 Transfer-Encoding 头以代替 Content-Length。</p>
<p>在 <em>headers</em> 中指定 Transfer-Encoding 时， <em>encode_chunked</em> 是唯一相关的参数。如果 <em>encode_chunked</em> 为 <code class="docutils literal notranslate"><span class="pre">False</span></code>，HTTPConnection 对象会假定所有的编码都由调用代码处理。如果为 <code class="docutils literal notranslate"><span class="pre">True</span></code>，正文会按块编码。</p>
<p>例如，要对 <code class="docutils literal notranslate"><span class="pre">https://docs.python.org/3/</span></code> 执行一个 <code class="docutils literal notranslate"><span class="pre">GET</span></code> 请求:</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="kn">import</span> <span class="nn">http.client</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">host</span> <span class="o">=</span> <span class="s2">&quot;docs.python.org&quot;</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">conn</span> <span class="o">=</span> <span class="n">http</span><span class="o">.</span><span class="n">client</span><span class="o">.</span><span class="n">HTTPSConnection</span><span class="p">(</span><span class="n">host</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">conn</span><span class="o">.</span><span class="n">request</span><span class="p">(</span><span class="s2">&quot;GET&quot;</span><span class="p">,</span> <span class="s2">&quot;/3/&quot;</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="p">{</span><span class="s2">&quot;Host&quot;</span><span class="p">:</span> <span class="n">host</span><span class="p">})</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">response</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="n">getresponse</span><span class="p">()</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">print</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">status</span><span class="p">,</span> <span class="n">response</span><span class="o">.</span><span class="n">reason</span><span class="p">)</span>
<span class="go">200 OK</span>
</pre></div>
</div>
<div class="admonition note">
<p class="admonition-title">备注</p>
<p>HTTP 协议在 1.1 版中添加了块传输编码。除非明确知道 HTTP 服务器可以处理 HTTP 1.1，调用者要么必须指定 Content-Length，要么必须传入 <a class="reference internal" href="stdtypes.xhtml#str" title="str"><code class="xref py py-class docutils literal notranslate"><span class="pre">str</span></code></a> 或字节类对象，注意该对象不能是表达 body 的文件。</p>
</div>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.2 版本发生变更: </span><em>body</em> 现在可以是可迭代对象了。</p>
</div>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.6 版本发生变更: </span>如果 Content-Length 和 Transfer-Encoding 都没有在 <em>headers</em> 中设置，文件和可迭代的 <em>body</em> 对象现在会按块编码。添加了 <em>encode_chunked</em> 参数。不会尝试去确定文件对象的 Content-Length。</p>
</div>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="http.client.HTTPConnection.getresponse">
<span class="sig-prename descclassname"><span class="pre">HTTPConnection.</span></span><span class="sig-name descname"><span class="pre">getresponse</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>应当在发送一个请求从服务器获取响应时被调用。 返回一个 <a class="reference internal" href="#http.client.HTTPResponse" title="http.client.HTTPResponse"><code class="xref py py-class docutils literal notranslate"><span class="pre">HTTPResponse</span></code></a> 的实例。</p>
<div class="admonition note">
<p class="admonition-title">备注</p>
<p>请注意你必须在读取了整个响应之后才能向服务器发送新的请求。</p>
</div>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.5 版本发生变更: </span>如果引发了 <a class="reference internal" href="exceptions.xhtml#ConnectionError" title="ConnectionError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">ConnectionError</span></code></a> 或其子类， <a class="reference internal" href="#http.client.HTTPConnection" title="http.client.HTTPConnection"><code class="xref py py-class docutils literal notranslate"><span class="pre">HTTPConnection</span></code></a> 对象将在发送新的请求时准备好重新连接。</p>
</div>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="http.client.HTTPConnection.set_debuglevel">
<span class="sig-prename descclassname"><span class="pre">HTTPConnection.</span></span><span class="sig-name descname"><span class="pre">set_debuglevel</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">level</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>设置调试等级。 默认的调试等级为 <code class="docutils literal notranslate"><span class="pre">0</span></code>，意味着不会打印调试输出。 任何大于 <code class="docutils literal notranslate"><span class="pre">0</span></code> 的值将使得所有当前定义的调试输出被打印到 stdout。 <code class="docutils literal notranslate"><span class="pre">debuglevel</span></code> 会被传给任何新创建的 <a class="reference internal" href="#http.client.HTTPResponse" title="http.client.HTTPResponse"><code class="xref py py-class docutils literal notranslate"><span class="pre">HTTPResponse</span></code></a> 对象。</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.1.</span></p>
</div>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="http.client.HTTPConnection.set_tunnel">
<span class="sig-prename descclassname"><span class="pre">HTTPConnection.</span></span><span class="sig-name descname"><span class="pre">set_tunnel</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">host</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">port</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">headers</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>为 HTTP 连接隧道设置主机和端口。 这将允许通过代理服务器运行连接。</p>
<p><em>host</em> 和 <em>port</em> 参数指明隧道连接的端点（即 CONNECT 请求所包含的地址，而 <em>不是</em> 代理服务器的地址）。</p>
<p><em>headers</em> 参数应为一个随 CONNECT 请求发送的额外 HTTP 标头的映射。</p>
<p>在 HTTP/1.1 被用于 HTTP CONNECT 隧道请求时，<a class="reference external" href="https://datatracker.ietf.org/doc/html/rfc7231#section-4.3.6">根据相应的 RFC</a><span class="link-target"> [https://datatracker.ietf.org/doc/html/rfc7231#section-4.3.6]</span>，必须提供一个 HTTP <code class="docutils literal notranslate"><span class="pre">Host:</span></code> 标头，以匹配作为 CONNECT 请求的目标提供的请求目标 authority-form。 如果未通过 headers 参数提供 HTTP <code class="docutils literal notranslate"><span class="pre">Host:</span></code> 标头，则会自动生成并传送一个标头。</p>
<p>例如，要通过一个运行于本机 8080 端口的 HTTPS 代理服务器隧道，我们应当向 <a class="reference internal" href="#http.client.HTTPSConnection" title="http.client.HTTPSConnection"><code class="xref py py-class docutils literal notranslate"><span class="pre">HTTPSConnection</span></code></a> 构造器传入代理的地址，并将我们最终想要访问的主机地址传给 <a class="reference internal" href="#http.client.HTTPConnection.set_tunnel" title="http.client.HTTPConnection.set_tunnel"><code class="xref py py-meth docutils literal notranslate"><span class="pre">set_tunnel()</span></code></a> 方法:</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="kn">import</span> <span class="nn">http.client</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">conn</span> <span class="o">=</span> <span class="n">http</span><span class="o">.</span><span class="n">client</span><span class="o">.</span><span class="n">HTTPSConnection</span><span class="p">(</span><span class="s2">&quot;localhost&quot;</span><span class="p">,</span> <span class="mi">8080</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">conn</span><span class="o">.</span><span class="n">set_tunnel</span><span class="p">(</span><span class="s2">&quot;www.python.org&quot;</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">conn</span><span class="o">.</span><span class="n">request</span><span class="p">(</span><span class="s2">&quot;HEAD&quot;</span><span class="p">,</span><span class="s2">&quot;/index.html&quot;</span><span class="p">)</span>
</pre></div>
</div>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.2.</span></p>
</div>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.12 版本发生变更: </span>HTTP CONNECT 隧道请求使用 HTTP/1.1 协议，它是从 HTTP/1.0 协议升级而来。 <code class="docutils literal notranslate"><span class="pre">Host:</span></code> HTTP 标头是 HTTP/1.1 所必需的，因此如果未在 headers 参数中提供则会自动生成并传送一个标头。</p>
</div>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="http.client.HTTPConnection.get_proxy_response_headers">
<span class="sig-prename descclassname"><span class="pre">HTTPConnection.</span></span><span class="sig-name descname"><span class="pre">get_proxy_response_headers</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>返回一个由从代理服务器接收的响应标头映射到 CONNECT 请求的字典。</p>
<p>如果未发送 CONNECT 请求，该方法将返回 <code class="docutils literal notranslate"><span class="pre">None</span></code>。</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.12.</span></p>
</div>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="http.client.HTTPConnection.connect">
<span class="sig-prename descclassname"><span class="pre">HTTPConnection.</span></span><span class="sig-name descname"><span class="pre">connect</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>当对象被创建后连接到指定的服务器。 默认情况下，如果客户端还未建立连接，此函数会在发送请求时自动被调用。</p>
<p class="audit-hook">触发 <a class="reference internal" href="sys.xhtml#auditing"><span class="std std-ref">音频事件</span></a> <code class="docutils literal notranslate"><span class="pre">http.client.connect</span></code> ，带有 <code class="docutils literal notranslate"><span class="pre">self</span></code> 、<code class="docutils literal notranslate"><span class="pre">host</span></code> 、<code class="docutils literal notranslate"><span class="pre">port</span></code> 参数。</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="http.client.HTTPConnection.close">
<span class="sig-prename descclassname"><span class="pre">HTTPConnection.</span></span><span class="sig-name descname"><span class="pre">close</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>关闭到服务器的连接。</p>
</dd></dl>

<dl class="py attribute">
<dt class="sig sig-object py" id="http.client.HTTPConnection.blocksize">
<span class="sig-prename descclassname"><span class="pre">HTTPConnection.</span></span><span class="sig-name descname"><span class="pre">blocksize</span></span></dt>
<dd><p>用于发送文件类消息体的缓冲区大小。</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.7.</span></p>
</div>
</dd></dl>

<p>作为对使用上述 <a class="reference internal" href="#http.client.HTTPConnection.request" title="http.client.HTTPConnection.request"><code class="xref py py-meth docutils literal notranslate"><span class="pre">request()</span></code></a> 方法的替代，你也可以通过使用以下四个函数来一步步地发送你的请求。</p>
<dl class="py method">
<dt class="sig sig-object py" id="http.client.HTTPConnection.putrequest">
<span class="sig-prename descclassname"><span class="pre">HTTPConnection.</span></span><span class="sig-name descname"><span class="pre">putrequest</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">method</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">url</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">skip_host</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">skip_accept_encoding</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>应为连接服务器之后首先调用的函数。将向服务器发送一行数据，包含 <em>method</em> 字符串、<em>url</em> 字符串和 HTTP 版本（<code class="docutils literal notranslate"><span class="pre">HTTP/1.1</span></code>）。若要禁止自动发送 <code class="docutils literal notranslate"><span class="pre">Host:</span></code> 或 <code class="docutils literal notranslate"><span class="pre">Accept-Encoding:</span></code> 头部信息（比如需要接受其他编码格式的内容），请将 <em>skip_host</em> 或 <em>skip_accept_encoding</em> 设为非 False 值。</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="http.client.HTTPConnection.putheader">
<span class="sig-prename descclassname"><span class="pre">HTTPConnection.</span></span><span class="sig-name descname"><span class="pre">putheader</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">header</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">argument</span></span></em><span class="optional">[</span>, <em class="sig-param"><span class="n"><span class="pre">...</span></span></em><span class="optional">]</span><span class="sig-paren">)</span></dt>
<dd><p>向服务器发送一个 <span class="target" id="index-18"></span><a class="rfc reference external" href="https://datatracker.ietf.org/doc/html/rfc822.html"><strong>RFC 822</strong></a><span class="link-target"> [https://datatracker.ietf.org/doc/html/rfc822.html]</span> 格式的头部。将向服务器发送一行由头、冒号和空格以及第一个参数组成的数据。 如果还给出了其他参数，将在后续行中发送，每行由一个制表符和一个参数组成。</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="http.client.HTTPConnection.endheaders">
<span class="sig-prename descclassname"><span class="pre">HTTPConnection.</span></span><span class="sig-name descname"><span class="pre">endheaders</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">message_body</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="o"><span class="pre">*</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">encode_chunked</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>向服务器发送一个空行，表示头部文件结束。可选的 <em>message_body</em> 参数可用于传入一个与请求相关的消息体。</p>
<p>如果 <em>encode_chunked</em> 为 <code class="docutils literal notranslate"><span class="pre">True</span></code>，则对 <em>message_body</em> 的每次迭代结果将依照 <span class="target" id="index-19"></span><a class="rfc reference external" href="https://datatracker.ietf.org/doc/html/rfc7230.html"><strong>RFC 7230</strong></a><span class="link-target"> [https://datatracker.ietf.org/doc/html/rfc7230.html]</span> 3.3.1 节的规范进行分块编码。数据如何编码取决于 <em>message_body</em> 的类型。 如果 <em>message_body</em> 实现了 <a class="reference internal" href="../c-api/buffer.xhtml#bufferobjects"><span class="std std-ref">buffer 接口</span></a>，编码将生成一个数据块。如果 <em>message_body</em> 是  <a class="reference internal" href="collections.abc.xhtml#collections.abc.Iterable" title="collections.abc.Iterable"><code class="xref py py-class docutils literal notranslate"><span class="pre">collections.abc.Iterable</span></code></a>，则 <em>message_body</em> 的每次迭代都会产生一个块。 如果 <em>message_body</em> 为  <a class="reference internal" href="../glossary.xhtml#term-file-object"><span class="xref std std-term">file object</span></a>，那么每次调用 <code class="docutils literal notranslate"><span class="pre">.read()</span></code> 都会产生一个数据块。在 <em>message_body</em> 结束后，本方法立即会自动标记分块编码数据的结束。</p>
<div class="admonition note">
<p class="admonition-title">备注</p>
<p>由于分块编码的规范要求，迭代器本身产生的空块将被分块编码器忽略。这是为了避免目标服务器因错误编码而过早终止对请求的读取。</p>
</div>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.6 版本发生变更: </span>增加了分块编码支持和 <em>encode_chunked</em> 形参。</p>
</div>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="http.client.HTTPConnection.send">
<span class="sig-prename descclassname"><span class="pre">HTTPConnection.</span></span><span class="sig-name descname"><span class="pre">send</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">data</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>发送数据到服务器。本函数只应在调用 <a class="reference internal" href="#http.client.HTTPConnection.endheaders" title="http.client.HTTPConnection.endheaders"><code class="xref py py-meth docutils literal notranslate"><span class="pre">endheaders()</span></code></a> 方法之后且调用  <a class="reference internal" href="#http.client.HTTPConnection.getresponse" title="http.client.HTTPConnection.getresponse"><code class="xref py py-meth docutils literal notranslate"><span class="pre">getresponse()</span></code></a> 之前直接调用。</p>
<p class="audit-hook">触发 <a class="reference internal" href="sys.xhtml#auditing"><span class="std std-ref">音频事件</span></a> <code class="docutils literal notranslate"><span class="pre">http.client.send</span></code>，参数为 <code class="docutils literal notranslate"><span class="pre">self</span></code>、<code class="docutils literal notranslate"><span class="pre">data</span></code>。</p>
</dd></dl>

</section>
<section id="httpresponse-objects">
<span id="id2"></span><h2>HTTPResponse 对象</h2>
<p><a class="reference internal" href="#http.client.HTTPResponse" title="http.client.HTTPResponse"><code class="xref py py-class docutils literal notranslate"><span class="pre">HTTPResponse</span></code></a> 实例封装了来自服务器的 HTTP 响应。通过它可以访问请求头和响应体。响应是可迭代对象，可在 with 语句中使用。</p>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.5 版本发生变更: </span>现在已实现了 <a class="reference internal" href="io.xhtml#io.BufferedIOBase" title="io.BufferedIOBase"><code class="xref py py-class docutils literal notranslate"><span class="pre">io.BufferedIOBase</span></code></a> 接口，并且支持所有的读取操作。</p>
</div>
<dl class="py method">
<dt class="sig sig-object py" id="http.client.HTTPResponse.read">
<span class="sig-prename descclassname"><span class="pre">HTTPResponse.</span></span><span class="sig-name descname"><span class="pre">read</span></span><span class="sig-paren">(</span><span class="optional">[</span><em class="sig-param"><span class="n"><span class="pre">amt</span></span></em><span class="optional">]</span><span class="sig-paren">)</span></dt>
<dd><p>读取并返回响应体，或后续 <em>amt</em> 个字节。</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="http.client.HTTPResponse.readinto">
<span class="sig-prename descclassname"><span class="pre">HTTPResponse.</span></span><span class="sig-name descname"><span class="pre">readinto</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">b</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>读取响应体的后续 len(b) 个字节到缓冲区 <em>b</em>。返回读取的字节数。</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.3.</span></p>
</div>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="http.client.HTTPResponse.getheader">
<span class="sig-prename descclassname"><span class="pre">HTTPResponse.</span></span><span class="sig-name descname"><span class="pre">getheader</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">name</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">default</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>返回标头 <em>name</em> 的值，或者如果没有匹配 <em>name</em> 的标头则返回 <em>default</em>。 如果名为 <em>name</em> 的标头不止一个，则返回以 ', ' 连接的所有值。 如果 <em>default</em> 是任何不为单个字符串的可迭代对象，则其元素同样会以逗号连接的形式返回。</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="http.client.HTTPResponse.getheaders">
<span class="sig-prename descclassname"><span class="pre">HTTPResponse.</span></span><span class="sig-name descname"><span class="pre">getheaders</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>返回  (header, value) 元组构成的列表。</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="http.client.HTTPResponse.fileno">
<span class="sig-prename descclassname"><span class="pre">HTTPResponse.</span></span><span class="sig-name descname"><span class="pre">fileno</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>返回底层套接字的 <code class="docutils literal notranslate"><span class="pre">fileno</span></code>。</p>
</dd></dl>

<dl class="py attribute">
<dt class="sig sig-object py" id="http.client.HTTPResponse.msg">
<span class="sig-prename descclassname"><span class="pre">HTTPResponse.</span></span><span class="sig-name descname"><span class="pre">msg</span></span></dt>
<dd><p>包含响应头的 <a class="reference internal" href="#http.client.HTTPMessage" title="http.client.HTTPMessage"><code class="xref py py-class docutils literal notranslate"><span class="pre">http.client.HTTPMessage</span></code></a> 实例。<a class="reference internal" href="#http.client.HTTPMessage" title="http.client.HTTPMessage"><code class="xref py py-class docutils literal notranslate"><span class="pre">http.client.HTTPMessage</span></code></a> 是 <a class="reference internal" href="email.message.xhtml#module-email.message" title="email.message: The base class representing email messages."><code class="xref py py-class docutils literal notranslate"><span class="pre">email.message</span></code></a> 的子类。</p>
</dd></dl>

<dl class="py attribute">
<dt class="sig sig-object py" id="http.client.HTTPResponse.version">
<span class="sig-prename descclassname"><span class="pre">HTTPResponse.</span></span><span class="sig-name descname"><span class="pre">version</span></span></dt>
<dd><p>服务器采用的 HTTP 协议版本。10 代表 HTTP/1.0，11 代表 HTTP/1.1。</p>
</dd></dl>

<dl class="py attribute">
<dt class="sig sig-object py" id="http.client.HTTPResponse.url">
<span class="sig-prename descclassname"><span class="pre">HTTPResponse.</span></span><span class="sig-name descname"><span class="pre">url</span></span></dt>
<dd><p>已读取资源的 URL，通常用于确定是否进行了重定向。</p>
</dd></dl>

<dl class="py attribute">
<dt class="sig sig-object py" id="http.client.HTTPResponse.headers">
<span class="sig-prename descclassname"><span class="pre">HTTPResponse.</span></span><span class="sig-name descname"><span class="pre">headers</span></span></dt>
<dd><p>响应的头部信息，形式为 <a class="reference internal" href="email.message.xhtml#email.message.EmailMessage" title="email.message.EmailMessage"><code class="xref py py-class docutils literal notranslate"><span class="pre">email.message.EmailMessage</span></code></a> 的实例。</p>
</dd></dl>

<dl class="py attribute">
<dt class="sig sig-object py" id="http.client.HTTPResponse.status">
<span class="sig-prename descclassname"><span class="pre">HTTPResponse.</span></span><span class="sig-name descname"><span class="pre">status</span></span></dt>
<dd><p>由服务器返回的状态码。</p>
</dd></dl>

<dl class="py attribute">
<dt class="sig sig-object py" id="http.client.HTTPResponse.reason">
<span class="sig-prename descclassname"><span class="pre">HTTPResponse.</span></span><span class="sig-name descname"><span class="pre">reason</span></span></dt>
<dd><p>服务器返回的原因短语。</p>
</dd></dl>

<dl class="py attribute">
<dt class="sig sig-object py" id="http.client.HTTPResponse.debuglevel">
<span class="sig-prename descclassname"><span class="pre">HTTPResponse.</span></span><span class="sig-name descname"><span class="pre">debuglevel</span></span></dt>
<dd><p>一个调试钩子。如果 <a class="reference internal" href="#http.client.HTTPResponse.debuglevel" title="http.client.HTTPResponse.debuglevel"><code class="xref py py-attr docutils literal notranslate"><span class="pre">debuglevel</span></code></a> 大于零，状态信息将在读取和解析响应数据时打印输出到 stdout。</p>
</dd></dl>

<dl class="py attribute">
<dt class="sig sig-object py" id="http.client.HTTPResponse.closed">
<span class="sig-prename descclassname"><span class="pre">HTTPResponse.</span></span><span class="sig-name descname"><span class="pre">closed</span></span></dt>
<dd><p>如果流被关闭，则为 <code class="docutils literal notranslate"><span class="pre">True</span></code>。</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="http.client.HTTPResponse.geturl">
<span class="sig-prename descclassname"><span class="pre">HTTPResponse.</span></span><span class="sig-name descname"><span class="pre">geturl</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><div class="deprecated">
<p><span class="versionmodified deprecated">自 3.9 版本弃用: </span>已弃用，建议用 <a class="reference internal" href="#http.client.HTTPResponse.url" title="http.client.HTTPResponse.url"><code class="xref py py-attr docutils literal notranslate"><span class="pre">url</span></code></a>。</p>
</div>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="http.client.HTTPResponse.info">
<span class="sig-prename descclassname"><span class="pre">HTTPResponse.</span></span><span class="sig-name descname"><span class="pre">info</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><div class="deprecated">
<p><span class="versionmodified deprecated">自 3.9 版本弃用: </span>已弃用，建议用 <a class="reference internal" href="#http.client.HTTPResponse.headers" title="http.client.HTTPResponse.headers"><code class="xref py py-attr docutils literal notranslate"><span class="pre">headers</span></code></a>。</p>
</div>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="http.client.HTTPResponse.getcode">
<span class="sig-prename descclassname"><span class="pre">HTTPResponse.</span></span><span class="sig-name descname"><span class="pre">getcode</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><div class="deprecated">
<p><span class="versionmodified deprecated">自 3.9 版本弃用: </span>已弃用，建议用 <a class="reference internal" href="#http.client.HTTPResponse.status" title="http.client.HTTPResponse.status"><code class="xref py py-attr docutils literal notranslate"><span class="pre">status</span></code></a> 。</p>
</div>
</dd></dl>

</section>
<section id="examples">
<h2>例子</h2>
<p>下面是使用 <code class="docutils literal notranslate"><span class="pre">GET</span></code> 方法的会话示例：</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="kn">import</span> <span class="nn">http.client</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">conn</span> <span class="o">=</span> <span class="n">http</span><span class="o">.</span><span class="n">client</span><span class="o">.</span><span class="n">HTTPSConnection</span><span class="p">(</span><span class="s2">&quot;www.python.org&quot;</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">conn</span><span class="o">.</span><span class="n">request</span><span class="p">(</span><span class="s2">&quot;GET&quot;</span><span class="p">,</span> <span class="s2">&quot;/&quot;</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">r1</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="n">getresponse</span><span class="p">()</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">print</span><span class="p">(</span><span class="n">r1</span><span class="o">.</span><span class="n">status</span><span class="p">,</span> <span class="n">r1</span><span class="o">.</span><span class="n">reason</span><span class="p">)</span>
<span class="go">200 OK</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">data1</span> <span class="o">=</span> <span class="n">r1</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>  <span class="c1"># This will return entire content.</span>
<span class="gp">&gt;&gt;&gt; </span><span class="c1"># The following example demonstrates reading data in chunks.</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">conn</span><span class="o">.</span><span class="n">request</span><span class="p">(</span><span class="s2">&quot;GET&quot;</span><span class="p">,</span> <span class="s2">&quot;/&quot;</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">r1</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="n">getresponse</span><span class="p">()</span>
<span class="gp">&gt;&gt;&gt; </span><span class="k">while</span> <span class="n">chunk</span> <span class="o">:=</span> <span class="n">r1</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="mi">200</span><span class="p">):</span>
<span class="gp">... </span>    <span class="nb">print</span><span class="p">(</span><span class="nb">repr</span><span class="p">(</span><span class="n">chunk</span><span class="p">))</span>
<span class="go">b&#39;&lt;!doctype html&gt;\n&lt;!--[if&quot;...</span>
<span class="go">...</span>
<span class="gp">&gt;&gt;&gt; </span><span class="c1"># Example of an invalid request</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">conn</span> <span class="o">=</span> <span class="n">http</span><span class="o">.</span><span class="n">client</span><span class="o">.</span><span class="n">HTTPSConnection</span><span class="p">(</span><span class="s2">&quot;docs.python.org&quot;</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">conn</span><span class="o">.</span><span class="n">request</span><span class="p">(</span><span class="s2">&quot;GET&quot;</span><span class="p">,</span> <span class="s2">&quot;/parrot.spam&quot;</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">r2</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="n">getresponse</span><span class="p">()</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">print</span><span class="p">(</span><span class="n">r2</span><span class="o">.</span><span class="n">status</span><span class="p">,</span> <span class="n">r2</span><span class="o">.</span><span class="n">reason</span><span class="p">)</span>
<span class="go">404 Not Found</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">data2</span> <span class="o">=</span> <span class="n">r2</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">conn</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</pre></div>
</div>
<p>以下是使用 <code class="docutils literal notranslate"><span class="pre">HEAD</span></code> 方法的会话示例。 请注意，<code class="docutils literal notranslate"><span class="pre">HEAD</span></code> 方法从不返回任何数据。</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="kn">import</span> <span class="nn">http.client</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">conn</span> <span class="o">=</span> <span class="n">http</span><span class="o">.</span><span class="n">client</span><span class="o">.</span><span class="n">HTTPSConnection</span><span class="p">(</span><span class="s2">&quot;www.python.org&quot;</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">conn</span><span class="o">.</span><span class="n">request</span><span class="p">(</span><span class="s2">&quot;HEAD&quot;</span><span class="p">,</span> <span class="s2">&quot;/&quot;</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">res</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="n">getresponse</span><span class="p">()</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">print</span><span class="p">(</span><span class="n">res</span><span class="o">.</span><span class="n">status</span><span class="p">,</span> <span class="n">res</span><span class="o">.</span><span class="n">reason</span><span class="p">)</span>
<span class="go">200 OK</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">data</span> <span class="o">=</span> <span class="n">res</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">print</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="p">))</span>
<span class="go">0</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">data</span> <span class="o">==</span> <span class="sa">b</span><span class="s1">&#39;&#39;</span>
<span class="go">True</span>
</pre></div>
</div>
<p>下面是一个使用 <code class="docutils literal notranslate"><span class="pre">POST</span></code> 方法的会话示例:</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="kn">import</span> <span class="nn">http.client</span><span class="o">,</span> <span class="nn">urllib.parse</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">params</span> <span class="o">=</span> <span class="n">urllib</span><span class="o">.</span><span class="n">parse</span><span class="o">.</span><span class="n">urlencode</span><span class="p">({</span><span class="s1">&#39;@number&#39;</span><span class="p">:</span> <span class="mi">12524</span><span class="p">,</span> <span class="s1">&#39;@type&#39;</span><span class="p">:</span> <span class="s1">&#39;issue&#39;</span><span class="p">,</span> <span class="s1">&#39;@action&#39;</span><span class="p">:</span> <span class="s1">&#39;show&#39;</span><span class="p">})</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">headers</span> <span class="o">=</span> <span class="p">{</span><span class="s2">&quot;Content-type&quot;</span><span class="p">:</span> <span class="s2">&quot;application/x-www-form-urlencoded&quot;</span><span class="p">,</span>
<span class="gp">... </span>           <span class="s2">&quot;Accept&quot;</span><span class="p">:</span> <span class="s2">&quot;text/plain&quot;</span><span class="p">}</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">conn</span> <span class="o">=</span> <span class="n">http</span><span class="o">.</span><span class="n">client</span><span class="o">.</span><span class="n">HTTPConnection</span><span class="p">(</span><span class="s2">&quot;bugs.python.org&quot;</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">conn</span><span class="o">.</span><span class="n">request</span><span class="p">(</span><span class="s2">&quot;POST&quot;</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">,</span> <span class="n">params</span><span class="p">,</span> <span class="n">headers</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">response</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="n">getresponse</span><span class="p">()</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">print</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">status</span><span class="p">,</span> <span class="n">response</span><span class="o">.</span><span class="n">reason</span><span class="p">)</span>
<span class="go">302 Found</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">data</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">data</span>
<span class="go">b&#39;Redirecting to &lt;a href=&quot;https://bugs.python.org/issue12524&quot;&gt;https://bugs.python.org/issue12524&lt;/a&gt;&#39;</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">conn</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</pre></div>
</div>
<p>客户端 HTTP <code class="docutils literal notranslate"><span class="pre">PUT</span></code> 请求与 <code class="docutils literal notranslate"><span class="pre">POST</span></code> 请求非常相似。 区别仅在于服务器端 HTTP 服务器将允许通过 <code class="docutils literal notranslate"><span class="pre">PUT</span></code> 请求创建资源。 应该注意自定义的 HTTP 方法也可以在 <a class="reference internal" href="urllib.request.xhtml#urllib.request.Request" title="urllib.request.Request"><code class="xref py py-class docutils literal notranslate"><span class="pre">urllib.request.Request</span></code></a> 中通过设置适当的方法属性来进行处理。 下面是一个使用 <code class="docutils literal notranslate"><span class="pre">PUT</span></code> 方法的会话示例:</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="c1"># This creates an HTTP request</span>
<span class="gp">&gt;&gt;&gt; </span><span class="c1"># with the content of BODY as the enclosed representation</span>
<span class="gp">&gt;&gt;&gt; </span><span class="c1"># for the resource http://localhost:8080/file</span>
<span class="gp">...</span>
<span class="gp">&gt;&gt;&gt; </span><span class="kn">import</span> <span class="nn">http.client</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">BODY</span> <span class="o">=</span> <span class="s2">&quot;***filecontents***&quot;</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">conn</span> <span class="o">=</span> <span class="n">http</span><span class="o">.</span><span class="n">client</span><span class="o">.</span><span class="n">HTTPConnection</span><span class="p">(</span><span class="s2">&quot;localhost&quot;</span><span class="p">,</span> <span class="mi">8080</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">conn</span><span class="o">.</span><span class="n">request</span><span class="p">(</span><span class="s2">&quot;PUT&quot;</span><span class="p">,</span> <span class="s2">&quot;/file&quot;</span><span class="p">,</span> <span class="n">BODY</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">response</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="n">getresponse</span><span class="p">()</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">print</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">status</span><span class="p">,</span> <span class="n">response</span><span class="o">.</span><span class="n">reason</span><span class="p">)</span>
<span class="go">200, OK</span>
</pre></div>
</div>
</section>
<section id="httpmessage-objects">
<span id="id3"></span><h2>HTTPMessage 对象</h2>
<dl class="py class">
<dt class="sig sig-object py" id="http.client.HTTPMessage">
<em class="property"><span class="pre">class</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">http.client.</span></span><span class="sig-name descname"><span class="pre">HTTPMessage</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">email.message.Message</span></span></em><span class="sig-paren">)</span></dt>
<dd></dd></dl>

<p><a class="reference internal" href="#http.client.HTTPMessage" title="http.client.HTTPMessage"><code class="xref py py-class docutils literal notranslate"><span class="pre">http.client.HTTPMessage</span></code></a> 的实例存有 HTTP 响应的头部信息。利用 <a class="reference internal" href="email.compat32-message.xhtml#email.message.Message" title="email.message.Message"><code class="xref py py-class docutils literal notranslate"><span class="pre">email.message.Message</span></code></a> 类实现。</p>
</section>
</section>


            <div class="clearer"></div>
          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>