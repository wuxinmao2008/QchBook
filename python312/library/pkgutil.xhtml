<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" /><meta name="viewport" content="width=device-width, initial-scale=1" />
<meta property="og:title" content="pkgutil --- 包扩展工具" />
<meta property="og:type" content="website" />
<meta property="og:url" content="https://docs.python.org/3/library/pkgutil.xhtml" />
<meta property="og:site_name" content="Python documentation" />
<meta property="og:description" content="源代码: Lib/pkgutil.py[https://github.com/python/cpython/tree/3.12/Lib/pkgutil.py] 该模块为导入系统提供了工具，尤其是在包支持方面。" />
<meta property="og:image" content="https://docs.python.org/3/_static/og-image.png" />
<meta property="og:image:alt" content="Python documentation" />
<meta name="description" content="源代码: Lib/pkgutil.py[https://github.com/python/cpython/tree/3.12/Lib/pkgutil.py] 该模块为导入系统提供了工具，尤其是在包支持方面。" />
<meta property="og:image:width" content="200" />
<meta property="og:image:height" content="200" />
<meta name="theme-color" content="#3776ab" />

    <title>pkgutil --- 包扩展工具</title>
    <link rel="stylesheet" type="text/css" href="../_static/pygments.css" />
    <link rel="stylesheet" type="text/css" href="../_static/epub.css" />
    <link rel="canonical" href="https://docs.python.org/3/library/pkgutil.html" />
    
      
    

    
    <style>
      @media only screen {
        table.full-width-table {
            width: 100%;
        }
      }
    </style>
 

  </head><body>


    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <section id="module-pkgutil">
<span id="pkgutil-package-extension-utility"></span><h1><code class="xref py py-mod docutils literal notranslate"><span class="pre">pkgutil</span></code> --- 包扩展工具</h1>
<p><strong>源代码:</strong> <a class="reference external" href="https://github.com/python/cpython/tree/3.12/Lib/pkgutil.py">Lib/pkgutil.py</a><span class="link-target"> [https://github.com/python/cpython/tree/3.12/Lib/pkgutil.py]</span></p>
<hr class="docutils" />
<p>该模块为导入系统提供了工具，尤其是在包支持方面。</p>
<dl class="py class">
<dt class="sig sig-object py" id="pkgutil.ModuleInfo">
<em class="property"><span class="pre">class</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">pkgutil.</span></span><span class="sig-name descname"><span class="pre">ModuleInfo</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">module_finder</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">name</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">ispkg</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>一个包含模块信息的简短摘要的命名元组。</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.6.</span></p>
</div>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="pkgutil.extend_path">
<span class="sig-prename descclassname"><span class="pre">pkgutil.</span></span><span class="sig-name descname"><span class="pre">extend_path</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">path</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">name</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>扩展组成包的模块的搜索路径。 预期用途是将以下代码放到包的 <code class="file docutils literal notranslate"><span class="pre">__init__.py</span></code> 中:</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="kn">from</span> <span class="nn">pkgutil</span> <span class="kn">import</span> <span class="n">extend_path</span>
<span class="n">__path__</span> <span class="o">=</span> <span class="n">extend_path</span><span class="p">(</span><span class="n">__path__</span><span class="p">,</span> <span class="vm">__name__</span><span class="p">)</span>
</pre></div>
</div>
<p>对于 <a class="reference internal" href="sys.xhtml#sys.path" title="sys.path"><code class="xref py py-data docutils literal notranslate"><span class="pre">sys.path</span></code></a> 中每个具有与该包名称相匹配的子目录的目录，将该子目录添加到包的 <a class="reference internal" href="../reference/import.xhtml#path__" title="__path__"><code class="xref py py-attr docutils literal notranslate"><span class="pre">__path__</span></code></a>。 这在需要将单个逻辑包的不同部分拆分为多个目录的情况下很有用处。</p>
<p>它还会查找开头部分 <code class="docutils literal notranslate"><span class="pre">*</span></code> 与 <em>name</em> 参数相匹配的 <code class="file docutils literal notranslate"><span class="pre">*.pkg</span></code> 文件。 此特性与 <code class="file docutils literal notranslate"><span class="pre">*.pth</span></code> 文件类似（请参阅 <a class="reference internal" href="site.xhtml#module-site" title="site: Module responsible for site-specific configuration."><code class="xref py py-mod docutils literal notranslate"><span class="pre">site</span></code></a> 模块了解更多信息），区别在于它不会对以 <code class="docutils literal notranslate"><span class="pre">import</span></code> 开头的行做特别对待。 将按外在值对 <code class="file docutils literal notranslate"><span class="pre">*.pkg</span></code> 文件添加信任：除了检查重复项，，所有在 <code class="file docutils literal notranslate"><span class="pre">*.pkg</span></code> 文件中找到的条目都会被添加到路径中，不管它们是否存在于文件系统中。 （这是特性而非缺陷。）</p>
<p>如果输入路径不是一个列表（已冻结包就是这种情况）则它将被原样返回。 输入路径不会被修改；将返回一个扩展的副本。 条目将被添加到副本的末尾。</p>
<p><a class="reference internal" href="sys.xhtml#sys.path" title="sys.path"><code class="xref py py-data docutils literal notranslate"><span class="pre">sys.path</span></code></a> 会被假定为一个序列。 <a class="reference internal" href="sys.xhtml#sys.path" title="sys.path"><code class="xref py py-data docutils literal notranslate"><span class="pre">sys.path</span></code></a> 中的条目如果不是指向现有目录的字符串则会被忽略。 <a class="reference internal" href="sys.xhtml#sys.path" title="sys.path"><code class="xref py py-data docutils literal notranslate"><span class="pre">sys.path</span></code></a> 上当用作文件名时会导致错误的 Unicode 条目可以会使得此函数引发异常（与 <a class="reference internal" href="os.path.xhtml#os.path.isdir" title="os.path.isdir"><code class="xref py py-func docutils literal notranslate"><span class="pre">os.path.isdir()</span></code></a> 的行为一致）。</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="pkgutil.find_loader">
<span class="sig-prename descclassname"><span class="pre">pkgutil.</span></span><span class="sig-name descname"><span class="pre">find_loader</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">fullname</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>为给定的 <em>fullname</em> 获取一个模块 <a class="reference internal" href="../glossary.xhtml#term-loader"><span class="xref std std-term">loader</span></a>。</p>
<p>这是针对 <a class="reference internal" href="importlib.xhtml#importlib.util.find_spec" title="importlib.util.find_spec"><code class="xref py py-func docutils literal notranslate"><span class="pre">importlib.util.find_spec()</span></code></a> 的向下兼容包装器，它将大多数失败转换为 <a class="reference internal" href="exceptions.xhtml#ImportError" title="ImportError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">ImportError</span></code></a> 并且只返回加载器而不是完整的 <a class="reference internal" href="importlib.xhtml#importlib.machinery.ModuleSpec" title="importlib.machinery.ModuleSpec"><code class="xref py py-class docutils literal notranslate"><span class="pre">importlib.machinery.ModuleSpec</span></code></a>。</p>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.3 版本发生变更: </span>更新为直接基于 <a class="reference internal" href="importlib.xhtml#module-importlib" title="importlib: The implementation of the import machinery."><code class="xref py py-mod docutils literal notranslate"><span class="pre">importlib</span></code></a> 而不是依赖于包内部的 <span class="target" id="index-16"></span><a class="pep reference external" href="https://peps.python.org/pep-0302/"><strong>PEP 302</strong></a><span class="link-target"> [https://peps.python.org/pep-0302/]</span> 导入模拟。</p>
</div>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.4 版本发生变更: </span>更新为基于 <span class="target" id="index-17"></span><a class="pep reference external" href="https://peps.python.org/pep-0451/"><strong>PEP 451</strong></a><span class="link-target"> [https://peps.python.org/pep-0451/]</span></p>
</div>
<div class="deprecated-removed">
<p><span class="versionmodified">从 3.12 版起不建议使用，将在 3.14 版中移除: </span>使用 <a class="reference internal" href="importlib.xhtml#importlib.util.find_spec" title="importlib.util.find_spec"><code class="xref py py-func docutils literal notranslate"><span class="pre">importlib.util.find_spec()</span></code></a> 来代替。</p>
</div>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="pkgutil.get_importer">
<span class="sig-prename descclassname"><span class="pre">pkgutil.</span></span><span class="sig-name descname"><span class="pre">get_importer</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">path_item</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>为给定的 <em>path_item</em> 获取一个 <a class="reference internal" href="../glossary.xhtml#term-finder"><span class="xref std std-term">finder</span></a>。</p>
<p>返回的查找器如果是由一个路径钩子新建的则会被缓存至 <a class="reference internal" href="sys.xhtml#sys.path_importer_cache" title="sys.path_importer_cache"><code class="xref py py-data docutils literal notranslate"><span class="pre">sys.path_importer_cache</span></code></a>。</p>
<p>如果需要重新扫描 <a class="reference internal" href="sys.xhtml#sys.path_hooks" title="sys.path_hooks"><code class="xref py py-data docutils literal notranslate"><span class="pre">sys.path_hooks</span></code></a> 则缓存（或其一部分）可以被手动清空。</p>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.3 版本发生变更: </span>更新为直接基于 <a class="reference internal" href="importlib.xhtml#module-importlib" title="importlib: The implementation of the import machinery."><code class="xref py py-mod docutils literal notranslate"><span class="pre">importlib</span></code></a> 而不是依赖于包内部的 <span class="target" id="index-18"></span><a class="pep reference external" href="https://peps.python.org/pep-0302/"><strong>PEP 302</strong></a><span class="link-target"> [https://peps.python.org/pep-0302/]</span> 导入模拟。</p>
</div>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="pkgutil.get_loader">
<span class="sig-prename descclassname"><span class="pre">pkgutil.</span></span><span class="sig-name descname"><span class="pre">get_loader</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">module_or_name</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>为 <em>module_or_name</em> 获取一个 <a class="reference internal" href="../glossary.xhtml#term-loader"><span class="xref std std-term">loader</span></a>。</p>
<p>如果模块或包可通过正常导入机制来访问，则会返回该机制相关部分的包装器。 如果模块无法找到或导入则返回 <code class="docutils literal notranslate"><span class="pre">None</span></code>。 如果指定的模块尚未被导入，则包含它的包（如果存在）会被导入，以便建立包 <code class="docutils literal notranslate"><span class="pre">__path__</span></code>。</p>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.3 版本发生变更: </span>更新为直接基于 <a class="reference internal" href="importlib.xhtml#module-importlib" title="importlib: The implementation of the import machinery."><code class="xref py py-mod docutils literal notranslate"><span class="pre">importlib</span></code></a> 而不是依赖于包内部的 <span class="target" id="index-19"></span><a class="pep reference external" href="https://peps.python.org/pep-0302/"><strong>PEP 302</strong></a><span class="link-target"> [https://peps.python.org/pep-0302/]</span> 导入模拟。</p>
</div>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.4 版本发生变更: </span>更新为基于 <span class="target" id="index-20"></span><a class="pep reference external" href="https://peps.python.org/pep-0451/"><strong>PEP 451</strong></a><span class="link-target"> [https://peps.python.org/pep-0451/]</span></p>
</div>
<div class="deprecated-removed">
<p><span class="versionmodified">从 3.12 版起不建议使用，将在 3.14 版中移除: </span>使用 <a class="reference internal" href="importlib.xhtml#importlib.util.find_spec" title="importlib.util.find_spec"><code class="xref py py-func docutils literal notranslate"><span class="pre">importlib.util.find_spec()</span></code></a> 来代替。</p>
</div>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="pkgutil.iter_importers">
<span class="sig-prename descclassname"><span class="pre">pkgutil.</span></span><span class="sig-name descname"><span class="pre">iter_importers</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">fullname</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">''</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>为给定的模块名称产生 <a class="reference internal" href="../glossary.xhtml#term-finder"><span class="xref std std-term">finder</span></a> 对象。</p>
<p>如果完整名称包含一个 <code class="docutils literal notranslate"><span class="pre">'.'</span></code>，查找器将针对包含该完整名称的包，否则它们将被注册为最高层级查找器（即同时用于 <a class="reference internal" href="sys.xhtml#sys.meta_path" title="sys.meta_path"><code class="xref py py-data docutils literal notranslate"><span class="pre">sys.meta_path</span></code></a> 和 <a class="reference internal" href="sys.xhtml#sys.path_hooks" title="sys.path_hooks"><code class="xref py py-data docutils literal notranslate"><span class="pre">sys.path_hooks</span></code></a>)。</p>
<p>如果指定的模块位于一个包内，则该包会作为发起调用此函数的附带影响被导入。</p>
<p>如果未指定模块名称，则会产生所有的最高层级查找器。</p>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.3 版本发生变更: </span>更新为直接基于 <a class="reference internal" href="importlib.xhtml#module-importlib" title="importlib: The implementation of the import machinery."><code class="xref py py-mod docutils literal notranslate"><span class="pre">importlib</span></code></a> 而不是依赖于包内部的 <span class="target" id="index-21"></span><a class="pep reference external" href="https://peps.python.org/pep-0302/"><strong>PEP 302</strong></a><span class="link-target"> [https://peps.python.org/pep-0302/]</span> 导入模拟。</p>
</div>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="pkgutil.iter_modules">
<span class="sig-prename descclassname"><span class="pre">pkgutil.</span></span><span class="sig-name descname"><span class="pre">iter_modules</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">path</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">prefix</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">''</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>为 <em>path</em> 上的所有子模块产生 <a class="reference internal" href="#pkgutil.ModuleInfo" title="pkgutil.ModuleInfo"><code class="xref py py-class docutils literal notranslate"><span class="pre">ModuleInfo</span></code></a>，或者如果 <em>path</em> 为 <code class="docutils literal notranslate"><span class="pre">None</span></code>，则为 <a class="reference internal" href="sys.xhtml#sys.path" title="sys.path"><code class="xref py py-data docutils literal notranslate"><span class="pre">sys.path</span></code></a> 上的所有最高层级模块产生。</p>
<p><em>path</em> 应当为 <code class="docutils literal notranslate"><span class="pre">None</span></code> 或一个作为查找模块目标的路径的列表。</p>
<p><em>prefix</em> 是要在输出时输出到每个模块名称之前的字符串。</p>
<div class="admonition note">
<p class="admonition-title">备注</p>
<p>只适用于定义了 <code class="docutils literal notranslate"><span class="pre">iter_modules()</span></code> 方法的 <a class="reference internal" href="../glossary.xhtml#term-finder"><span class="xref std std-term">finder</span></a>。 该接口是非标准的，因此本模块还提供了针对 <a class="reference internal" href="importlib.xhtml#importlib.machinery.FileFinder" title="importlib.machinery.FileFinder"><code class="xref py py-class docutils literal notranslate"><span class="pre">importlib.machinery.FileFinder</span></code></a> 和 <a class="reference internal" href="zipimport.xhtml#zipimport.zipimporter" title="zipimport.zipimporter"><code class="xref py py-class docutils literal notranslate"><span class="pre">zipimport.zipimporter</span></code></a> 的实现。</p>
</div>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.3 版本发生变更: </span>更新为直接基于 <a class="reference internal" href="importlib.xhtml#module-importlib" title="importlib: The implementation of the import machinery."><code class="xref py py-mod docutils literal notranslate"><span class="pre">importlib</span></code></a> 而不是依赖于包内部的 <span class="target" id="index-22"></span><a class="pep reference external" href="https://peps.python.org/pep-0302/"><strong>PEP 302</strong></a><span class="link-target"> [https://peps.python.org/pep-0302/]</span> 导入模拟。</p>
</div>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="pkgutil.walk_packages">
<span class="sig-prename descclassname"><span class="pre">pkgutil.</span></span><span class="sig-name descname"><span class="pre">walk_packages</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">path</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">prefix</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">''</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">onerror</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>在 <em>path</em> 上递归地为所有模块产生 <a class="reference internal" href="#pkgutil.ModuleInfo" title="pkgutil.ModuleInfo"><code class="xref py py-class docutils literal notranslate"><span class="pre">ModuleInfo</span></code></a>，或者如果 <em>path</em> 为 <code class="docutils literal notranslate"><span class="pre">None</span></code>，则为所有可访问的模块产生。</p>
<p><em>path</em> 应当为 <code class="docutils literal notranslate"><span class="pre">None</span></code> 或一个作为查找模块目标的路径的列表。</p>
<p><em>prefix</em> 是要在输出时输出到每个模块名称之前的字符串。</p>
<p>请注意此函数必须导入给定 <em>path</em> 上所有的 <em>packages</em> (<em>而不是</em> 所有的模块！)，以便能访问 <code class="docutils literal notranslate"><span class="pre">__path__</span></code> 属性来查找子模块。</p>
<p><em>onerror</em> 是在当试图导入包如果发生任何异常则将附带一个参数（被导入的包的名称）被调用的函数。 如果没有提供 <em>onerror</em> 函数，则 <a class="reference internal" href="exceptions.xhtml#ImportError" title="ImportError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">ImportError</span></code></a> 会被捕获并被忽略，而其他异常则会被传播，导致模块搜索的终结。</p>
<p>示例:</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="c1"># list all modules python can access</span>
<span class="n">walk_packages</span><span class="p">()</span>

<span class="c1"># list all submodules of ctypes</span>
<span class="n">walk_packages</span><span class="p">(</span><span class="n">ctypes</span><span class="o">.</span><span class="n">__path__</span><span class="p">,</span> <span class="n">ctypes</span><span class="o">.</span><span class="vm">__name__</span> <span class="o">+</span> <span class="s1">&#39;.&#39;</span><span class="p">)</span>
</pre></div>
</div>
<div class="admonition note">
<p class="admonition-title">备注</p>
<p>只适用于定义了 <code class="docutils literal notranslate"><span class="pre">iter_modules()</span></code> 方法的 <a class="reference internal" href="../glossary.xhtml#term-finder"><span class="xref std std-term">finder</span></a>。 该接口是非标准的，因此本模块还提供了针对 <a class="reference internal" href="importlib.xhtml#importlib.machinery.FileFinder" title="importlib.machinery.FileFinder"><code class="xref py py-class docutils literal notranslate"><span class="pre">importlib.machinery.FileFinder</span></code></a> 和 <a class="reference internal" href="zipimport.xhtml#zipimport.zipimporter" title="zipimport.zipimporter"><code class="xref py py-class docutils literal notranslate"><span class="pre">zipimport.zipimporter</span></code></a> 的实现。</p>
</div>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.3 版本发生变更: </span>更新为直接基于 <a class="reference internal" href="importlib.xhtml#module-importlib" title="importlib: The implementation of the import machinery."><code class="xref py py-mod docutils literal notranslate"><span class="pre">importlib</span></code></a> 而不是依赖于包内部的 <span class="target" id="index-23"></span><a class="pep reference external" href="https://peps.python.org/pep-0302/"><strong>PEP 302</strong></a><span class="link-target"> [https://peps.python.org/pep-0302/]</span> 导入模拟。</p>
</div>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="pkgutil.get_data">
<span class="sig-prename descclassname"><span class="pre">pkgutil.</span></span><span class="sig-name descname"><span class="pre">get_data</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">package</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">resource</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>从包中获取一个资源。</p>
<p>这是一个针对 <a class="reference internal" href="../glossary.xhtml#term-loader"><span class="xref std std-term">loader</span></a> <a class="reference internal" href="importlib.xhtml#importlib.abc.ResourceLoader.get_data" title="importlib.abc.ResourceLoader.get_data"><code class="xref py py-meth docutils literal notranslate"><span class="pre">get_data</span></code></a> API 的包装器。 <em>package</em> 参数应为一个标准模块格式 (<code class="docutils literal notranslate"><span class="pre">foo.bar</span></code>) 的包名称。 <em>resource</em> 参数应为相对路径文件名的形式，使用 <code class="docutils literal notranslate"><span class="pre">/</span></code> 作为路径分隔符。 父目录名 <code class="docutils literal notranslate"><span class="pre">..</span></code>，以及根目录名 (以 <code class="docutils literal notranslate"><span class="pre">/</span></code> 打头) 均不允许使用。</p>
<p>返回指定资源内容的二进制串。</p>
<p>对于位于文件系统中，已经被导入的包来说，这大致等价于:</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="n">d</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">dirname</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">modules</span><span class="p">[</span><span class="n">package</span><span class="p">]</span><span class="o">.</span><span class="vm">__file__</span><span class="p">)</span>
<span class="n">data</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">d</span><span class="p">,</span> <span class="n">resource</span><span class="p">),</span> <span class="s1">&#39;rb&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</pre></div>
</div>
<p>如果指定的包无法被定位或加载，或者如果它使用了不支持 <a class="reference internal" href="importlib.xhtml#importlib.abc.ResourceLoader.get_data" title="importlib.abc.ResourceLoader.get_data"><code class="xref py py-meth docutils literal notranslate"><span class="pre">get_data</span></code></a> 的 <a class="reference internal" href="../glossary.xhtml#term-loader"><span class="xref std std-term">loader</span></a>，则将返回 <code class="docutils literal notranslate"><span class="pre">None</span></code>。 特别地，针对 <a class="reference internal" href="../glossary.xhtml#term-namespace-package"><span class="xref std std-term">命名空间包</span></a> 的 <a class="reference internal" href="../glossary.xhtml#term-loader"><span class="xref std std-term">loader</span></a> 不支持 <a class="reference internal" href="importlib.xhtml#importlib.abc.ResourceLoader.get_data" title="importlib.abc.ResourceLoader.get_data"><code class="xref py py-meth docutils literal notranslate"><span class="pre">get_data</span></code></a>。</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="pkgutil.resolve_name">
<span class="sig-prename descclassname"><span class="pre">pkgutil.</span></span><span class="sig-name descname"><span class="pre">resolve_name</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">name</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>将一个名称解析为对象。</p>
<p>此功能被用在标准库的许多地方 (参见 <a class="reference external" href="https://bugs.python.org/issue?&#64;action=redirect&amp;bpo=12915">bpo-12915</a><span class="link-target"> [https://bugs.python.org/issue?&#64;action=redirect&amp;bpo=12915]</span>) —— 并且等价的功能也被广泛用于第三方包例如 setuptools, Django 和 Pyramid。</p>
<p>预期 <em>name</em> 将为以下格式之一，其中 W 是一个有效的 Python 标识符的缩写而点号表示这些伪正则表达式中的句点字面值:</p>
<ul class="simple">
<li><p><code class="docutils literal notranslate"><span class="pre">W(.W)*</span></code></p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">W(.W)*:(W(.W)*)?</span></code></p></li>
</ul>
<p>第一种形式只是为了保持向下兼容性。 它假定带点号名称的某一部分是包，而其余部分则是该包内部的一个对象，并可能嵌套在其他对象之内。 因为包和对象层级结构之间的分界点无法通过观察来确定，所以使用这种形式必须重复尝试导入。</p>
<p>在第二种形式中，调用方通过提供一个单独冒号来明确分界点：冒号左边的带点号名称是要导入的包，而冒号右边的带点号名称则是对象层级结构。 使用这种形式只需要导入一次。 如果它以冒号结尾，则将返回一个模块对象。</p>
<p>此函数将返回一个对象（可能为模块），或是引发下列异常之一:</p>
<p><a class="reference internal" href="exceptions.xhtml#ValueError" title="ValueError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">ValueError</span></code></a> -- 如果 <em>name</em> 不为可识别的格式。</p>
<p><a class="reference internal" href="exceptions.xhtml#ImportError" title="ImportError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">ImportError</span></code></a> -- 如果导入本应成功但却失败。</p>
<p><a class="reference internal" href="exceptions.xhtml#AttributeError" title="AttributeError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">AttributeError</span></code></a> -- 当在遍历所导入包的对象层级结构以获取想要的对象时遭遇失败。</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.9.</span></p>
</div>
</dd></dl>

</section>


            <div class="clearer"></div>
          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>