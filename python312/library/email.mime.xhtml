<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" /><meta name="viewport" content="width=device-width, initial-scale=1" />
<meta property="og:title" content="email.mime: 从头创建电子邮件和 MIME 对象" />
<meta property="og:type" content="website" />
<meta property="og:url" content="https://docs.python.org/3/library/email.mime.xhtml" />
<meta property="og:site_name" content="Python documentation" />
<meta property="og:description" content="源代码: Lib/email/mime/[https://github.com/python/cpython/tree/3.12/Lib/email/mime/] 此模块是旧版 ( Compat32) 电子邮件 API 的组成部分。 它的功能在新版 API 中被 contentmanager 部分替代，但在某些应用中这些类仍可能有用，即使是在非旧版代码中。 通常，你是通过传递一个文件或一些文..." />
<meta property="og:image" content="https://docs.python.org/3/_static/og-image.png" />
<meta property="og:image:alt" content="Python documentation" />
<meta name="description" content="源代码: Lib/email/mime/[https://github.com/python/cpython/tree/3.12/Lib/email/mime/] 此模块是旧版 ( Compat32) 电子邮件 API 的组成部分。 它的功能在新版 API 中被 contentmanager 部分替代，但在某些应用中这些类仍可能有用，即使是在非旧版代码中。 通常，你是通过传递一个文件或一些文..." />
<meta property="og:image:width" content="200" />
<meta property="og:image:height" content="200" />
<meta name="theme-color" content="#3776ab" />

    <title>email.mime: 从头创建电子邮件和 MIME 对象</title>
    <link rel="stylesheet" type="text/css" href="../_static/pygments.css" />
    <link rel="stylesheet" type="text/css" href="../_static/epub.css" />
    <link rel="canonical" href="https://docs.python.org/3/library/email.mime.html" />
    
      
    

    
    <style>
      @media only screen {
        table.full-width-table {
            width: 100%;
        }
      }
    </style>
 

  </head><body>


    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <section id="module-email.mime">
<span id="email-mime-creating-email-and-mime-objects-from-scratch"></span><h1><code class="xref py py-mod docutils literal notranslate"><span class="pre">email.mime</span></code>: 从头创建电子邮件和 MIME 对象</h1>
<p><strong>源代码:</strong> <a class="reference external" href="https://github.com/python/cpython/tree/3.12/Lib/email/mime/">Lib/email/mime/</a><span class="link-target"> [https://github.com/python/cpython/tree/3.12/Lib/email/mime/]</span></p>
<hr class="docutils" />
<p>此模块是旧版 (<code class="docutils literal notranslate"><span class="pre">Compat32</span></code>) 电子邮件 API 的组成部分。 它的功能在新版 API 中被 <a class="reference internal" href="email.contentmanager.xhtml#module-email.contentmanager" title="email.contentmanager: Storing and Retrieving Content from MIME Parts"><code class="xref py py-mod docutils literal notranslate"><span class="pre">contentmanager</span></code></a> 部分替代，但在某些应用中这些类仍可能有用，即使是在非旧版代码中。</p>
<p>通常，你是通过传递一个文件或一些文本到解析器来获得消息对象结构体的，解析器会解析文本并返回根消息对象。 不过你也可以从头开始构建一个完整的消息结构体，甚至是手动构建单独的 <a class="reference internal" href="email.compat32-message.xhtml#email.message.Message" title="email.message.Message"><code class="xref py py-class docutils literal notranslate"><span class="pre">Message</span></code></a> 对象。 实际上，你也可以接受一个现有的结构体并添加新的 <a class="reference internal" href="email.compat32-message.xhtml#email.message.Message" title="email.message.Message"><code class="xref py py-class docutils literal notranslate"><span class="pre">Message</span></code></a> 对象并移动它们。 这为切片和分割 MIME 消息提供了非常方便的接口。</p>
<p>你可以通过创建 <a class="reference internal" href="email.compat32-message.xhtml#email.message.Message" title="email.message.Message"><code class="xref py py-class docutils literal notranslate"><span class="pre">Message</span></code></a> 实例并手动添加附件和所有适当的标头来创建一个新的对象结构体。  不过对于 MIME 消息来说，<a class="reference internal" href="email.xhtml#module-email" title="email: Package supporting the parsing, manipulating, and generating email messages."><code class="xref py py-mod docutils literal notranslate"><span class="pre">email</span></code></a> 包提供了一些便捷子类来让事情变得更容易。</p>
<p>这些类列示如下:</p>
<dl class="py class" id="module-email.mime.base">
<dt class="sig sig-object py" id="email.mime.base.MIMEBase">
<em class="property"><span class="pre">class</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">email.mime.base.</span></span><span class="sig-name descname"><span class="pre">MIMEBase</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">_maintype</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">_subtype</span></span></em>, <em class="sig-param"><span class="o"><span class="pre">*</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">policy</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">compat32</span></span></em>, <em class="sig-param"><span class="o"><span class="pre">**</span></span><span class="n"><span class="pre">_params</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>模块: <a class="reference internal" href="#module-email.mime.base" title="email.mime.base"><code class="xref py py-mod docutils literal notranslate"><span class="pre">email.mime.base</span></code></a></p>
<p>这是 <a class="reference internal" href="email.compat32-message.xhtml#email.message.Message" title="email.message.Message"><code class="xref py py-class docutils literal notranslate"><span class="pre">Message</span></code></a> 的所有 MIME 专属子类。 通常你不会创建专门的 <a class="reference internal" href="#email.mime.base.MIMEBase" title="email.mime.base.MIMEBase"><code class="xref py py-class docutils literal notranslate"><span class="pre">MIMEBase</span></code></a> 实例，尽管你可以这样做。 <a class="reference internal" href="#email.mime.base.MIMEBase" title="email.mime.base.MIMEBase"><code class="xref py py-class docutils literal notranslate"><span class="pre">MIMEBase</span></code></a> 主要被提供用来作为更具体的 MIME 感知子类的便捷基类。</p>
<p><em>_maintype</em> 是 <em class="mailheader">Content-Type</em> 的主类型 (例如 <em class="mimetype">text</em> 或 <em class="mimetype">image</em>)，而 <em>_subtype</em> 是 <em class="mailheader">Content-Type</em> 的次类型 (例如 <em class="mimetype">plain</em> 或 <em class="mimetype">gif</em>)。 <em>_params</em> 是一个形参键/值字典并会被直接传递给 <a class="reference internal" href="email.compat32-message.xhtml#email.message.Message.add_header" title="email.message.Message.add_header"><code class="xref py py-meth docutils literal notranslate"><span class="pre">Message.add_header</span></code></a>。</p>
<p>如果指定了 <em>policy</em> (默认为 <a class="reference internal" href="email.policy.xhtml#email.policy.Compat32" title="email.policy.Compat32"><code class="xref py py-class docutils literal notranslate"><span class="pre">compat32</span></code></a> 策略)，它将被传递给 <a class="reference internal" href="email.compat32-message.xhtml#email.message.Message" title="email.message.Message"><code class="xref py py-class docutils literal notranslate"><span class="pre">Message</span></code></a>。</p>
<p><a class="reference internal" href="#email.mime.base.MIMEBase" title="email.mime.base.MIMEBase"><code class="xref py py-class docutils literal notranslate"><span class="pre">MIMEBase</span></code></a> 类总是会添加一个 <em class="mailheader">Content-Type</em> 标头 (基于 <em>_maintype</em>, <em>_subtype</em> 和 <em>_params</em>)，以及一个 <em class="mailheader">MIME-Version</em> 标头 (总是设为 <code class="docutils literal notranslate"><span class="pre">1.0</span></code>)。</p>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.6 版本发生变更: </span>添加了 <em>policy</em> 仅限关键字形参。</p>
</div>
</dd></dl>

<dl class="py class" id="module-email.mime.nonmultipart">
<dt class="sig sig-object py" id="email.mime.nonmultipart.MIMENonMultipart">
<em class="property"><span class="pre">class</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">email.mime.nonmultipart.</span></span><span class="sig-name descname"><span class="pre">MIMENonMultipart</span></span></dt>
<dd><p>模块: <a class="reference internal" href="#module-email.mime.nonmultipart" title="email.mime.nonmultipart"><code class="xref py py-mod docutils literal notranslate"><span class="pre">email.mime.nonmultipart</span></code></a></p>
<p><a class="reference internal" href="#email.mime.base.MIMEBase" title="email.mime.base.MIMEBase"><code class="xref py py-class docutils literal notranslate"><span class="pre">MIMEBase</span></code></a> 的子类，这是用于非 <em class="mimetype">multipart</em> MIME 消息的中间基类。 这个类的主要目标是避免使用 <a class="reference internal" href="email.compat32-message.xhtml#email.message.Message.attach" title="email.message.Message.attach"><code class="xref py py-meth docutils literal notranslate"><span class="pre">attach()</span></code></a> 方法，该方法仅对 <em class="mimetype">multipart</em> 消息有意义。 如果 <a class="reference internal" href="email.compat32-message.xhtml#email.message.Message.attach" title="email.message.Message.attach"><code class="xref py py-meth docutils literal notranslate"><span class="pre">attach()</span></code></a> 被调用，则会引发 <a class="reference internal" href="email.errors.xhtml#email.errors.MultipartConversionError" title="email.errors.MultipartConversionError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">MultipartConversionError</span></code></a> 异常。</p>
</dd></dl>

<dl class="py class" id="module-email.mime.multipart">
<dt class="sig sig-object py" id="email.mime.multipart.MIMEMultipart">
<em class="property"><span class="pre">class</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">email.mime.multipart.</span></span><span class="sig-name descname"><span class="pre">MIMEMultipart</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">_subtype</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">'mixed'</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">boundary</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">_subparts</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="o"><span class="pre">*</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">policy</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">compat32</span></span></em>, <em class="sig-param"><span class="o"><span class="pre">**</span></span><span class="n"><span class="pre">_params</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>模块: <a class="reference internal" href="#module-email.mime.multipart" title="email.mime.multipart"><code class="xref py py-mod docutils literal notranslate"><span class="pre">email.mime.multipart</span></code></a></p>
<p><a class="reference internal" href="#email.mime.base.MIMEBase" title="email.mime.base.MIMEBase"><code class="xref py py-class docutils literal notranslate"><span class="pre">MIMEBase</span></code></a> 的子类，这是用于 <em class="mimetype">multipart</em> MIME 消息的中间基类。 可选的 <em>_subtype</em> 默认为 <em class="mimetype">mixed</em>，但可被用来指定消息的子类型。 将会在消息对象中添加一个 <em class="mimetype">multipart/_subtype</em> 的 <em class="mailheader">Content-Type</em> 标头。 并还将添加一个 <em class="mailheader">MIME-Version</em> 标头。</p>
<p>可选的 <em>boundary</em> 是多部分边界字符串。 当为 <code class="docutils literal notranslate"><span class="pre">None</span></code> (默认值) 时，则会在必要时（例如当消息被序列化时）计算边界。</p>
<p><em>_subparts</em> 是载荷初始子部分的序列。 此序列必须可以被转换为列表。 你总是可以使用 <a class="reference internal" href="email.compat32-message.xhtml#email.message.Message.attach" title="email.message.Message.attach"><code class="xref py py-meth docutils literal notranslate"><span class="pre">Message.attach</span></code></a> 方法将新的子部分附加到消息中。</p>
<p>可选的 <em>policy</em> 参数默认为 <a class="reference internal" href="email.policy.xhtml#email.policy.Compat32" title="email.policy.Compat32"><code class="xref py py-class docutils literal notranslate"><span class="pre">compat32</span></code></a>。</p>
<p>用于 <em class="mailheader">Content-Type</em> 标头的附加形参会从关键字参数中获取，或者传入到 <em>_params</em> 参数，该参数是一个关键字的字典。</p>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.6 版本发生变更: </span>添加了 <em>policy</em> 仅限关键字形参。</p>
</div>
</dd></dl>

<dl class="py class" id="module-email.mime.application">
<dt class="sig sig-object py" id="email.mime.application.MIMEApplication">
<em class="property"><span class="pre">class</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">email.mime.application.</span></span><span class="sig-name descname"><span class="pre">MIMEApplication</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">_data</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">_subtype</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">'octet-stream'</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">_encoder</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">email.encoders.encode_base64</span></span></em>, <em class="sig-param"><span class="o"><span class="pre">*</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">policy</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">compat32</span></span></em>, <em class="sig-param"><span class="o"><span class="pre">**</span></span><span class="n"><span class="pre">_params</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>模块: <a class="reference internal" href="#module-email.mime.application" title="email.mime.application"><code class="xref py py-mod docutils literal notranslate"><span class="pre">email.mime.application</span></code></a></p>
<p><a class="reference internal" href="#email.mime.nonmultipart.MIMENonMultipart" title="email.mime.nonmultipart.MIMENonMultipart"><code class="xref py py-class docutils literal notranslate"><span class="pre">MIMENonMultipart</span></code></a> 的子类，<a class="reference internal" href="#email.mime.application.MIMEApplication" title="email.mime.application.MIMEApplication"><code class="xref py py-class docutils literal notranslate"><span class="pre">MIMEApplication</span></code></a> 类被用来表示主类型为 <em class="mimetype">application</em> 的 MIME 消息。 <em>_data</em> 为包含原始应用程序数据的字节串。 可选的 <em>_subtype</em> 指定 MIME 子类型并默认为 <em class="mimetype">octet-stream</em>。</p>
<p>可选的 <em>_encoder</em> 是一个可调用对象（即函数），它将执行实际的数据编码以便传输。 这个可调用对象接受一个参数，该参数是 <a class="reference internal" href="#email.mime.application.MIMEApplication" title="email.mime.application.MIMEApplication"><code class="xref py py-class docutils literal notranslate"><span class="pre">MIMEApplication</span></code></a> 的实例。 它应当使用 <a class="reference internal" href="email.compat32-message.xhtml#email.message.Message.get_payload" title="email.message.Message.get_payload"><code class="xref py py-meth docutils literal notranslate"><span class="pre">get_payload()</span></code></a> 和 <a class="reference internal" href="email.compat32-message.xhtml#email.message.Message.set_payload" title="email.message.Message.set_payload"><code class="xref py py-meth docutils literal notranslate"><span class="pre">set_payload()</span></code></a> 来将载荷改为已编码形式。 它还应根据需要将任何 <em class="mailheader">Content-Transfer-Encoding</em> 或其他标头添加到消息对象中。 默认编码格式为 base64。 请参阅 <a class="reference internal" href="email.encoders.xhtml#module-email.encoders" title="email.encoders: Encoders for email message payloads."><code class="xref py py-mod docutils literal notranslate"><span class="pre">email.encoders</span></code></a> 模块来查看内置编码器列表。</p>
<p>可选的 <em>policy</em> 参数默认为 <a class="reference internal" href="email.policy.xhtml#email.policy.Compat32" title="email.policy.Compat32"><code class="xref py py-class docutils literal notranslate"><span class="pre">compat32</span></code></a>。</p>
<p><em>_params</em> 会被直接传递给基类的构造器。</p>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.6 版本发生变更: </span>添加了 <em>policy</em> 仅限关键字形参。</p>
</div>
</dd></dl>

<dl class="py class" id="module-email.mime.audio">
<dt class="sig sig-object py" id="email.mime.audio.MIMEAudio">
<em class="property"><span class="pre">class</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">email.mime.audio.</span></span><span class="sig-name descname"><span class="pre">MIMEAudio</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">_audiodata</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">_subtype</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">_encoder</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">email.encoders.encode_base64</span></span></em>, <em class="sig-param"><span class="o"><span class="pre">*</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">policy</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">compat32</span></span></em>, <em class="sig-param"><span class="o"><span class="pre">**</span></span><span class="n"><span class="pre">_params</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>模块: <a class="reference internal" href="#module-email.mime.audio" title="email.mime.audio"><code class="xref py py-mod docutils literal notranslate"><span class="pre">email.mime.audio</span></code></a></p>
<p><a class="reference internal" href="#email.mime.nonmultipart.MIMENonMultipart" title="email.mime.nonmultipart.MIMENonMultipart"><code class="xref py py-class docutils literal notranslate"><span class="pre">MIMENonMultipart</span></code></a> 的子类，<a class="reference internal" href="#email.mime.audio.MIMEAudio" title="email.mime.audio.MIMEAudio"><code class="xref py py-class docutils literal notranslate"><span class="pre">MIMEAudio</span></code></a> 类被用来创建主类型为 <em class="mimetype">audio</em> 的 MIME 消息。 <em>_audiodata</em> 是包含原始音频数据的字节串。 如果此数据可作为 au, wav, aiff 或 aifc 来解码，则其子类型将被自动包括在 <em class="mailheader">Content-Type</em> 标头中。 在其他情况下你可以通过 <em>_subtype</em> 参数显式地指定音频子类型。 如果无法猜测出次类型并且未给出 <em>_subtype</em>，则会引发 <a class="reference internal" href="exceptions.xhtml#TypeError" title="TypeError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">TypeError</span></code></a>。</p>
<p>可选的 <em>_encoder</em> 是一个可调用对象（即函数），它将执行实际的音频数据编码以便传输。  这个可调用对象接受一个参数，该参数是 <a class="reference internal" href="#email.mime.audio.MIMEAudio" title="email.mime.audio.MIMEAudio"><code class="xref py py-class docutils literal notranslate"><span class="pre">MIMEAudio</span></code></a> 的实例。 它应当使用 <a class="reference internal" href="email.compat32-message.xhtml#email.message.Message.get_payload" title="email.message.Message.get_payload"><code class="xref py py-meth docutils literal notranslate"><span class="pre">get_payload()</span></code></a> 和 <a class="reference internal" href="email.compat32-message.xhtml#email.message.Message.set_payload" title="email.message.Message.set_payload"><code class="xref py py-meth docutils literal notranslate"><span class="pre">set_payload()</span></code></a> 来将载荷改为已编码形式。 它还应根据需要将任何 <em class="mailheader">Content-Transfer-Encoding</em> 或其他标头添加到消息对象中。 默认编码格式为 base64。 请参阅 <a class="reference internal" href="email.encoders.xhtml#module-email.encoders" title="email.encoders: Encoders for email message payloads."><code class="xref py py-mod docutils literal notranslate"><span class="pre">email.encoders</span></code></a> 模块来查看内置编码器列表。</p>
<p>可选的 <em>policy</em> 参数默认为 <a class="reference internal" href="email.policy.xhtml#email.policy.Compat32" title="email.policy.Compat32"><code class="xref py py-class docutils literal notranslate"><span class="pre">compat32</span></code></a>。</p>
<p><em>_params</em> 会被直接传递给基类的构造器。</p>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.6 版本发生变更: </span>添加了 <em>policy</em> 仅限关键字形参。</p>
</div>
</dd></dl>

<dl class="py class" id="module-email.mime.image">
<dt class="sig sig-object py" id="email.mime.image.MIMEImage">
<em class="property"><span class="pre">class</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">email.mime.image.</span></span><span class="sig-name descname"><span class="pre">MIMEImage</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">_imagedata</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">_subtype</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">_encoder</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">email.encoders.encode_base64</span></span></em>, <em class="sig-param"><span class="o"><span class="pre">*</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">policy</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">compat32</span></span></em>, <em class="sig-param"><span class="o"><span class="pre">**</span></span><span class="n"><span class="pre">_params</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>模块: <a class="reference internal" href="#module-email.mime.image" title="email.mime.image"><code class="xref py py-mod docutils literal notranslate"><span class="pre">email.mime.image</span></code></a></p>
<p><a class="reference internal" href="#email.mime.nonmultipart.MIMENonMultipart" title="email.mime.nonmultipart.MIMENonMultipart"><code class="xref py py-class docutils literal notranslate"><span class="pre">MIMENonMultipart</span></code></a> 的子类，<a class="reference internal" href="#email.mime.image.MIMEImage" title="email.mime.image.MIMEImage"><code class="xref py py-class docutils literal notranslate"><span class="pre">MIMEImage</span></code></a> 类被用来创建主类型为 <em class="mimetype">image</em> 的 MIME 消息对象。 <em>_imagedata</em> 是包含原始图像数据的字节串。 如果此数据类型可以被检测（将尝试 jpeg, png, gif, tiff, rgb, pbm, pgm, ppm, rast, xbm, bmp, webp 和 exr 类型），则其子类型将被自动包括在 <em class="mailheader">Content-Type</em> 标头中。 在其他情况下你可以通过 <em>_subtype</em> 参数显式地指定图像子类型。 如果无法猜测出次类型并且未给出 <em>_subtype</em>，则会引发 <a class="reference internal" href="exceptions.xhtml#TypeError" title="TypeError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">TypeError</span></code></a>。</p>
<p>可选的 <em>_encoder</em> 是一个可调用对象（即函数），它将执行实际的图像数据编码以便传输。 这个可调用对象接受一个参数，该参数是 <a class="reference internal" href="#email.mime.image.MIMEImage" title="email.mime.image.MIMEImage"><code class="xref py py-class docutils literal notranslate"><span class="pre">MIMEImage</span></code></a> 的实例。 它应当使用 <a class="reference internal" href="email.compat32-message.xhtml#email.message.Message.get_payload" title="email.message.Message.get_payload"><code class="xref py py-meth docutils literal notranslate"><span class="pre">get_payload()</span></code></a> 和 <a class="reference internal" href="email.compat32-message.xhtml#email.message.Message.set_payload" title="email.message.Message.set_payload"><code class="xref py py-meth docutils literal notranslate"><span class="pre">set_payload()</span></code></a> 来将载荷改为已编码形式。 它还应根据需要将任何 <em class="mailheader">Content-Transfer-Encoding</em> 或其他标头添加到消息对象中。 默认编码格式为 base64。 请参阅 <a class="reference internal" href="email.encoders.xhtml#module-email.encoders" title="email.encoders: Encoders for email message payloads."><code class="xref py py-mod docutils literal notranslate"><span class="pre">email.encoders</span></code></a> 模块来查看内置编码器列表。</p>
<p>可选的 <em>policy</em> 参数默认为 <a class="reference internal" href="email.policy.xhtml#email.policy.Compat32" title="email.policy.Compat32"><code class="xref py py-class docutils literal notranslate"><span class="pre">compat32</span></code></a>。</p>
<p><em>_params</em> 会被直接传递给 <a class="reference internal" href="#email.mime.base.MIMEBase" title="email.mime.base.MIMEBase"><code class="xref py py-class docutils literal notranslate"><span class="pre">MIMEBase</span></code></a> 构造器。</p>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.6 版本发生变更: </span>添加了 <em>policy</em> 仅限关键字形参。</p>
</div>
</dd></dl>

<dl class="py class" id="module-email.mime.message">
<dt class="sig sig-object py" id="email.mime.message.MIMEMessage">
<em class="property"><span class="pre">class</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">email.mime.message.</span></span><span class="sig-name descname"><span class="pre">MIMEMessage</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">_msg</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">_subtype</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">'rfc822'</span></span></em>, <em class="sig-param"><span class="o"><span class="pre">*</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">policy</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">compat32</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>模块: <a class="reference internal" href="#module-email.mime.message" title="email.mime.message"><code class="xref py py-mod docutils literal notranslate"><span class="pre">email.mime.message</span></code></a></p>
<p><a class="reference internal" href="#email.mime.nonmultipart.MIMENonMultipart" title="email.mime.nonmultipart.MIMENonMultipart"><code class="xref py py-class docutils literal notranslate"><span class="pre">MIMENonMultipart</span></code></a> 的子类，<a class="reference internal" href="#email.mime.message.MIMEMessage" title="email.mime.message.MIMEMessage"><code class="xref py py-class docutils literal notranslate"><span class="pre">MIMEMessage</span></code></a> 类被用来创建主类型为 <em class="mimetype">message</em> 的 MIME 对象。 <em>_msg</em> 将被用作载荷，并且必须为 <a class="reference internal" href="email.compat32-message.xhtml#email.message.Message" title="email.message.Message"><code class="xref py py-class docutils literal notranslate"><span class="pre">Message</span></code></a> 类（或其子类）的实例，否则会引发 <a class="reference internal" href="exceptions.xhtml#TypeError" title="TypeError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">TypeError</span></code></a>。</p>
<p>可选的 <em>_subtype</em> 设置消息的子类型；它的默认值为 <em class="mimetype">rfc822</em>。</p>
<p>可选的 <em>policy</em> 参数默认为 <a class="reference internal" href="email.policy.xhtml#email.policy.Compat32" title="email.policy.Compat32"><code class="xref py py-class docutils literal notranslate"><span class="pre">compat32</span></code></a>。</p>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.6 版本发生变更: </span>添加了 <em>policy</em> 仅限关键字形参。</p>
</div>
</dd></dl>

<dl class="py class" id="module-email.mime.text">
<dt class="sig sig-object py" id="email.mime.text.MIMEText">
<em class="property"><span class="pre">class</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">email.mime.text.</span></span><span class="sig-name descname"><span class="pre">MIMEText</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">_text</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">_subtype</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">'plain'</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">_charset</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="o"><span class="pre">*</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">policy</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">compat32</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>模块: <a class="reference internal" href="#module-email.mime.text" title="email.mime.text"><code class="xref py py-mod docutils literal notranslate"><span class="pre">email.mime.text</span></code></a></p>
<p><a class="reference internal" href="#email.mime.nonmultipart.MIMENonMultipart" title="email.mime.nonmultipart.MIMENonMultipart"><code class="xref py py-class docutils literal notranslate"><span class="pre">MIMENonMultipart</span></code></a> 的子类，<a class="reference internal" href="#email.mime.text.MIMEText" title="email.mime.text.MIMEText"><code class="xref py py-class docutils literal notranslate"><span class="pre">MIMEText</span></code></a> 类被用来创建主类型为 <em class="mimetype">text</em> 的 MIME 对象。 <em>_text</em> 是用作载荷的字符串。  <em>_subtype</em> 指定子类型并且默认为 <em class="mimetype">plain</em>。 <em>_charset</em> 是文本的字符集并会作为参数传递给 <a class="reference internal" href="#email.mime.nonmultipart.MIMENonMultipart" title="email.mime.nonmultipart.MIMENonMultipart"><code class="xref py py-class docutils literal notranslate"><span class="pre">MIMENonMultipart</span></code></a> 构造器；如果该字符串仅包含 <code class="docutils literal notranslate"><span class="pre">ascii</span></code> 码位则其默认值为 <code class="docutils literal notranslate"><span class="pre">us-ascii</span></code>，否则为 <code class="docutils literal notranslate"><span class="pre">utf-8</span></code>。 <em>_charset</em> 形参接受一个字符串或是一个 <a class="reference internal" href="email.charset.xhtml#email.charset.Charset" title="email.charset.Charset"><code class="xref py py-class docutils literal notranslate"><span class="pre">Charset</span></code></a> 实例。</p>
<p>除非 <em>_charset</em> 参数被显式地设为 <code class="docutils literal notranslate"><span class="pre">None</span></code>，否则所创建的 MIMEText 对象将同时具有附带 <code class="docutils literal notranslate"><span class="pre">charset</span></code> 形参的 <em class="mailheader">Content-Type</em> 标头，以及 <em class="mailheader">Content-Transfer-Encoding</em> 标头。 这意味着后续的 <code class="docutils literal notranslate"><span class="pre">set_payload</span></code> 调用将不再产生已编码的载荷，即使它在 <code class="docutils literal notranslate"><span class="pre">set_payload</span></code> 命令中被传入。 你可以通过删除 <code class="docutils literal notranslate"><span class="pre">Content-Transfer-Encoding</span></code> 标头来“重置”此行为，在此之后的 <code class="docutils literal notranslate"><span class="pre">set_payload</span></code> 调用将自动编码新的载荷（并添加新的 <em class="mailheader">Content-Transfer-Encoding</em> 标头）。</p>
<p>可选的 <em>policy</em> 参数默认为 <a class="reference internal" href="email.policy.xhtml#email.policy.Compat32" title="email.policy.Compat32"><code class="xref py py-class docutils literal notranslate"><span class="pre">compat32</span></code></a>。</p>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.5 版本发生变更: </span><em>_charset</em> 也可接受 <a class="reference internal" href="email.charset.xhtml#email.charset.Charset" title="email.charset.Charset"><code class="xref py py-class docutils literal notranslate"><span class="pre">Charset</span></code></a> 实例。</p>
</div>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.6 版本发生变更: </span>添加了 <em>policy</em> 仅限关键字形参。</p>
</div>
</dd></dl>

</section>


            <div class="clearer"></div>
          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>