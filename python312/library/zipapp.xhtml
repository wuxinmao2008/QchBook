<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" /><meta name="viewport" content="width=device-width, initial-scale=1" />
<meta property="og:title" content="zipapp --- 管理可执行的 Python zip 归档文件" />
<meta property="og:type" content="website" />
<meta property="og:url" content="https://docs.python.org/3/library/zipapp.xhtml" />
<meta property="og:site_name" content="Python documentation" />
<meta property="og:description" content="源代码： Lib/zipapp.py[https://github.com/python/cpython/tree/3.12/Lib/zipapp.py] 本模块提供了一套管理工具，用于创建包含 Python 代码的压缩文件，这些文件可以 直接由 Python 解释器执行 。 本模块提供 命令行接口 和 Python API 。 简单示例: 下述例子展示了用 命令行接口 根据含有 Pytho..." />
<meta property="og:image" content="https://docs.python.org/3/_static/og-image.png" />
<meta property="og:image:alt" content="Python documentation" />
<meta name="description" content="源代码： Lib/zipapp.py[https://github.com/python/cpython/tree/3.12/Lib/zipapp.py] 本模块提供了一套管理工具，用于创建包含 Python 代码的压缩文件，这些文件可以 直接由 Python 解释器执行 。 本模块提供 命令行接口 和 Python API 。 简单示例: 下述例子展示了用 命令行接口 根据含有 Pytho..." />
<meta property="og:image:width" content="200" />
<meta property="og:image:height" content="200" />
<meta name="theme-color" content="#3776ab" />

    <title>zipapp --- 管理可执行的 Python zip 归档文件</title>
    <link rel="stylesheet" type="text/css" href="../_static/pygments.css" />
    <link rel="stylesheet" type="text/css" href="../_static/epub.css" />
    <link rel="canonical" href="https://docs.python.org/3/library/zipapp.html" />
    
      
    

    
    <style>
      @media only screen {
        table.full-width-table {
            width: 100%;
        }
      }
    </style>
 

  </head><body>


    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <section id="module-zipapp">
<span id="zipapp-manage-executable-python-zip-archives"></span><h1><code class="xref py py-mod docutils literal notranslate"><span class="pre">zipapp</span></code> --- 管理可执行的 Python zip 归档文件</h1>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.5.</span></p>
</div>
<p><strong>源代码：</strong> <a class="reference external" href="https://github.com/python/cpython/tree/3.12/Lib/zipapp.py">Lib/zipapp.py</a><span class="link-target"> [https://github.com/python/cpython/tree/3.12/Lib/zipapp.py]</span></p>
<hr class="docutils" id="index-0" />
<p>本模块提供了一套管理工具，用于创建包含 Python 代码的压缩文件，这些文件可以 <a class="reference internal" href="../using/cmdline.xhtml#using-on-interface-options"><span class="std std-ref">直接由 Python 解释器执行</span></a>。 本模块提供 <a class="reference internal" href="#zipapp-command-line-interface"><span class="std std-ref">命令行接口</span></a> 和 <a class="reference internal" href="#zipapp-python-api"><span class="std std-ref">Python API</span></a>。</p>
<section id="basic-example">
<h2>简单示例</h2>
<p>下述例子展示了用 <a class="reference internal" href="#zipapp-command-line-interface"><span class="std std-ref">命令行接口</span></a> 根据含有 Python 代码的目录创建一个可执行的打包文件。 运行后该打包文件时，将会执行 <code class="docutils literal notranslate"><span class="pre">myapp</span></code> 模块中的 <code class="docutils literal notranslate"><span class="pre">main</span></code> 函数。</p>
<div class="highlight-shell-session notranslate"><div class="highlight"><pre><span></span><span class="gp">$ </span>python<span class="w"> </span>-m<span class="w"> </span>zipapp<span class="w"> </span>myapp<span class="w"> </span>-m<span class="w"> </span><span class="s2">&quot;myapp:main&quot;</span>
<span class="gp">$ </span>python<span class="w"> </span>myapp.pyz
<span class="go">&lt;output from myapp&gt;</span>
</pre></div>
</div>
</section>
<section id="command-line-interface">
<span id="zipapp-command-line-interface"></span><h2>命令行接口</h2>
<p>若要从命令行调用，则采用以下形式：</p>
<div class="highlight-shell-session notranslate"><div class="highlight"><pre><span></span><span class="gp">$ </span>python<span class="w"> </span>-m<span class="w"> </span>zipapp<span class="w"> </span><span class="nb">source</span><span class="w"> </span><span class="o">[</span>options<span class="o">]</span>
</pre></div>
</div>
<p>如果 <em>source</em> 是个目录，将根据 <em>source</em> 的内容创建一个打包文件。如果 <em>source</em> 是个文件，则应为一个打包文件，将会复制到目标打包文件中（如果指定了 -info 选项，将会显示 shebang 行的内容）。</p>
<p>可以接受以下参数：</p>
<dl class="std option">
<dt class="sig sig-object std" id="cmdoption-zipapp-o">
<span id="cmdoption-zipapp-output"></span><span class="sig-name descname"><span class="pre">-o</span></span><span class="sig-prename descclassname"> <span class="pre">&lt;output&gt;</span></span><span class="sig-prename descclassname"><span class="pre">,</span> </span><span class="sig-name descname"><span class="pre">--output</span></span><span class="sig-prename descclassname"><span class="pre">=&lt;output&gt;</span></span></dt>
<dd><p>将程序的输出写入名为 <em>output</em> 的文件中。若未指定此参数，输出的文件名将与输入的 <em>source</em> 相同，并添加扩展名 <code class="docutils literal notranslate"><span class="pre">.pyz</span></code>。如果显式给出了文件名，将会原样使用（因此必要时应包含扩展名 <code class="docutils literal notranslate"><span class="pre">.pyz</span></code>）。</p>
<p>如果 <em>source</em> 是个打包文件，必须指定一个输出文件名（这时 <em>output</em> 必须与 <em>source</em> 不同）。</p>
</dd></dl>

<dl class="std option">
<dt class="sig sig-object std" id="cmdoption-zipapp-p">
<span id="cmdoption-zipapp-python"></span><span class="sig-name descname"><span class="pre">-p</span></span><span class="sig-prename descclassname"> <span class="pre">&lt;interpreter&gt;</span></span><span class="sig-prename descclassname"><span class="pre">,</span> </span><span class="sig-name descname"><span class="pre">--python</span></span><span class="sig-prename descclassname"><span class="pre">=&lt;interpreter&gt;</span></span></dt>
<dd><p>给打包文件加入 <code class="docutils literal notranslate"><span class="pre">#!</span></code> 行，以便指定 <em>解释器</em> 作为运行的命令行。另外，还让打包文件在 POSIX 平台上可执行。默认不会写入  <code class="docutils literal notranslate"><span class="pre">#!</span></code> 行，也不让文件可执行。</p>
</dd></dl>

<dl class="std option">
<dt class="sig sig-object std" id="cmdoption-zipapp-m">
<span id="cmdoption-zipapp-main"></span><span class="sig-name descname"><span class="pre">-m</span></span><span class="sig-prename descclassname"> <span class="pre">&lt;mainfn&gt;</span></span><span class="sig-prename descclassname"><span class="pre">,</span> </span><span class="sig-name descname"><span class="pre">--main</span></span><span class="sig-prename descclassname"><span class="pre">=&lt;mainfn&gt;</span></span></dt>
<dd><p>在打包文件中写入一个 <code class="docutils literal notranslate"><span class="pre">__main__.py</span></code> 文件，用于执行 <em>mainfn</em>。<em>mainfn</em> 参数的形式应为 “pkg.mod:fn”，其中 “pkg.mod”是打包文件中的某个包/模块，“fn”是该模块中的一个可调用对象。<code class="docutils literal notranslate"><span class="pre">__main__.py</span></code> 文件将会执行该可调用对象。</p>
<p>在复制打包文件时，不能设置 <a class="reference internal" href="#cmdoption-zipapp-m"><code class="xref std std-option docutils literal notranslate"><span class="pre">--main</span></code></a>  参数。</p>
</dd></dl>

<dl class="std option">
<dt class="sig sig-object std" id="cmdoption-zipapp-c">
<span id="cmdoption-zipapp-compress"></span><span class="sig-name descname"><span class="pre">-c</span></span><span class="sig-prename descclassname"></span><span class="sig-prename descclassname"><span class="pre">,</span> </span><span class="sig-name descname"><span class="pre">--compress</span></span><span class="sig-prename descclassname"></span></dt>
<dd><p>利用 deflate 方法压缩文件，减少输出文件的大小。默认情况下，打包文件中的文件是不压缩的。</p>
<p>在复制打包文件时，<a class="reference internal" href="#cmdoption-zipapp-c"><code class="xref std std-option docutils literal notranslate"><span class="pre">--compress</span></code></a> 无效。</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.7.</span></p>
</div>
</dd></dl>

<dl class="std option">
<dt class="sig sig-object std" id="cmdoption-zipapp-info">
<span class="sig-name descname"><span class="pre">--info</span></span><span class="sig-prename descclassname"></span></dt>
<dd><p>显示嵌入在打包文件中的解释器程序，以便诊断问题。这时会忽略其他所有参数，SOURCE 必须是个打包文件，而不是目录。</p>
</dd></dl>

<dl class="std option">
<dt class="sig sig-object std" id="cmdoption-zipapp-h">
<span id="cmdoption-zipapp-help"></span><span class="sig-name descname"><span class="pre">-h</span></span><span class="sig-prename descclassname"></span><span class="sig-prename descclassname"><span class="pre">,</span> </span><span class="sig-name descname"><span class="pre">--help</span></span><span class="sig-prename descclassname"></span></dt>
<dd><p>打印简短的用法信息并退出。</p>
</dd></dl>

</section>
<section id="python-api">
<span id="zipapp-python-api"></span><h2>Python API</h2>
<p>该模块定义了两个快捷函数：</p>
<dl class="py function">
<dt class="sig sig-object py" id="zipapp.create_archive">
<span class="sig-prename descclassname"><span class="pre">zipapp.</span></span><span class="sig-name descname"><span class="pre">create_archive</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">source</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">target</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">interpreter</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">main</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">filter</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">compressed</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>由 <em>source</em> 创建一个应用程序打包文件。source 可以是以下形式之一：</p>
<ul class="simple">
<li><p>一个目录名，或指向目录的 <a class="reference internal" href="../glossary.xhtml#term-path-like-object"><span class="xref std std-term">path-like object</span></a> ，这时将根据目录内容新建一个应用程序打包文件。</p></li>
<li><p>一个已存在的应用程序打包文件名，或指向这类文件的 <a class="reference internal" href="../glossary.xhtml#term-path-like-object"><span class="xref std std-term">path-like object</span></a>，这时会将该文件复制为目标文件（会稍作修改以反映出 <em>interpreter</em> 参数的值）。必要时文件名中应包括 <code class="docutils literal notranslate"><span class="pre">.pyz</span></code> 扩展名。</p></li>
<li><p>一个以字节串模式打开的文件对象。该文件的内容应为应用程序打包文件，且假定文件对象定位于打包文件的初始位置。</p></li>
</ul>
<p><em>target</em> 参数定义了打包文件的写入位置：</p>
<ul class="simple">
<li><p>若是个文件名，或是 <a class="reference internal" href="../glossary.xhtml#term-path-like-object"><span class="xref std std-term">path-like object</span></a>，打包文件将写入该文件中。</p></li>
<li><p>若是个打开的文件对象，打包文件将写入该对象，该文件对象必须在字节串写入模式下打开。</p></li>
<li><p>如果省略了 target （或为 <code class="docutils literal notranslate"><span class="pre">None</span></code>），则 source 必须为一个目录，target  将是与 source 同名的文件，并加上 <code class="docutils literal notranslate"><span class="pre">.pyz</span></code> 扩展名。</p></li>
</ul>
<p>参数 <em>interpreter</em> 指定了 Python 解释器程序名，用于执行打包文件。这将以 “释伴（shebang）”行的形式写入打包文件的头部。在 POSIX 平台上，操作系统会进行解释，而在 Windows 平台则会由 Python 启动器进行处理。省略 <em>interpreter</em> 参数则不会写入释伴行。如果指定了解释器，且目标为文件名，则会设置目标文件的可执行属性位。</p>
<p>参数 <em>main</em> 指定某个可调用程序的名称，用作打包文件的主程序。仅当 source 为目录且不含 <code class="docutils literal notranslate"><span class="pre">__main__.py</span></code> 文件时，才能指定该参数。<em>main</em> 参数应采用 “pkg.module:callable”的形式，通过导入“pkg.module”并不带参数地执行给出的可调用对象，即可执行打包文件。如果 source 是目录且不含 <code class="docutils literal notranslate"><span class="pre">__main__.py</span></code> 文件，省略 <em>main</em> 将会出错，生成的打包文件将无法执行。</p>
<p>可选参数 <em>filter</em> 指定了回调函数，将传给代表被添加文件路径的 Path 对象（相对于源目录）。如若文件需要加入打包文件，则回调函数应返回 <code class="docutils literal notranslate"><span class="pre">True</span></code>。</p>
<p>可选参数 <em>compressed</em> 指定是否要压缩打包文件。若设为 <code class="docutils literal notranslate"><span class="pre">True</span></code>，则打包中的文件将用 deflate 方法进行压缩；否则就不会压缩。本参数在复制现有打包文件时无效。</p>
<p>若 <em>source</em> 或 <em>target</em> 指定的是文件对象，则调用者有责任在调用 create_archive 之后关闭这些文件对象。</p>
<p>当复制已有的打包文件时，提供的文件对象只需 <code class="docutils literal notranslate"><span class="pre">read</span></code> 和 <code class="docutils literal notranslate"><span class="pre">readline</span></code> 方法，或 <code class="docutils literal notranslate"><span class="pre">write</span></code> 方法。当由目录创建打包文件时，若目标为文件对象，将会将其传给  类，且必须提供 <code class="docutils literal notranslate"><span class="pre">zipfile.ZipFile</span></code> 类所需的方法。</p>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.7 版本发生变更: </span>增加了 <em>filter</em> 和 <em>compressed</em> 形参。</p>
</div>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="zipapp.get_interpreter">
<span class="sig-prename descclassname"><span class="pre">zipapp.</span></span><span class="sig-name descname"><span class="pre">get_interpreter</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">archive</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>返回打包文件开头的  行指定的解释器程序。如果没有 <code class="docutils literal notranslate"><span class="pre">#!</span></code> 行，则返回 <a class="reference internal" href="constants.xhtml#None" title="None"><code class="xref py py-const docutils literal notranslate"><span class="pre">None</span></code></a>。参数 <em>archive</em> 可为文件名或在字节串模式下打开以供读取的文件型对象。<code class="docutils literal notranslate"><span class="pre">#!</span></code> 行假定是在打包文件的开头。</p>
</dd></dl>

</section>
<section id="examples">
<span id="zipapp-examples"></span><h2>例子</h2>
<p>将目录打包成一个文件并运行它。</p>
<div class="highlight-shell-session notranslate"><div class="highlight"><pre><span></span><span class="gp">$ </span>python<span class="w"> </span>-m<span class="w"> </span>zipapp<span class="w"> </span>myapp
<span class="gp">$ </span>python<span class="w"> </span>myapp.pyz
<span class="go">&lt;output from myapp&gt;</span>
</pre></div>
</div>
<p>同样还可用 <a class="reference internal" href="#zipapp.create_archive" title="zipapp.create_archive"><code class="xref py py-func docutils literal notranslate"><span class="pre">create_archive()</span></code></a> 函数完成：</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="kn">import</span> <span class="nn">zipapp</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">zipapp</span><span class="o">.</span><span class="n">create_archive</span><span class="p">(</span><span class="s1">&#39;myapp&#39;</span><span class="p">,</span> <span class="s1">&#39;myapp.pyz&#39;</span><span class="p">)</span>
</pre></div>
</div>
<p>要让应用程序能在 POSIX 平台上直接执行，需要指定所用的解释器。</p>
<div class="highlight-shell-session notranslate"><div class="highlight"><pre><span></span><span class="gp">$ </span>python<span class="w"> </span>-m<span class="w"> </span>zipapp<span class="w"> </span>myapp<span class="w"> </span>-p<span class="w"> </span><span class="s2">&quot;/usr/bin/env python&quot;</span>
<span class="gp">$ </span>./myapp.pyz
<span class="go">&lt;output from myapp&gt;</span>
</pre></div>
</div>
<p>若要替换已有打包文件中的释伴行，请用 <a class="reference internal" href="#zipapp.create_archive" title="zipapp.create_archive"><code class="xref py py-func docutils literal notranslate"><span class="pre">create_archive()</span></code></a> 函数另建一个修改好的打包文件：</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="kn">import</span> <span class="nn">zipapp</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">zipapp</span><span class="o">.</span><span class="n">create_archive</span><span class="p">(</span><span class="s1">&#39;old_archive.pyz&#39;</span><span class="p">,</span> <span class="s1">&#39;new_archive.pyz&#39;</span><span class="p">,</span> <span class="s1">&#39;/usr/bin/python3&#39;</span><span class="p">)</span>
</pre></div>
</div>
<p>若要原地更新打包文件，可用 <a class="reference internal" href="io.xhtml#io.BytesIO" title="io.BytesIO"><code class="xref py py-class docutils literal notranslate"><span class="pre">BytesIO</span></code></a> 对象在内存中进行替换，然后再覆盖源文件。 请注意原地覆盖文件存在发生错误时丢失原始文件的风险。 这段代码没有考虑发生错误的情况，但生产性代码应该要考虑。 另外，此方法将仅在内存能容纳打包文件时才适用:</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="kn">import</span> <span class="nn">zipapp</span>
<span class="gp">&gt;&gt;&gt; </span><span class="kn">import</span> <span class="nn">io</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">temp</span> <span class="o">=</span> <span class="n">io</span><span class="o">.</span><span class="n">BytesIO</span><span class="p">()</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">zipapp</span><span class="o">.</span><span class="n">create_archive</span><span class="p">(</span><span class="s1">&#39;myapp.pyz&#39;</span><span class="p">,</span> <span class="n">temp</span><span class="p">,</span> <span class="s1">&#39;/usr/bin/python2&#39;</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;myapp.pyz&#39;</span><span class="p">,</span> <span class="s1">&#39;wb&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
<span class="gp">&gt;&gt;&gt; </span>    <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">temp</span><span class="o">.</span><span class="n">getvalue</span><span class="p">())</span>
</pre></div>
</div>
</section>
<section id="specifying-the-interpreter">
<span id="zipapp-specifying-the-interpreter"></span><h2>指定解释器程序</h2>
<p>注意，如果指定了解释器程序再发布应用程序打包文件，需要确保所用到的解释器是可移植的。Windows 的 Python 启动器支持大多数常见的 POSIX <code class="docutils literal notranslate"><span class="pre">#!</span></code> 行，但还需要考虑一些其他问题。</p>
<ul class="simple">
<li><p>如果采用“/usr/bin/env python”（或其他格式的 python 调用命令，比如“/usr/bin/python”)，需要考虑默认版本既可能是 Python 2 又可能是 Python 3，应让代码在两个版本下均能正常运行。</p></li>
<li><p>如果用到的 Python 版本明确，如“/usr/bin/env python3”，则没有该版本的用户将无法运行应用程序。（如果代码不兼容 Python 2，可能正该如此）。</p></li>
<li><p>因为无法指定“python X.Y以上版本”，所以应小心“/usr/bin/env python3.4”这种精确版本的指定方式，因为对于 Python 3.5 的用户就得修改释伴行，比如：</p></li>
</ul>
<p>通常应该用“/usr/bin/env python2”或“/usr/bin/env python3”的格式，具体根据代码适用于 Python 2 还是 3 而定。</p>
</section>
<section id="creating-standalone-applications-with-zipapp">
<h2>用 zipapp 创建独立运行的应用程序</h2>
<p>利用 <a class="reference internal" href="#module-zipapp" title="zipapp: Manage executable Python zip archives"><code class="xref py py-mod docutils literal notranslate"><span class="pre">zipapp</span></code></a> 模块可以创建独立运行的 Python 程序，以便向最终用户发布，仅需在系统中装有合适版本的 Python 即可运行。操作的关键就是把应用程序代码和所有依赖项一起放入打包文件中。</p>
<p>创建独立运行打包文件的步骤如下：</p>
<ol class="arabic">
<li><p>照常在某个目录中创建应用程序，于是会有一个 <code class="docutils literal notranslate"><span class="pre">myapp</span></code> 目录，里面有个 <code class="docutils literal notranslate"><span class="pre">__main__.py</span></code> 文件，以及所有支持性代码。</p></li>
<li><p>用 pip 将应用程序的所有依赖项装入 <code class="docutils literal notranslate"><span class="pre">myapp</span></code> 目录。</p>
<div class="highlight-shell-session notranslate"><div class="highlight"><pre><span></span><span class="gp">$ </span>python<span class="w"> </span>-m<span class="w"> </span>pip<span class="w"> </span>install<span class="w"> </span>-r<span class="w"> </span>requirements.txt<span class="w"> </span>--target<span class="w"> </span>myapp
</pre></div>
</div>
<p>（这里假定在 <code class="docutils literal notranslate"><span class="pre">requirements.txt</span></code> 文件中列出了项目所需的依赖项，也可以在 pip 命令行中列出依赖项）。</p>
</li>
<li><p>用以下命令打包：</p>
<div class="highlight-shell-session notranslate"><div class="highlight"><pre><span></span><span class="gp">$ </span>python<span class="w"> </span>-m<span class="w"> </span>zipapp<span class="w"> </span>-p<span class="w"> </span><span class="s2">&quot;interpreter&quot;</span><span class="w"> </span>myapp
</pre></div>
</div>
</li>
</ol>
<p>这会生成一个独立的可执行文件，可在任何装有合适解释器的机器上运行。详情参见 <a class="reference internal" href="#zipapp-specifying-the-interpreter"><span class="std std-ref">指定解释器程序</span></a>。可以单个文件的形式分发给用户。</p>
<p>在 Unix 系统中， <code class="docutils literal notranslate"><span class="pre">myapp.pyz</span></code> 文件将以原有文件名执行。如果喜欢 “普通”的命令名，可以重命名该文件，去掉扩展名 <code class="docutils literal notranslate"><span class="pre">.pyz</span></code> 。在 Windows 系统中， <code class="docutils literal notranslate"><span class="pre">myapp.pyz[w]</span></code> 是可执行文件，因为 Python 解释器在安装时注册了扩展名 <code class="docutils literal notranslate"><span class="pre">.pyz</span></code> 和 <code class="docutils literal notranslate"><span class="pre">.pyzw</span></code> 。</p>
<section id="caveats">
<h3>注意事项</h3>
<p>如果应用程序依赖某个带有 C 扩展的包，则此程序包无法由打包文件运行（这是操作系统的限制，因为可执行代码必须存在于文件系统中，操作系统才能加载）。这时可去除打包文件中的依赖关系，然后要求用户事先安装好该程序包，或者与打包文件一起发布并在 <code class="docutils literal notranslate"><span class="pre">__main__.py</span></code> 中增加代码，将未打包模块的目录加入 <code class="docutils literal notranslate"><span class="pre">sys.path</span></code> 中。采用增加代码方式时，一定要为目标架构提供合适的二进制文件（可能还需在运行时根据用户的机器选择正确的版本加入 <code class="docutils literal notranslate"><span class="pre">sys.path</span></code>）。</p>
</section>
</section>
<section id="the-python-zip-application-archive-format">
<h2>Python 打包应用程序的格式</h2>
<p>自 2.6 版开始，Python 即能够执行包含  文件的打包文件了。为了能被 Python 执行，应用程序的打包文件必须为包含 <code class="docutils literal notranslate"><span class="pre">__main__.py</span></code> 文件的标准 zip 文件，<code class="docutils literal notranslate"><span class="pre">__main__.py</span></code> 文件将作为应用程序的入口运行。类似于常规的 Python 脚本，父级（这里指打包文件）将放入 <a class="reference internal" href="sys.xhtml#sys.path" title="sys.path"><code class="xref py py-data docutils literal notranslate"><span class="pre">sys.path</span></code></a> ，因此可从打包文件中导入更多的模块。</p>
<p>zip 文件格式允许在文件中预置任意数据。利用这种能力，zip 应用程序格式在文件中预置了一个标准的 POSIX “释伴”行（<code class="docutils literal notranslate"><span class="pre">#!/path/to/interpreter</span></code>）。</p>
<p>因此，Python zip 应用程序的格式会如下所示：</p>
<ol class="arabic simple">
<li><p>可选的释伴行，包含字符 <code class="docutils literal notranslate"><span class="pre">b'#!'</span></code>，后面是解释器名，然后是换行符 （<code class="docutils literal notranslate"><span class="pre">b'\n'</span></code>）。 解释器名可为操作系统 “释伴”处理所能接受的任意值，或为 Windows 系统中的 Python 启动程序。解释器名在 Windows 中应用 UTF-8 编码，在 POSIX 中则用 <a class="reference internal" href="sys.xhtml#sys.getfilesystemencoding" title="sys.getfilesystemencoding"><code class="xref py py-func docutils literal notranslate"><span class="pre">sys.getfilesystemencoding()</span></code></a>。</p></li>
<li><p>标准的打包文件由 <a class="reference internal" href="zipfile.xhtml#module-zipfile" title="zipfile: Read and write ZIP-format archive files."><code class="xref py py-mod docutils literal notranslate"><span class="pre">zipfile</span></code></a> 模块生成。其中 <em>必须</em> 包含一个名为 <code class="docutils literal notranslate"><span class="pre">__main__.py</span></code> 的文件（必须位于打包文件的“根”目录——不能位于某个子目录中）。打包文件中的数据可以是压缩或未压缩的。</p></li>
</ol>
<p>如果应用程序的打包文件带有释伴行，则在 POSIX 系统中可能需要启用可执行属性，以允许直接执行。</p>
<p>不一定非要用本模块中的工具创建应用程序打包文件，本模块只是提供了便捷方案，上述格式的打包文件可用任何方式创建，均可被 Python 接受。</p>
</section>
</section>


            <div class="clearer"></div>
          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>