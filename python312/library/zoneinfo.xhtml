<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" /><meta name="viewport" content="width=device-width, initial-scale=1" />
<meta property="og:title" content="zoneinfo --- IANA 时区支持" />
<meta property="og:type" content="website" />
<meta property="og:url" content="https://docs.python.org/3/library/zoneinfo.xhtml" />
<meta property="og:site_name" content="Python documentation" />
<meta property="og:description" content="源代码: Lib/zoneinfo[https://github.com/python/cpython/tree/3.12/Lib/zoneinfo] zoneinfo 模块根据 PEP 615[https://peps.python.org/pep-0615/] 中的原始规范说明提供了一个具体的时区实现来支持 IANA 时区数据库。 在默认情况下， zoneinfo 会在可能的情况下使用系..." />
<meta property="og:image" content="https://docs.python.org/3/_static/og-image.png" />
<meta property="og:image:alt" content="Python documentation" />
<meta name="description" content="源代码: Lib/zoneinfo[https://github.com/python/cpython/tree/3.12/Lib/zoneinfo] zoneinfo 模块根据 PEP 615[https://peps.python.org/pep-0615/] 中的原始规范说明提供了一个具体的时区实现来支持 IANA 时区数据库。 在默认情况下， zoneinfo 会在可能的情况下使用系..." />
<meta property="og:image:width" content="200" />
<meta property="og:image:height" content="200" />
<meta name="theme-color" content="#3776ab" />

    <title>zoneinfo --- IANA 时区支持</title>
    <link rel="stylesheet" type="text/css" href="../_static/pygments.css" />
    <link rel="stylesheet" type="text/css" href="../_static/epub.css" />
    <link rel="canonical" href="https://docs.python.org/3/library/zoneinfo.html" />
    
      
    

    
    <style>
      @media only screen {
        table.full-width-table {
            width: 100%;
        }
      }
    </style>
 

  </head><body>


    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <section id="module-zoneinfo">
<span id="zoneinfo-iana-time-zone-support"></span><h1><code class="xref py py-mod docutils literal notranslate"><span class="pre">zoneinfo</span></code> --- IANA 时区支持</h1>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.9.</span></p>
</div>
<p><strong>源代码:</strong> <a class="reference external" href="https://github.com/python/cpython/tree/3.12/Lib/zoneinfo">Lib/zoneinfo</a><span class="link-target"> [https://github.com/python/cpython/tree/3.12/Lib/zoneinfo]</span></p>
<hr class="docutils" />
<p><a class="reference internal" href="#module-zoneinfo" title="zoneinfo: IANA time zone support"><code class="xref py py-mod docutils literal notranslate"><span class="pre">zoneinfo</span></code></a> 模块根据 <span class="target" id="index-6"></span><a class="pep reference external" href="https://peps.python.org/pep-0615/"><strong>PEP 615</strong></a><span class="link-target"> [https://peps.python.org/pep-0615/]</span> 中的原始规范说明提供了一个具体的时区实现来支持 IANA 时区数据库。 在默认情况下，<a class="reference internal" href="#module-zoneinfo" title="zoneinfo: IANA time zone support"><code class="xref py py-mod docutils literal notranslate"><span class="pre">zoneinfo</span></code></a> 会在可能的情况下使用系统的时区数据；如果系统时区数据不可用，该库将回退为使用 PyPI 上提供的 <a class="reference external" href="https://pypi.org/project/tzdata/">tzdata</a><span class="link-target"> [https://pypi.org/project/tzdata/]</span> 第一方包。</p>
<div class="admonition seealso">
<p class="admonition-title">参见</p>
<dl class="simple">
<dt>模块: <a class="reference internal" href="datetime.xhtml#module-datetime" title="datetime: Basic date and time types."><code class="xref py py-mod docutils literal notranslate"><span class="pre">datetime</span></code></a></dt><dd><p>提供 <a class="reference internal" href="datetime.xhtml#datetime.time" title="datetime.time"><code class="xref py py-class docutils literal notranslate"><span class="pre">time</span></code></a> 和 <a class="reference internal" href="datetime.xhtml#datetime.datetime" title="datetime.datetime"><code class="xref py py-class docutils literal notranslate"><span class="pre">datetime</span></code></a> 类型，<a class="reference internal" href="#zoneinfo.ZoneInfo" title="zoneinfo.ZoneInfo"><code class="xref py py-class docutils literal notranslate"><span class="pre">ZoneInfo</span></code></a> 类被设计为可配合这两个类型使用。</p>
</dd>
<dt>包 <a class="reference external" href="https://pypi.org/project/tzdata/">tzdata</a><span class="link-target"> [https://pypi.org/project/tzdata/]</span></dt><dd><p>由 CPython 核心开发者维护以通过 PyPI 提供时区数据的第一方包。</p>
</dd>
</dl>
</div>
<div class="availability docutils container">
<p><a class="reference internal" href="intro.xhtml#availability"><span class="std std-ref">可用性</span></a>: 非 Emscripten，非 WASI。</p>
<p>此模块在 WebAssembly 平台 <code class="docutils literal notranslate"><span class="pre">wasm32-emscripten</span></code> 和 <code class="docutils literal notranslate"><span class="pre">wasm32-wasi</span></code> 上不适用或不可用。 请参阅 <a class="reference internal" href="intro.xhtml#wasm-availability"><span class="std std-ref">WebAssembly 平台</span></a> 了解详情。</p>
</div>
<section id="using-zoneinfo">
<h2>使用 <code class="docutils literal notranslate"><span class="pre">ZoneInfo</span></code></h2>
<p><a class="reference internal" href="#zoneinfo.ZoneInfo" title="zoneinfo.ZoneInfo"><code class="xref py py-class docutils literal notranslate"><span class="pre">ZoneInfo</span></code></a> 是 <a class="reference internal" href="datetime.xhtml#datetime.tzinfo" title="datetime.tzinfo"><code class="xref py py-class docutils literal notranslate"><span class="pre">datetime.tzinfo</span></code></a> 抽象基类的具体实现，其目标是通过构造器、 <a class="reference internal" href="datetime.xhtml#datetime.datetime.replace" title="datetime.datetime.replace"><code class="xref py py-meth docutils literal notranslate"><span class="pre">datetime.replace</span></code></a> 方法或 <a class="reference internal" href="datetime.xhtml#datetime.datetime.astimezone" title="datetime.datetime.astimezone"><code class="xref py py-meth docutils literal notranslate"><span class="pre">datetime.astimezone</span></code></a> 来与 <code class="docutils literal notranslate"><span class="pre">tzinfo</span></code> 建立关联:</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">zoneinfo</span> <span class="kn">import</span> <span class="n">ZoneInfo</span>
<span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">datetime</span> <span class="kn">import</span> <span class="n">datetime</span><span class="p">,</span> <span class="n">timedelta</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">dt</span> <span class="o">=</span> <span class="n">datetime</span><span class="p">(</span><span class="mi">2020</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">31</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="n">tzinfo</span><span class="o">=</span><span class="n">ZoneInfo</span><span class="p">(</span><span class="s2">&quot;America/Los_Angeles&quot;</span><span class="p">))</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">print</span><span class="p">(</span><span class="n">dt</span><span class="p">)</span>
<span class="go">2020-10-31 12:00:00-07:00</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">dt</span><span class="o">.</span><span class="n">tzname</span><span class="p">()</span>
<span class="go">&#39;PDT&#39;</span>
</pre></div>
</div>
<p>以此方式构造的日期时间对象可兼容日期时间运算并可在无需进一步干预的情况下处理夏令时转换:</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">dt_add</span> <span class="o">=</span> <span class="n">dt</span> <span class="o">+</span> <span class="n">timedelta</span><span class="p">(</span><span class="n">days</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>

<span class="gp">&gt;&gt;&gt; </span><span class="nb">print</span><span class="p">(</span><span class="n">dt_add</span><span class="p">)</span>
<span class="go">2020-11-01 12:00:00-08:00</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">dt_add</span><span class="o">.</span><span class="n">tzname</span><span class="p">()</span>
<span class="go">&#39;PST&#39;</span>
</pre></div>
</div>
<p>这些时区还支持在 <span class="target" id="index-7"></span><a class="pep reference external" href="https://peps.python.org/pep-0495/"><strong>PEP 495</strong></a><span class="link-target"> [https://peps.python.org/pep-0495/]</span> 中引入的 <a class="reference internal" href="datetime.xhtml#datetime.datetime.fold" title="datetime.datetime.fold"><code class="xref py py-attr docutils literal notranslate"><span class="pre">fold</span></code></a>。 在可能导致时间歧义的时差转换中（例如夏令时到标准时的转换），当 <code class="docutils literal notranslate"><span class="pre">fold=0</span></code> 时会使用转换 <em>之前</em> 的时差，而当 <code class="docutils literal notranslate"><span class="pre">fold=1</span></code> 时则使用转换 <em>之后</em> 的时差，例如:</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">dt</span> <span class="o">=</span> <span class="n">datetime</span><span class="p">(</span><span class="mi">2020</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">tzinfo</span><span class="o">=</span><span class="n">ZoneInfo</span><span class="p">(</span><span class="s2">&quot;America/Los_Angeles&quot;</span><span class="p">))</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">print</span><span class="p">(</span><span class="n">dt</span><span class="p">)</span>
<span class="go">2020-11-01 01:00:00-07:00</span>

<span class="gp">&gt;&gt;&gt; </span><span class="nb">print</span><span class="p">(</span><span class="n">dt</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="n">fold</span><span class="o">=</span><span class="mi">1</span><span class="p">))</span>
<span class="go">2020-11-01 01:00:00-08:00</span>
</pre></div>
</div>
<p>当执行来自另一时区的转换时，fold 将被设置为正确的值:</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">datetime</span> <span class="kn">import</span> <span class="n">timezone</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">LOS_ANGELES</span> <span class="o">=</span> <span class="n">ZoneInfo</span><span class="p">(</span><span class="s2">&quot;America/Los_Angeles&quot;</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">dt_utc</span> <span class="o">=</span> <span class="n">datetime</span><span class="p">(</span><span class="mi">2020</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="n">tzinfo</span><span class="o">=</span><span class="n">timezone</span><span class="o">.</span><span class="n">utc</span><span class="p">)</span>

<span class="gp">&gt;&gt;&gt; </span><span class="c1"># Before the PDT -&gt; PST transition</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">print</span><span class="p">(</span><span class="n">dt_utc</span><span class="o">.</span><span class="n">astimezone</span><span class="p">(</span><span class="n">LOS_ANGELES</span><span class="p">))</span>
<span class="go">2020-11-01 01:00:00-07:00</span>

<span class="gp">&gt;&gt;&gt; </span><span class="c1"># After the PDT -&gt; PST transition</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">print</span><span class="p">((</span><span class="n">dt_utc</span> <span class="o">+</span> <span class="n">timedelta</span><span class="p">(</span><span class="n">hours</span><span class="o">=</span><span class="mi">1</span><span class="p">))</span><span class="o">.</span><span class="n">astimezone</span><span class="p">(</span><span class="n">LOS_ANGELES</span><span class="p">))</span>
<span class="go">2020-11-01 01:00:00-08:00</span>
</pre></div>
</div>
</section>
<section id="data-sources">
<h2>数据源</h2>
<p><code class="docutils literal notranslate"><span class="pre">zoneinfo</span></code> 模块不直接提供时区数据，而是在可能的情况下从系统时区数据库或使用 PyPI 上的第一方包 <a class="reference external" href="https://pypi.org/project/tzdata/">tzdata</a><span class="link-target"> [https://pypi.org/project/tzdata/]</span> 来获取时区信息。 某些系统，特别是 Windows 系统也包括在内，并没有可用的 IANA 数据库，因此对于要保证获取时区信息的跨平台兼容性的项目，推荐针对 tzdata 声明依赖。 如果系统数据和 tzdata 均不可用，则所有对 <a class="reference internal" href="#zoneinfo.ZoneInfo" title="zoneinfo.ZoneInfo"><code class="xref py py-class docutils literal notranslate"><span class="pre">ZoneInfo</span></code></a> 的调用都将引发 <a class="reference internal" href="#zoneinfo.ZoneInfoNotFoundError" title="zoneinfo.ZoneInfoNotFoundError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">ZoneInfoNotFoundError</span></code></a>。</p>
<section id="configuring-the-data-sources">
<span id="zoneinfo-data-configuration"></span><h3>配置数据源</h3>
<p>当 <code class="docutils literal notranslate"><span class="pre">ZoneInfo(key)</span></code> 被调用时，此构造器首先会在 <a class="reference internal" href="#zoneinfo.TZPATH" title="zoneinfo.TZPATH"><code class="xref py py-data docutils literal notranslate"><span class="pre">TZPATH</span></code></a> 所指定的目录下搜索匹配 <code class="docutils literal notranslate"><span class="pre">key</span></code> 的文件，失败时则会在 tzdata 包中查找匹配。 此行为可通过三种方式来配置:</p>
<ol class="arabic simple">
<li><p>默认的 <a class="reference internal" href="#zoneinfo.TZPATH" title="zoneinfo.TZPATH"><code class="xref py py-data docutils literal notranslate"><span class="pre">TZPATH</span></code></a> 未通过其他方式指定时可在 <a class="reference internal" href="#zoneinfo-data-compile-time-config"><span class="std std-ref">编译时</span></a> 进行配置。</p></li>
<li><p><a class="reference internal" href="#zoneinfo.TZPATH" title="zoneinfo.TZPATH"><code class="xref py py-data docutils literal notranslate"><span class="pre">TZPATH</span></code></a> 可使用 <a class="reference internal" href="#zoneinfo-data-environment-var"><span class="std std-ref">环境变量</span></a> 进行配置。</p></li>
<li><p>在 <a class="reference internal" href="#zoneinfo-data-runtime-config"><span class="std std-ref">运行时</span></a>，搜索路径可使用 <a class="reference internal" href="#zoneinfo.reset_tzpath" title="zoneinfo.reset_tzpath"><code class="xref py py-func docutils literal notranslate"><span class="pre">reset_tzpath()</span></code></a> 函数来修改。</p></li>
</ol>
<section id="compile-time-configuration">
<span id="zoneinfo-data-compile-time-config"></span><h4>编译时配置</h4>
<p>默认的 <a class="reference internal" href="#zoneinfo.TZPATH" title="zoneinfo.TZPATH"><code class="xref py py-data docutils literal notranslate"><span class="pre">TZPATH</span></code></a> 包括一些时区数据库的通用部署位置（Windows 除外，该系统没有时区数据的“通用”位置）。 在 POSIX 系统中，下游分发者和从源码编译 Python 的开发者知道系统时区数据部署位置，它们可以通过指定编译时选项 <code class="docutils literal notranslate"><span class="pre">TZPATH</span></code> (或者更常见的是通过 <a class="reference internal" href="../using/configure.xhtml#cmdoption-with-tzpath"><code class="xref std std-option docutils literal notranslate"><span class="pre">配置旗标</span> <span class="pre">--with-tzpath</span></code></a>) 来改变默认的时区路径，该选项应当是一个由 <a class="reference internal" href="os.xhtml#os.pathsep" title="os.pathsep"><code class="xref py py-data docutils literal notranslate"><span class="pre">os.pathsep</span></code></a> 分隔的字符串。</p>
<p>在所有平台上，配置值会在 <a class="reference internal" href="sysconfig.xhtml#sysconfig.get_config_var" title="sysconfig.get_config_var"><code class="xref py py-func docutils literal notranslate"><span class="pre">sysconfig.get_config_var()</span></code></a> 中以 <code class="docutils literal notranslate"><span class="pre">TZPATH</span></code> 键的形式提供。</p>
</section>
<section id="environment-configuration">
<span id="zoneinfo-data-environment-var"></span><h4>环境配置</h4>
<p>当初始化 <a class="reference internal" href="#zoneinfo.TZPATH" title="zoneinfo.TZPATH"><code class="xref py py-data docutils literal notranslate"><span class="pre">TZPATH</span></code></a> 时（在导入时或不带参数调用 <a class="reference internal" href="#zoneinfo.reset_tzpath" title="zoneinfo.reset_tzpath"><code class="xref py py-func docutils literal notranslate"><span class="pre">reset_tzpath()</span></code></a> 时），<code class="docutils literal notranslate"><span class="pre">zoneinfo</span></code> 模块将使用环境变量 <code class="docutils literal notranslate"><span class="pre">PYTHONTZPATH</span></code>，如果变量存在则会设置搜索路径。</p>
<dl class="std envvar">
<dt class="sig sig-object std" id="envvar-PYTHONTZPATH">
<span class="sig-name descname"><span class="pre">PYTHONTZPATH</span></span></dt>
<dd><p>这是一个以 <a class="reference internal" href="os.xhtml#os.pathsep" title="os.pathsep"><code class="xref py py-data docutils literal notranslate"><span class="pre">os.pathsep</span></code></a> 分隔的字符串，其中包含要使用的时区搜索路径。 它必须仅由绝对路径而非相对路径组成。 在 <code class="docutils literal notranslate"><span class="pre">PYTHONTZPATH</span></code> 中指定的相对路径部分将不会被使用，但在其他情况下当指定相对路径时的行为该实现是有定义的；CPython 将引发 <a class="reference internal" href="#zoneinfo.InvalidTZPathWarning" title="zoneinfo.InvalidTZPathWarning"><code class="xref py py-exc docutils literal notranslate"><span class="pre">InvalidTZPathWarning</span></code></a>，而其他实现可自由地忽略错误部分或是引发异常。</p>
</dd></dl>

<p>要设置让系统忽略系统数据并改用 tzdata 包，请设置 <code class="docutils literal notranslate"><span class="pre">PYTHONTZPATH=&quot;&quot;</span></code>。</p>
</section>
<section id="runtime-configuration">
<span id="zoneinfo-data-runtime-config"></span><h4>运行时配置</h4>
<p>TZ 搜索路径也可在运行时使用 <a class="reference internal" href="#zoneinfo.reset_tzpath" title="zoneinfo.reset_tzpath"><code class="xref py py-func docutils literal notranslate"><span class="pre">reset_tzpath()</span></code></a> 函数来配置。 通常并不建议如此操作，不过在需要使用指定时区路径（或者需要禁止访问系统时区）的测试函数中使用它则是合理的。</p>
</section>
</section>
</section>
<section id="the-zoneinfo-class">
<h2><code class="docutils literal notranslate"><span class="pre">ZoneInfo</span></code> 类</h2>
<dl class="py class">
<dt class="sig sig-object py" id="zoneinfo.ZoneInfo">
<em class="property"><span class="pre">class</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">zoneinfo.</span></span><span class="sig-name descname"><span class="pre">ZoneInfo</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">key</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>一个具体的 <a class="reference internal" href="datetime.xhtml#datetime.tzinfo" title="datetime.tzinfo"><code class="xref py py-class docutils literal notranslate"><span class="pre">datetime.tzinfo</span></code></a> 子类，它代表一个由字符串 <code class="docutils literal notranslate"><span class="pre">key</span></code> 所指定的 IANA 时区。 对主构造器的调用将总是返回可进行标识比较的对象；但是另一种方式，对所有的 <code class="docutils literal notranslate"><span class="pre">key</span></code> 值通过 <a class="reference internal" href="#zoneinfo.ZoneInfo.clear_cache" title="zoneinfo.ZoneInfo.clear_cache"><code class="xref py py-meth docutils literal notranslate"><span class="pre">ZoneInfo.clear_cache()</span></code></a> 禁止缓存失效，对以下断言将总是为真值:</p>
<div class="highlight-python notranslate"><div class="highlight"><pre><span></span><span class="n">a</span> <span class="o">=</span> <span class="n">ZoneInfo</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
<span class="n">b</span> <span class="o">=</span> <span class="n">ZoneInfo</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
<span class="k">assert</span> <span class="n">a</span> <span class="ow">is</span> <span class="n">b</span>
</pre></div>
</div>
<p><code class="docutils literal notranslate"><span class="pre">key</span></code> 必须采用相对的标准化 POSIX 路径的形式，其中没有对上一层级的引用。 如果传入了不合要求的键则构造器将引发 <a class="reference internal" href="exceptions.xhtml#ValueError" title="ValueError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">ValueError</span></code></a>。</p>
<p>如果没有找到匹配 <code class="docutils literal notranslate"><span class="pre">key</span></code> 的文件，构造器将引发 <a class="reference internal" href="#zoneinfo.ZoneInfoNotFoundError" title="zoneinfo.ZoneInfoNotFoundError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">ZoneInfoNotFoundError</span></code></a>。</p>
</dd></dl>

<p><code class="docutils literal notranslate"><span class="pre">ZoneInfo</span></code> 类具有两个替代构造器:</p>
<dl class="py method">
<dt class="sig sig-object py" id="zoneinfo.ZoneInfo.from_file">
<em class="property"><span class="pre">classmethod</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">ZoneInfo.</span></span><span class="sig-name descname"><span class="pre">from_file</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">fobj</span></span></em>, <em class="sig-param"><span class="o"><span class="pre">/</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">key</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>基于一个返回字节串的文件型对象（例如一个以二进制模式打开的文件或是一个 <a class="reference internal" href="io.xhtml#io.BytesIO" title="io.BytesIO"><code class="xref py py-class docutils literal notranslate"><span class="pre">io.BytesIO</span></code></a> 对象）构造 <code class="docutils literal notranslate"><span class="pre">ZoneInfo</span></code> 对象。 不同于主构造器，此构造器总是会构造一个新对象。</p>
<p><code class="docutils literal notranslate"><span class="pre">key</span></code> 形参设置时区名称以供 <a class="reference internal" href="../reference/datamodel.xhtml#object.__str__" title="object.__str__"><code class="xref py py-meth docutils literal notranslate"><span class="pre">__str__()</span></code></a> 和 <a class="reference internal" href="../reference/datamodel.xhtml#object.__repr__" title="object.__repr__"><code class="xref py py-meth docutils literal notranslate"><span class="pre">__repr__()</span></code></a> 使用。</p>
<p>由此构造器创建的对象不可被封存 (参见 <a class="reference internal" href="#pickling">pickling</a>)。</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="zoneinfo.ZoneInfo.no_cache">
<em class="property"><span class="pre">classmethod</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">ZoneInfo.</span></span><span class="sig-name descname"><span class="pre">no_cache</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">key</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>一个绕过构造器缓存的替代构造器。 它与主构造器很相似，但每次调用都会返回一个新对象。 此构造器在进行测试或演示时最为适用，但它也可以被用来创建具有不同缓存失效策略的系统。</p>
<p>由此构造器创建的对象在被解封时也会绕过反序列化进程的缓存。</p>
<div class="admonition caution">
<p class="admonition-title">小心</p>
<p>使用此构造器可以会以令人惊讶的方式改变日期时间对象的语义，只有在你确定你的需求时才使用它。</p>
</div>
</dd></dl>

<p>也可以使用以下的类方法:</p>
<dl class="py method">
<dt class="sig sig-object py" id="zoneinfo.ZoneInfo.clear_cache">
<em class="property"><span class="pre">classmethod</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">ZoneInfo.</span></span><span class="sig-name descname"><span class="pre">clear_cache</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="o"><span class="pre">*</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">only_keys</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>一个可在 <code class="docutils literal notranslate"><span class="pre">ZoneInfo</span></code> 类上禁用缓存的方法。 如果不传入参数，则会禁用所有缓存并且下次对每个键调用主构造器将返回一个新实例。</p>
<p>如果将一个键名称的可迭代对象传给 <code class="docutils literal notranslate"><span class="pre">only_keys</span></code> 形参，则将只有指定的键会被从缓存中移除。 传给 <code class="docutils literal notranslate"><span class="pre">only_keys</span></code> 但在缓存中找不到的键会被忽略。</p>
<div class="admonition warning">
<p class="admonition-title">警告</p>
<p>发起调用此函数可能会以令人惊讶的方式改变使用 <code class="docutils literal notranslate"><span class="pre">ZoneInfo</span></code> 的日期时间对象的语义；这会修改模块的状态并因此可能产生大范围的影响。 你只有在确定有必要时才可以使用它。</p>
</div>
</dd></dl>

<p>该类具有一个属性:</p>
<dl class="py attribute">
<dt class="sig sig-object py" id="zoneinfo.ZoneInfo.key">
<span class="sig-prename descclassname"><span class="pre">ZoneInfo.</span></span><span class="sig-name descname"><span class="pre">key</span></span></dt>
<dd><p>这是一个只读的 <a class="reference internal" href="../glossary.xhtml#term-attribute"><span class="xref std std-term">attribute</span></a>，它返回传给构造器的 <code class="docutils literal notranslate"><span class="pre">key</span></code> 的值，该值应为一个 IANA 时区数据库的查找键 (例如 <code class="docutils literal notranslate"><span class="pre">America/New_York</span></code>, <code class="docutils literal notranslate"><span class="pre">Europe/Paris</span></code> 或 <code class="docutils literal notranslate"><span class="pre">Asia/Tokyo</span></code>)。</p>
<p>对于不指定 <code class="docutils literal notranslate"><span class="pre">key</span></code> 形参而是基于文件构造时区，该属性将设为 <code class="docutils literal notranslate"><span class="pre">None</span></code>。</p>
<div class="admonition note">
<p class="admonition-title">备注</p>
<p>尽管将这些信息暴露给最终用户是一种比较普通的做法，但是这些值被设计作为代表相关时区的主键而不一定是面向用户的元素。 CLDR (Unicode 通用区域数据存储库) 之类的项目可被用来根据这些键获取更为用户友好的字符串。</p>
</div>
</dd></dl>

<section id="string-representations">
<h3>字符串表示</h3>
<p>当在 <a class="reference internal" href="#zoneinfo.ZoneInfo" title="zoneinfo.ZoneInfo"><code class="xref py py-class docutils literal notranslate"><span class="pre">ZoneInfo</span></code></a> 对象上调用 <a class="reference internal" href="stdtypes.xhtml#str" title="str"><code class="xref py py-class docutils literal notranslate"><span class="pre">str</span></code></a> 时返回的字符串表示默认会使用 <a class="reference internal" href="#zoneinfo.ZoneInfo.key" title="zoneinfo.ZoneInfo.key"><code class="xref py py-attr docutils literal notranslate"><span class="pre">ZoneInfo.key</span></code></a> 属性（参见该属性文档中的用法注释）:</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">zone</span> <span class="o">=</span> <span class="n">ZoneInfo</span><span class="p">(</span><span class="s2">&quot;Pacific/Kwajalein&quot;</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">str</span><span class="p">(</span><span class="n">zone</span><span class="p">)</span>
<span class="go">&#39;Pacific/Kwajalein&#39;</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">dt</span> <span class="o">=</span> <span class="n">datetime</span><span class="p">(</span><span class="mi">2020</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="n">tzinfo</span><span class="o">=</span><span class="n">zone</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="sa">f</span><span class="s2">&quot;</span><span class="si">{</span><span class="n">dt</span><span class="o">.</span><span class="n">isoformat</span><span class="p">()</span><span class="si">}</span><span class="s2"> [</span><span class="si">{</span><span class="n">dt</span><span class="o">.</span><span class="n">tzinfo</span><span class="si">}</span><span class="s2">]&quot;</span>
<span class="go">&#39;2020-04-01T03:15:00+12:00 [Pacific/Kwajalein]&#39;</span>
</pre></div>
</div>
<p>对于基于文件而非指定 <code class="docutils literal notranslate"><span class="pre">key</span></code> 形参所构建的对象，<code class="docutils literal notranslate"><span class="pre">str</span></code> 会回退为调用 <a class="reference internal" href="functions.xhtml#repr" title="repr"><code class="xref py py-func docutils literal notranslate"><span class="pre">repr()</span></code></a>。 <code class="docutils literal notranslate"><span class="pre">ZoneInfo</span></code> 的 <code class="docutils literal notranslate"><span class="pre">repr</span></code> 是由具体实现定义的并且不一定会在不同版本间保持稳定，但它保证不会是一个有效的 <code class="docutils literal notranslate"><span class="pre">ZoneInfo</span></code> 键。</p>
</section>
<section id="pickle-serialization">
<span id="pickling"></span><h3>封存序列化</h3>
<p><code class="docutils literal notranslate"><span class="pre">ZoneInfo</span></code> 对象的序列化是基于键的，而不是序列化所有过渡数据，并且基于文件构造的 <code class="docutils literal notranslate"><span class="pre">ZoneInfo</span></code> 对象（即使是指定了 <code class="docutils literal notranslate"><span class="pre">key</span></code> 值的对象）不能被封存。</p>
<p><code class="docutils literal notranslate"><span class="pre">ZoneInfo</span></code> 文件的行为取决于它的构造方式:</p>
<ol class="arabic">
<li><p><code class="docutils literal notranslate"><span class="pre">ZoneInfo(key)</span></code>: 当使用主构造器构造时，会基于键序列化一个 <code class="docutils literal notranslate"><span class="pre">ZoneInfo</span></code> 对象，而当反序列化时，反序列化过程会使用主构造器，因此预期它们与其他对同一时区的引用会是同一对象。 例如，如果 <code class="docutils literal notranslate"><span class="pre">europe_berlin_pkl</span></code> 是一个包含基于 <code class="docutils literal notranslate"><span class="pre">ZoneInfo(&quot;Europe/Berlin&quot;)</span></code> 构建的封存数据的字符串，你可以预期出现以下的行为:</p>
<div class="highlight-pycon notranslate"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">a</span> <span class="o">=</span> <span class="n">ZoneInfo</span><span class="p">(</span><span class="s2">&quot;Europe/Berlin&quot;</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">b</span> <span class="o">=</span> <span class="n">pickle</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">europe_berlin_pkl</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">a</span> <span class="ow">is</span> <span class="n">b</span>
<span class="go">True</span>
</pre></div>
</div>
</li>
<li><p><code class="docutils literal notranslate"><span class="pre">ZoneInfo.no_cache(key)</span></code>: 当通过绕过缓存的构造器构造时，<code class="docutils literal notranslate"><span class="pre">ZoneInfo</span></code> 对象也会基于键序列化，但当反序列化时，反序列化过程会使用绕过缓存的构造器。 如果 <code class="docutils literal notranslate"><span class="pre">europe_berlin_pkl_nc</span></code> 是一个包含基于 <code class="docutils literal notranslate"><span class="pre">ZoneInfo.no_cache(&quot;Europe/Berlin&quot;)</span></code> 构造的封存数据的字符串，你可以预期出现以下的行为:</p>
<div class="highlight-pycon notranslate"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">a</span> <span class="o">=</span> <span class="n">ZoneInfo</span><span class="p">(</span><span class="s2">&quot;Europe/Berlin&quot;</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">b</span> <span class="o">=</span> <span class="n">pickle</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">europe_berlin_pkl_nc</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">a</span> <span class="ow">is</span> <span class="n">b</span>
<span class="go">False</span>
</pre></div>
</div>
</li>
<li><p><code class="docutils literal notranslate"><span class="pre">ZoneInfo.from_file(fobj,</span> <span class="pre">/,</span> <span class="pre">key=None)</span></code>: 当通过文件构造时，<code class="docutils literal notranslate"><span class="pre">ZoneInfo</span></code> 对象会在封存时引发异常。 如果最终用户想要封存通过文件构造的 <code class="docutils literal notranslate"><span class="pre">ZoneInfo</span></code>，则推荐他们使用包装类型或自定义序列化函数：或者基于键序列化，或者存储文件对象的内容并将其序列化。</p></li>
</ol>
<p>该序列化方法要求所需键的时区数据在序列化和反序列化中均可用，类似于在序列化和反序列化环境中都预期存在对类和函数的引用的方式。 这还意味着在具有不同时区数据版本的环境中当解封被封存的 <code class="docutils literal notranslate"><span class="pre">ZoneInfo</span></code> 时并不会保证结果的一致性。</p>
</section>
</section>
<section id="functions">
<h2>函数</h2>
<dl class="py function">
<dt class="sig sig-object py" id="zoneinfo.available_timezones">
<span class="sig-prename descclassname"><span class="pre">zoneinfo.</span></span><span class="sig-name descname"><span class="pre">available_timezones</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>获取一个包含可用 IANA 时区的在时区路径的任何位置均可用的全部有效键的集合。 每次调用该函数时都会重新计算。</p>
<p>此函数仅包括规范时区名称而不包括“特殊”时区如位于 <code class="docutils literal notranslate"><span class="pre">posix/</span></code> 和 <code class="docutils literal notranslate"><span class="pre">right/</span></code> 目录下的时区或 <code class="docutils literal notranslate"><span class="pre">posixrules</span></code> 时区。</p>
<div class="admonition caution">
<p class="admonition-title">小心</p>
<p>此函数可能会打开大量的文件，因为确定时区路径上某个文件是否为有效时区的最佳方式是读取开头位置的“魔术字符串”。</p>
</div>
<div class="admonition note">
<p class="admonition-title">备注</p>
<p>这些值并不被设计用来对外公开给最终用户；对于面向用户的元素，应用程序应当使用 CLDR (Unicode 通用区域数据存储库) 之类来获取更为用户友好的字符串。 另请参阅 <a class="reference internal" href="#zoneinfo.ZoneInfo.key" title="zoneinfo.ZoneInfo.key"><code class="xref py py-attr docutils literal notranslate"><span class="pre">ZoneInfo.key</span></code></a> 中的提示性说明。</p>
</div>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="zoneinfo.reset_tzpath">
<span class="sig-prename descclassname"><span class="pre">zoneinfo.</span></span><span class="sig-name descname"><span class="pre">reset_tzpath</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">to</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>设置或重置模块的时区搜索路径 (<a class="reference internal" href="#zoneinfo.TZPATH" title="zoneinfo.TZPATH"><code class="xref py py-data docutils literal notranslate"><span class="pre">TZPATH</span></code></a>)。 当不带参数调用时，<a class="reference internal" href="#zoneinfo.TZPATH" title="zoneinfo.TZPATH"><code class="xref py py-data docutils literal notranslate"><span class="pre">TZPATH</span></code></a> 会被设为默认值。</p>
<p>调用 <code class="docutils literal notranslate"><span class="pre">reset_tzpath</span></code> 将不会使 <a class="reference internal" href="#zoneinfo.ZoneInfo" title="zoneinfo.ZoneInfo"><code class="xref py py-class docutils literal notranslate"><span class="pre">ZoneInfo</span></code></a> 缓存失效，因而在缓存未命中的情况下对主 <code class="docutils literal notranslate"><span class="pre">ZoneInfo</span></code> 构造器的调用将只使用新的 <code class="docutils literal notranslate"><span class="pre">TZPATH</span></code>。</p>
<p><code class="docutils literal notranslate"><span class="pre">to</span></code> 形参必须是由字符串或 <a class="reference internal" href="os.xhtml#os.PathLike" title="os.PathLike"><code class="xref py py-class docutils literal notranslate"><span class="pre">os.PathLike</span></code></a> 组成的 <a class="reference internal" href="../glossary.xhtml#term-sequence"><span class="xref std std-term">sequence</span></a> 或而不是字符串，它们必须都是绝对路径。 如果所传入的不是绝对路径则将引发 <a class="reference internal" href="exceptions.xhtml#ValueError" title="ValueError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">ValueError</span></code></a>。</p>
</dd></dl>

</section>
<section id="globals">
<h2>全局变量</h2>
<dl class="py data">
<dt class="sig sig-object py" id="zoneinfo.TZPATH">
<span class="sig-prename descclassname"><span class="pre">zoneinfo.</span></span><span class="sig-name descname"><span class="pre">TZPATH</span></span></dt>
<dd><p>一个表示时区搜索路径的只读序列 -- 当通过键构造 <code class="docutils literal notranslate"><span class="pre">ZoneInfo</span></code> 时，键会与 <code class="docutils literal notranslate"><span class="pre">TZPATH</span></code> 中的每个条目进行合并，并使用所找到的第一个文件。</p>
<p><code class="docutils literal notranslate"><span class="pre">TZPATH</span></code> 可以只包含绝对路径，绝不包含相对路径，无论它是如何配置的。</p>
<p><code class="docutils literal notranslate"><span class="pre">zoneinfo.TZPATH</span></code> 所指向的对象可能随着对 <a class="reference internal" href="#zoneinfo.reset_tzpath" title="zoneinfo.reset_tzpath"><code class="xref py py-func docutils literal notranslate"><span class="pre">reset_tzpath()</span></code></a> 的调用而改变，因此推荐使用 <code class="docutils literal notranslate"><span class="pre">zoneinfo.TZPATH</span></code> 而不是从 <code class="docutils literal notranslate"><span class="pre">zoneinfo</span></code> 导入 <code class="docutils literal notranslate"><span class="pre">TZPATH</span></code> 或是将 <code class="docutils literal notranslate"><span class="pre">zoneinfo.TZPATH</span></code> 赋值给一个长期变量。</p>
<p>有关配置时区搜索路径的更多信息，请参阅 <a class="reference internal" href="#zoneinfo-data-configuration"><span class="std std-ref">配置数据源</span></a>。</p>
</dd></dl>

</section>
<section id="exceptions-and-warnings">
<h2>异常与警告</h2>
<dl class="py exception">
<dt class="sig sig-object py" id="zoneinfo.ZoneInfoNotFoundError">
<em class="property"><span class="pre">exception</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">zoneinfo.</span></span><span class="sig-name descname"><span class="pre">ZoneInfoNotFoundError</span></span></dt>
<dd><p>当一个 <a class="reference internal" href="#zoneinfo.ZoneInfo" title="zoneinfo.ZoneInfo"><code class="xref py py-class docutils literal notranslate"><span class="pre">ZoneInfo</span></code></a> 对象的构造由于在系统中找不到指定的键而失败时引发。 这是 <a class="reference internal" href="exceptions.xhtml#KeyError" title="KeyError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">KeyError</span></code></a> 的一个子类。</p>
</dd></dl>

<dl class="py exception">
<dt class="sig sig-object py" id="zoneinfo.InvalidTZPathWarning">
<em class="property"><span class="pre">exception</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">zoneinfo.</span></span><span class="sig-name descname"><span class="pre">InvalidTZPathWarning</span></span></dt>
<dd><p>当 <span class="target" id="index-8"></span><a class="reference internal" href="#envvar-PYTHONTZPATH"><code class="xref std std-envvar docutils literal notranslate"><span class="pre">PYTHONTZPATH</span></code></a> 包含将被过滤掉的无效组件，例如一个相对路径时引发。</p>
</dd></dl>

</section>
</section>


            <div class="clearer"></div>
          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>