<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" /><meta name="viewport" content="width=device-width, initial-scale=1" />
<meta property="og:title" content="fcntl --- fcntl 和 ioctl 系统调用" />
<meta property="og:type" content="website" />
<meta property="og:url" content="https://docs.python.org/3/library/fcntl.xhtml" />
<meta property="og:site_name" content="Python documentation" />
<meta property="og:description" content="本模块基于文件描述符来执行文件和 I/O 控制。 它是 fcntl() 和 ioctl() Unix 例程的接口。 请参阅 fcntl(2)[https://manpages.debian.org/fcntl(2)] 和 ioctl(2)[https://manpages.debian.org/ioctl(2)] Unix 手册页了解详情。 可用性: Unix, 非 Emscripten, ..." />
<meta property="og:image" content="https://docs.python.org/3/_static/og-image.png" />
<meta property="og:image:alt" content="Python documentation" />
<meta name="description" content="本模块基于文件描述符来执行文件和 I/O 控制。 它是 fcntl() 和 ioctl() Unix 例程的接口。 请参阅 fcntl(2)[https://manpages.debian.org/fcntl(2)] 和 ioctl(2)[https://manpages.debian.org/ioctl(2)] Unix 手册页了解详情。 可用性: Unix, 非 Emscripten, ..." />
<meta property="og:image:width" content="200" />
<meta property="og:image:height" content="200" />
<meta name="theme-color" content="#3776ab" />

    <title>fcntl --- fcntl 和 ioctl 系统调用</title>
    <link rel="stylesheet" type="text/css" href="../_static/pygments.css" />
    <link rel="stylesheet" type="text/css" href="../_static/epub.css" />
    <link rel="canonical" href="https://docs.python.org/3/library/fcntl.html" />
    
      
    

    
    <style>
      @media only screen {
        table.full-width-table {
            width: 100%;
        }
      }
    </style>
 

  </head><body>


    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <section id="module-fcntl">
<span id="fcntl-the-fcntl-and-ioctl-system-calls"></span><h1><code class="xref py py-mod docutils literal notranslate"><span class="pre">fcntl</span></code> --- <code class="docutils literal notranslate"><span class="pre">fcntl</span></code> 和 <code class="docutils literal notranslate"><span class="pre">ioctl</span></code> 系统调用</h1>
<hr class="docutils" id="index-0" />
<p>本模块基于文件描述符来执行文件和 I/O 控制。 它是 <code class="xref c c-func docutils literal notranslate"><span class="pre">fcntl()</span></code> 和 <code class="xref c c-func docutils literal notranslate"><span class="pre">ioctl()</span></code> Unix 例程的接口。 请参阅 <em class="manpage"><a class="manpage reference external" href="https://manpages.debian.org/fcntl(2)">fcntl(2)</a><span class="link-target"> [https://manpages.debian.org/fcntl(2)]</span></em> 和 <em class="manpage"><a class="manpage reference external" href="https://manpages.debian.org/ioctl(2)">ioctl(2)</a><span class="link-target"> [https://manpages.debian.org/ioctl(2)]</span></em> Unix 手册页了解详情。</p>
<div class="availability docutils container">
<p><a class="reference internal" href="intro.xhtml#availability"><span class="std std-ref">可用性</span></a>: Unix, 非 Emscripten, 非 WASI。</p>
</div>
<p>本模块的所有函数都接受文件描述符 <em>fd</em> 作为第一个参数。可以是一个整数形式的文件描述符，比如 <code class="docutils literal notranslate"><span class="pre">sys.stdin.fileno()</span></code> 的返回结果，或为 <a class="reference internal" href="io.xhtml#io.IOBase" title="io.IOBase"><code class="xref py py-class docutils literal notranslate"><span class="pre">io.IOBase</span></code></a> 对象，比如 <code class="docutils literal notranslate"><span class="pre">sys.stdin</span></code> 提供一个 <a class="reference internal" href="io.xhtml#io.IOBase.fileno" title="io.IOBase.fileno"><code class="xref py py-meth docutils literal notranslate"><span class="pre">fileno()</span></code></a>，可返回一个真正的文件描述符。</p>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.3 版本发生变更: </span>本模块的操作以前触发的是 <a class="reference internal" href="exceptions.xhtml#IOError" title="IOError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">IOError</span></code></a>，现在则会触发 <a class="reference internal" href="exceptions.xhtml#OSError" title="OSError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">OSError</span></code></a>。</p>
</div>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.8 版本发生变更: </span>fcntl 模块现在有了 <code class="docutils literal notranslate"><span class="pre">F_ADD_SEALS</span></code> 、<code class="docutils literal notranslate"><span class="pre">F_GET_SEALS</span></code>  和 <code class="docutils literal notranslate"><span class="pre">F_SEAL_*</span></code> 常量，用于文件描述符 <a class="reference internal" href="os.xhtml#os.memfd_create" title="os.memfd_create"><code class="xref py py-func docutils literal notranslate"><span class="pre">os.memfd_create()</span></code></a> 的封装。</p>
</div>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.9 版本发生变更: </span>在 macOS 上，fcntl 模块提供了 <code class="docutils literal notranslate"><span class="pre">F_GETPATH</span></code> 常量，从文件描述符获取文件的路径。 在 Linux(&gt;=3.15) 上，fcntl 模块提供了 <code class="docutils literal notranslate"><span class="pre">F_OFD_GETLK</span></code>, <code class="docutils literal notranslate"><span class="pre">F_OFD_SETLK</span></code> 和 <code class="docutils literal notranslate"><span class="pre">F_OFD_SETLKW</span></code> 常量，它们将在处理打开文件描述锁时被使用。</p>
</div>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.10 版本发生变更: </span>在 Linux 2.6.11 以上版本中，fcntl 模块提供了 <code class="docutils literal notranslate"><span class="pre">F_GETPIPE_SZ</span></code> 和 <code class="docutils literal notranslate"><span class="pre">F_SETPIPE_SZ</span></code> 常量，分别用于检查和修改管道的大小。</p>
</div>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.11 版本发生变更: </span>在 FreeBSD 上，fcntl 模块会暴露 <code class="docutils literal notranslate"><span class="pre">F_DUP2FD</span></code> 和 <code class="docutils literal notranslate"><span class="pre">F_DUP2FD_CLOEXEC</span></code> 常量，它们允许复制文件描述符，后者还额外设置了 <code class="docutils literal notranslate"><span class="pre">FD_CLOEXEC</span></code> 旗标。</p>
</div>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.12 版本发生变更: </span>在 Linux &gt;= 4.5 上，<a class="reference internal" href="#module-fcntl" title="fcntl: The fcntl() and ioctl() system calls. (Unix)"><code class="xref py py-mod docutils literal notranslate"><span class="pre">fcntl</span></code></a> 模块将公开 <code class="docutils literal notranslate"><span class="pre">FICLONE</span></code> 和 <code class="docutils literal notranslate"><span class="pre">FICLONERANGE</span></code> 常量，这允许在某些系统上（例如 btrfs, OCFS2, 和 XFS）通过将一个文件引用链接到另一个文件来共享某些数据。 此行为通常被称为“写入时拷贝”。</p>
</div>
<p>这个模块定义了以下函数：</p>
<dl class="py function">
<dt class="sig sig-object py" id="fcntl.fcntl">
<span class="sig-prename descclassname"><span class="pre">fcntl.</span></span><span class="sig-name descname"><span class="pre">fcntl</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">fd</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">cmd</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">arg</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">0</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>对文件描述符 <em>fd</em> 执行 <em>cmd</em> 操作（能够提供 <a class="reference internal" href="io.xhtml#io.IOBase.fileno" title="io.IOBase.fileno"><code class="xref py py-meth docutils literal notranslate"><span class="pre">fileno()</span></code></a> 方法的文件对象也可以接受）。 <em>cmd</em> 可用的值与操作系统有关，在 <a class="reference internal" href="#module-fcntl" title="fcntl: The fcntl() and ioctl() system calls. (Unix)"><code class="xref py py-mod docutils literal notranslate"><span class="pre">fcntl</span></code></a> 模块中可作为常量使用，名称与相关 C 语言头文件中的一样。参数 <em>arg</em> 可以是整数或 <a class="reference internal" href="stdtypes.xhtml#bytes" title="bytes"><code class="xref py py-class docutils literal notranslate"><span class="pre">bytes</span></code></a> 对象。若为整数值，则本函数的返回值是 C 语言  <code class="xref c c-func docutils literal notranslate"><span class="pre">fcntl()</span></code> 调用的整数返回值。若为字节串，则其代表一个二进制结构，比如由 <a class="reference internal" href="struct.xhtml#struct.pack" title="struct.pack"><code class="xref py py-func docutils literal notranslate"><span class="pre">struct.pack()</span></code></a> 创建的数据。该二进制数据将被复制到一个缓冲区，缓冲区地址传给 C 调用 <code class="xref c c-func docutils literal notranslate"><span class="pre">fcntl()</span></code>。调用成功后的返回值位于缓冲区内，转换为一个 <a class="reference internal" href="stdtypes.xhtml#bytes" title="bytes"><code class="xref py py-class docutils literal notranslate"><span class="pre">bytes</span></code></a> 对象。返回的对象长度将与 <em>arg</em> 参数的长度相同。上限为 1024 字节。如果操作系统在缓冲区中返回的信息大于 1024 字节，很可能导致内存段冲突，或更为不易察觉的数据错误。</p>
<p>如果 <code class="xref c c-func docutils literal notranslate"><span class="pre">fcntl()</span></code> 调用失败，将引发 <a class="reference internal" href="exceptions.xhtml#OSError" title="OSError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">OSError</span></code></a>。</p>
<p class="audit-hook">引发一条 <a class="reference internal" href="sys.xhtml#auditing"><span class="std std-ref">auditing 事件</span></a> <code class="docutils literal notranslate"><span class="pre">fcntl.fcntl</span></code>，参数为 <code class="docutils literal notranslate"><span class="pre">fd</span></code> 、<code class="docutils literal notranslate"><span class="pre">cmd</span></code>、<code class="docutils literal notranslate"><span class="pre">arg</span></code>。</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="fcntl.ioctl">
<span class="sig-prename descclassname"><span class="pre">fcntl.</span></span><span class="sig-name descname"><span class="pre">ioctl</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">fd</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">request</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">arg</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">0</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">mutate_flag</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">True</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>本函数与 <a class="reference internal" href="#fcntl.fcntl" title="fcntl.fcntl"><code class="xref py py-func docutils literal notranslate"><span class="pre">fcntl()</span></code></a> 函数相同，只是参数的处理更加复杂。</p>
<p><em>request</em> 参数的上限是 32位。<a class="reference internal" href="termios.xhtml#module-termios" title="termios: POSIX style tty control. (Unix)"><code class="xref py py-mod docutils literal notranslate"><span class="pre">termios</span></code></a> 模块中包含了可用作 <em>request</em> 参数其他常量，名称与相关 C 头文件中定义的相同。</p>
<p>参数 <em>arg</em> 可为整数、支持只读缓冲区接口的对象（如 <a class="reference internal" href="stdtypes.xhtml#bytes" title="bytes"><code class="xref py py-class docutils literal notranslate"><span class="pre">bytes</span></code></a> ）或支持读写缓冲区接口的对象（如 <a class="reference internal" href="stdtypes.xhtml#bytearray" title="bytearray"><code class="xref py py-class docutils literal notranslate"><span class="pre">bytearray</span></code></a> ）。</p>
<p>除了最后一种情况，其他情况下的行为都与 <a class="reference internal" href="#fcntl.fcntl" title="fcntl.fcntl"><code class="xref py py-func docutils literal notranslate"><span class="pre">fcntl()</span></code></a> 函数一样。</p>
<p>如果传入的是个可变缓冲区，那么行为就由 <em>mutate_flag</em> 参数决定。</p>
<p>如果 <em>mutate_flag</em>  为 False，缓冲区的可变性将被忽略，行为与只读缓冲区一样，只是没有了上述 1024 字节的上限——只要传入的缓冲区能容纳操作系统放入的数据即可。</p>
<p>如果 <em>mutate_flag</em> 为 True（默认值），那么缓冲区（实际上）会传给底层的 系统调用 <a class="reference internal" href="#fcntl.ioctl" title="fcntl.ioctl"><code class="xref py py-func docutils literal notranslate"><span class="pre">ioctl()</span></code></a> ，其返回代码则会回传给调用它的 Python，而缓冲区的新数据则反映了 <a class="reference internal" href="#fcntl.ioctl" title="fcntl.ioctl"><code class="xref py py-func docutils literal notranslate"><span class="pre">ioctl()</span></code></a> 的运行结果。这里做了一点简化，因为若是给出的缓冲区少于 1024 字节，首先会被复制到一个 1024 字节长的静态缓冲区再传给  <a class="reference internal" href="#fcntl.ioctl" title="fcntl.ioctl"><code class="xref py py-func docutils literal notranslate"><span class="pre">ioctl()</span></code></a> ，然后把结果复制回给出的缓冲区去。</p>
<p>如果 <code class="xref c c-func docutils literal notranslate"><span class="pre">ioctl()</span></code> 调用失败，将引发 <a class="reference internal" href="exceptions.xhtml#OSError" title="OSError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">OSError</span></code></a> 异常。</p>
<p>举个例子：</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="kn">import</span> <span class="nn">array</span><span class="o">,</span> <span class="nn">fcntl</span><span class="o">,</span> <span class="nn">struct</span><span class="o">,</span> <span class="nn">termios</span><span class="o">,</span> <span class="nn">os</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">os</span><span class="o">.</span><span class="n">getpgrp</span><span class="p">()</span>
<span class="go">13341</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">struct</span><span class="o">.</span><span class="n">unpack</span><span class="p">(</span><span class="s1">&#39;h&#39;</span><span class="p">,</span> <span class="n">fcntl</span><span class="o">.</span><span class="n">ioctl</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">termios</span><span class="o">.</span><span class="n">TIOCGPGRP</span><span class="p">,</span> <span class="s2">&quot;  &quot;</span><span class="p">))[</span><span class="mi">0</span><span class="p">]</span>
<span class="go">13341</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">buf</span> <span class="o">=</span> <span class="n">array</span><span class="o">.</span><span class="n">array</span><span class="p">(</span><span class="s1">&#39;h&#39;</span><span class="p">,</span> <span class="p">[</span><span class="mi">0</span><span class="p">])</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">fcntl</span><span class="o">.</span><span class="n">ioctl</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">termios</span><span class="o">.</span><span class="n">TIOCGPGRP</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
<span class="go">0</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">buf</span>
<span class="go">array(&#39;h&#39;, [13341])</span>
</pre></div>
</div>
<p class="audit-hook">触发一条 <a class="reference internal" href="sys.xhtml#auditing"><span class="std std-ref">auditing 事件</span></a> <code class="docutils literal notranslate"><span class="pre">fcntl.ioctl</span></code>，参数为 <code class="docutils literal notranslate"><span class="pre">fd</span></code> 、<code class="docutils literal notranslate"><span class="pre">request</span></code> 、<code class="docutils literal notranslate"><span class="pre">arg</span></code>。</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="fcntl.flock">
<span class="sig-prename descclassname"><span class="pre">fcntl.</span></span><span class="sig-name descname"><span class="pre">flock</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">fd</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">operation</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>在文件描述符 <em>fd</em> 上执行加锁操作 <em>operation</em> (也接受能提供 <a class="reference internal" href="io.xhtml#io.IOBase.fileno" title="io.IOBase.fileno"><code class="xref py py-meth docutils literal notranslate"><span class="pre">fileno()</span></code></a> 方法的文件对象)。 详见 Unix 手册  <em class="manpage"><a class="manpage reference external" href="https://manpages.debian.org/flock(2)">flock(2)</a><span class="link-target"> [https://manpages.debian.org/flock(2)]</span></em>。 (在某些系统中，此函数是用 <code class="xref c c-func docutils literal notranslate"><span class="pre">fcntl()</span></code> 模拟出来的。)</p>
<p>如果 <code class="xref c c-func docutils literal notranslate"><span class="pre">flock()</span></code> 调用失败，将引发 <a class="reference internal" href="exceptions.xhtml#OSError" title="OSError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">OSError</span></code></a> 异常。</p>
<p class="audit-hook">触发一条 <a class="reference internal" href="sys.xhtml#auditing"><span class="std std-ref">审计事件</span></a> <code class="docutils literal notranslate"><span class="pre">fcntl.flock</span></code>，参数为 <code class="docutils literal notranslate"><span class="pre">fd</span></code> 、<code class="docutils literal notranslate"><span class="pre">operation</span></code>。</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="fcntl.lockf">
<span class="sig-prename descclassname"><span class="pre">fcntl.</span></span><span class="sig-name descname"><span class="pre">lockf</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">fd</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">cmd</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">len</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">0</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">start</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">0</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">whence</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">0</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>本质上是对 <a class="reference internal" href="#fcntl.fcntl" title="fcntl.fcntl"><code class="xref py py-func docutils literal notranslate"><span class="pre">fcntl()</span></code></a> 加锁调用的封装。<em>fd</em> 是要加解锁的文件描述符（也接受能提供 <a class="reference internal" href="io.xhtml#io.IOBase.fileno" title="io.IOBase.fileno"><code class="xref py py-meth docutils literal notranslate"><span class="pre">fileno()</span></code></a> 方法的文件对象），<em>cmd</em> 是以下值之一：</p>
<dl class="py data">
<dt class="sig sig-object py" id="fcntl.LOCK_UN">
<span class="sig-prename descclassname"><span class="pre">fcntl.</span></span><span class="sig-name descname"><span class="pre">LOCK_UN</span></span></dt>
<dd><p>释放一个已存在的锁 。</p>
</dd></dl>

<dl class="py data">
<dt class="sig sig-object py" id="fcntl.LOCK_SH">
<span class="sig-prename descclassname"><span class="pre">fcntl.</span></span><span class="sig-name descname"><span class="pre">LOCK_SH</span></span></dt>
<dd><p>获取一个共享的锁。</p>
</dd></dl>

<dl class="py data">
<dt class="sig sig-object py" id="fcntl.LOCK_EX">
<span class="sig-prename descclassname"><span class="pre">fcntl.</span></span><span class="sig-name descname"><span class="pre">LOCK_EX</span></span></dt>
<dd><p>获得一个独占的锁。</p>
</dd></dl>

<dl class="py data">
<dt class="sig sig-object py" id="fcntl.LOCK_NB">
<span class="sig-prename descclassname"><span class="pre">fcntl.</span></span><span class="sig-name descname"><span class="pre">LOCK_NB</span></span></dt>
<dd><p>与其他三个 <code class="docutils literal notranslate"><span class="pre">LOCK_*</span></code> 常量中的任何一个进行位或操作，使请求不阻塞。</p>
</dd></dl>

<p>如果使用了 <code class="xref py py-const docutils literal notranslate"><span class="pre">LOCK_NB</span></code> ，但无法获取锁 ，则 <a class="reference internal" href="exceptions.xhtml#OSError" title="OSError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">OSError</span></code></a> 将被引发 ，异常将被 <em>errno</em> 属性 设置为 <a class="reference internal" href="errno.xhtml#errno.EACCES" title="errno.EACCES"><code class="xref py py-const docutils literal notranslate"><span class="pre">EACCES</span></code></a> 或 <a class="reference internal" href="errno.xhtml#errno.EAGAIN" title="errno.EAGAIN"><code class="xref py py-const docutils literal notranslate"><span class="pre">EAGAIN</span></code></a> （取决于操作系统；为便于移植，请检查这两个值）。 至少在某些系统中，只有当文件描述符指向一个已打开供写入的文件时，才能使用:const:<cite>!LOCK_EX</cite> 。</p>
<p><em>len</em> 是要锁定的字节数，<em>start</em> 是自 <em>whence</em> 开始锁定的字节偏移量，<em>whence</em> 与 <a class="reference internal" href="io.xhtml#io.IOBase.seek" title="io.IOBase.seek"><code class="xref py py-func docutils literal notranslate"><span class="pre">io.IOBase.seek()</span></code></a> 的定义一样。</p>
<ul class="simple">
<li><p><code class="docutils literal notranslate"><span class="pre">0</span></code> -- 相对于文件开头 (<a class="reference internal" href="os.xhtml#os.SEEK_SET" title="os.SEEK_SET"><code class="xref py py-const docutils literal notranslate"><span class="pre">os.SEEK_SET</span></code></a>)</p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">1</span></code> -- 相对于当前缓冲区位置 (<a class="reference internal" href="os.xhtml#os.SEEK_CUR" title="os.SEEK_CUR"><code class="xref py py-const docutils literal notranslate"><span class="pre">os.SEEK_CUR</span></code></a>)</p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">2</span></code> -- 相对于文件末尾 (<a class="reference internal" href="os.xhtml#os.SEEK_END" title="os.SEEK_END"><code class="xref py py-const docutils literal notranslate"><span class="pre">os.SEEK_END</span></code></a>)</p></li>
</ul>
<p><em>start</em> 的默认值为 0，表示从文件起始位置开始。<em>len</em> 的默认值是 0，表示加锁至文件末尾。 <em>whence</em> 的默认值也是 0。</p>
<p class="audit-hook">触发一条 <a class="reference internal" href="sys.xhtml#auditing"><span class="std std-ref">审计事件</span></a> <code class="docutils literal notranslate"><span class="pre">fcntl.lockf</span></code>，参数为 <code class="docutils literal notranslate"><span class="pre">fd</span></code> 、 <code class="docutils literal notranslate"><span class="pre">cmd</span></code>、 <code class="docutils literal notranslate"><span class="pre">len</span></code>、 <code class="docutils literal notranslate"><span class="pre">start</span></code>、 <code class="docutils literal notranslate"><span class="pre">whence</span></code>。</p>
</dd></dl>

<p>示例（都是运行于符合 SVR4 的系统）：</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="kn">import</span> <span class="nn">struct</span><span class="o">,</span> <span class="nn">fcntl</span><span class="o">,</span> <span class="nn">os</span>

<span class="n">f</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="o">...</span><span class="p">)</span>
<span class="n">rv</span> <span class="o">=</span> <span class="n">fcntl</span><span class="o">.</span><span class="n">fcntl</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="n">fcntl</span><span class="o">.</span><span class="n">F_SETFL</span><span class="p">,</span> <span class="n">os</span><span class="o">.</span><span class="n">O_NDELAY</span><span class="p">)</span>

<span class="n">lockdata</span> <span class="o">=</span> <span class="n">struct</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span><span class="s1">&#39;hhllhh&#39;</span><span class="p">,</span> <span class="n">fcntl</span><span class="o">.</span><span class="n">F_WRLCK</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
<span class="n">rv</span> <span class="o">=</span> <span class="n">fcntl</span><span class="o">.</span><span class="n">fcntl</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="n">fcntl</span><span class="o">.</span><span class="n">F_SETLKW</span><span class="p">,</span> <span class="n">lockdata</span><span class="p">)</span>
</pre></div>
</div>
<p>注意，在第一个例子中，返回值变量 <em>rv</em> 将存有整数；在第二个例子中，该变量中将存有一个 <a class="reference internal" href="stdtypes.xhtml#bytes" title="bytes"><code class="xref py py-class docutils literal notranslate"><span class="pre">bytes</span></code></a> 对象。<em>lockdata</em> 变量的结构布局视系统而定——因此采用 <a class="reference internal" href="#fcntl.flock" title="fcntl.flock"><code class="xref py py-func docutils literal notranslate"><span class="pre">flock()</span></code></a> 调用可能会更好。</p>
<div class="admonition seealso">
<p class="admonition-title">参见</p>
<dl class="simple">
<dt>模块 <a class="reference internal" href="os.xhtml#module-os" title="os: Miscellaneous operating system interfaces."><code class="xref py py-mod docutils literal notranslate"><span class="pre">os</span></code></a></dt><dd><p>如果加锁旗标 <a class="reference internal" href="os.xhtml#os.O_SHLOCK" title="os.O_SHLOCK"><code class="xref py py-const docutils literal notranslate"><span class="pre">O_SHLOCK</span></code></a> 和 <a class="reference internal" href="os.xhtml#os.O_EXLOCK" title="os.O_EXLOCK"><code class="xref py py-const docutils literal notranslate"><span class="pre">O_EXLOCK</span></code></a> 存在于 <a class="reference internal" href="os.xhtml#module-os" title="os: Miscellaneous operating system interfaces."><code class="xref py py-mod docutils literal notranslate"><span class="pre">os</span></code></a> 模块中（仅 BSD 专属），则 <a class="reference internal" href="os.xhtml#os.open" title="os.open"><code class="xref py py-func docutils literal notranslate"><span class="pre">os.open()</span></code></a> 函数提供了对 <a class="reference internal" href="#fcntl.lockf" title="fcntl.lockf"><code class="xref py py-func docutils literal notranslate"><span class="pre">lockf()</span></code></a> 和 <a class="reference internal" href="#fcntl.flock" title="fcntl.flock"><code class="xref py py-func docutils literal notranslate"><span class="pre">flock()</span></code></a> 函数的替代。</p>
</dd>
</dl>
</div>
</section>


            <div class="clearer"></div>
          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>