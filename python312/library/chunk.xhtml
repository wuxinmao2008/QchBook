<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" /><meta name="viewport" content="width=device-width, initial-scale=1" />
<meta property="og:title" content="chunk --- 读取 IFF 分块数据" />
<meta property="og:type" content="website" />
<meta property="og:url" content="https://docs.python.org/3/library/chunk.xhtml" />
<meta property="og:site_name" content="Python documentation" />
<meta property="og:description" content="源代码: Lib/chunk.py[https://github.com/python/cpython/tree/3.12/Lib/chunk.py] 本模块提供了一个读取使用 EA IFF 85 分块的数据的接口chunks. 1 这种格式使用的场合有 Audio Interchange File Format (AIFF/AIFF-C) 和 Real Media File Format ..." />
<meta property="og:image" content="https://docs.python.org/3/_static/og-image.png" />
<meta property="og:image:alt" content="Python documentation" />
<meta name="description" content="源代码: Lib/chunk.py[https://github.com/python/cpython/tree/3.12/Lib/chunk.py] 本模块提供了一个读取使用 EA IFF 85 分块的数据的接口chunks. 1 这种格式使用的场合有 Audio Interchange File Format (AIFF/AIFF-C) 和 Real Media File Format ..." />
<meta property="og:image:width" content="200" />
<meta property="og:image:height" content="200" />
<meta name="theme-color" content="#3776ab" />

    <title>chunk --- 读取 IFF 分块数据</title>
    <link rel="stylesheet" type="text/css" href="../_static/pygments.css" />
    <link rel="stylesheet" type="text/css" href="../_static/epub.css" />
    <link rel="canonical" href="https://docs.python.org/3/library/chunk.html" />
    
      
    

    
    <style>
      @media only screen {
        table.full-width-table {
            width: 100%;
        }
      }
    </style>
 

  </head><body>


    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <section id="module-chunk">
<span id="chunk-read-iff-chunked-data"></span><h1><a class="reference internal" href="#module-chunk" title="chunk: Module to read IFF chunks.（已弃用）"><code class="xref py py-mod docutils literal notranslate"><span class="pre">chunk</span></code></a> --- 读取 IFF 分块数据</h1>
<p><strong>源代码:</strong> <a class="reference external" href="https://github.com/python/cpython/tree/3.12/Lib/chunk.py">Lib/chunk.py</a><span class="link-target"> [https://github.com/python/cpython/tree/3.12/Lib/chunk.py]</span></p>
<div class="deprecated-removed" id="index-0">
<p><span class="versionmodified">从 3.11 版起不建议使用，将在 3.13 版中移除: </span><a class="reference internal" href="#module-chunk" title="chunk: Module to read IFF chunks.（已弃用）"><code class="xref py py-mod docutils literal notranslate"><span class="pre">chunk</span></code></a> 模块已被弃用（请参阅 <span class="target" id="index-3"></span><a class="pep reference external" href="https://peps.python.org/pep-0594/#chunk"><strong>PEP 594</strong></a><span class="link-target"> [https://peps.python.org/pep-0594/#chunk]</span> 了解详情）。</p>
</div>
<hr class="docutils" />
<p>本模块提供了一个读取使用 EA IFF 85 分块的数据的接口chunks. <a class="footnote-reference brackets" href="#id2" id="id1" role="doc-noteref"><span class="fn-bracket">[</span>1<span class="fn-bracket">]</span></a>  这种格式使用的场合有 Audio Interchange File Format (AIFF/AIFF-C) 和 Real Media File Format (RMFF) 等。 与它们密切相关的 WAVE 音频文件也可使用此模块来读取。</p>
<p>一个分块具有以下结构:</p>
<table class="docutils align-default">
<thead>
<tr class="row-odd"><th class="head"><p>偏移</p></th>
<th class="head"><p>长度</p></th>
<th class="head"><p>目录</p></th>
</tr>
</thead>
<tbody>
<tr class="row-even"><td><p>0</p></td>
<td><p>4</p></td>
<td><p>区块ID</p></td>
</tr>
<tr class="row-odd"><td><p>4</p></td>
<td><p>4</p></td>
<td><p>大端字节顺序的块大小，不包括头</p></td>
</tr>
<tr class="row-even"><td><p>8</p></td>
<td><p><em>n</em></p></td>
<td><p>数据字节，其中 <em>n</em> 是前一字段中给出的大小</p></td>
</tr>
<tr class="row-odd"><td><p>8 + <em>n</em></p></td>
<td><p>0 或 1</p></td>
<td><p>如果 <em>n</em> 为奇数且使用块对齐，则需要填充字节</p></td>
</tr>
</tbody>
</table>
<p>ID是一个4字节的字符串，用于标识块的类型。</p>
<p>大小字段（32 位的值，使用大端字节序编码）给出分块数据的大小，不包括 8 字节的标头。</p>
<p>使用由一个或更多分块组成的 IFF 类型文件。 此处定义的 <a class="reference internal" href="#chunk.Chunk" title="chunk.Chunk"><code class="xref py py-class docutils literal notranslate"><span class="pre">Chunk</span></code></a> 类的建议使用方式是在每个分块开始时实例化一个实例并从实例读取直到其末尾，在那之后可以再实例化新的实例。 到达文件末尾时，创建新实例将会失败并引发 <a class="reference internal" href="exceptions.xhtml#EOFError" title="EOFError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">EOFError</span></code></a> 异常。</p>
<dl class="py class">
<dt class="sig sig-object py" id="chunk.Chunk">
<em class="property"><span class="pre">class</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">chunk.</span></span><span class="sig-name descname"><span class="pre">Chunk</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">file</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">align</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">True</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">bigendian</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">True</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">inclheader</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>代表一个分块的类。 <em>file</em> 参数预期为一个文件型对象。 特别地也允许该类的实例。 唯一必需的方法是 <code class="xref py py-meth docutils literal notranslate"><span class="pre">read()</span></code>。 如果存在 <a class="reference internal" href="io.xhtml#io.IOBase.seek" title="io.IOBase.seek"><code class="xref py py-meth docutils literal notranslate"><span class="pre">seek()</span></code></a> 和 <a class="reference internal" href="io.xhtml#io.IOBase.tell" title="io.IOBase.tell"><code class="xref py py-meth docutils literal notranslate"><span class="pre">tell()</span></code></a> 方法并且没有引发异常，它们也会被使用。 如果存在这些方法并且引发了异常，则它们不应改变目标对象。 如果可选参数 <em>align</em> 为真值，则分块应当以 2 字节边界对齐。 如果 <em>align</em> 为假值，则不使用对齐。 此参数默认为真值。 如果可选参数 <em>bigendian</em> 为假值，分块大小应当为小端序。 这对于 WAVE 音频文件是必须的。 此参数默认为真值。 如果可选参数 <em>inclheader</em> 为真值，则分块标头中给出的大小将包括标头的大小。 此参数默认为假值。</p>
<p><a class="reference internal" href="#chunk.Chunk" title="chunk.Chunk"><code class="xref py py-class docutils literal notranslate"><span class="pre">Chunk</span></code></a> 对象支持下列方法：</p>
<dl class="py method">
<dt class="sig sig-object py" id="chunk.Chunk.getname">
<span class="sig-name descname"><span class="pre">getname</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>返回分块的名称（ID）。 这是分块的头 4 个字节。</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="chunk.Chunk.getsize">
<span class="sig-name descname"><span class="pre">getsize</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>返回分块的大小。</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="chunk.Chunk.close">
<span class="sig-name descname"><span class="pre">close</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>关闭并跳转到分块的末尾。 这不会关闭下层的文件。</p>
</dd></dl>

<p>在 <a class="reference internal" href="#chunk.Chunk.close" title="chunk.Chunk.close"><code class="xref py py-meth docutils literal notranslate"><span class="pre">close()</span></code></a> 方法已被调用后其余方法将会引发 <a class="reference internal" href="exceptions.xhtml#OSError" title="OSError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">OSError</span></code></a>。 在 Python 3.3 之前，它们曾会引发 <a class="reference internal" href="exceptions.xhtml#IOError" title="IOError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">IOError</span></code></a>，现在这是 <a class="reference internal" href="exceptions.xhtml#OSError" title="OSError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">OSError</span></code></a> 的一个别名。</p>
<dl class="py method">
<dt class="sig sig-object py" id="chunk.Chunk.isatty">
<span class="sig-name descname"><span class="pre">isatty</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>返回 <code class="docutils literal notranslate"><span class="pre">False</span></code>。</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="chunk.Chunk.seek">
<span class="sig-name descname"><span class="pre">seek</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">pos</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">whence</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">0</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>设置分块的当前位置。 <em>whence</em> 参数为可选项并且默认为 <code class="docutils literal notranslate"><span class="pre">0</span></code> (绝对文件定位)；其他值还有 <code class="docutils literal notranslate"><span class="pre">1</span></code> (相对当前位置查找) 和 <code class="docutils literal notranslate"><span class="pre">2</span></code> (相对文件末尾查找)。 没有返回值。 如果下层文件不支持查找，则只允许向前查找。</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="chunk.Chunk.tell">
<span class="sig-name descname"><span class="pre">tell</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>将当前位置返回到分块。</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="chunk.Chunk.read">
<span class="sig-name descname"><span class="pre">read</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">size</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">-1</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>从分块读取至多 <em>size</em> 个字节（如果在获得 <em>size</em> 个字节之前已到达分块末尾则读取的字节会少于此数量）。 如果 <em>size</em> 参数为负值或被省略，则读取所有字节直到分块末尾。 当立即遇到分块末尾则返回空字节串对象。</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="chunk.Chunk.skip">
<span class="sig-name descname"><span class="pre">skip</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>跳到分块末尾。此后对分块再次调用 <a class="reference internal" href="#chunk.Chunk.read" title="chunk.Chunk.read"><code class="xref py py-meth docutils literal notranslate"><span class="pre">read()</span></code></a> 将返回 <code class="docutils literal notranslate"><span class="pre">b''</span></code>。 如果你对分块的内容不感兴趣，则应当调用此方法以使文件指向下一分块的开头。</p>
</dd></dl>

</dd></dl>

<p class="rubric">备注</p>
<aside class="footnote-list brackets">
<aside class="footnote brackets" id="id2" role="doc-footnote">
<span class="label"><span class="fn-bracket">[</span><a role="doc-backlink" href="#id1">1</a><span class="fn-bracket">]</span></span>
<p>&quot;EA IFF 85&quot; 交换格式文件标准, Jerry Morrison, Electronic Arts, 1985 年 1 月。</p>
</aside>
</aside>
</section>


            <div class="clearer"></div>
          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>