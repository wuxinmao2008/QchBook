<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" /><meta name="viewport" content="width=device-width, initial-scale=1" />
<meta property="og:title" content="queue --- A synchronized queue class" />
<meta property="og:type" content="website" />
<meta property="og:url" content="https://docs.python.org/3/library/queue.xhtml" />
<meta property="og:site_name" content="Python documentation" />
<meta property="og:description" content="源代码: Lib/queue.py[https://github.com/python/cpython/tree/3.12/Lib/queue.py] queue 模块实现了多生产者、多消费者队列。这特别适用于消息必须安全地在多线程间交换的线程编程。模块中的 Queue 类实现了所有所需的锁定语义。 本模块实现了三种类型的队列，它们的区别仅仅是条目的提取顺序。 在 FIFO 队列中，先添加的..." />
<meta property="og:image" content="https://docs.python.org/3/_static/og-image.png" />
<meta property="og:image:alt" content="Python documentation" />
<meta name="description" content="源代码: Lib/queue.py[https://github.com/python/cpython/tree/3.12/Lib/queue.py] queue 模块实现了多生产者、多消费者队列。这特别适用于消息必须安全地在多线程间交换的线程编程。模块中的 Queue 类实现了所有所需的锁定语义。 本模块实现了三种类型的队列，它们的区别仅仅是条目的提取顺序。 在 FIFO 队列中，先添加的..." />
<meta property="og:image:width" content="200" />
<meta property="og:image:height" content="200" />
<meta name="theme-color" content="#3776ab" />

    <title>queue --- A synchronized queue class</title>
    <link rel="stylesheet" type="text/css" href="../_static/pygments.css" />
    <link rel="stylesheet" type="text/css" href="../_static/epub.css" />
    <link rel="canonical" href="https://docs.python.org/3/library/queue.html" />
    
      
    

    
    <style>
      @media only screen {
        table.full-width-table {
            width: 100%;
        }
      }
    </style>
 

  </head><body>


    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <section id="module-queue">
<span id="queue-a-synchronized-queue-class"></span><h1><code class="xref py py-mod docutils literal notranslate"><span class="pre">queue</span></code> --- A synchronized queue class</h1>
<p><strong>源代码:</strong> <a class="reference external" href="https://github.com/python/cpython/tree/3.12/Lib/queue.py">Lib/queue.py</a><span class="link-target"> [https://github.com/python/cpython/tree/3.12/Lib/queue.py]</span></p>
<hr class="docutils" />
<p><a class="reference internal" href="#module-queue" title="queue: A synchronized queue class."><code class="xref py py-mod docutils literal notranslate"><span class="pre">queue</span></code></a> 模块实现了多生产者、多消费者队列。这特别适用于消息必须安全地在多线程间交换的线程编程。模块中的 <a class="reference internal" href="#queue.Queue" title="queue.Queue"><code class="xref py py-class docutils literal notranslate"><span class="pre">Queue</span></code></a> 类实现了所有所需的锁定语义。</p>
<p>本模块实现了三种类型的队列，它们的区别仅仅是条目的提取顺序。 在 <abbr title="first-in, first-out">FIFO</abbr> 队列中，先添加的任务会先被提取。 在 <abbr title="last-in, first-out">LIFO</abbr> 队列中，最近添加的条目会先被提取 (类似于一个栈)。 在优先级队列中，条目将保持已排序状态 (使用 <a class="reference internal" href="heapq.xhtml#module-heapq" title="heapq: Heap queue algorithm (a.k.a. priority queue)."><code class="xref py py-mod docutils literal notranslate"><span class="pre">heapq</span></code></a> 模块) 并且值最小的条目会先被提取。</p>
<p>在内部，这三个类型的队列使用锁来临时阻塞竞争线程；然而，它们并未被设计用于线程的重入性处理。</p>
<p>此外，模块实现了一个 &quot;简单的&quot;  <abbr title="first-in, first-out">FIFO</abbr> 队列类型， <a class="reference internal" href="#queue.SimpleQueue" title="queue.SimpleQueue"><code class="xref py py-class docutils literal notranslate"><span class="pre">SimpleQueue</span></code></a> ，这个特殊实现为小功能在交换中提供额外的保障。</p>
<p><a class="reference internal" href="#module-queue" title="queue: A synchronized queue class."><code class="xref py py-mod docutils literal notranslate"><span class="pre">queue</span></code></a> 模块定义了下列类和异常：</p>
<dl class="py class">
<dt class="sig sig-object py" id="queue.Queue">
<em class="property"><span class="pre">class</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">queue.</span></span><span class="sig-name descname"><span class="pre">Queue</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">maxsize</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">0</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Constructor for a <abbr title="first-in, first-out">FIFO</abbr> queue.  <em>maxsize</em> is
an integer that sets the upperbound
limit on the number of items that can be placed in the queue.  Insertion will
block once this size has been reached, until queue items are consumed.  If
<em>maxsize</em> is less than or equal to zero, the queue size is infinite.</p>
</dd></dl>

<dl class="py class">
<dt class="sig sig-object py" id="queue.LifoQueue">
<em class="property"><span class="pre">class</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">queue.</span></span><span class="sig-name descname"><span class="pre">LifoQueue</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">maxsize</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">0</span></span></em><span class="sig-paren">)</span></dt>
<dd><p><abbr title="last-in, first-out">LIFO</abbr> 队列构造函数。 <em>maxsize</em> 是个整数，用于设置可以放入队列中的项目数的上限。当达到这个大小的时候，插入操作将阻塞至队列中的项目被消费掉。如果 <em>maxsize</em> 小于等于零，队列尺寸为无限大。</p>
</dd></dl>

<dl class="py class">
<dt class="sig sig-object py" id="queue.PriorityQueue">
<em class="property"><span class="pre">class</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">queue.</span></span><span class="sig-name descname"><span class="pre">PriorityQueue</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">maxsize</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">0</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>优先级队列构造函数。 <em>maxsize</em> 是个整数，用于设置可以放入队列中的项目数的上限。当达到这个大小的时候，插入操作将阻塞至队列中的项目被消费掉。如果 <em>maxsize</em> 小于等于零，队列尺寸为无限大。</p>
<p>值最小的条目会先被提取 (值最小的条目是由the lowest valued entry is the one that would be returned by <code class="docutils literal notranslate"><span class="pre">min(entries)</span></code> 返回的)。 条目的典型模式是如下形式的元组: <code class="docutils literal notranslate"><span class="pre">(priority_number,</span> <span class="pre">data)</span></code>。</p>
<p>如果 <em>data</em> 元素没有可比性，数据将被包装在一个类中，忽略数据值，仅仅比较优先级数字 ：</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="kn">from</span> <span class="nn">dataclasses</span> <span class="kn">import</span> <span class="n">dataclass</span><span class="p">,</span> <span class="n">field</span>
<span class="kn">from</span> <span class="nn">typing</span> <span class="kn">import</span> <span class="n">Any</span>

<span class="nd">@dataclass</span><span class="p">(</span><span class="n">order</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
<span class="k">class</span> <span class="nc">PrioritizedItem</span><span class="p">:</span>
    <span class="n">priority</span><span class="p">:</span> <span class="nb">int</span>
    <span class="n">item</span><span class="p">:</span> <span class="n">Any</span><span class="o">=</span><span class="n">field</span><span class="p">(</span><span class="n">compare</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>
</pre></div>
</div>
</dd></dl>

<dl class="py class">
<dt class="sig sig-object py" id="queue.SimpleQueue">
<em class="property"><span class="pre">class</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">queue.</span></span><span class="sig-name descname"><span class="pre">SimpleQueue</span></span></dt>
<dd><p>无界的 <abbr title="first-in, first-out">FIFO</abbr> 队列构造函数。简单的队列，缺少任务跟踪等高级功能。</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.7.</span></p>
</div>
</dd></dl>

<dl class="py exception">
<dt class="sig sig-object py" id="queue.Empty">
<em class="property"><span class="pre">exception</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">queue.</span></span><span class="sig-name descname"><span class="pre">Empty</span></span></dt>
<dd><p>对空的 <a class="reference internal" href="#queue.Queue" title="queue.Queue"><code class="xref py py-class docutils literal notranslate"><span class="pre">Queue</span></code></a> 对象，调用非阻塞的 <a class="reference internal" href="#queue.Queue.get" title="queue.Queue.get"><code class="xref py py-meth docutils literal notranslate"><span class="pre">get()</span></code></a> (or  <a class="reference internal" href="#queue.Queue.get_nowait" title="queue.Queue.get_nowait"><code class="xref py py-meth docutils literal notranslate"><span class="pre">get_nowait()</span></code></a>) 时，引发的异常。</p>
</dd></dl>

<dl class="py exception">
<dt class="sig sig-object py" id="queue.Full">
<em class="property"><span class="pre">exception</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">queue.</span></span><span class="sig-name descname"><span class="pre">Full</span></span></dt>
<dd><p>对满的 <a class="reference internal" href="#queue.Queue" title="queue.Queue"><code class="xref py py-class docutils literal notranslate"><span class="pre">Queue</span></code></a> 对象，调用非阻塞的 <a class="reference internal" href="#queue.Queue.put" title="queue.Queue.put"><code class="xref py py-meth docutils literal notranslate"><span class="pre">put()</span></code></a> (or <a class="reference internal" href="#queue.Queue.put_nowait" title="queue.Queue.put_nowait"><code class="xref py py-meth docutils literal notranslate"><span class="pre">put_nowait()</span></code></a>) 时，引发的异常。</p>
</dd></dl>

<section id="queue-objects">
<span id="queueobjects"></span><h2>Queue对象</h2>
<p>队列对象 (<a class="reference internal" href="#queue.Queue" title="queue.Queue"><code class="xref py py-class docutils literal notranslate"><span class="pre">Queue</span></code></a>, <a class="reference internal" href="#queue.LifoQueue" title="queue.LifoQueue"><code class="xref py py-class docutils literal notranslate"><span class="pre">LifoQueue</span></code></a>, 或者 <a class="reference internal" href="#queue.PriorityQueue" title="queue.PriorityQueue"><code class="xref py py-class docutils literal notranslate"><span class="pre">PriorityQueue</span></code></a>) 提供下列描述的公共方法。</p>
<dl class="py method">
<dt class="sig sig-object py" id="queue.Queue.qsize">
<span class="sig-prename descclassname"><span class="pre">Queue.</span></span><span class="sig-name descname"><span class="pre">qsize</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>返回队列的大致大小。注意，qsize() &gt; 0 不保证后续的 get() 不被阻塞，qsize() &lt; maxsize 也不保证 put() 不被阻塞。</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="queue.Queue.empty">
<span class="sig-prename descclassname"><span class="pre">Queue.</span></span><span class="sig-name descname"><span class="pre">empty</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>如果队列为空，返回 <code class="docutils literal notranslate"><span class="pre">True</span></code> ，否则返回 <code class="docutils literal notranslate"><span class="pre">False</span></code> 。如果 empty() 返回 <code class="docutils literal notranslate"><span class="pre">True</span></code> ，不保证后续调用的 put() 不被阻塞。类似的，如果 empty() 返回 <code class="docutils literal notranslate"><span class="pre">False</span></code> ，也不保证后续调用的 get() 不被阻塞。</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="queue.Queue.full">
<span class="sig-prename descclassname"><span class="pre">Queue.</span></span><span class="sig-name descname"><span class="pre">full</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>如果队列是满的返回 <code class="docutils literal notranslate"><span class="pre">True</span></code> ，否则返回 <code class="docutils literal notranslate"><span class="pre">False</span></code> 。如果 full() 返回 <code class="docutils literal notranslate"><span class="pre">True</span></code> 不保证后续调用的 get() 不被阻塞。类似的，如果 full() 返回 <code class="docutils literal notranslate"><span class="pre">False</span></code> 也不保证后续调用的 put() 不被阻塞。</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="queue.Queue.put">
<span class="sig-prename descclassname"><span class="pre">Queue.</span></span><span class="sig-name descname"><span class="pre">put</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">item</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">block</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">True</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">timeout</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>将 <em>item</em> 加入队列。 如果可选参数 <em>block</em> 为真值并且 <em>timeout</em> 为 <code class="docutils literal notranslate"><span class="pre">None</span></code> (默认值)，则会在必要时阻塞直到有空闲槽位可用。 如为 <em>timeout</em> 为正数，则将阻塞最多 <em>timeout</em> 秒并会在没有可用的空闲槽位时引发 <a class="reference internal" href="#queue.Full" title="queue.Full"><code class="xref py py-exc docutils literal notranslate"><span class="pre">Full</span></code></a> 异常。 在其他情况下 (<em>block</em> 为假值)，则如果空闲槽位立即可用则将条目加入队列，否则将引发 <a class="reference internal" href="#queue.Full" title="queue.Full"><code class="xref py py-exc docutils literal notranslate"><span class="pre">Full</span></code></a> 异常 (<em>timeout</em> 在此情况下将被忽略)。</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="queue.Queue.put_nowait">
<span class="sig-prename descclassname"><span class="pre">Queue.</span></span><span class="sig-name descname"><span class="pre">put_nowait</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">item</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>相当于 <code class="docutils literal notranslate"><span class="pre">put(item,</span> <span class="pre">block=False)</span></code>。</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="queue.Queue.get">
<span class="sig-prename descclassname"><span class="pre">Queue.</span></span><span class="sig-name descname"><span class="pre">get</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">block</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">True</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">timeout</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>从队列中移除并返回一个项目。如果可选参数 <em>block</em> 是 true 并且 <em>timeout</em> 是 <code class="docutils literal notranslate"><span class="pre">None</span></code> (默认值)，则在必要时阻塞至项目可得到。如果 <em>timeout</em> 是个正数，将最多阻塞 <em>timeout</em> 秒，如果在这段时间内项目不能得到，将引发 <a class="reference internal" href="#queue.Empty" title="queue.Empty"><code class="xref py py-exc docutils literal notranslate"><span class="pre">Empty</span></code></a> 异常。反之 (<em>block</em> 是 false) , 如果一个项目立即可得到，则返回一个项目，否则引发 <a class="reference internal" href="#queue.Empty" title="queue.Empty"><code class="xref py py-exc docutils literal notranslate"><span class="pre">Empty</span></code></a> 异常 (这种情况下，<em>timeout</em> 将被忽略)。</p>
<p>POSIX 系统上在 3.0 之前，以及在 Windows 上的所有版本中，如果 <em>block</em> 为真值并且 <em>timeout</em> 为 <code class="docutils literal notranslate"><span class="pre">None</span></code>，此操作将进入在底层锁上的不可中断的等待。 这意味着不会发生任何异常，特别是 SIGINT 将不会触发 <a class="reference internal" href="exceptions.xhtml#KeyboardInterrupt" title="KeyboardInterrupt"><code class="xref py py-exc docutils literal notranslate"><span class="pre">KeyboardInterrupt</span></code></a>。</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="queue.Queue.get_nowait">
<span class="sig-prename descclassname"><span class="pre">Queue.</span></span><span class="sig-name descname"><span class="pre">get_nowait</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>相当于 <code class="docutils literal notranslate"><span class="pre">get(False)</span></code> 。</p>
</dd></dl>

<p>提供了两个方法，用于支持跟踪 排队的任务 是否 被守护的消费者线程 完整的处理。</p>
<dl class="py method">
<dt class="sig sig-object py" id="queue.Queue.task_done">
<span class="sig-prename descclassname"><span class="pre">Queue.</span></span><span class="sig-name descname"><span class="pre">task_done</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>表示前面排队的任务已经被完成。被队列的消费者线程使用。每个 <a class="reference internal" href="#queue.Queue.get" title="queue.Queue.get"><code class="xref py py-meth docutils literal notranslate"><span class="pre">get()</span></code></a> 被用于获取一个任务， 后续调用 <a class="reference internal" href="#queue.Queue.task_done" title="queue.Queue.task_done"><code class="xref py py-meth docutils literal notranslate"><span class="pre">task_done()</span></code></a> 告诉队列，该任务的处理已经完成。</p>
<p>如果 <a class="reference internal" href="#queue.Queue.join" title="queue.Queue.join"><code class="xref py py-meth docutils literal notranslate"><span class="pre">join()</span></code></a> 当前正在阻塞，在所有条目都被处理后，将解除阻塞(意味着每个 <a class="reference internal" href="#queue.Queue.put" title="queue.Queue.put"><code class="xref py py-meth docutils literal notranslate"><span class="pre">put()</span></code></a> 进队列的条目的 <a class="reference internal" href="#queue.Queue.task_done" title="queue.Queue.task_done"><code class="xref py py-meth docutils literal notranslate"><span class="pre">task_done()</span></code></a> 都被收到)。</p>
<p>如果被调用的次数多于放入队列中的项目数量，将引发 <a class="reference internal" href="exceptions.xhtml#ValueError" title="ValueError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">ValueError</span></code></a> 异常 。</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="queue.Queue.join">
<span class="sig-prename descclassname"><span class="pre">Queue.</span></span><span class="sig-name descname"><span class="pre">join</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>阻塞至队列中所有的元素都被接收和处理完毕。</p>
<p>当一个条目被添加到队列的时候未完成任务的计数将会增加。 每当一个消费者线程调用 <a class="reference internal" href="#queue.Queue.task_done" title="queue.Queue.task_done"><code class="xref py py-meth docutils literal notranslate"><span class="pre">task_done()</span></code></a> 来表明该条目已被提取且其上的所有工作已完成时未完成计数将会减少。 当未完成计数降为零时，<a class="reference internal" href="#queue.Queue.join" title="queue.Queue.join"><code class="xref py py-meth docutils literal notranslate"><span class="pre">join()</span></code></a> 将解除阻塞。</p>
</dd></dl>

<p>如何等待排队的任务被完成的示例：</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="kn">import</span> <span class="nn">threading</span>
<span class="kn">import</span> <span class="nn">queue</span>

<span class="n">q</span> <span class="o">=</span> <span class="n">queue</span><span class="o">.</span><span class="n">Queue</span><span class="p">()</span>

<span class="k">def</span> <span class="nf">worker</span><span class="p">():</span>
    <span class="k">while</span> <span class="kc">True</span><span class="p">:</span>
        <span class="n">item</span> <span class="o">=</span> <span class="n">q</span><span class="o">.</span><span class="n">get</span><span class="p">()</span>
        <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;Working on </span><span class="si">{</span><span class="n">item</span><span class="si">}</span><span class="s1">&#39;</span><span class="p">)</span>
        <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;Finished </span><span class="si">{</span><span class="n">item</span><span class="si">}</span><span class="s1">&#39;</span><span class="p">)</span>
        <span class="n">q</span><span class="o">.</span><span class="n">task_done</span><span class="p">()</span>

<span class="c1"># Turn-on the worker thread.</span>
<span class="n">threading</span><span class="o">.</span><span class="n">Thread</span><span class="p">(</span><span class="n">target</span><span class="o">=</span><span class="n">worker</span><span class="p">,</span> <span class="n">daemon</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span><span class="o">.</span><span class="n">start</span><span class="p">()</span>

<span class="c1"># Send thirty task requests to the worker.</span>
<span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">30</span><span class="p">):</span>
    <span class="n">q</span><span class="o">.</span><span class="n">put</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>

<span class="c1"># Block until all tasks are done.</span>
<span class="n">q</span><span class="o">.</span><span class="n">join</span><span class="p">()</span>
<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;All work completed&#39;</span><span class="p">)</span>
</pre></div>
</div>
</section>
<section id="simplequeue-objects">
<h2>SimpleQueue 对象</h2>
<p><a class="reference internal" href="#queue.SimpleQueue" title="queue.SimpleQueue"><code class="xref py py-class docutils literal notranslate"><span class="pre">SimpleQueue</span></code></a> 对象提供下列描述的公共方法。</p>
<dl class="py method">
<dt class="sig sig-object py" id="queue.SimpleQueue.qsize">
<span class="sig-prename descclassname"><span class="pre">SimpleQueue.</span></span><span class="sig-name descname"><span class="pre">qsize</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>返回队列的大致大小。注意，qsize() &gt; 0 不保证后续的 get() 不被阻塞。</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="queue.SimpleQueue.empty">
<span class="sig-prename descclassname"><span class="pre">SimpleQueue.</span></span><span class="sig-name descname"><span class="pre">empty</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>如果队列为空则返回 <code class="docutils literal notranslate"><span class="pre">True</span></code>，否则返回 <code class="docutils literal notranslate"><span class="pre">False</span></code>。 如果 empty() 返回 <code class="docutils literal notranslate"><span class="pre">False</span></code> 则不保证后续对 get() 的调用将不会阻塞。</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="queue.SimpleQueue.put">
<span class="sig-prename descclassname"><span class="pre">SimpleQueue.</span></span><span class="sig-name descname"><span class="pre">put</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">item</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">block</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">True</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">timeout</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>将 <em>item</em> 放入队列。此方法永不阻塞，始终成功（除了潜在的低级错误，例如内存分配失败）。可选参数 <em>block</em> 和 <em>timeout</em> 仅仅是为了保持 <a class="reference internal" href="#queue.Queue.put" title="queue.Queue.put"><code class="xref py py-meth docutils literal notranslate"><span class="pre">Queue.put()</span></code></a> 的兼容性而提供，其值被忽略。</p>
<div class="impl-detail compound">
<p><strong>CPython 实现细节：</strong> 此方法具有一个可重入的 C 实现。 也就是说，一个 <code class="docutils literal notranslate"><span class="pre">put()</span></code> 或 <code class="docutils literal notranslate"><span class="pre">get()</span></code> 调用可以被同一线程中的另一个 <code class="docutils literal notranslate"><span class="pre">put()</span></code> 调用打断而不会发生死锁或破坏队列内部的状态。 这使得它适用于析构器如 <code class="docutils literal notranslate"><span class="pre">__del__</span></code> 方法或 <a class="reference internal" href="weakref.xhtml#module-weakref" title="weakref: Support for weak references and weak dictionaries."><code class="xref py py-mod docutils literal notranslate"><span class="pre">weakref</span></code></a> 回调。</p>
</div>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="queue.SimpleQueue.put_nowait">
<span class="sig-prename descclassname"><span class="pre">SimpleQueue.</span></span><span class="sig-name descname"><span class="pre">put_nowait</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">item</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>相当于 <code class="docutils literal notranslate"><span class="pre">put(item,</span> <span class="pre">block=False)</span></code>，为保持与 <a class="reference internal" href="#queue.Queue.put_nowait" title="queue.Queue.put_nowait"><code class="xref py py-meth docutils literal notranslate"><span class="pre">Queue.put_nowait()</span></code></a> 的兼容性而提供。</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="queue.SimpleQueue.get">
<span class="sig-prename descclassname"><span class="pre">SimpleQueue.</span></span><span class="sig-name descname"><span class="pre">get</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">block</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">True</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">timeout</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>从队列中移除并返回一个项目。如果可选参数 <em>block</em> 是 true 并且 <em>timeout</em> 是 <code class="docutils literal notranslate"><span class="pre">None</span></code> (默认值)，则在必要时阻塞至项目可得到。如果 <em>timeout</em> 是个正数，将最多阻塞 <em>timeout</em> 秒，如果在这段时间内项目不能得到，将引发 <a class="reference internal" href="#queue.Empty" title="queue.Empty"><code class="xref py py-exc docutils literal notranslate"><span class="pre">Empty</span></code></a> 异常。反之 (<em>block</em> 是 false) , 如果一个项目立即可得到，则返回一个项目，否则引发 <a class="reference internal" href="#queue.Empty" title="queue.Empty"><code class="xref py py-exc docutils literal notranslate"><span class="pre">Empty</span></code></a> 异常 (这种情况下，<em>timeout</em> 将被忽略)。</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="queue.SimpleQueue.get_nowait">
<span class="sig-prename descclassname"><span class="pre">SimpleQueue.</span></span><span class="sig-name descname"><span class="pre">get_nowait</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>相当于 <code class="docutils literal notranslate"><span class="pre">get(False)</span></code> 。</p>
</dd></dl>

<div class="admonition seealso">
<p class="admonition-title">参见</p>
<dl class="simple">
<dt>类 <a class="reference internal" href="multiprocessing.xhtml#multiprocessing.Queue" title="multiprocessing.Queue"><code class="xref py py-class docutils literal notranslate"><span class="pre">multiprocessing.Queue</span></code></a></dt><dd><p>一个用于多进程上下文的队列类（而不是多线程）。</p>
</dd>
</dl>
<p><a class="reference internal" href="collections.xhtml#collections.deque" title="collections.deque"><code class="xref py py-class docutils literal notranslate"><span class="pre">collections.deque</span></code></a> 是无界队列的一个替代实现，具有快速的不需要锁并且支持索引的原子化 <a class="reference internal" href="collections.xhtml#collections.deque.append" title="collections.deque.append"><code class="xref py py-meth docutils literal notranslate"><span class="pre">append()</span></code></a> 和 <a class="reference internal" href="collections.xhtml#collections.deque.popleft" title="collections.deque.popleft"><code class="xref py py-meth docutils literal notranslate"><span class="pre">popleft()</span></code></a> 操作。</p>
</div>
</section>
</section>


            <div class="clearer"></div>
          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>