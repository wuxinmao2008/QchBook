<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" /><meta name="viewport" content="width=device-width, initial-scale=1" />
<meta property="og:title" content="runpy --- Locating and executing Python modules" />
<meta property="og:type" content="website" />
<meta property="og:url" content="https://docs.python.org/3/library/runpy.xhtml" />
<meta property="og:site_name" content="Python documentation" />
<meta property="og:description" content="源代码： Lib/runpy.py[https://github.com/python/cpython/tree/3.12/Lib/runpy.py] runpy 模块用于找到并运行 Python 的模块，而无需首先导入。主要用于实现-m 命令行开关，以允许用 Python 模块命名空间而不是文件系统来定位脚本。 请注意，这 并非 一个沙盒模块——所有代码都在当前进程中运行，所有副作用（如其..." />
<meta property="og:image" content="https://docs.python.org/3/_static/og-image.png" />
<meta property="og:image:alt" content="Python documentation" />
<meta name="description" content="源代码： Lib/runpy.py[https://github.com/python/cpython/tree/3.12/Lib/runpy.py] runpy 模块用于找到并运行 Python 的模块，而无需首先导入。主要用于实现-m 命令行开关，以允许用 Python 模块命名空间而不是文件系统来定位脚本。 请注意，这 并非 一个沙盒模块——所有代码都在当前进程中运行，所有副作用（如其..." />
<meta property="og:image:width" content="200" />
<meta property="og:image:height" content="200" />
<meta name="theme-color" content="#3776ab" />

    <title>runpy --- Locating and executing Python modules</title>
    <link rel="stylesheet" type="text/css" href="../_static/pygments.css" />
    <link rel="stylesheet" type="text/css" href="../_static/epub.css" />
    <link rel="canonical" href="https://docs.python.org/3/library/runpy.html" />
    
      
    

    
    <style>
      @media only screen {
        table.full-width-table {
            width: 100%;
        }
      }
    </style>
 

  </head><body>


    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <section id="module-runpy">
<span id="runpy-locating-and-executing-python-modules"></span><h1><code class="xref py py-mod docutils literal notranslate"><span class="pre">runpy</span></code> --- Locating and executing Python modules</h1>
<p><strong>源代码：</strong> <a class="reference external" href="https://github.com/python/cpython/tree/3.12/Lib/runpy.py">Lib/runpy.py</a><span class="link-target"> [https://github.com/python/cpython/tree/3.12/Lib/runpy.py]</span></p>
<hr class="docutils" />
<p><a class="reference internal" href="#module-runpy" title="runpy: Locate and run Python modules without importing them first."><code class="xref py py-mod docutils literal notranslate"><span class="pre">runpy</span></code></a> 模块用于找到并运行 Python 的模块，而无需首先导入。主要用于实现 <a class="reference internal" href="../using/cmdline.xhtml#cmdoption-m"><code class="xref std std-option docutils literal notranslate"><span class="pre">-m</span></code></a> 命令行开关，以允许用 Python 模块命名空间而不是文件系统来定位脚本。</p>
<p>请注意，这 <em>并非</em> 一个沙盒模块——所有代码都在当前进程中运行，所有副作用（如其他模块对导入操作进行了缓存）在函数返回后都会留存。</p>
<p>此外，在 <a class="reference internal" href="#module-runpy" title="runpy: Locate and run Python modules without importing them first."><code class="xref py py-mod docutils literal notranslate"><span class="pre">runpy</span></code></a> 函数返回后，任何由已执行代码定义的函数和类都不能保证正确工作。如果某使用场景不能接收此限制，那么选用 <a class="reference internal" href="importlib.xhtml#module-importlib" title="importlib: The implementation of the import machinery."><code class="xref py py-mod docutils literal notranslate"><span class="pre">importlib</span></code></a> 可能更合适些。</p>
<p><a class="reference internal" href="#module-runpy" title="runpy: Locate and run Python modules without importing them first."><code class="xref py py-mod docutils literal notranslate"><span class="pre">runpy</span></code></a> 模块提供两个函数：</p>
<dl class="py function">
<dt class="sig sig-object py" id="runpy.run_module">
<span class="sig-prename descclassname"><span class="pre">runpy.</span></span><span class="sig-name descname"><span class="pre">run_module</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">mod_name</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">init_globals</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">run_name</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">alter_sys</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em><span class="sig-paren">)</span></dt>
<dd><p id="index-0">Execute the code of the specified module and return the resulting module
globals dictionary. The module's code is first located using the standard
import mechanism (refer to <span class="target" id="index-1"></span><a class="pep reference external" href="https://peps.python.org/pep-0302/"><strong>PEP 302</strong></a><span class="link-target"> [https://peps.python.org/pep-0302/]</span> for details) and then executed in a
fresh module namespace.</p>
<p><em>mod_name</em> 参数应当是一个绝对模块名。 如果模块名指向一个包而非普通模块，则会导入这个包然后执行这个包中的 <a class="reference internal" href="__main__.xhtml#module-__main__" title="__main__: The environment where top-level code is run. Covers command-line interfaces, import-time behavior, and ``__name__ == '__main__'``."><code class="xref py py-mod docutils literal notranslate"><span class="pre">__main__</span></code></a> 子模块再返回模块全局字典。</p>
<p>The optional dictionary argument <em>init_globals</em> may be used to pre-populate
the module's globals dictionary before the code is executed. The supplied
dictionary will not be modified. If any of the special global variables
below are defined in the supplied dictionary, those definitions are
overridden by <a class="reference internal" href="#runpy.run_module" title="runpy.run_module"><code class="xref py py-func docutils literal notranslate"><span class="pre">run_module()</span></code></a>.</p>
<p>The special global variables <code class="docutils literal notranslate"><span class="pre">__name__</span></code>, <code class="docutils literal notranslate"><span class="pre">__spec__</span></code>, <code class="docutils literal notranslate"><span class="pre">__file__</span></code>,
<code class="docutils literal notranslate"><span class="pre">__cached__</span></code>, <code class="docutils literal notranslate"><span class="pre">__loader__</span></code> and <code class="docutils literal notranslate"><span class="pre">__package__</span></code> are set in the globals
dictionary before the module code is executed (Note that this is a
minimal set of variables - other variables may be set implicitly as an
interpreter implementation detail).</p>
<p>若可选参数 <code class="docutils literal notranslate"><span class="pre">__name__</span></code> 不为 <a class="reference internal" href="constants.xhtml#None" title="None"><code class="xref py py-const docutils literal notranslate"><span class="pre">None</span></code></a> 则设为 <em>run_name</em>，若此名称的模块是一个包则设为 <code class="docutils literal notranslate"><span class="pre">mod_name</span> <span class="pre">+</span> <span class="pre">'.__main__'</span></code>，否则设为 <em>mod_name</em> 参数。</p>
<p><code class="docutils literal notranslate"><span class="pre">__spec__</span></code> will be set appropriately for the <em>actually</em> imported
module (that is, <code class="docutils literal notranslate"><span class="pre">__spec__.name</span></code> will always be <em>mod_name</em> or
<code class="docutils literal notranslate"><span class="pre">mod_name</span> <span class="pre">+</span> <span class="pre">'.__main__</span></code>, never <em>run_name</em>).</p>
<p><code class="docutils literal notranslate"><span class="pre">__file__</span></code> 、<code class="docutils literal notranslate"><span class="pre">__cached__</span></code>、 <code class="docutils literal notranslate"><span class="pre">__loader__</span></code> 和 <code class="docutils literal notranslate"><span class="pre">__package__</span></code> 根据模块规格进行 <a class="reference internal" href="../reference/import.xhtml#import-mod-attrs"><span class="std std-ref">常规设置</span></a></p>
<p>如果给出了参数 <em>alter_sys</em> 并且值为 <a class="reference internal" href="constants.xhtml#True" title="True"><code class="xref py py-const docutils literal notranslate"><span class="pre">True</span></code></a>，那么 <code class="docutils literal notranslate"><span class="pre">sys.argv[0]</span></code> 将被更新为 <code class="docutils literal notranslate"><span class="pre">__file__</span></code> 的值，<code class="docutils literal notranslate"><span class="pre">sys.modules[__name__]</span></code> 将被更新为临时模块对象。在函数返回前， <code class="docutils literal notranslate"><span class="pre">sys.argv[0]</span></code> 和 <code class="docutils literal notranslate"><span class="pre">sys.modules[__name__]</span></code> 将会复原。</p>
<p>请注意对 <a class="reference internal" href="sys.xhtml#module-sys" title="sys: Access system-specific parameters and functions."><code class="xref py py-mod docutils literal notranslate"><span class="pre">sys</span></code></a> 的这种操作不是线程安全的。 其他线程可能会看到部分初始化的模块，以及更改后的参数列表。 建议当从线程中的代码调用此函数时不要使用 <code class="docutils literal notranslate"><span class="pre">sys</span></code> 模块。</p>
<div class="admonition seealso">
<p class="admonition-title">参见</p>
<p><a class="reference internal" href="../using/cmdline.xhtml#cmdoption-m"><code class="xref std std-option docutils literal notranslate"><span class="pre">-m</span></code></a> 选项由命令行提供相同功能。</p>
</div>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.1 版本发生变更: </span>增加了通过查找 <a class="reference internal" href="__main__.xhtml#module-__main__" title="__main__: The environment where top-level code is run. Covers command-line interfaces, import-time behavior, and ``__name__ == '__main__'``."><code class="xref py py-mod docutils literal notranslate"><span class="pre">__main__</span></code></a> 子模块来执行包的功能。</p>
</div>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.2 版本发生变更: </span>加入了 <code class="docutils literal notranslate"><span class="pre">__cached__</span></code> 全局变量（参见  <span class="target" id="index-15"></span><a class="pep reference external" href="https://peps.python.org/pep-3147/"><strong>PEP 3147</strong></a><span class="link-target"> [https://peps.python.org/pep-3147/]</span> ）。</p>
</div>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.4 版本发生变更: </span>充分利用 <span class="target" id="index-16"></span><a class="pep reference external" href="https://peps.python.org/pep-0451/"><strong>PEP 451</strong></a><span class="link-target"> [https://peps.python.org/pep-0451/]</span> 加入的模块规格功能。使得以这种方式运行的模块能够正确设置 <code class="docutils literal notranslate"><span class="pre">__cached__</span></code>，并确保真正的模块名称总是可以通过 <code class="docutils literal notranslate"><span class="pre">__spec__.name</span></code> 的形式访问。</p>
</div>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.12 版本发生变更: </span><code class="docutils literal notranslate"><span class="pre">__cached__</span></code>, <code class="docutils literal notranslate"><span class="pre">__loader__</span></code> 和 <code class="docutils literal notranslate"><span class="pre">__package__</span></code> 的设置已被弃用。 替代设置参见 <a class="reference internal" href="importlib.xhtml#importlib.machinery.ModuleSpec" title="importlib.machinery.ModuleSpec"><code class="xref py py-class docutils literal notranslate"><span class="pre">ModuleSpec</span></code></a>。</p>
</div>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="runpy.run_path">
<span class="sig-prename descclassname"><span class="pre">runpy.</span></span><span class="sig-name descname"><span class="pre">run_path</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">path_name</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">init_globals</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">run_name</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p id="index-4">Execute the code at the named filesystem location and return the resulting
module globals dictionary. As with a script name supplied to the CPython
command line, the supplied path may refer to a Python source file, a
compiled bytecode file or a valid <a class="reference internal" href="sys.xhtml#sys.path" title="sys.path"><code class="xref py py-data docutils literal notranslate"><span class="pre">sys.path</span></code></a> entry containing a
<a class="reference internal" href="__main__.xhtml#module-__main__" title="__main__: The environment where top-level code is run. Covers command-line interfaces, import-time behavior, and ``__name__ == '__main__'``."><code class="xref py py-mod docutils literal notranslate"><span class="pre">__main__</span></code></a> module
(e.g. a zipfile containing a top-level <code class="docutils literal notranslate"><span class="pre">__main__.py</span></code> file).</p>
<p>对于简单的脚本而言，只需在新的模块命名空间中执行指定的代码即可。 对于一个有效的 <a class="reference internal" href="sys.xhtml#sys.path" title="sys.path"><code class="xref py py-data docutils literal notranslate"><span class="pre">sys.path</span></code></a> 条目（通常是一个 zip 文件或目录），首先会将该条目添加到 <code class="docutils literal notranslate"><span class="pre">sys.path</span></code> 的开头。 然后函数会使用更新后的路径查找并执行 <a class="reference internal" href="__main__.xhtml#module-__main__" title="__main__: The environment where top-level code is run. Covers command-line interfaces, import-time behavior, and ``__name__ == '__main__'``."><code class="xref py py-mod docutils literal notranslate"><span class="pre">__main__</span></code></a> 模块。 请注意如果在指定的位置上没有 <code class="docutils literal notranslate"><span class="pre">__main__</span></code> 模块那么在发起调用位于 <code class="docutils literal notranslate"><span class="pre">sys.path</span></code> 中其他位置上的现有条目时也不会受到特殊保护。</p>
<p>The optional dictionary argument <em>init_globals</em> may be used to pre-populate
the module's globals dictionary before the code is executed. The supplied
dictionary will not be modified. If any of the special global variables
below are defined in the supplied dictionary, those definitions are
overridden by <a class="reference internal" href="#runpy.run_path" title="runpy.run_path"><code class="xref py py-func docutils literal notranslate"><span class="pre">run_path()</span></code></a>.</p>
<p>The special global variables <code class="docutils literal notranslate"><span class="pre">__name__</span></code>, <code class="docutils literal notranslate"><span class="pre">__spec__</span></code>, <code class="docutils literal notranslate"><span class="pre">__file__</span></code>,
<code class="docutils literal notranslate"><span class="pre">__cached__</span></code>, <code class="docutils literal notranslate"><span class="pre">__loader__</span></code> and <code class="docutils literal notranslate"><span class="pre">__package__</span></code> are set in the globals
dictionary before the module code is executed (Note that this is a
minimal set of variables - other variables may be set implicitly as an
interpreter implementation detail).</p>
<p>如果该可选参数不为 <a class="reference internal" href="constants.xhtml#None" title="None"><code class="xref py py-const docutils literal notranslate"><span class="pre">None</span></code></a>，则 <code class="docutils literal notranslate"><span class="pre">__name__</span></code> 被设为 <em>run_name</em>，否则为 <code class="docutils literal notranslate"><span class="pre">'&lt;run_path&gt;'</span></code>。</p>
<p>If the supplied path directly references a script file (whether as source
or as precompiled byte code), then <code class="docutils literal notranslate"><span class="pre">__file__</span></code> will be set to the
supplied path, and <code class="docutils literal notranslate"><span class="pre">__spec__</span></code>, <code class="docutils literal notranslate"><span class="pre">__cached__</span></code>, <code class="docutils literal notranslate"><span class="pre">__loader__</span></code> and
<code class="docutils literal notranslate"><span class="pre">__package__</span></code> will all be set to <a class="reference internal" href="constants.xhtml#None" title="None"><code class="xref py py-const docutils literal notranslate"><span class="pre">None</span></code></a>.</p>
<p>If the supplied path is a reference to a valid <a class="reference internal" href="sys.xhtml#sys.path" title="sys.path"><code class="xref py py-data docutils literal notranslate"><span class="pre">sys.path</span></code></a> entry, then
<code class="docutils literal notranslate"><span class="pre">__spec__</span></code> will be set appropriately for the imported <a class="reference internal" href="__main__.xhtml#module-__main__" title="__main__: The environment where top-level code is run. Covers command-line interfaces, import-time behavior, and ``__name__ == '__main__'``."><code class="xref py py-mod docutils literal notranslate"><span class="pre">__main__</span></code></a>
module (that is, <code class="docutils literal notranslate"><span class="pre">__spec__.name</span></code> will always be <code class="docutils literal notranslate"><span class="pre">__main__</span></code>).
<code class="docutils literal notranslate"><span class="pre">__file__</span></code>, <code class="docutils literal notranslate"><span class="pre">__cached__</span></code>, <code class="docutils literal notranslate"><span class="pre">__loader__</span></code> and <code class="docutils literal notranslate"><span class="pre">__package__</span></code> will be
<a class="reference internal" href="../reference/import.xhtml#import-mod-attrs"><span class="std std-ref">set as normal</span></a> based on the module spec.</p>
<p>A number of alterations are also made to the <a class="reference internal" href="sys.xhtml#module-sys" title="sys: Access system-specific parameters and functions."><code class="xref py py-mod docutils literal notranslate"><span class="pre">sys</span></code></a> module. Firstly,
<a class="reference internal" href="sys.xhtml#sys.path" title="sys.path"><code class="xref py py-data docutils literal notranslate"><span class="pre">sys.path</span></code></a> may be altered as described above. <code class="docutils literal notranslate"><span class="pre">sys.argv[0]</span></code> is updated
with the value of <code class="docutils literal notranslate"><span class="pre">path_name</span></code> and <code class="docutils literal notranslate"><span class="pre">sys.modules[__name__]</span></code> is updated
with a temporary module object for the module being executed. All
modifications to items in <a class="reference internal" href="sys.xhtml#module-sys" title="sys: Access system-specific parameters and functions."><code class="xref py py-mod docutils literal notranslate"><span class="pre">sys</span></code></a> are reverted before the function
returns.</p>
<p>请注意，与 <a class="reference internal" href="#runpy.run_module" title="runpy.run_module"><code class="xref py py-func docutils literal notranslate"><span class="pre">run_module()</span></code></a> 不同，对 <a class="reference internal" href="sys.xhtml#module-sys" title="sys: Access system-specific parameters and functions."><code class="xref py py-mod docutils literal notranslate"><span class="pre">sys</span></code></a> 的修改在本函数中不是可选项，因为这些调整对于允许执行 <a class="reference internal" href="sys.xhtml#sys.path" title="sys.path"><code class="xref py py-data docutils literal notranslate"><span class="pre">sys.path</span></code></a> 条目来说是至关重要的。 由于线程安全限制仍然适用，在线程代码中使用该函数应当使用导入锁进行序列化，或是委托给单独的进程。</p>
<div class="admonition seealso">
<p class="admonition-title">参见</p>
<p><a class="reference internal" href="../using/cmdline.xhtml#using-on-interface-options"><span class="std std-ref">接口选项</span></a> 用于在命令行上实现同等功能（<code class="docutils literal notranslate"><span class="pre">python</span> <span class="pre">path/to/script</span></code>）。</p>
</div>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.2.</span></p>
</div>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.4 版本发生变更: </span>进行更新以便利用 <span class="target" id="index-17"></span><a class="pep reference external" href="https://peps.python.org/pep-0451/"><strong>PEP 451</strong></a><span class="link-target"> [https://peps.python.org/pep-0451/]</span> 加入的模块规格特性。 这允许在 <code class="docutils literal notranslate"><span class="pre">__main__</span></code> 是从有效的 <a class="reference internal" href="sys.xhtml#sys.path" title="sys.path"><code class="xref py py-data docutils literal notranslate"><span class="pre">sys.path</span></code></a> 条目导入而不是直接执行的情况下能够正确地设置 <code class="docutils literal notranslate"><span class="pre">__cached__</span></code>。</p>
</div>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.12 版本发生变更: </span><code class="docutils literal notranslate"><span class="pre">__cached__</span></code>, <code class="docutils literal notranslate"><span class="pre">__loader__</span></code> 和 <code class="docutils literal notranslate"><span class="pre">__package__</span></code> 已被弃用。</p>
</div>
</dd></dl>

<div class="admonition seealso">
<p class="admonition-title">参见</p>
<dl class="simple">
<dt><span class="target" id="index-18"></span><a class="pep reference external" href="https://peps.python.org/pep-0338/"><strong>PEP 338</strong></a><span class="link-target"> [https://peps.python.org/pep-0338/]</span> -- 将模块作为脚本执行</dt><dd><p>PEP 由 Nick Coghlan 撰写并实现。</p>
</dd>
<dt><span class="target" id="index-19"></span><a class="pep reference external" href="https://peps.python.org/pep-0366/"><strong>PEP 366</strong></a><span class="link-target"> [https://peps.python.org/pep-0366/]</span> ——主模块的显式相对导入</dt><dd><p>PEP 由 Nick Coghlan 撰写并实现。</p>
</dd>
<dt><span class="target" id="index-20"></span><a class="pep reference external" href="https://peps.python.org/pep-0451/"><strong>PEP 451</strong></a><span class="link-target"> [https://peps.python.org/pep-0451/]</span> —— 导入系统采用的 ModuleSpec 类型</dt><dd><p>PEP 由  Eric Snow 撰写并实现。</p>
</dd>
</dl>
<p><a class="reference internal" href="../using/cmdline.xhtml#using-on-general"><span class="std std-ref">命令行与环境</span></a> —— CPython 命令行详解</p>
<p><a class="reference internal" href="importlib.xhtml#importlib.import_module" title="importlib.import_module"><code class="xref py py-func docutils literal notranslate"><span class="pre">importlib.import_module()</span></code></a> 函数</p>
</div>
</section>


            <div class="clearer"></div>
          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>