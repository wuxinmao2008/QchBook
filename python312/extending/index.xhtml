<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" /><meta name="viewport" content="width=device-width, initial-scale=1" />
<meta property="og:title" content="扩展和嵌入 Python 解释器" />
<meta property="og:type" content="website" />
<meta property="og:url" content="https://docs.python.org/3/extending/index.xhtml" />
<meta property="og:site_name" content="Python documentation" />
<meta property="og:description" content="本文档描述了如何使用 C 或 C++ 编写模块以使用新模块来扩展 Python 解释器的功能。 这些模块不仅可以定义新的函数，还可以定义新的对象类型及其方法。 该文档还描述了如何将 Python 解释器嵌入到另一个应用程序中，以用作扩展语言。 最后，它展示了如何编译和链接扩展模块，以便它们可以动态地（在运行时）加载到解释器中，如果底层操作系统支持此特性的话。 本文档假设你具备有关 Pytho..." />
<meta property="og:image" content="https://docs.python.org/3/_static/og-image.png" />
<meta property="og:image:alt" content="Python documentation" />
<meta name="description" content="本文档描述了如何使用 C 或 C++ 编写模块以使用新模块来扩展 Python 解释器的功能。 这些模块不仅可以定义新的函数，还可以定义新的对象类型及其方法。 该文档还描述了如何将 Python 解释器嵌入到另一个应用程序中，以用作扩展语言。 最后，它展示了如何编译和链接扩展模块，以便它们可以动态地（在运行时）加载到解释器中，如果底层操作系统支持此特性的话。 本文档假设你具备有关 Pytho..." />
<meta property="og:image:width" content="200" />
<meta property="og:image:height" content="200" />
<meta name="theme-color" content="#3776ab" />

    <title>扩展和嵌入 Python 解释器</title>
    <link rel="stylesheet" type="text/css" href="../_static/pygments.css" />
    <link rel="stylesheet" type="text/css" href="../_static/epub.css" />
    <link rel="canonical" href="https://docs.python.org/3/extending/index.html" />
    
      
    

    
    <style>
      @media only screen {
        table.full-width-table {
            width: 100%;
        }
      }
    </style>
 

  </head><body>


    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <section id="extending-and-embedding-the-python-interpreter">
<span id="extending-index"></span><h1>扩展和嵌入 Python 解释器</h1>
<p>本文档描述了如何使用 C 或 C++ 编写模块以使用新模块来扩展 Python 解释器的功能。 这些模块不仅可以定义新的函数，还可以定义新的对象类型及其方法。 该文档还描述了如何将 Python 解释器嵌入到另一个应用程序中，以用作扩展语言。 最后，它展示了如何编译和链接扩展模块，以便它们可以动态地（在运行时）加载到解释器中，如果底层操作系统支持此特性的话。</p>
<p>本文档假设你具备有关 Python 的基本知识。有关该语言的非正式介绍，请参阅 <a class="reference internal" href="../tutorial/index.xhtml#tutorial-index"><span class="std std-ref">Python 教程</span></a> 。 <a class="reference internal" href="../reference/index.xhtml#reference-index"><span class="std std-ref">Python 语言参考手册</span></a> 给出了更正式的语言定义。 <a class="reference internal" href="../library/index.xhtml#library-index"><span class="std std-ref">Python 标准库</span></a> 包含现有的对象类型、函数和模块（内置和用 Python 编写）的文档，使语言具有广泛的应用范围。</p>
<p>关于整个 Python/C API 的详细介绍，请参阅独立的 <a class="reference internal" href="../c-api/index.xhtml#c-api-index"><span class="std std-ref">Python/C API 参考手册</span></a> 。</p>
<section id="recommended-third-party-tools">
<h2>推荐的第三方工具</h2>
<p>本指南仅介绍了作为此 CPython 版本的一部分提供的创建扩展的基本工具。 第三方工具如 <a class="reference external" href="https://cython.org/">Cython</a><span class="link-target"> [https://cython.org/]</span>, <a class="reference external" href="https://cffi.readthedocs.io">cffi</a><span class="link-target"> [https://cffi.readthedocs.io]</span>, <a class="reference external" href="https://www.swig.org">SWIG</a><span class="link-target"> [https://www.swig.org]</span> 和 <a class="reference external" href="https://numba.pydata.org/">Numba</a><span class="link-target"> [https://numba.pydata.org/]</span> 提供了更简单或更复杂的方式来为 Python 创建 C 和 C++ 扩展。</p>
<div class="admonition seealso">
<p class="admonition-title">参见</p>
<dl class="simple">
<dt><a class="reference external" href="https://packaging.python.org/guides/packaging-binary-extensions/">Python Packaging User Guide: Binary Extensions</a><span class="link-target"> [https://packaging.python.org/guides/packaging-binary-extensions/]</span></dt><dd><p>“ Python Packaging User Guide ”不仅涵盖了几个简化二进制扩展创建的可用工具，还讨论了为什么首先创建扩展模块的各种原因。</p>
</dd>
</dl>
</div>
</section>
<section id="creating-extensions-without-third-party-tools">
<h2>不使用第三方工具创建扩展</h2>
<p>本指南的这一部分包括在没有第三方工具帮助的情况下创建 C 和 C ++ 扩展。它主要用于这些工具的创建者，而不是建议你创建自己的 C 扩展的方法。</p>
<div class="toctree-wrapper compound">
<ul>
<li class="toctree-l1"><a class="reference internal" href="extending.xhtml">1. 使用 C 或 C++ 扩展 Python</a><ul>
<li class="toctree-l2"><a class="reference internal" href="extending.xhtml#a-simple-example">1.1. 一个简单的例子</a></li>
<li class="toctree-l2"><a class="reference internal" href="extending.xhtml#intermezzo-errors-and-exceptions">1.2. 关于错误和异常</a></li>
<li class="toctree-l2"><a class="reference internal" href="extending.xhtml#back-to-the-example">1.3. 回到例子</a></li>
<li class="toctree-l2"><a class="reference internal" href="extending.xhtml#the-module-s-method-table-and-initialization-function">1.4. 模块方法表和初始化函数</a></li>
<li class="toctree-l2"><a class="reference internal" href="extending.xhtml#compilation-and-linkage">1.5. 编译和链接</a></li>
<li class="toctree-l2"><a class="reference internal" href="extending.xhtml#calling-python-functions-from-c">1.6. 在C中调用Python函数</a></li>
<li class="toctree-l2"><a class="reference internal" href="extending.xhtml#extracting-parameters-in-extension-functions">1.7. 提取扩展函数的参数</a></li>
<li class="toctree-l2"><a class="reference internal" href="extending.xhtml#keyword-parameters-for-extension-functions">1.8. 给扩展函数的关键字参数</a></li>
<li class="toctree-l2"><a class="reference internal" href="extending.xhtml#building-arbitrary-values">1.9. 构造任意值</a></li>
<li class="toctree-l2"><a class="reference internal" href="extending.xhtml#reference-counts">1.10. 引用计数</a></li>
<li class="toctree-l2"><a class="reference internal" href="extending.xhtml#writing-extensions-in-c">1.11. 在C++中编写扩展</a></li>
<li class="toctree-l2"><a class="reference internal" href="extending.xhtml#providing-a-c-api-for-an-extension-module">1.12. 给扩展模块提供C API</a></li>
</ul>
</li>
<li class="toctree-l1"><a class="reference internal" href="newtypes_tutorial.xhtml">2. 自定义扩展类型：教程</a><ul>
<li class="toctree-l2"><a class="reference internal" href="newtypes_tutorial.xhtml#the-basics">2.1. 基础</a></li>
<li class="toctree-l2"><a class="reference internal" href="newtypes_tutorial.xhtml#adding-data-and-methods-to-the-basic-example">2.2. 向基本示例添加数据和方法</a></li>
<li class="toctree-l2"><a class="reference internal" href="newtypes_tutorial.xhtml#providing-finer-control-over-data-attributes">2.3. 提供对于数据属性的更精细控制</a></li>
<li class="toctree-l2"><a class="reference internal" href="newtypes_tutorial.xhtml#supporting-cyclic-garbage-collection">2.4. 支持循环垃圾回收</a></li>
<li class="toctree-l2"><a class="reference internal" href="newtypes_tutorial.xhtml#subclassing-other-types">2.5. 子类化其他类型</a></li>
</ul>
</li>
<li class="toctree-l1"><a class="reference internal" href="newtypes.xhtml">3. 定义扩展类型：已分类主题</a><ul>
<li class="toctree-l2"><a class="reference internal" href="newtypes.xhtml#finalization-and-de-allocation">3.1. 终结和内存释放</a></li>
<li class="toctree-l2"><a class="reference internal" href="newtypes.xhtml#object-presentation">3.2. 对象展示</a></li>
<li class="toctree-l2"><a class="reference internal" href="newtypes.xhtml#attribute-management">3.3. 属性管理</a></li>
<li class="toctree-l2"><a class="reference internal" href="newtypes.xhtml#object-comparison">3.4. 对象比较</a></li>
<li class="toctree-l2"><a class="reference internal" href="newtypes.xhtml#abstract-protocol-support">3.5. 抽象协议支持</a></li>
<li class="toctree-l2"><a class="reference internal" href="newtypes.xhtml#weak-reference-support">3.6. 弱引用支持</a></li>
<li class="toctree-l2"><a class="reference internal" href="newtypes.xhtml#more-suggestions">3.7. 更多建议</a></li>
</ul>
</li>
<li class="toctree-l1"><a class="reference internal" href="building.xhtml">4. 构建C/C++扩展</a><ul>
<li class="toctree-l2"><a class="reference internal" href="building.xhtml#building-c-and-c-extensions-with-setuptools">4.1. 使用 setuptools 构建 C 和 C++ 扩展</a></li>
</ul>
</li>
<li class="toctree-l1"><a class="reference internal" href="windows.xhtml">5. 在 Windows 上构建 C 和 C++ 扩展</a><ul>
<li class="toctree-l2"><a class="reference internal" href="windows.xhtml#a-cookbook-approach">5.1. 菜谱式说明</a></li>
<li class="toctree-l2"><a class="reference internal" href="windows.xhtml#differences-between-unix-and-windows">5.2. Unix 和 Windows 之间的差异</a></li>
<li class="toctree-l2"><a class="reference internal" href="windows.xhtml#using-dlls-in-practice">5.3. DLL 的实际使用</a></li>
</ul>
</li>
</ul>
</div>
</section>
<section id="embedding-the-cpython-runtime-in-a-larger-application">
<h2>在更大的应用程序中嵌入 CPython 运行时</h2>
<p>有时，不是要创建在 Python 解释器中作为主应用程序运行的扩展，而是希望将 CPython 运行时嵌入到更大的应用程序中。 本节介绍了成功完成此操作所涉及的一些细节。</p>
<div class="toctree-wrapper compound">
<ul>
<li class="toctree-l1"><a class="reference internal" href="embedding.xhtml">1. 在其它应用程序嵌入 Python</a><ul>
<li class="toctree-l2"><a class="reference internal" href="embedding.xhtml#very-high-level-embedding">1.1. 高层次的嵌入</a></li>
<li class="toctree-l2"><a class="reference internal" href="embedding.xhtml#beyond-very-high-level-embedding-an-overview">1.2. 突破高层次嵌入的限制：概述</a></li>
<li class="toctree-l2"><a class="reference internal" href="embedding.xhtml#pure-embedding">1.3. 只做嵌入</a></li>
<li class="toctree-l2"><a class="reference internal" href="embedding.xhtml#extending-embedded-python">1.4. 对嵌入 Python 功能进行扩展</a></li>
<li class="toctree-l2"><a class="reference internal" href="embedding.xhtml#embedding-python-in-c">1.5. 在 C++ 中嵌入 Python</a></li>
<li class="toctree-l2"><a class="reference internal" href="embedding.xhtml#compiling-and-linking-under-unix-like-systems">1.6. 在类 Unix 系统中编译和链接</a></li>
</ul>
</li>
</ul>
</div>
</section>
</section>


            <div class="clearer"></div>
          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>