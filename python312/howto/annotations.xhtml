<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" /><meta name="viewport" content="width=device-width, initial-scale=1" />
<meta property="og:title" content="注解最佳实践" />
<meta property="og:type" content="website" />
<meta property="og:url" content="https://docs.python.org/3/howto/annotations.xhtml" />
<meta property="og:site_name" content="Python documentation" />
<meta property="og:description" content="作者, Larry Hastings,. 摘要: 本文档旨在概括与注解字典打交道的最佳实践。查看 Python 对象的__annotations__ 的代码应遵循下面的准则。 本文档按四部分组织：在 3.10 及更高版本的 Python 中查看对象注解的最佳实践、在 3.9 及更低版本的 Python 中查看对象注解的最佳实践、其它一些适于任何版本的 Python 的__annotation..." />
<meta property="og:image" content="https://docs.python.org/3/_static/og-image.png" />
<meta property="og:image:alt" content="Python documentation" />
<meta name="description" content="作者, Larry Hastings,. 摘要: 本文档旨在概括与注解字典打交道的最佳实践。查看 Python 对象的__annotations__ 的代码应遵循下面的准则。 本文档按四部分组织：在 3.10 及更高版本的 Python 中查看对象注解的最佳实践、在 3.9 及更低版本的 Python 中查看对象注解的最佳实践、其它一些适于任何版本的 Python 的__annotation..." />
<meta property="og:image:width" content="200" />
<meta property="og:image:height" content="200" />
<meta name="theme-color" content="#3776ab" />

    <title>注解最佳实践</title>
    <link rel="stylesheet" type="text/css" href="../_static/pygments.css" />
    <link rel="stylesheet" type="text/css" href="../_static/epub.css" />
    <link rel="canonical" href="https://docs.python.org/3/howto/annotations.html" />
    
      
    

    
    <style>
      @media only screen {
        table.full-width-table {
            width: 100%;
        }
      }
    </style>
 

  </head><body>


    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <section id="annotations-best-practices">
<span id="annotations-howto"></span><h1>注解最佳实践</h1>
<dl class="field-list simple">
<dt class="field-odd">作者<span class="colon">:</span></dt>
<dd class="field-odd"><p>Larry Hastings</p>
</dd>
</dl>
<aside class="topic">
<p class="topic-title">摘要</p>
<p>本文档旨在概括与注解字典打交道的最佳实践。查看 Python 对象的 <code class="docutils literal notranslate"><span class="pre">__annotations__</span></code> 的代码应遵循下面的准则。</p>
<p>本文档按四部分组织：在 3.10 及更高版本的 Python 中查看对象注解的最佳实践、在 3.9 及更低版本的 Python 中查看对象注解的最佳实践、其它一些适于任何版本的 Python 的 <code class="docutils literal notranslate"><span class="pre">__annotations__</span></code> 的最佳实践、<code class="docutils literal notranslate"><span class="pre">__annotations__</span></code> 的一些“坑”。</p>
<p>本文是 <code class="docutils literal notranslate"><span class="pre">__annotations__</span></code> 的文档，不是注解的用法。如果在寻找如何使用“类型提示”，请参阅 <a class="reference internal" href="../library/typing.xhtml#module-typing" title="typing: Support for type hints (see :pep:`484`)."><code class="xref py py-mod docutils literal notranslate"><span class="pre">typing</span></code></a> 模块。</p>
</aside>
<section id="accessing-the-annotations-dict-of-an-object-in-python-3-10-and-newer">
<h2>在 3.10 及更高版本的 Python 中访问对象的注解字典</h2>
<p>Python 3.10 在标准库中加入了一个新函数：<a class="reference internal" href="../library/inspect.xhtml#inspect.get_annotations" title="inspect.get_annotations"><code class="xref py py-func docutils literal notranslate"><span class="pre">inspect.get_annotations()</span></code></a>。在 3.10 及更高版本的 Python 中，调用该函数就是访问任何支持注解的对象的注解字典的最佳实践。该函数还可以为你“解析”字符串化了的注解。</p>
<p>不用 <a class="reference internal" href="../library/inspect.xhtml#inspect.get_annotations" title="inspect.get_annotations"><code class="xref py py-func docutils literal notranslate"><span class="pre">inspect.get_annotations()</span></code></a> 也可以手动访问``__annotations__``  这一数据成员。该方法的最佳实践在 Python 3.10 中也发生了变化：从 Python 3.10 开始，对于 Python 函数、类和模块，<code class="docutils literal notranslate"><span class="pre">o.__annotations__</span></code> <em>保证</em> 会正常工作。只要你确信所检查的对象是这三种之一，你便可以用 <code class="docutils literal notranslate"><span class="pre">o.__annotations__</span></code> 获取该对象的注解字典。</p>
<p>不过，其它类型的可调用对象可不一定定义了 <code class="docutils literal notranslate"><span class="pre">__annotations__</span></code> 属性，就比如说，<a class="reference internal" href="../library/functools.xhtml#functools.partial" title="functools.partial"><code class="xref py py-func docutils literal notranslate"><span class="pre">functools.partial()</span></code></a> 创建的可调用对象。当访问某个未知对象的 <code class="docutils literal notranslate"><span class="pre">__annotations__</span></code> 时，3.10 及更高版本的 Python 中的最佳实践是用三个参数去调用 <a class="reference internal" href="../library/functions.xhtml#getattr" title="getattr"><code class="xref py py-func docutils literal notranslate"><span class="pre">getattr()</span></code></a>，像 <code class="docutils literal notranslate"><span class="pre">getattr(o,</span> <span class="pre">'__annotations__',</span> <span class="pre">None)</span></code> 这样。</p>
<p>Python 3.10 之前，在一个没定义注解而其父类定义了注解的类上访问 <code class="docutils literal notranslate"><span class="pre">__annotations__</span></code> 将返回父类的 <code class="docutils literal notranslate"><span class="pre">__annotations__</span></code>。在 3.10 及更高版本的 Python 中，这样的子类的注解是个空字典。</p>
</section>
<section id="accessing-the-annotations-dict-of-an-object-in-python-3-9-and-older">
<h2>在 3.9 及更低版本的 Python 中访问对象的注解字典</h2>
<p>在 3.9 及更低版本的 Python 中访问对象的注解字典要比新版复杂。这是低版本 Python 的设计缺陷，特别是类的注解。</p>
<p>访问其它对象——函数、其它可调用对象和模块——的注解字典的最佳实践与 3.10 版本相同，如果不用 <a class="reference internal" href="../library/inspect.xhtml#inspect.get_annotations" title="inspect.get_annotations"><code class="xref py py-func docutils literal notranslate"><span class="pre">inspect.get_annotations()</span></code></a>，就用三个参数去调用 <a class="reference internal" href="../library/functions.xhtml#getattr" title="getattr"><code class="xref py py-func docutils literal notranslate"><span class="pre">getattr()</span></code></a> 以访问对象的 <code class="docutils literal notranslate"><span class="pre">__annotations__</span></code> 属性。</p>
<p>不幸的是，对类而言，这并不是最佳实践。问题在于，由于 <code class="docutils literal notranslate"><span class="pre">__annotations__</span></code> 在某个类上是可有可无的，而类又可以从基类继承属性，所以访问某个类的 <code class="docutils literal notranslate"><span class="pre">__annotations__</span></code> 属性可能会无意间返回 <em>基类</em> 的注解字典。如：</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="k">class</span> <span class="nc">Base</span><span class="p">:</span>
    <span class="n">a</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">3</span>
    <span class="n">b</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="s1">&#39;abc&#39;</span>

<span class="k">class</span> <span class="nc">Derived</span><span class="p">(</span><span class="n">Base</span><span class="p">):</span>
    <span class="k">pass</span>

<span class="nb">print</span><span class="p">(</span><span class="n">Derived</span><span class="o">.</span><span class="vm">__annotations__</span><span class="p">)</span>
</pre></div>
</div>
<p>会打印出 <code class="docutils literal notranslate"><span class="pre">Base</span></code> 的注解字典，而非 <code class="docutils literal notranslate"><span class="pre">Derived</span></code> 的。</p>
<p>若待检查的对象是类（即 <code class="docutils literal notranslate"><span class="pre">isinstance(o,</span> <span class="pre">type)</span></code>），代码不得不另辟蹊径。这时的最佳实践依赖于 3.9 及更低版本的 Python 中的一处实现细节：若类定义了注解，则注解会被放入类的 <code class="docutils literal notranslate"><span class="pre">__dict__</span></code> 字典。类不一定有注解，故最佳实践是在类的字典上调用 <code class="docutils literal notranslate"><span class="pre">get</span></code> 方法。</p>
<p>综上所述，下面给出一些示例代码，可以在 Python 3.9 及之前版本安全地访问任意对象的 <code class="docutils literal notranslate"><span class="pre">__annotations__</span></code> 属性：</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">o</span><span class="p">,</span> <span class="nb">type</span><span class="p">):</span>
    <span class="n">ann</span> <span class="o">=</span> <span class="n">o</span><span class="o">.</span><span class="vm">__dict__</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;__annotations__&#39;</span><span class="p">,</span> <span class="kc">None</span><span class="p">)</span>
<span class="k">else</span><span class="p">:</span>
    <span class="n">ann</span> <span class="o">=</span> <span class="nb">getattr</span><span class="p">(</span><span class="n">o</span><span class="p">,</span> <span class="s1">&#39;__annotations__&#39;</span><span class="p">,</span> <span class="kc">None</span><span class="p">)</span>
</pre></div>
</div>
<p>运行之后，<code class="docutils literal notranslate"><span class="pre">ann</span></code> 应为一个字典对象或 <code class="docutils literal notranslate"><span class="pre">None</span></code>。建议在继续之前，先用 <a class="reference internal" href="../library/functions.xhtml#isinstance" title="isinstance"><code class="xref py py-func docutils literal notranslate"><span class="pre">isinstance()</span></code></a> 再次检查 <code class="docutils literal notranslate"><span class="pre">ann</span></code> 的类型。</p>
<p>请注意，有些特殊的或畸形的类型对象可能没有 <code class="docutils literal notranslate"><span class="pre">__dict__</span></code> 属性，为了以防万一，可能还需要用 <a class="reference internal" href="../library/functions.xhtml#getattr" title="getattr"><code class="xref py py-func docutils literal notranslate"><span class="pre">getattr()</span></code></a> 来访问 <code class="docutils literal notranslate"><span class="pre">__dict__</span></code>。</p>
</section>
<section id="manually-un-stringizing-stringized-annotations">
<h2>解析字符串形式的注解</h2>
<p>有时注释可能会被“字符串化”，解析这些字符串可以求得其所代表的 Python 值，最好是调用 <a class="reference internal" href="../library/inspect.xhtml#inspect.get_annotations" title="inspect.get_annotations"><code class="xref py py-func docutils literal notranslate"><span class="pre">inspect.get_annotations()</span></code></a> 来完成这项工作。</p>
<p>如果是 Python 3.9 及之前的版本，或者由于某种原因无法使用  <a class="reference internal" href="../library/inspect.xhtml#inspect.get_annotations" title="inspect.get_annotations"><code class="xref py py-func docutils literal notranslate"><span class="pre">inspect.get_annotations()</span></code></a> ，那就需要重现其代码逻辑。建议查看一下当前 Python 版本中 <a class="reference internal" href="../library/inspect.xhtml#inspect.get_annotations" title="inspect.get_annotations"><code class="xref py py-func docutils literal notranslate"><span class="pre">inspect.get_annotations()</span></code></a> 的实现代码，并遵照实现。</p>
<p>简而言之，假设要对任一对象解析其字符串化的注释 <code class="docutils literal notranslate"><span class="pre">o</span></code> ：</p>
<ul class="simple">
<li><p>如果 <code class="docutils literal notranslate"><span class="pre">o</span></code> 是个模块，在调用 <a class="reference internal" href="../library/functions.xhtml#eval" title="eval"><code class="xref py py-func docutils literal notranslate"><span class="pre">eval()</span></code></a> 时，<code class="docutils literal notranslate"><span class="pre">o.__dict__</span></code>  可视为 <code class="docutils literal notranslate"><span class="pre">globals</span></code> 。</p></li>
<li><p>如果 <code class="docutils literal notranslate"><span class="pre">o</span></code> 是一个类，在调用 <a class="reference internal" href="../library/functions.xhtml#eval" title="eval"><code class="xref py py-func docutils literal notranslate"><span class="pre">eval()</span></code></a> 时，<code class="docutils literal notranslate"><span class="pre">sys.modules[o.__module__].__dict__</span></code> 视作  <code class="docutils literal notranslate"><span class="pre">globals</span></code>，<code class="docutils literal notranslate"><span class="pre">dict(vars(o))</span></code> 视作 <code class="docutils literal notranslate"><span class="pre">locals</span></code> 。</p></li>
<li><p>如果 <code class="docutils literal notranslate"><span class="pre">o</span></code> 是一个用 <a class="reference internal" href="../library/functools.xhtml#functools.update_wrapper" title="functools.update_wrapper"><code class="xref py py-func docutils literal notranslate"><span class="pre">functools.update_wrapper()</span></code></a> 、 <a class="reference internal" href="../library/functools.xhtml#functools.wraps" title="functools.wraps"><code class="xref py py-func docutils literal notranslate"><span class="pre">functools.wraps()</span></code></a> 或 <a class="reference internal" href="../library/functools.xhtml#functools.partial" title="functools.partial"><code class="xref py py-func docutils literal notranslate"><span class="pre">functools.partial()</span></code></a> 封装的可调用对象，可酌情访问 <code class="docutils literal notranslate"><span class="pre">o.__wrapped__</span></code> 或 <code class="docutils literal notranslate"><span class="pre">o.func</span></code> 进行反复解包，直到你找到未经封装的根函数。</p></li>
<li><p>如果 <code class="docutils literal notranslate"><span class="pre">o</span></code> 为可调用对象（但不是类），则在调用 <a class="reference internal" href="../library/functions.xhtml#eval" title="eval"><code class="xref py py-func docutils literal notranslate"><span class="pre">eval()</span></code></a> 时可以使用 <a class="reference internal" href="../reference/datamodel.xhtml#function.__globals__" title="function.__globals__"><code class="xref py py-attr docutils literal notranslate"><span class="pre">o.__globals__</span></code></a> 作为 globals。</p></li>
</ul>
<p>但并不是所有注解字符串都可以通过 <a class="reference internal" href="../library/functions.xhtml#eval" title="eval"><code class="xref py py-func docutils literal notranslate"><span class="pre">eval()</span></code></a> 成功地转化为 Python 值。理论上，注解字符串中可以包含任何合法字符串，确实有一些类型提示的场合，需要用到特殊的 <em>无法</em> 被解析的字符串来作注解。比如：</p>
<ul class="simple">
<li><p>在 Python 支持 <span class="target" id="index-2"></span><a class="pep reference external" href="https://peps.python.org/pep-0604/"><strong>PEP 604</strong></a><span class="link-target"> [https://peps.python.org/pep-0604/]</span> 的联合类型 <code class="docutils literal notranslate"><span class="pre">|</span></code> (Python 3.10) 之前使用它。</p></li>
<li><p>运行时用不到的定义，只在 <a class="reference internal" href="../library/typing.xhtml#typing.TYPE_CHECKING" title="typing.TYPE_CHECKING"><code class="xref py py-const docutils literal notranslate"><span class="pre">typing.TYPE_CHECKING</span></code></a> 为 True 时才会导入。</p></li>
</ul>
<p>如果 <a class="reference internal" href="../library/functions.xhtml#eval" title="eval"><code class="xref py py-func docutils literal notranslate"><span class="pre">eval()</span></code></a> 试图求值，将会失败并触发异常。因此，当要设计一个可采用注解的库 API ，建议只在调用方显式请求的时才对字符串求值。</p>
</section>
<section id="best-practices-for-annotations-in-any-python-version">
<h2>任何版本 Python 中使用 <code class="docutils literal notranslate"><span class="pre">__annotations__</span></code> 的最佳实践</h2>
<ul class="simple">
<li><p>应避免直接给对象的 <code class="docutils literal notranslate"><span class="pre">__annotations__</span></code> 成员赋值。请让 Python 来管理 <code class="docutils literal notranslate"><span class="pre">__annotations__</span></code>。</p></li>
<li><p>如果直接给某对象的 <code class="docutils literal notranslate"><span class="pre">__annotations__</span></code> 成员赋值，应该确保设成一个 <code class="docutils literal notranslate"><span class="pre">dict</span></code> 对象。</p></li>
<li><p>如果直接访问某个对象的 <code class="docutils literal notranslate"><span class="pre">__annotations__</span></code> 成员，在解析其值之前，应先确认其为字典类型。</p></li>
<li><p>应避免修改 <code class="docutils literal notranslate"><span class="pre">__annotations__</span></code> 字典。</p></li>
<li><p>应避免删除对象的 <code class="docutils literal notranslate"><span class="pre">__annotations__</span></code> 属性。</p></li>
</ul>
</section>
<section id="annotations-quirks">
<h2><code class="docutils literal notranslate"><span class="pre">__annotations__</span></code> 的一些“坑”</h2>
<p>在 Python 3 的所有版本中，如果对象没有定义注解，函数对象就会直接创建一个注解字典对象。用 <code class="docutils literal notranslate"><span class="pre">del</span> <span class="pre">fn.__annotations__</span></code> 可删除 <code class="docutils literal notranslate"><span class="pre">__annotations__</span></code> 属性，但如果后续再访问 <code class="docutils literal notranslate"><span class="pre">fn.__annotations__</span></code>，该对象将新建一个空的字典对象，用于存放并返回注解。在函数直接创建注解字典前，删除注解操作会抛出 <code class="docutils literal notranslate"><span class="pre">AttributeError</span></code> 异常；连续两次调用 <code class="docutils literal notranslate"><span class="pre">del</span> <span class="pre">fn.__annotations__</span></code> 一定会抛出一次 <code class="docutils literal notranslate"><span class="pre">AttributeError</span></code> 异常。</p>
<p>以上同样适用于 Python 3.10 以上版本中的类和模块对象。</p>
<p>所有版本的 Python 3 中，均可将函数对象的 <code class="docutils literal notranslate"><span class="pre">__annotations__</span></code> 设为 <code class="docutils literal notranslate"><span class="pre">None</span></code>。但后续用 <code class="docutils literal notranslate"><span class="pre">fn.__annotations__</span></code> 访问该对象的注解时，会像本节第一段所述那样，直接创建一个空字典。但在任何 Python 版本中，模块和类均非如此，他们允许将 <code class="docutils literal notranslate"><span class="pre">__annotations__</span></code> 设为任意 Python 值，并且会留存所设值。</p>
<p>如果 Python 会对注解作字符串化处理（用 <code class="docutils literal notranslate"><span class="pre">from</span> <span class="pre">__future__</span> <span class="pre">import</span> <span class="pre">annotations</span></code> ），并且注解本身就是一个字符串，那么将会为其加上引号。实际效果就是，注解加了 <em>两次</em> 引号。例如：</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="kn">from</span> <span class="nn">__future__</span> <span class="kn">import</span> <span class="n">annotations</span>
<span class="k">def</span> <span class="nf">foo</span><span class="p">(</span><span class="n">a</span><span class="p">:</span> <span class="s2">&quot;str&quot;</span><span class="p">):</span> <span class="k">pass</span>

<span class="nb">print</span><span class="p">(</span><span class="n">foo</span><span class="o">.</span><span class="vm">__annotations__</span><span class="p">)</span>
</pre></div>
</div>
<p>这会打印出 <code class="docutils literal notranslate"><span class="pre">{'a':</span> <span class="pre">&quot;'str'&quot;}</span></code>。这不应算是个“坑”；只是因为可能会让人吃惊，所以才提一下。</p>
</section>
</section>


            <div class="clearer"></div>
          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>