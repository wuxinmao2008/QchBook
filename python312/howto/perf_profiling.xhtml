<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" /><meta name="viewport" content="width=device-width, initial-scale=1" />
<meta property="og:title" content="Python 对 Linux perf 性能分析器的支持" />
<meta property="og:type" content="website" />
<meta property="og:url" content="https://docs.python.org/3/howto/perf_profiling.xhtml" />
<meta property="og:site_name" content="Python documentation" />
<meta property="og:description" content="作者, Pablo Galindo,. Linux perf 性能分析器[https://perf.wiki.kernel.org] 是一个非常强大的工具，它允许你分析并获取有关你的应用程序运行性能的信息。 perf 还拥有一个非常活跃的工具生态系统可以帮助分析它所产生的数据。 将 perf 性能分析器与 Python 应用程序配合使用的主要问题在于 perf 只能获取原生符号的信息，即以 ..." />
<meta property="og:image" content="https://docs.python.org/3/_static/og-image.png" />
<meta property="og:image:alt" content="Python documentation" />
<meta name="description" content="作者, Pablo Galindo,. Linux perf 性能分析器[https://perf.wiki.kernel.org] 是一个非常强大的工具，它允许你分析并获取有关你的应用程序运行性能的信息。 perf 还拥有一个非常活跃的工具生态系统可以帮助分析它所产生的数据。 将 perf 性能分析器与 Python 应用程序配合使用的主要问题在于 perf 只能获取原生符号的信息，即以 ..." />
<meta property="og:image:width" content="200" />
<meta property="og:image:height" content="200" />
<meta name="theme-color" content="#3776ab" />

    <title>Python 对 Linux perf 性能分析器的支持</title>
    <link rel="stylesheet" type="text/css" href="../_static/pygments.css" />
    <link rel="stylesheet" type="text/css" href="../_static/epub.css" />
    <link rel="canonical" href="https://docs.python.org/3/howto/perf_profiling.html" />
    
      
    

    
    <style>
      @media only screen {
        table.full-width-table {
            width: 100%;
        }
      }
    </style>
 

  </head><body>


    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <section id="python-support-for-the-linux-perf-profiler">
<span id="perf-profiling"></span><h1>Python 对 Linux <code class="docutils literal notranslate"><span class="pre">perf</span></code> 性能分析器的支持</h1>
<dl class="field-list simple">
<dt class="field-odd">作者<span class="colon">:</span></dt>
<dd class="field-odd"><p>Pablo Galindo</p>
</dd>
</dl>
<p><a class="reference external" href="https://perf.wiki.kernel.org">Linux perf 性能分析器</a><span class="link-target"> [https://perf.wiki.kernel.org]</span> 是一个非常强大的工具，它允许你分析并获取有关你的应用程序运行性能的信息。 <code class="docutils literal notranslate"><span class="pre">perf</span></code> 还拥有一个非常活跃的工具生态系统可以帮助分析它所产生的数据。</p>
<p>将 <code class="docutils literal notranslate"><span class="pre">perf</span></code> 性能分析器与 Python 应用程序配合使用的主要问题在于 <code class="docutils literal notranslate"><span class="pre">perf</span></code> 只能获取原生符号的信息，即以 C 编写的函数和过程的名称。 这意味着在你的代码中的 Python 函数名称和文件名称将不会出现在 <code class="docutils literal notranslate"><span class="pre">perf</span></code> 输出中。</p>
<p>从 Python 3.12 开始，解释器可以运行于一个允许 <code class="docutils literal notranslate"><span class="pre">perf</span></code> 性能分析器的输出中显示 Python 函数的特殊模式下。 当启用此模式时，解释器将在每个 Python 函数执行之前插入一小段即时编译的代码，它将使用 <a class="reference internal" href="../c-api/perfmaps.xhtml"><span class="doc">perf 映射文件</span></a> 来告知 <code class="docutils literal notranslate"><span class="pre">perf</span></code> 这段代码与相关联的 Python 函数之间的关系。</p>
<div class="admonition note">
<p class="admonition-title">备注</p>
<p>对 <code class="docutils literal notranslate"><span class="pre">perf</span></code> 性能分析器的支持目前仅在特定架构的 Linux 上可用。 请检查 <code class="docutils literal notranslate"><span class="pre">configure</span></code> 构建步骤的输出或检查 <code class="docutils literal notranslate"><span class="pre">python</span> <span class="pre">-m</span> <span class="pre">sysconfig</span> <span class="pre">|</span> <span class="pre">grep</span> <span class="pre">HAVE_PERF_TRAMPOLINE</span></code> 的输出来确定你的系统是否受到支持。</p>
</div>
<p>例如，考虑以下脚本:</p>
<div class="highlight-python notranslate"><div class="highlight"><pre><span></span><span class="k">def</span> <span class="nf">foo</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
    <span class="n">result</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
        <span class="n">result</span> <span class="o">+=</span> <span class="mi">1</span>
    <span class="k">return</span> <span class="n">result</span>

<span class="k">def</span> <span class="nf">bar</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
    <span class="n">foo</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">baz</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
    <span class="n">bar</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>

<span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&quot;__main__&quot;</span><span class="p">:</span>
    <span class="n">baz</span><span class="p">(</span><span class="mi">1000000</span><span class="p">)</span>
</pre></div>
</div>
<p>我们可以运行 <code class="docutils literal notranslate"><span class="pre">perf</span></code>  以 9999 赫兹的频率来对 CPU 栈追踪信息进行采样:</p>
<div class="highlight-shell-session notranslate"><div class="highlight"><pre><span></span><span class="gp">$ </span>perf<span class="w"> </span>record<span class="w"> </span>-F<span class="w"> </span><span class="m">9999</span><span class="w"> </span>-g<span class="w"> </span>-o<span class="w"> </span>perf.data<span class="w"> </span>python<span class="w"> </span>my_script.py
</pre></div>
</div>
<p>然后我们可以使用 <code class="docutils literal notranslate"><span class="pre">perf</span> <span class="pre">report</span></code> 来分析数据:</p>
<div class="highlight-shell-session notranslate"><div class="highlight"><pre><span></span><span class="gp">$ </span>perf<span class="w"> </span>report<span class="w"> </span>--stdio<span class="w"> </span>-n<span class="w"> </span>-g

<span class="gp"># </span>Children<span class="w">      </span>Self<span class="w">       </span>Samples<span class="w">  </span>Command<span class="w">     </span>Shared<span class="w"> </span>Object<span class="w">       </span>Symbol
<span class="gp"># </span>........<span class="w">  </span>........<span class="w">  </span>............<span class="w">  </span>..........<span class="w">  </span>..................<span class="w">  </span>..........................................
<span class="gp">#</span>
<span class="go">    91.08%     0.00%             0  python.exe  python.exe          [.] _start</span>
<span class="go">            |</span>
<span class="go">            ---_start</span>
<span class="go">            |</span>
<span class="go">                --90.71%--__libc_start_main</span>
<span class="go">                        Py_BytesMain</span>
<span class="go">                        |</span>
<span class="go">                        |--56.88%--pymain_run_python.constprop.0</span>
<span class="go">                        |          |</span>
<span class="go">                        |          |--56.13%--_PyRun_AnyFileObject</span>
<span class="go">                        |          |          _PyRun_SimpleFileObject</span>
<span class="go">                        |          |          |</span>
<span class="go">                        |          |          |--55.02%--run_mod</span>
<span class="go">                        |          |          |          |</span>
<span class="go">                        |          |          |           --54.65%--PyEval_EvalCode</span>
<span class="go">                        |          |          |                     _PyEval_EvalFrameDefault</span>
<span class="go">                        |          |          |                     PyObject_Vectorcall</span>
<span class="go">                        |          |          |                     _PyEval_Vector</span>
<span class="go">                        |          |          |                     _PyEval_EvalFrameDefault</span>
<span class="go">                        |          |          |                     PyObject_Vectorcall</span>
<span class="go">                        |          |          |                     _PyEval_Vector</span>
<span class="go">                        |          |          |                     _PyEval_EvalFrameDefault</span>
<span class="go">                        |          |          |                     PyObject_Vectorcall</span>
<span class="go">                        |          |          |                     _PyEval_Vector</span>
<span class="go">                        |          |          |                     |</span>
<span class="go">                        |          |          |                     |--51.67%--_PyEval_EvalFrameDefault</span>
<span class="go">                        |          |          |                     |          |</span>
<span class="go">                        |          |          |                     |          |--11.52%--_PyLong_Add</span>
<span class="go">                        |          |          |                     |          |          |</span>
<span class="go">                        |          |          |                     |          |          |--2.97%--_PyObject_Malloc</span>
<span class="go">...</span>
</pre></div>
</div>
<p>如你所见，Python 函数不会显示在输出中，只有 <code class="docutils literal notranslate"><span class="pre">_PyEval_EvalFrameDefault</span></code> (评估 Python 字节码的函数) 会显示出来。 不幸的是那没有什么用处因为所有 Python 函数都使用相同的 C 函数来评估字节码所以我们无法知道哪个 Python 函数与哪个字节码评估函数相对应。</p>
<p>相反，如果我们在启用 <code class="docutils literal notranslate"><span class="pre">perf</span></code> 支持的情况下运行相同的实验代码我们将获得:</p>
<div class="highlight-shell-session notranslate"><div class="highlight"><pre><span></span><span class="gp">$ </span>perf<span class="w"> </span>report<span class="w"> </span>--stdio<span class="w"> </span>-n<span class="w"> </span>-g

<span class="gp"># </span>Children<span class="w">      </span>Self<span class="w">       </span>Samples<span class="w">  </span>Command<span class="w">     </span>Shared<span class="w"> </span>Object<span class="w">       </span>Symbol
<span class="gp"># </span>........<span class="w">  </span>........<span class="w">  </span>............<span class="w">  </span>..........<span class="w">  </span>..................<span class="w">  </span>.....................................................................
<span class="gp">#</span>
<span class="go">    90.58%     0.36%             1  python.exe  python.exe          [.] _start</span>
<span class="go">            |</span>
<span class="go">            ---_start</span>
<span class="go">            |</span>
<span class="go">                --89.86%--__libc_start_main</span>
<span class="go">                        Py_BytesMain</span>
<span class="go">                        |</span>
<span class="go">                        |--55.43%--pymain_run_python.constprop.0</span>
<span class="go">                        |          |</span>
<span class="go">                        |          |--54.71%--_PyRun_AnyFileObject</span>
<span class="go">                        |          |          _PyRun_SimpleFileObject</span>
<span class="go">                        |          |          |</span>
<span class="go">                        |          |          |--53.62%--run_mod</span>
<span class="go">                        |          |          |          |</span>
<span class="go">                        |          |          |           --53.26%--PyEval_EvalCode</span>
<span class="go">                        |          |          |                     py::&lt;module&gt;:/src/script.py</span>
<span class="go">                        |          |          |                     _PyEval_EvalFrameDefault</span>
<span class="go">                        |          |          |                     PyObject_Vectorcall</span>
<span class="go">                        |          |          |                     _PyEval_Vector</span>
<span class="go">                        |          |          |                     py::baz:/src/script.py</span>
<span class="go">                        |          |          |                     _PyEval_EvalFrameDefault</span>
<span class="go">                        |          |          |                     PyObject_Vectorcall</span>
<span class="go">                        |          |          |                     _PyEval_Vector</span>
<span class="go">                        |          |          |                     py::bar:/src/script.py</span>
<span class="go">                        |          |          |                     _PyEval_EvalFrameDefault</span>
<span class="go">                        |          |          |                     PyObject_Vectorcall</span>
<span class="go">                        |          |          |                     _PyEval_Vector</span>
<span class="go">                        |          |          |                     py::foo:/src/script.py</span>
<span class="go">                        |          |          |                     |</span>
<span class="go">                        |          |          |                     |--51.81%--_PyEval_EvalFrameDefault</span>
<span class="go">                        |          |          |                     |          |</span>
<span class="go">                        |          |          |                     |          |--13.77%--_PyLong_Add</span>
<span class="go">                        |          |          |                     |          |          |</span>
<span class="go">                        |          |          |                     |          |          |--3.26%--_PyObject_Malloc</span>
</pre></div>
</div>
<section id="how-to-enable-perf-profiling-support">
<h2>如何启用 <code class="docutils literal notranslate"><span class="pre">perf</span></code> 性能分析支持</h2>
<p>要启动 <code class="docutils literal notranslate"><span class="pre">perf</span></code> 性能分析支持可以通过使用环境变量 <span class="target" id="index-2"></span><a class="reference internal" href="../using/cmdline.xhtml#envvar-PYTHONPERFSUPPORT"><code class="xref std std-envvar docutils literal notranslate"><span class="pre">PYTHONPERFSUPPORT</span></code></a> 或 <a class="reference internal" href="../using/cmdline.xhtml#cmdoption-X"><code class="xref std std-option docutils literal notranslate"><span class="pre">-X</span> <span class="pre">perf</span></code></a> 选项，或者动态地使用 <a class="reference internal" href="../library/sys.xhtml#sys.activate_stack_trampoline" title="sys.activate_stack_trampoline"><code class="xref py py-func docutils literal notranslate"><span class="pre">sys.activate_stack_trampoline()</span></code></a> 和 <a class="reference internal" href="../library/sys.xhtml#sys.deactivate_stack_trampoline" title="sys.deactivate_stack_trampoline"><code class="xref py py-func docutils literal notranslate"><span class="pre">sys.deactivate_stack_trampoline()</span></code></a> 来运行。</p>
<p><code class="xref py py-mod docutils literal notranslate"><span class="pre">sys</span></code> 函数的优先级高于 <code class="xref std std-option docutils literal notranslate"><span class="pre">-X</span></code> 选项，<code class="xref std std-option docutils literal notranslate"><span class="pre">-X</span></code> 选项的优先级高于环境变量。</p>
<p>示例，使用环境变量:</p>
<div class="highlight-shell-session notranslate"><div class="highlight"><pre><span></span><span class="gp">$ </span><span class="nv">PYTHONPERFSUPPORT</span><span class="o">=</span><span class="m">1</span><span class="w"> </span>python<span class="w"> </span>script.py
<span class="gp">$ </span>perf<span class="w"> </span>report<span class="w"> </span>-g<span class="w"> </span>-i<span class="w"> </span>perf.data
</pre></div>
</div>
<p>示例，使用 <code class="xref std std-option docutils literal notranslate"><span class="pre">-X</span></code> 选项:</p>
<div class="highlight-shell-session notranslate"><div class="highlight"><pre><span></span><span class="gp">$ </span>python<span class="w"> </span>-X<span class="w"> </span>perf<span class="w"> </span>script.py
<span class="gp">$ </span>perf<span class="w"> </span>report<span class="w"> </span>-g<span class="w"> </span>-i<span class="w"> </span>perf.data
</pre></div>
</div>
<p>示例，在文件 <code class="file docutils literal notranslate"><span class="pre">example.py</span></code> 中使用 <a class="reference internal" href="../library/sys.xhtml#module-sys" title="sys: Access system-specific parameters and functions."><code class="xref py py-mod docutils literal notranslate"><span class="pre">sys</span></code></a> API:</p>
<div class="highlight-python notranslate"><div class="highlight"><pre><span></span><span class="kn">import</span> <span class="nn">sys</span>

<span class="n">sys</span><span class="o">.</span><span class="n">activate_stack_trampoline</span><span class="p">(</span><span class="s2">&quot;perf&quot;</span><span class="p">)</span>
<span class="n">do_profiled_stuff</span><span class="p">()</span>
<span class="n">sys</span><span class="o">.</span><span class="n">deactivate_stack_trampoline</span><span class="p">()</span>

<span class="n">non_profiled_stuff</span><span class="p">()</span>
</pre></div>
</div>
<p>...然后:</p>
<div class="highlight-shell-session notranslate"><div class="highlight"><pre><span></span><span class="gp">$ </span>python<span class="w"> </span>./example.py
<span class="gp">$ </span>perf<span class="w"> </span>report<span class="w"> </span>-g<span class="w"> </span>-i<span class="w"> </span>perf.data
</pre></div>
</div>
</section>
<section id="how-to-obtain-the-best-results">
<h2>如何获取最佳结果</h2>
<p>要获取最佳结果，Python 应当使用 <code class="docutils literal notranslate"><span class="pre">CFLAGS=&quot;-fno-omit-frame-pointer</span> <span class="pre">-mno-omit-leaf-frame-pointer&quot;</span></code> 来编译因为这将允许性能分析器仅使用帧指针而不是基于 DWARF 调试信息进行展开。 这是因为被插入以允许 <code class="docutils literal notranslate"><span class="pre">perf</span></code> 支持的代码是动态生成的所以它没有任何 DWARF 调试信息可用。</p>
<p>你可以通过运行以下代码来检查你的系统是否为附带此旗标来编译的:</p>
<div class="highlight-shell-session notranslate"><div class="highlight"><pre><span></span><span class="gp">$ </span>python<span class="w"> </span>-m<span class="w"> </span>sysconfig<span class="w"> </span><span class="p">|</span><span class="w"> </span>grep<span class="w"> </span><span class="s1">&#39;no-omit-frame-pointer&#39;</span>
</pre></div>
</div>
<p>如果你没有看到任何输出则意味着你的解释器没有附带帧指针来编译因而它将无法在 <code class="docutils literal notranslate"><span class="pre">perf</span></code> 的输出中显示 Python 函数。</p>
</section>
</section>


            <div class="clearer"></div>
          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>