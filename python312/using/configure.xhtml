<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" /><meta name="viewport" content="width=device-width, initial-scale=1" />
<meta property="og:title" content="3. 配置 Python" />
<meta property="og:type" content="website" />
<meta property="og:url" content="https://docs.python.org/3/using/configure.xhtml" />
<meta property="og:site_name" content="Python documentation" />
<meta property="og:description" content="构建要求: 编译 CPython 所需的特性: C11[https://en.cppreference.com/w/c/11] 编译器。 可选的 C11 特性[https://en.wikipedia.org/wiki/C11_(C_standard_revision)#Optional_features] 不是必须的。, 对 IEEE 754[https://en.wikipedia.or..." />
<meta property="og:image" content="https://docs.python.org/3/_static/og-image.png" />
<meta property="og:image:alt" content="Python documentation" />
<meta name="description" content="构建要求: 编译 CPython 所需的特性: C11[https://en.cppreference.com/w/c/11] 编译器。 可选的 C11 特性[https://en.wikipedia.org/wiki/C11_(C_standard_revision)#Optional_features] 不是必须的。, 对 IEEE 754[https://en.wikipedia.or..." />
<meta property="og:image:width" content="200" />
<meta property="og:image:height" content="200" />
<meta name="theme-color" content="#3776ab" />

    <title>3. 配置 Python</title>
    <link rel="stylesheet" type="text/css" href="../_static/pygments.css" />
    <link rel="stylesheet" type="text/css" href="../_static/epub.css" />
    <link rel="canonical" href="https://docs.python.org/3/using/configure.html" />
    
      
    

    
    <style>
      @media only screen {
        table.full-width-table {
            width: 100%;
        }
      }
    </style>
 

  </head><body>


    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <section id="configure-python">
<h1><span class="section-number">3. </span>配置 Python</h1>
<section id="build-requirements">
<h2><span class="section-number">3.1. </span>构建要求</h2>
<p>编译 CPython 所需的特性:</p>
<ul class="simple">
<li><p><a class="reference external" href="https://en.cppreference.com/w/c/11">C11</a><span class="link-target"> [https://en.cppreference.com/w/c/11]</span> 编译器。 <a class="reference external" href="https://en.wikipedia.org/wiki/C11_(C_standard_revision)#Optional_features">可选的 C11 特性</a><span class="link-target"> [https://en.wikipedia.org/wiki/C11_(C_standard_revision)#Optional_features]</span> 不是必须的。</p></li>
<li><p>对 <a class="reference external" href="https://en.wikipedia.org/wiki/IEEE_754">IEEE 754</a><span class="link-target"> [https://en.wikipedia.org/wiki/IEEE_754]</span> 浮点数和 <a class="reference external" href="https://en.wikipedia.org/wiki/NaN#Floating_point">浮点 Not-a-Number (NaN)</a><span class="link-target"> [https://en.wikipedia.org/wiki/NaN#Floating_point]</span> 的支持。</p></li>
<li><p>对线程的支持。</p></li>
<li><p>用于 <a class="reference internal" href="../library/ssl.xhtml#module-ssl" title="ssl: TLS/SSL wrapper for socket objects"><code class="xref py py-mod docutils literal notranslate"><span class="pre">ssl</span></code></a> 和 <a class="reference internal" href="../library/hashlib.xhtml#module-hashlib" title="hashlib: Secure hash and message digest algorithms."><code class="xref py py-mod docutils literal notranslate"><span class="pre">hashlib</span></code></a> 模块的 OpenSSL 1.1.1 或更新版本。</p></li>
<li><p>在 Windows 上，需要 Microsoft Visual Studio 2017 或更新版本。</p></li>
</ul>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.5 版本发生变更: </span>在 Windows 上，需要 Visual Studio 2015 或更新版本。</p>
</div>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.6 版本发生变更: </span>现在要求选定的 C99 特性，如 <code class="docutils literal notranslate"><span class="pre">&lt;stdint.h&gt;</span></code> 和 <code class="docutils literal notranslate"><span class="pre">static</span> <span class="pre">inline</span></code> 函数。</p>
</div>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.7 版本发生变更: </span>现在要求线程支持和 OpenSSL 1.0.2。</p>
</div>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.10 版本发生变更: </span>现在要求 OpenSSL 1.1.1。</p>
</div>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.11 版本发生变更: </span>C11 编译器，现在要求 IEEE 754 和 NaN 支持。 在 Windows 上，需要 Visual Studio 2017 或更新版本。</p>
</div>
<p>另请参阅 <span class="target" id="index-60"></span><a class="pep reference external" href="https://peps.python.org/pep-0007/"><strong>PEP 7</strong></a><span class="link-target"> [https://peps.python.org/pep-0007/]</span> &quot;Style Guide for C Code&quot; 和 <span class="target" id="index-61"></span><a class="pep reference external" href="https://peps.python.org/pep-0011/"><strong>PEP 11</strong></a><span class="link-target"> [https://peps.python.org/pep-0011/]</span> &quot;CPython platform support&quot;。</p>
</section>
<section id="generated-files">
<h2><span class="section-number">3.2. </span>已生成的文件</h2>
<p>为了减少构建依赖性，Python 源代码包含多个已生成的文件。 重新生成所有已生成文件的命令如下:</p>
<div class="highlight-sh notranslate"><div class="highlight"><pre><span></span>make<span class="w"> </span>regen-all
make<span class="w"> </span>regen-stdlib-module-names
make<span class="w"> </span>regen-limited-abi
make<span class="w"> </span>regen-configure
</pre></div>
</div>
<p><code class="docutils literal notranslate"><span class="pre">Makefile.pre.in</span></code> 文件记录了已生成的文件、它们的输入以及用于重新生成它们的工具。 搜索 <code class="docutils literal notranslate"><span class="pre">regen-*</span></code> make target。</p>
<section id="configure-script">
<h3><span class="section-number">3.2.1. </span>配置脚本</h3>
<p><code class="docutils literal notranslate"><span class="pre">make</span> <span class="pre">regen-configure</span></code> 命令将使用 <code class="docutils literal notranslate"><span class="pre">Tools/build/regen-configure.sh</span></code> shell 脚本生成 <code class="docutils literal notranslate"><span class="pre">aclocal.m4</span></code> 文件和 <code class="docutils literal notranslate"><span class="pre">configure</span></code> 脚本，它通过使用一个 Ubuntu 容器来获取同样的工具版本并具有可复现的输出。</p>
<p>容器是可选的，以下命令可以在本地运行:</p>
<div class="highlight-sh notranslate"><div class="highlight"><pre><span></span>autoreconf<span class="w"> </span>-ivf<span class="w"> </span>-Werror
</pre></div>
</div>
<p>生成的文件可根据实际的 <code class="docutils literal notranslate"><span class="pre">autoconf-archive</span></code>, <code class="docutils literal notranslate"><span class="pre">aclocal</span></code> 和 <code class="docutils literal notranslate"><span class="pre">pkg-config</span></code> 版本进行改变。</p>
</section>
</section>
<section id="configure-options">
<span id="id1"></span><h2><span class="section-number">3.3. </span>配置选项</h2>
<p>用以下方式列出 <code class="docutils literal notranslate"><span class="pre">./configure</span></code> 脚本的所有选项:</p>
<div class="highlight-sh notranslate"><div class="highlight"><pre><span></span>./configure<span class="w"> </span>--help
</pre></div>
</div>
<p>参阅 Python 源代码中的 <code class="file docutils literal notranslate"><span class="pre">Misc/SpecialBuilds.txt</span></code> 。</p>
<section id="general-options">
<h3><span class="section-number">3.3.1. </span>通用选项</h3>
<dl class="std option">
<dt class="sig sig-object std" id="cmdoption-enable-loadable-sqlite-extensions">
<span class="sig-name descname"><span class="pre">--enable-loadable-sqlite-extensions</span></span><span class="sig-prename descclassname"></span></dt>
<dd><p>在 <a class="reference internal" href="../library/sqlite3.xhtml#module-sqlite3" title="sqlite3: A DB-API 2.0 implementation using SQLite 3.x."><code class="xref py py-mod docutils literal notranslate"><span class="pre">sqlite3</span></code></a> 模块的 <code class="xref py py-mod docutils literal notranslate"><span class="pre">_sqlite</span></code> 扩展模块中是否支持可加载扩展（默认为否）。</p>
<p>参见 <a class="reference internal" href="../library/sqlite3.xhtml#sqlite3.Connection.enable_load_extension" title="sqlite3.Connection.enable_load_extension"><code class="xref py py-meth docutils literal notranslate"><span class="pre">sqlite3.Connection.enable_load_extension()</span></code></a> 方法的 <a class="reference internal" href="../library/sqlite3.xhtml#module-sqlite3" title="sqlite3: A DB-API 2.0 implementation using SQLite 3.x."><code class="xref py py-mod docutils literal notranslate"><span class="pre">sqlite3</span></code></a> 模块。</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.6.</span></p>
</div>
</dd></dl>

<dl class="std option">
<dt class="sig sig-object std" id="cmdoption-disable-ipv6">
<span class="sig-name descname"><span class="pre">--disable-ipv6</span></span><span class="sig-prename descclassname"></span></dt>
<dd><p>禁用 IPv6 支持（若开启支持则默认启用），见 <a class="reference internal" href="../library/socket.xhtml#module-socket" title="socket: Low-level networking interface."><code class="xref py py-mod docutils literal notranslate"><span class="pre">socket</span></code></a> 模块。</p>
</dd></dl>

<dl class="std option">
<dt class="sig sig-object std" id="cmdoption-enable-big-digits">
<span class="sig-name descname"><span class="pre">--enable-big-digits</span></span><span class="sig-prename descclassname"><span class="pre">=[15|30]</span></span></dt>
<dd><p>定义 Python <a class="reference internal" href="../library/functions.xhtml#int" title="int"><code class="xref py py-class docutils literal notranslate"><span class="pre">int</span></code></a> 数字的比特大小：15或30比特</p>
<p>在默认情况下，数位大小为 30。</p>
<p>定义 <code class="docutils literal notranslate"><span class="pre">PYLONG_BITS_IN_DIGIT</span></code> 为 <code class="docutils literal notranslate"><span class="pre">15</span></code> 或 <code class="docutils literal notranslate"><span class="pre">30</span></code>。</p>
<p>参见  <a class="reference internal" href="../library/sys.xhtml#sys.int_info" title="sys.int_info"><code class="xref py py-data docutils literal notranslate"><span class="pre">sys.int_info.bits_per_digit</span></code></a> 。</p>
</dd></dl>

<dl class="std option">
<dt class="sig sig-object std" id="cmdoption-with-suffix">
<span class="sig-name descname"><span class="pre">--with-suffix</span></span><span class="sig-prename descclassname"><span class="pre">=SUFFIX</span></span></dt>
<dd><p>将 Python 的可执行文件后缀设置为 <em>SUFFIX</em>。</p>
<p>在 Windows 和 macOS 上默认后缀为 <code class="docutils literal notranslate"><span class="pre">.exe</span></code> (可执行文件为 <code class="docutils literal notranslate"><span class="pre">python.exe</span></code>)，在 Emscripten 节点上为 <code class="docutils literal notranslate"><span class="pre">.js</span></code>，在 Emscripten 浏览器上为 <code class="docutils literal notranslate"><span class="pre">.html</span></code>，在 WASI 上为 <code class="docutils literal notranslate"><span class="pre">.wasm</span></code>，而在其他平台上为一个空字符串 (可执行文件为 <code class="docutils literal notranslate"><span class="pre">python</span></code>)。</p>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.11 版本发生变更: </span>在 WASM 平台上默认后缀为 <code class="docutils literal notranslate"><span class="pre">.js</span></code>, <code class="docutils literal notranslate"><span class="pre">.html</span></code> 或 <code class="docutils literal notranslate"><span class="pre">.wasm</span></code> 之一。</p>
</div>
</dd></dl>

<dl class="std option">
<dt class="sig sig-object std" id="cmdoption-with-tzpath">
<span class="sig-name descname"><span class="pre">--with-tzpath</span></span><span class="sig-prename descclassname"><span class="pre">=&lt;list</span> <span class="pre">of</span> <span class="pre">absolute</span> <span class="pre">paths</span> <span class="pre">separated</span> <span class="pre">by</span> <span class="pre">pathsep&gt;</span></span></dt>
<dd><p>Select the default time zone search path for为 <a class="reference internal" href="../library/zoneinfo.xhtml#zoneinfo.TZPATH" title="zoneinfo.TZPATH"><code class="xref py py-const docutils literal notranslate"><span class="pre">zoneinfo.TZPATH</span></code></a> 选择默认的时区搜索路径。 参见 <a class="reference internal" href="../library/zoneinfo.xhtml#module-zoneinfo" title="zoneinfo: IANA time zone support"><code class="xref py py-mod docutils literal notranslate"><span class="pre">zoneinfo</span></code></a> 模块的 <a class="reference internal" href="../library/zoneinfo.xhtml#zoneinfo-data-compile-time-config"><span class="std std-ref">编译时配置</span></a>。</p>
<p>默认：<code class="docutils literal notranslate"><span class="pre">/usr/share/zoneinfo:/usr/lib/zoneinfo:/usr/share/lib/zoneinfo:/etc/zoneinfo</span></code></p>
<p>参阅 <a class="reference internal" href="../library/os.xhtml#os.pathsep" title="os.pathsep"><code class="xref py py-data docutils literal notranslate"><span class="pre">os.pathsep</span></code></a> 路径分隔符。</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.9.</span></p>
</div>
</dd></dl>

<dl class="std option">
<dt class="sig sig-object std" id="cmdoption-without-decimal-contextvar">
<span class="sig-name descname"><span class="pre">--without-decimal-contextvar</span></span><span class="sig-prename descclassname"></span></dt>
<dd><p>编译 <code class="docutils literal notranslate"><span class="pre">_decimal</span></code> 扩展模块时使用线程本地上下文，而不是协程本地上下文（默认），参见 <a class="reference internal" href="../library/decimal.xhtml#module-decimal" title="decimal: Implementation of the General Decimal Arithmetic  Specification."><code class="xref py py-mod docutils literal notranslate"><span class="pre">decimal</span></code></a>  模块。</p>
<p>参见 <a class="reference internal" href="../library/decimal.xhtml#decimal.HAVE_CONTEXTVAR" title="decimal.HAVE_CONTEXTVAR"><code class="xref py py-const docutils literal notranslate"><span class="pre">decimal.HAVE_CONTEXTVAR</span></code></a> 和 <a class="reference internal" href="../library/contextvars.xhtml#module-contextvars" title="contextvars: Context Variables"><code class="xref py py-mod docutils literal notranslate"><span class="pre">contextvars</span></code></a> 模块。</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.9.</span></p>
</div>
</dd></dl>

<dl class="std option">
<dt class="sig sig-object std" id="cmdoption-with-dbmliborder">
<span class="sig-name descname"><span class="pre">--with-dbmliborder</span></span><span class="sig-prename descclassname"><span class="pre">=&lt;list</span> <span class="pre">of</span> <span class="pre">backend</span> <span class="pre">names&gt;</span></span></dt>
<dd><p>覆盖 <a class="reference internal" href="../library/dbm.xhtml#module-dbm" title="dbm: Interfaces to various Unix &quot;database&quot; formats."><code class="xref py py-mod docutils literal notranslate"><span class="pre">dbm</span></code></a> 模块的 db 后端检查顺序。</p>
<p>合法值是用冒号（<code class="docutils literal notranslate"><span class="pre">:</span></code>）分隔的字符串，包含后端名称。</p>
<ul class="simple">
<li><p><code class="docutils literal notranslate"><span class="pre">ndbm</span></code> ；</p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">gdbm</span></code> ；</p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">bdb</span></code> 。</p></li>
</ul>
</dd></dl>

<dl class="std option">
<dt class="sig sig-object std" id="cmdoption-without-c-locale-coercion">
<span class="sig-name descname"><span class="pre">--without-c-locale-coercion</span></span><span class="sig-prename descclassname"></span></dt>
<dd><p>禁用 C 语言对 UTF-8 的强制要求（默认为启用）。</p>
<p>不定义 <code class="docutils literal notranslate"><span class="pre">PY_COERCE_C_LOCALE</span></code> 宏。</p>
<p>参阅  <span class="target" id="index-62"></span><a class="reference internal" href="cmdline.xhtml#envvar-PYTHONCOERCECLOCALE"><code class="xref std std-envvar docutils literal notranslate"><span class="pre">PYTHONCOERCECLOCALE</span></code></a> 和 <span class="target" id="index-63"></span><a class="pep reference external" href="https://peps.python.org/pep-0538/"><strong>PEP 538</strong></a><span class="link-target"> [https://peps.python.org/pep-0538/]</span>。</p>
</dd></dl>

<dl class="std option">
<dt class="sig sig-object std" id="cmdoption-without-freelists">
<span class="sig-name descname"><span class="pre">--without-freelists</span></span><span class="sig-prename descclassname"></span></dt>
<dd><p>禁用除空元组单例以外的所有自由列表。Disable all freelists except the empty tuple singleton.</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.11.</span></p>
</div>
</dd></dl>

<dl class="std option">
<dt class="sig sig-object std" id="cmdoption-with-platlibdir">
<span class="sig-name descname"><span class="pre">--with-platlibdir</span></span><span class="sig-prename descclassname"><span class="pre">=DIRNAME</span></span></dt>
<dd><p>Python 库目录名（默认为 <code class="docutils literal notranslate"><span class="pre">lib</span></code>）。</p>
<p>Fedora 和 SuSE 在64 位平台用 <code class="docutils literal notranslate"><span class="pre">lib64</span></code> 。</p>
<p>参阅  <a class="reference internal" href="../library/sys.xhtml#sys.platlibdir" title="sys.platlibdir"><code class="xref py py-data docutils literal notranslate"><span class="pre">sys.platlibdir</span></code></a> 。</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.9.</span></p>
</div>
</dd></dl>

<dl class="std option">
<dt class="sig sig-object std" id="cmdoption-with-wheel-pkg-dir">
<span class="sig-name descname"><span class="pre">--with-wheel-pkg-dir</span></span><span class="sig-prename descclassname"><span class="pre">=PATH</span></span></dt>
<dd><p><a class="reference internal" href="../library/ensurepip.xhtml#module-ensurepip" title="ensurepip: Bootstrapping the &quot;pip&quot; installer into an existing Python installation or virtual environment."><code class="xref py py-mod docutils literal notranslate"><span class="pre">ensurepip</span></code></a> 模块用到的 wheel  包目录（默认为无）。</p>
<p>某些 Linux 发行版的打包策略建议不要捆绑依赖关系。如 Fedora 在 <code class="docutils literal notranslate"><span class="pre">/usr/share/python-wheels/</span></code> 目录下安装 wheel 包，而不安装 <code class="xref py py-mod docutils literal notranslate"><span class="pre">ensurepip._bundled</span></code> 包。</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.10.</span></p>
</div>
</dd></dl>

<dl class="std option">
<dt class="sig sig-object std" id="cmdoption-with-pkg-config">
<span class="sig-name descname"><span class="pre">--with-pkg-config</span></span><span class="sig-prename descclassname"><span class="pre">=[check|yes|no]</span></span></dt>
<dd><p>配置是否应当使用 <strong class="program">pkg-config</strong> 来检测构建依赖。</p>
<ul class="simple">
<li><p><code class="docutils literal notranslate"><span class="pre">check</span></code> (默认值): <strong class="program">pkg-config</strong> 为可选项</p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">yes</span></code>: <strong class="program">pkg-config</strong> 为必选项。</p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">no</span></code>: 配置不使用 <strong class="program">pkg-config</strong> 即使其存在</p></li>
</ul>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.11.</span></p>
</div>
</dd></dl>

<dl class="std option">
<dt class="sig sig-object std" id="cmdoption-enable-pystats">
<span class="sig-name descname"><span class="pre">--enable-pystats</span></span><span class="sig-prename descclassname"></span></dt>
<dd><p>启用内部统计数据收集。</p>
<p>统计信息将被转储至 <code class="docutils literal notranslate"><span class="pre">/tmp/py_stats/</span></code> 中的任意文件（可能唯一），或者在 Windows 上则为 <code class="docutils literal notranslate"><span class="pre">C:\temp\py_stats\</span></code>。 如果该目录不存在，结果将被打印到 stdout。</p>
<p>使用 <code class="docutils literal notranslate"><span class="pre">Tools/scripts/summarize_stats.py</span></code> 来读取统计数据。</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.11.</span></p>
</div>
</dd></dl>

</section>
<section id="webassembly-options">
<h3><span class="section-number">3.3.2. </span>WebAssembly 选项。</h3>
<dl class="std option">
<dt class="sig sig-object std" id="cmdoption-with-emscripten-target">
<span class="sig-name descname"><span class="pre">--with-emscripten-target</span></span><span class="sig-prename descclassname"><span class="pre">=[browser|node]</span></span></dt>
<dd><p>为 <code class="docutils literal notranslate"><span class="pre">wasm32-emscripten</span></code> 设置生成风格。</p>
<ul class="simple">
<li><p><code class="docutils literal notranslate"><span class="pre">browser</span></code> (默认值): 预加载最小 stdlib，默认 MEMFS。</p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">node</span></code>: NODERAWFS 和 pthread 支持。</p></li>
</ul>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.11.</span></p>
</div>
</dd></dl>

<dl class="std option">
<dt class="sig sig-object std" id="cmdoption-enable-wasm-dynamic-linking">
<span class="sig-name descname"><span class="pre">--enable-wasm-dynamic-linking</span></span><span class="sig-prename descclassname"></span></dt>
<dd><p>为 WASM 启用动态链接支持。</p>
<p>动态链接启用 <code class="docutils literal notranslate"><span class="pre">dlopen</span></code>。 可执行文件的大小将由于限制死代码清理和附加特性而增加。</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.11.</span></p>
</div>
</dd></dl>

<dl class="std option">
<dt class="sig sig-object std" id="cmdoption-enable-wasm-pthreads">
<span class="sig-name descname"><span class="pre">--enable-wasm-pthreads</span></span><span class="sig-prename descclassname"></span></dt>
<dd><p>为 WASM 启用 pthreads 支持。</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.11.</span></p>
</div>
</dd></dl>

</section>
<section id="install-options">
<h3><span class="section-number">3.3.3. </span>安装时的选项</h3>
<dl class="std option">
<dt class="sig sig-object std" id="cmdoption-prefix">
<span class="sig-name descname"><span class="pre">--prefix</span></span><span class="sig-prename descclassname"><span class="pre">=PREFIX</span></span></dt>
<dd><p>在 PREFIX 中安装架构无关的文件。 在 Unix 上，它默认为 <code class="file docutils literal notranslate"><span class="pre">/usr/local</span></code>。</p>
<p>该值可在运行时使用 <a class="reference internal" href="../library/sys.xhtml#sys.prefix" title="sys.prefix"><code class="xref py py-data docutils literal notranslate"><span class="pre">sys.prefix</span></code></a> 获取。</p>
<p>作为示例，用户可以使用 <code class="docutils literal notranslate"><span class="pre">--prefix=&quot;$HOME/.local/&quot;</span></code> 在其家目录中安装 Python。</p>
</dd></dl>

<dl class="std option">
<dt class="sig sig-object std" id="cmdoption-exec-prefix">
<span class="sig-name descname"><span class="pre">--exec-prefix</span></span><span class="sig-prename descclassname"><span class="pre">=EPREFIX</span></span></dt>
<dd><p>在 EPREFIX 中安装架构无关的文件，默认为 <a class="reference internal" href="#cmdoption-prefix"><code class="xref std std-option docutils literal notranslate"><span class="pre">--prefix</span></code></a>。</p>
<p>该值可在运行时使用 <a class="reference internal" href="../library/sys.xhtml#sys.exec_prefix" title="sys.exec_prefix"><code class="xref py py-data docutils literal notranslate"><span class="pre">sys.exec_prefix</span></code></a> 获取。</p>
</dd></dl>

<dl class="std option">
<dt class="sig sig-object std" id="cmdoption-disable-test-modules">
<span class="sig-name descname"><span class="pre">--disable-test-modules</span></span><span class="sig-prename descclassname"></span></dt>
<dd><p>不编译和安装 test 模块，如 <a class="reference internal" href="../library/test.xhtml#module-test" title="test: Regression tests package containing the testing suite for Python."><code class="xref py py-mod docutils literal notranslate"><span class="pre">test</span></code></a> 包或 <code class="xref py py-mod docutils literal notranslate"><span class="pre">_testcapi</span></code> 扩展模块（默认会编译并安装）。</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.10.</span></p>
</div>
</dd></dl>

<dl class="std option">
<dt class="sig sig-object std" id="cmdoption-with-ensurepip">
<span class="sig-name descname"><span class="pre">--with-ensurepip</span></span><span class="sig-prename descclassname"><span class="pre">=[upgrade|install|no]</span></span></dt>
<dd><p>选择 Python 安装时运行的 <a class="reference internal" href="../library/ensurepip.xhtml#module-ensurepip" title="ensurepip: Bootstrapping the &quot;pip&quot; installer into an existing Python installation or virtual environment."><code class="xref py py-mod docutils literal notranslate"><span class="pre">ensurepip</span></code></a> 命令。</p>
<ul class="simple">
<li><p><code class="docutils literal notranslate"><span class="pre">upgrade</span></code> （默认）：运行 <code class="docutils literal notranslate"><span class="pre">python</span> <span class="pre">-m</span> <span class="pre">ensurepip</span> <span class="pre">--altinstall</span> <span class="pre">--upgrade</span></code> 命令。</p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">install</span></code> ：运行 <code class="docutils literal notranslate"><span class="pre">python</span> <span class="pre">-m</span> <span class="pre">ensurepip</span> <span class="pre">--altinstall</span></code> 命令。</p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">no</span></code> ：不运行 ensurepip。</p></li>
</ul>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.6.</span></p>
</div>
</dd></dl>

</section>
<section id="performance-options">
<h3><span class="section-number">3.3.4. </span>性能选项</h3>
<p>为获得最佳性能推荐使用 <code class="docutils literal notranslate"><span class="pre">--enable-optimizations</span> <span class="pre">--with-lto</span></code> (PGO + LTO) 来配置 Python。 试验性的 <code class="docutils literal notranslate"><span class="pre">--enable-bolt</span></code> 旗标也可被用来提升性能。</p>
<dl class="std option">
<dt class="sig sig-object std" id="cmdoption-enable-optimizations">
<span class="sig-name descname"><span class="pre">--enable-optimizations</span></span><span class="sig-prename descclassname"></span></dt>
<dd><p>用 <span class="target" id="index-64"></span><a class="reference internal" href="#envvar-PROFILE_TASK"><code class="xref std std-envvar docutils literal notranslate"><span class="pre">PROFILE_TASK</span></code></a> 启用以配置文件主导的优化（PGO）（默认为禁用）。</p>
<p>C 编译器 Clang 需要用到 <code class="docutils literal notranslate"><span class="pre">llvm-profdata</span></code> 程序进行 PGO。在 macOS 上，GCC 也需要用到它：在 macOS 上 GCC 只是 Clang 的别名而已。</p>
<p>如果使用 <code class="docutils literal notranslate"><span class="pre">--enable-shared</span></code> 和 GCC ，还可以禁用 libpython 中的语义插值：在编译器和链接器的标志中加入 <code class="docutils literal notranslate"><span class="pre">-fno-semantic-interposition</span></code> 。</p>
<div class="admonition note">
<p class="admonition-title">备注</p>
<p>在构建期间，你可能会遇到编译器警告提示某些源文件的配置数据不可用。 这些警告是无害的，因为在获取配置数据时只有一部分代码会被使用。 要在 Clang 上禁用这些警告，可通过在 <span class="target" id="index-65"></span><a class="reference internal" href="#envvar-CFLAGS"><code class="xref std std-envvar docutils literal notranslate"><span class="pre">CFLAGS</span></code></a> 中添加 <code class="docutils literal notranslate"><span class="pre">-Wno-profile-instr-unprofiled</span></code> 来手动抑制它们。</p>
</div>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.6.</span></p>
</div>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.10 版本发生变更: </span>在 GCC 上使用 <code class="docutils literal notranslate"><span class="pre">-fno-semantic-interposition</span></code> 。</p>
</div>
</dd></dl>

<dl class="std envvar">
<dt class="sig sig-object std" id="envvar-PROFILE_TASK">
<span class="sig-name descname"><span class="pre">PROFILE_TASK</span></span></dt>
<dd><p>Makefile 用到的环境变量：PGO 用到的 Python 命令行参数。</p>
<p>默认为：<code class="docutils literal notranslate"><span class="pre">-m</span> <span class="pre">test</span> <span class="pre">--pgo</span> <span class="pre">--timeout=$(TESTTIMEOUT)</span></code> 。</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.8.</span></p>
</div>
</dd></dl>

<dl class="std option">
<dt class="sig sig-object std" id="cmdoption-with-lto">
<span class="sig-name descname"><span class="pre">--with-lto</span></span><span class="sig-prename descclassname"><span class="pre">=[full|thin|no|yes]</span></span></dt>
<dd><p>在编译过程中启用链接时间优化（LTO）（默认为禁用）。</p>
<p>LTO 时 C 编译器 Clang 需要用到 <code class="docutils literal notranslate"><span class="pre">llvm-ar</span></code> 参数（在 macOS 则为 <code class="docutils literal notranslate"><span class="pre">ar</span></code>），以及支持 LTO 的链接器（<code class="docutils literal notranslate"><span class="pre">ld.gold</span></code> 或 <code class="docutils literal notranslate"><span class="pre">lld</span></code>）。</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.6.</span></p>
</div>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.11: </span>要使用 ThinLTO 特性，请在 Clang 上使用 <code class="docutils literal notranslate"><span class="pre">--with-lto=thin</span></code>。</p>
</div>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.12 版本发生变更: </span>如果编译器支持将使用 ThinLTO 旗标作为 Clang 上的默认优化策略。</p>
</div>
</dd></dl>

<dl class="std option">
<dt class="sig sig-object std" id="cmdoption-enable-bolt">
<span class="sig-name descname"><span class="pre">--enable-bolt</span></span><span class="sig-prename descclassname"></span></dt>
<dd><p>允许启用 <a class="reference external" href="https://github.com/llvm/llvm-project/tree/main/bolt">BOLT 链接后二进制优化器</a><span class="link-target"> [https://github.com/llvm/llvm-project/tree/main/bolt]</span> (默认为禁用)。</p>
<p>BOLT 是 LLVM 项目的一部分但并不总是包括在其二进制分发包中。 该旗标要求 <code class="docutils literal notranslate"><span class="pre">llvm-bolt</span></code> 和 <code class="docutils literal notranslate"><span class="pre">merge-fdata</span></code> 可用。</p>
<p>BOLT 仍然是一个相当新的项目因此目前该旗标应当被视为是试验性的。 因为此工具是作用于机器码所以其成功依赖于构建环境 + 其他优化配置参数 + CPU 架构的组合，并且并非所有组合都受到支持。 已知 LLVM 16 之前的 BOLT 版本在某些场景下会使得 BOLT 发生崩溃。 强烈建议使用 LLVM 16 或更新版本进行 BOLT 优化。</p>
<p><code class="xref std std-envvar docutils literal notranslate"><span class="pre">BOLT_INSTRUMENT_FLAGS</span></code> 和 <code class="xref std std-envvar docutils literal notranslate"><span class="pre">BOLT_APPLY_FLAGS</span></code> <strong class="program">configure</strong> 变量可被定义为覆盖 <strong class="program">llvm-bolt</strong> 的默认参数集合来分别指示和将 BOLT 数据应用于二进制代码中。</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.12.</span></p>
</div>
</dd></dl>

<dl class="std option">
<dt class="sig sig-object std" id="cmdoption-with-computed-gotos">
<span class="sig-name descname"><span class="pre">--with-computed-gotos</span></span><span class="sig-prename descclassname"></span></dt>
<dd><p>在求值环节启用 goto 计数（在支持的编译器上默认启用）。</p>
</dd></dl>

<dl class="std option">
<dt class="sig sig-object std" id="cmdoption-without-pymalloc">
<span class="sig-name descname"><span class="pre">--without-pymalloc</span></span><span class="sig-prename descclassname"></span></dt>
<dd><p>禁用特定的 Python 内存分配器 <a class="reference internal" href="../c-api/memory.xhtml#pymalloc"><span class="std std-ref">pymalloc</span></a> （默认为启用）。</p>
<p>参见环境变量 <span class="target" id="index-66"></span><a class="reference internal" href="cmdline.xhtml#envvar-PYTHONMALLOC"><code class="xref std std-envvar docutils literal notranslate"><span class="pre">PYTHONMALLOC</span></code></a> 。</p>
</dd></dl>

<dl class="std option">
<dt class="sig sig-object std" id="cmdoption-without-doc-strings">
<span class="sig-name descname"><span class="pre">--without-doc-strings</span></span><span class="sig-prename descclassname"></span></dt>
<dd><p>禁用静态文档字符串以减少内存占用（默认启用）。Python 中定义的文档字符串不受影响。</p>
<p>不定义 <code class="docutils literal notranslate"><span class="pre">PY_COERCE_C_LOCALE</span></code> 宏。</p>
<p>参阅宏 <code class="docutils literal notranslate"><span class="pre">PyDoc_STRVAR()</span></code> 。</p>
</dd></dl>

<dl class="std option">
<dt class="sig sig-object std" id="cmdoption-enable-profiling">
<span class="sig-name descname"><span class="pre">--enable-profiling</span></span><span class="sig-prename descclassname"></span></dt>
<dd><p>用 <code class="docutils literal notranslate"><span class="pre">gprof</span></code> 启用 C 语言级的代码评估（默认为禁用）。</p>
</dd></dl>

<dl class="std option">
<dt class="sig sig-object std" id="cmdoption-with-strict-overflow">
<span class="sig-name descname"><span class="pre">--with-strict-overflow</span></span><span class="sig-prename descclassname"></span></dt>
<dd><p>将 <code class="docutils literal notranslate"><span class="pre">-fstrict-overflow</span></code> 添加到 C 编译器旗标 (在默认情况下我们将添加 <code class="docutils literal notranslate"><span class="pre">-fno-strict-overflow</span></code> 来代替)。</p>
</dd></dl>

</section>
<section id="python-debug-build">
<span id="debug-build"></span><h3><span class="section-number">3.3.5. </span>Python 调试级编译</h3>
<p>调试版本 Python 是指带有 <a class="reference internal" href="#cmdoption-with-pydebug"><code class="xref std std-option docutils literal notranslate"><span class="pre">--with-pydebug</span></code></a>  参数的编译。</p>
<p>调试版本的效果：</p>
<ul class="simple">
<li><p>默认显示所有警告：在 <a class="reference internal" href="../library/warnings.xhtml#module-warnings" title="warnings: Issue warning messages and control their disposition."><code class="xref py py-mod docutils literal notranslate"><span class="pre">warnings</span></code></a> 模块中，默认警告过滤器的列表是空的。</p></li>
<li><p>在 <a class="reference internal" href="../library/sys.xhtml#sys.abiflags" title="sys.abiflags"><code class="xref py py-data docutils literal notranslate"><span class="pre">sys.abiflags</span></code></a> 中加入 <code class="docutils literal notranslate"><span class="pre">d</span></code> 标记。</p></li>
<li><p>加入 <code class="xref py py-func docutils literal notranslate"><span class="pre">sys.gettotalrefcount()</span></code> 函数。</p></li>
<li><p>命令行参数加入 <a class="reference internal" href="cmdline.xhtml#cmdoption-X"><code class="xref std std-option docutils literal notranslate"><span class="pre">-X</span> <span class="pre">showrefcount</span></code></a> 。</p></li>
<li><p>添加 <a class="reference internal" href="cmdline.xhtml#cmdoption-d"><code class="xref std std-option docutils literal notranslate"><span class="pre">-d</span></code></a> 命令行选项和 <span class="target" id="index-67"></span><a class="reference internal" href="cmdline.xhtml#envvar-PYTHONDEBUG"><code class="xref std std-envvar docutils literal notranslate"><span class="pre">PYTHONDEBUG</span></code></a> 环境变量用于调试解析器。</p></li>
<li><p>添加对 <code class="docutils literal notranslate"><span class="pre">__lltrace__</span></code> 变量的支持：如果定义了该变量则会在字节码求值循环中启用低层级追踪。</p></li>
<li><p>安装 <a class="reference internal" href="../c-api/memory.xhtml#default-memory-allocators"><span class="std std-ref">内存分配调试钩子</span></a> ，以便检测缓冲区溢出和其他内存错误。</p></li>
<li><p>定义宏 <code class="docutils literal notranslate"><span class="pre">Py_DEBUG</span></code> 和 <code class="docutils literal notranslate"><span class="pre">Py_REF_DEBUG</span></code> 。</p></li>
<li><p>增加运行时检查：针对由 <code class="docutils literal notranslate"><span class="pre">#ifdef</span> <span class="pre">Py_DEBUG</span></code> 和 <code class="docutils literal notranslate"><span class="pre">#endif</span></code> 所包裹的代码。 启用 <code class="docutils literal notranslate"><span class="pre">assert(...)</span></code> 和 <code class="docutils literal notranslate"><span class="pre">_PyObject_ASSERT(...)</span></code> 断言：不设置 <code class="docutils literal notranslate"><span class="pre">NDEBUG</span></code> 宏（另请参阅 <a class="reference internal" href="#cmdoption-with-assertions"><code class="xref std std-option docutils literal notranslate"><span class="pre">--with-assertions</span></code></a> 配置选项）。 主要的运行时检查有:</p>
<ul>
<li><p>增加了对函数参数的合理性检查。</p></li>
<li><p>创建 Unicode 和 int 对象时，内存按某种模式进行了填充，用于检测是否使用了未初始化的对象。</p></li>
<li><p>确保有能力清除或替换当前异常的函数在调用时不会引发异常。</p></li>
<li><p>检查内存释放器函数是否不改变当前异常。</p></li>
<li><p>垃圾收集器（<a class="reference internal" href="../library/gc.xhtml#gc.collect" title="gc.collect"><code class="xref py py-func docutils literal notranslate"><span class="pre">gc.collect()</span></code></a> 函数）对对象的一致性进行一些基本检查。</p></li>
<li><p>从较宽类型转换到较窄类型时，<code class="xref c c-macro docutils literal notranslate"><span class="pre">Py_SAFE_DOWNCAST()</span></code> 宏会检查整数下溢和上溢的情况。</p></li>
</ul>
</li>
</ul>
<p>参见  <a class="reference internal" href="../library/devmode.xhtml#devmode"><span class="std std-ref">Python 开发模式</span></a> 和配置参数 <a class="reference internal" href="#cmdoption-with-trace-refs"><code class="xref std std-option docutils literal notranslate"><span class="pre">--with-trace-refs</span></code></a> 。</p>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.8 版本发生变更: </span>发布版和调试版的编译现在是 ABI 兼容的：定义了 <code class="docutils literal notranslate"><span class="pre">Py_DEBUG</span></code> 宏不再意味着同时定义了 <code class="docutils literal notranslate"><span class="pre">Py_TRACE_REFS</span></code> 宏（参见 <a class="reference internal" href="#cmdoption-with-trace-refs"><code class="xref std std-option docutils literal notranslate"><span class="pre">--with-trace-refs</span></code></a> 参数），这引入了唯一一处不是 ABI 兼容的地方。</p>
</div>
</section>
<section id="debug-options">
<h3><span class="section-number">3.3.6. </span>调试选项</h3>
<dl class="std option">
<dt class="sig sig-object std" id="cmdoption-with-pydebug">
<span class="sig-name descname"><span class="pre">--with-pydebug</span></span><span class="sig-prename descclassname"></span></dt>
<dd><p><a class="reference internal" href="#debug-build"><span class="std std-ref">在调试模式下编译 Python</span></a>: 定义宏 <code class="docutils literal notranslate"><span class="pre">Py_DEBUG</span></code> (默认为禁用)。</p>
</dd></dl>

<dl class="std option">
<dt class="sig sig-object std" id="cmdoption-with-trace-refs">
<span class="sig-name descname"><span class="pre">--with-trace-refs</span></span><span class="sig-prename descclassname"></span></dt>
<dd><p>为了调试而启用引用的跟踪（默认为禁用）。</p>
<p>效果如下：</p>
<ul class="simple">
<li><p>定义 <code class="docutils literal notranslate"><span class="pre">Py_TRACE_REFS</span></code> 宏。</p></li>
<li><p>加入 <code class="xref py py-func docutils literal notranslate"><span class="pre">sys.getobjects()</span></code> 函数。</p></li>
<li><p>环境变量加入 <span class="target" id="index-68"></span><a class="reference internal" href="cmdline.xhtml#envvar-PYTHONDUMPREFS"><code class="xref std std-envvar docutils literal notranslate"><span class="pre">PYTHONDUMPREFS</span></code></a> 。</p></li>
</ul>
<p>此版本与发布模式（默认编译模式）或调试模式（<code class="docutils literal notranslate"><span class="pre">Py_DEBUG</span></code> 和 <code class="docutils literal notranslate"><span class="pre">Py_REF_DEBUG</span></code> 宏）不具备 ABI 兼容性。</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.8.</span></p>
</div>
</dd></dl>

<dl class="std option">
<dt class="sig sig-object std" id="cmdoption-with-assertions">
<span class="sig-name descname"><span class="pre">--with-assertions</span></span><span class="sig-prename descclassname"></span></dt>
<dd><p>编译时启用 C 断言：<code class="docutils literal notranslate"><span class="pre">assert(...);</span></code> 和 <code class="docutils literal notranslate"><span class="pre">_PyObject_ASSERT(...);</span></code> （默认不启用）。</p>
<p>如果设置此参数，则在 <span class="target" id="index-69"></span><a class="reference internal" href="#envvar-OPT"><code class="xref std std-envvar docutils literal notranslate"><span class="pre">OPT</span></code></a> 编译器变量中不定义 <code class="docutils literal notranslate"><span class="pre">NDEBUG</span></code> 宏。</p>
<p>参阅 <a class="reference internal" href="#cmdoption-with-pydebug"><code class="xref std std-option docutils literal notranslate"><span class="pre">--with-pydebug</span></code></a> 选项（<a class="reference internal" href="#debug-build"><span class="std std-ref">调试编译模式</span></a>），它也可以启用断言。</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.6.</span></p>
</div>
</dd></dl>

<dl class="std option">
<dt class="sig sig-object std" id="cmdoption-with-valgrind">
<span class="sig-name descname"><span class="pre">--with-valgrind</span></span><span class="sig-prename descclassname"></span></dt>
<dd><p>启用 Valgrind （默认禁用）。</p>
</dd></dl>

<dl class="std option">
<dt class="sig sig-object std" id="cmdoption-with-dtrace">
<span class="sig-name descname"><span class="pre">--with-dtrace</span></span><span class="sig-prename descclassname"></span></dt>
<dd><p>启用 DTrace（默认禁用）。</p>
<p>参阅 <a class="reference internal" href="../howto/instrumentation.xhtml#instrumentation"><span class="std std-ref">用 DTrace 和 SystemTap 测试 CPython</span></a>。</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.6.</span></p>
</div>
</dd></dl>

<dl class="std option">
<dt class="sig sig-object std" id="cmdoption-with-address-sanitizer">
<span class="sig-name descname"><span class="pre">--with-address-sanitizer</span></span><span class="sig-prename descclassname"></span></dt>
<dd><p>启用 AddressSanitizer 内存错误检测 <code class="docutils literal notranslate"><span class="pre">asan</span></code>，（默认为禁用）。</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.6.</span></p>
</div>
</dd></dl>

<dl class="std option">
<dt class="sig sig-object std" id="cmdoption-with-memory-sanitizer">
<span class="sig-name descname"><span class="pre">--with-memory-sanitizer</span></span><span class="sig-prename descclassname"></span></dt>
<dd><p>启用 MemorySanitizer 内存错误检测 <code class="docutils literal notranslate"><span class="pre">msan</span></code>，（默认为禁用）。</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.6.</span></p>
</div>
</dd></dl>

<dl class="std option">
<dt class="sig sig-object std" id="cmdoption-with-undefined-behavior-sanitizer">
<span class="sig-name descname"><span class="pre">--with-undefined-behavior-sanitizer</span></span><span class="sig-prename descclassname"></span></dt>
<dd><p>启用 undefinedBehaviorSanitizer 未定义行为检测 <code class="docutils literal notranslate"><span class="pre">ubsan</span></code>，（默认为禁用）。</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.6.</span></p>
</div>
</dd></dl>

</section>
<section id="linker-options">
<h3><span class="section-number">3.3.7. </span>链接器选项</h3>
<dl class="std option">
<dt class="sig sig-object std" id="cmdoption-enable-shared">
<span class="sig-name descname"><span class="pre">--enable-shared</span></span><span class="sig-prename descclassname"></span></dt>
<dd><p>启用共享 Python 库 <code class="docutils literal notranslate"><span class="pre">libpython</span></code> 的编译（默认为禁用）。</p>
</dd></dl>

<dl class="std option">
<dt class="sig sig-object std" id="cmdoption-without-static-libpython">
<span class="sig-name descname"><span class="pre">--without-static-libpython</span></span><span class="sig-prename descclassname"></span></dt>
<dd><p>不编译 <code class="docutils literal notranslate"><span class="pre">libpythonMAJOR.MINOR.a</span></code>，也不安装 <code class="docutils literal notranslate"><span class="pre">python.o</span></code> (默认会编译并安装)。</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.10.</span></p>
</div>
</dd></dl>

</section>
<section id="libraries-options">
<h3><span class="section-number">3.3.8. </span>库选项</h3>
<dl class="std option">
<dt class="sig sig-object std" id="cmdoption-with-libs">
<span class="sig-name descname"><span class="pre">--with-libs</span></span><span class="sig-prename descclassname"><span class="pre">='lib1</span> <span class="pre">...'</span></span></dt>
<dd><p>链接附加库（默认不会）。</p>
</dd></dl>

<dl class="std option">
<dt class="sig sig-object std" id="cmdoption-with-system-expat">
<span class="sig-name descname"><span class="pre">--with-system-expat</span></span><span class="sig-prename descclassname"></span></dt>
<dd><p>用已安装的 <code class="docutils literal notranslate"><span class="pre">expat</span></code> 库编译 <code class="xref py py-mod docutils literal notranslate"><span class="pre">pyexpat</span></code> 模块（默认为否）。</p>
</dd></dl>

<dl class="std option">
<dt class="sig sig-object std" id="cmdoption-with-system-libmpdec">
<span class="sig-name descname"><span class="pre">--with-system-libmpdec</span></span><span class="sig-prename descclassname"></span></dt>
<dd><p>用已安装的 <code class="docutils literal notranslate"><span class="pre">mpdec</span></code> 库编译 <code class="docutils literal notranslate"><span class="pre">_decimal</span></code> 扩展模块，参见 <a class="reference internal" href="../library/decimal.xhtml#module-decimal" title="decimal: Implementation of the General Decimal Arithmetic  Specification."><code class="xref py py-mod docutils literal notranslate"><span class="pre">decimal</span></code></a> 模块（默认为否）。</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.3.</span></p>
</div>
</dd></dl>

<dl class="std option">
<dt class="sig sig-object std" id="cmdoption-with-readline">
<span class="sig-name descname"><span class="pre">--with-readline</span></span><span class="sig-prename descclassname"><span class="pre">=editline</span></span></dt>
<dd><p>用 <code class="docutils literal notranslate"><span class="pre">editline</span></code> 库作为 <a class="reference internal" href="../library/readline.xhtml#module-readline" title="readline: GNU readline support for Python. (Unix)"><code class="xref py py-mod docutils literal notranslate"><span class="pre">readline</span></code></a> 模块的后端。</p>
<p>定义 <code class="docutils literal notranslate"><span class="pre">WITH_EDITLINE</span></code> 宏。</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.10.</span></p>
</div>
</dd></dl>

<dl class="std option">
<dt class="sig sig-object std" id="cmdoption-without-readline">
<span class="sig-name descname"><span class="pre">--without-readline</span></span><span class="sig-prename descclassname"></span></dt>
<dd><p>不编译 <a class="reference internal" href="../library/readline.xhtml#module-readline" title="readline: GNU readline support for Python. (Unix)"><code class="xref py py-mod docutils literal notranslate"><span class="pre">readline</span></code></a> 模块（默认会）。</p>
<p>不定义 <code class="docutils literal notranslate"><span class="pre">HAVE_LIBREADLINE</span></code> 宏。</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.10.</span></p>
</div>
</dd></dl>

<dl class="std option">
<dt class="sig sig-object std" id="cmdoption-with-libm">
<span class="sig-name descname"><span class="pre">--with-libm</span></span><span class="sig-prename descclassname"><span class="pre">=STRING</span></span></dt>
<dd><p>将 <code class="docutils literal notranslate"><span class="pre">libm</span></code> 数学库覆盖为 <em>STRING</em> (默认情况视系统而定)。</p>
</dd></dl>

<dl class="std option">
<dt class="sig sig-object std" id="cmdoption-with-libc">
<span class="sig-name descname"><span class="pre">--with-libc</span></span><span class="sig-prename descclassname"><span class="pre">=STRING</span></span></dt>
<dd><p>将 <code class="docutils literal notranslate"><span class="pre">libc</span></code> C 库覆盖为 <em>STRING</em> (默认情况视系统而定)。</p>
</dd></dl>

<dl class="std option">
<dt class="sig sig-object std" id="cmdoption-with-openssl">
<span class="sig-name descname"><span class="pre">--with-openssl</span></span><span class="sig-prename descclassname"><span class="pre">=DIR</span></span></dt>
<dd><p>OpenSSL 的根目录。</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.7.</span></p>
</div>
</dd></dl>

<dl class="std option">
<dt class="sig sig-object std" id="cmdoption-with-openssl-rpath">
<span class="sig-name descname"><span class="pre">--with-openssl-rpath</span></span><span class="sig-prename descclassname"><span class="pre">=[no|auto|DIR]</span></span></dt>
<dd><p>设置 OpenSSL 库的运行时库目录（rpath）。</p>
<ul class="simple">
<li><p><code class="docutils literal notranslate"><span class="pre">no</span></code> (默认): 不设置 rpath。</p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">auto</span></code>：根据  <a class="reference internal" href="#cmdoption-with-openssl"><code class="xref std std-option docutils literal notranslate"><span class="pre">--with-openssl</span></code></a>  和 <code class="docutils literal notranslate"><span class="pre">pkg-config</span></code> 自动检测 rpath。</p></li>
<li><p><em>DIR</em> ：直接设置 rpath。</p></li>
</ul>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.10.</span></p>
</div>
</dd></dl>

</section>
<section id="security-options">
<h3><span class="section-number">3.3.9. </span>安全性选项</h3>
<dl class="std option">
<dt class="sig sig-object std" id="cmdoption-with-hash-algorithm">
<span class="sig-name descname"><span class="pre">--with-hash-algorithm</span></span><span class="sig-prename descclassname"><span class="pre">=[fnv|siphash13|siphash24]</span></span></dt>
<dd><p>选择 <code class="docutils literal notranslate"><span class="pre">Python/pyhash.c</span></code> 采用的哈希算法。</p>
<ul class="simple">
<li><p><code class="docutils literal notranslate"><span class="pre">siphash13</span></code> (默认值);</p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">siphash24</span></code>;</p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">fnv</span></code>.</p></li>
</ul>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.4.</span></p>
</div>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.11: </span>增加了 <code class="docutils literal notranslate"><span class="pre">siphash13</span></code> 并且是新的默认值。</p>
</div>
</dd></dl>

<dl class="std option">
<dt class="sig sig-object std" id="cmdoption-with-builtin-hashlib-hashes">
<span class="sig-name descname"><span class="pre">--with-builtin-hashlib-hashes</span></span><span class="sig-prename descclassname"><span class="pre">=md5,sha1,sha256,sha512,sha3,blake2</span></span></dt>
<dd><p>内置哈希模块：</p>
<ul class="simple">
<li><p><code class="docutils literal notranslate"><span class="pre">md5</span></code>。</p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">sha1</span></code>。</p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">sha256</span></code>。</p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">sha512</span></code>。</p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">sha3</span></code> (带 shake)。</p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">blake2</span></code>。</p></li>
</ul>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.9.</span></p>
</div>
</dd></dl>

<dl class="std option">
<dt class="sig sig-object std" id="cmdoption-with-ssl-default-suites">
<span class="sig-name descname"><span class="pre">--with-ssl-default-suites</span></span><span class="sig-prename descclassname"><span class="pre">=[python|openssl|STRING]</span></span></dt>
<dd><p>覆盖 OpenSSL 默认的密码套件字符串。</p>
<ul class="simple">
<li><p><code class="docutils literal notranslate"><span class="pre">python</span></code> (默认值): 采用 Python 推荐选择。</p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">openssl</span></code>：保留 OpenSSL 默认值不动。</p></li>
<li><p><em>STRING</em> ：采用自定义字符串。</p></li>
</ul>
<p>参见 <a class="reference internal" href="../library/ssl.xhtml#module-ssl" title="ssl: TLS/SSL wrapper for socket objects"><code class="xref py py-mod docutils literal notranslate"><span class="pre">ssl</span></code></a>  模块。</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.7.</span></p>
</div>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.10 版本发生变更: </span>设置 <code class="docutils literal notranslate"><span class="pre">python</span></code> 和 <em>STRING</em> 也会把 TLS 1.2 设为最低版本的协议。</p>
</div>
</dd></dl>

</section>
<section id="macos-options">
<h3><span class="section-number">3.3.10. </span>macOS 选项</h3>
<p>参见 <code class="docutils literal notranslate"><span class="pre">Mac/README.rst</span></code> 。</p>
<dl class="std option">
<dt class="sig sig-object std" id="cmdoption-enable-universalsdk">
<span class="sig-name descname"><span class="pre">--enable-universalsdk</span></span><span class="sig-prename descclassname"></span></dt>
<dd></dd></dl>

<dl class="std option">
<dt class="sig sig-object std" id="cmdoption-0">
<span class="sig-name descname"><span class="pre">--enable-universalsdk</span></span><span class="sig-prename descclassname"><span class="pre">=SDKDIR</span></span></dt>
<dd><p>创建通用的二进制版本。<em>SDKDIR</em> 指定应采用的 macOS SDK （默认为否）。</p>
</dd></dl>

<dl class="std option">
<dt class="sig sig-object std" id="cmdoption-enable-framework">
<span class="sig-name descname"><span class="pre">--enable-framework</span></span><span class="sig-prename descclassname"></span></dt>
<dd></dd></dl>

<dl class="std option">
<dt class="sig sig-object std" id="cmdoption-1">
<span class="sig-name descname"><span class="pre">--enable-framework</span></span><span class="sig-prename descclassname"><span class="pre">=INSTALLDIR</span></span></dt>
<dd><p>创建 Python.framework ，而不是传统的 Unix 安装版。可选参数 <em>INSTALLDIR</em> 指定了安装路径（(默认为否）。</p>
</dd></dl>

<dl class="std option">
<dt class="sig sig-object std" id="cmdoption-with-universal-archs">
<span class="sig-name descname"><span class="pre">--with-universal-archs</span></span><span class="sig-prename descclassname"><span class="pre">=ARCH</span></span></dt>
<dd><p>指定应创建何种通用二进制文件。该选项仅当设置了 <a class="reference internal" href="#cmdoption-enable-universalsdk"><code class="xref std std-option docutils literal notranslate"><span class="pre">--enable-universalsdk</span></code></a> 时才有效。</p>
<p>可选项：</p>
<ul class="simple">
<li><p><code class="docutils literal notranslate"><span class="pre">universal2</span></code>。</p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">32-bit</span></code>。</p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">64-bit</span></code>。</p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">3-way</span></code>。</p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">intel</span></code>。</p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">intel-32</span></code>。</p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">intel-64</span></code>。</p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">all</span></code>。</p></li>
</ul>
</dd></dl>

<dl class="std option">
<dt class="sig sig-object std" id="cmdoption-with-framework-name">
<span class="sig-name descname"><span class="pre">--with-framework-name</span></span><span class="sig-prename descclassname"><span class="pre">=FRAMEWORK</span></span></dt>
<dd><p>为 macOS 中的 python 框架指定名称，仅当设置了 <a class="reference internal" href="#cmdoption-enable-framework"><code class="xref std std-option docutils literal notranslate"><span class="pre">--enable-framework</span></code></a> 时有效（默认：<code class="docutils literal notranslate"><span class="pre">Python</span></code>）。</p>
</dd></dl>

</section>
<section id="cross-compiling-options">
<h3><span class="section-number">3.3.11. </span>交叉编译选项</h3>
<p>交叉编译，或称交叉构建，可被用于为不同的 CPU 架构或平台构建 Python。 交叉编译需要一个针对构建平台的 Python 解释器。 构建的 Python 版本必须与交叉编译的主机 Python 版本相匹配。</p>
<dl class="std option">
<dt class="sig sig-object std" id="cmdoption-build">
<span class="sig-name descname"><span class="pre">--build</span></span><span class="sig-prename descclassname"><span class="pre">=BUILD</span></span></dt>
<dd><p>用于在 BUILD 上执行构建的配置，通常由 <strong class="program">config.guess</strong> 通过推测得到。</p>
</dd></dl>

<dl class="std option">
<dt class="sig sig-object std" id="cmdoption-host">
<span class="sig-name descname"><span class="pre">--host</span></span><span class="sig-prename descclassname"><span class="pre">=HOST</span></span></dt>
<dd><p>交叉编译以构建在 HOST (目标平台) 上运行的程序</p>
</dd></dl>

<dl class="std option">
<dt class="sig sig-object std" id="cmdoption-with-build-python">
<span class="sig-name descname"><span class="pre">--with-build-python</span></span><span class="sig-prename descclassname"><span class="pre">=path/to/python</span></span></dt>
<dd><p>针对交叉编译构建 <code class="docutils literal notranslate"><span class="pre">python</span></code> 二进制文件的路径</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.11.</span></p>
</div>
</dd></dl>

<dl class="std option">
<dt class="sig sig-object std" id="cmdoption-arg-CONFIG_SITE">
<span class="sig-name descname"><span class="pre">CONFIG_SITE</span></span><span class="sig-prename descclassname"><span class="pre">=file</span></span></dt>
<dd><p>指向一个带有配置重载的的文件的环境变量。</p>
<p>示例 <em>config.site</em> 文件：</p>
<div class="highlight-ini notranslate"><div class="highlight"><pre><span></span><span class="c1"># config.site-aarch64</span>
<span class="na">ac_cv_buggy_getaddrinfo</span><span class="o">=</span><span class="s">no</span>
<span class="na">ac_cv_file__dev_ptmx</span><span class="o">=</span><span class="s">yes</span>
<span class="na">ac_cv_file__dev_ptc</span><span class="o">=</span><span class="s">no</span>
</pre></div>
</div>
</dd></dl>

<p>交叉编译示例:</p>
<div class="highlight-sh notranslate"><div class="highlight"><pre><span></span><span class="nv">CONFIG_SITE</span><span class="o">=</span>config.site-aarch64<span class="w"> </span>../configure<span class="w"> </span><span class="se">\</span>
<span class="w">    </span>--build<span class="o">=</span>x86_64-pc-linux-gnu<span class="w"> </span><span class="se">\</span>
<span class="w">    </span>--host<span class="o">=</span>aarch64-unknown-linux-gnu<span class="w"> </span><span class="se">\</span>
<span class="w">    </span>--with-build-python<span class="o">=</span>../x86_64/python
</pre></div>
</div>
</section>
</section>
<section id="python-build-system">
<h2><span class="section-number">3.4. </span>Python 构建系统</h2>
<section id="main-files-of-the-build-system">
<h3><span class="section-number">3.4.1. </span>构建系统的主要文件</h3>
<ul class="simple">
<li><p><code class="file docutils literal notranslate"><span class="pre">configure.ac</span></code> =&gt; <code class="file docutils literal notranslate"><span class="pre">configure</span></code>;</p></li>
<li><p><code class="file docutils literal notranslate"><span class="pre">Makefile.pre.in</span></code> =&gt; <code class="file docutils literal notranslate"><span class="pre">Makefile</span></code> (由 <code class="file docutils literal notranslate"><span class="pre">configure</span></code> 创建);</p></li>
<li><p><code class="file docutils literal notranslate"><span class="pre">pyconfig.h</span></code> (由 <code class="file docutils literal notranslate"><span class="pre">configure</span></code> 创建);</p></li>
<li><p><code class="file docutils literal notranslate"><span class="pre">Modules/Setup</span></code>:  由Makefile 使用 <code class="file docutils literal notranslate"><span class="pre">Module/makesetup</span></code> shell 脚本构建的 C 扩展;</p></li>
</ul>
</section>
<section id="main-build-steps">
<h3><span class="section-number">3.4.2. </span>主要构建步骤</h3>
<ul class="simple">
<li><p>C文件（ <code class="docutils literal notranslate"><span class="pre">.c</span></code> ）是作为对象文件（ <code class="docutils literal notranslate"><span class="pre">.o</span></code> ）构建的。</p></li>
<li><p>一个静态库 <code class="docutils literal notranslate"><span class="pre">libpython</span></code> （ <code class="docutils literal notranslate"><span class="pre">.a</span></code> ）是由对象文件创建的。</p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">python.o</span></code> 和静态库 <code class="docutils literal notranslate"><span class="pre">libpython</span></code> 被链接到最终程序 <code class="docutils literal notranslate"><span class="pre">python</span></code> 中。</p></li>
<li><p>C 扩展是由 Makefile 构建的 (参见 <code class="file docutils literal notranslate"><span class="pre">Modules/Setup</span></code>)。</p></li>
</ul>
</section>
<section id="main-makefile-targets">
<h3><span class="section-number">3.4.3. </span>主要 Makefile 目标</h3>
<ul class="simple">
<li><p><code class="docutils literal notranslate"><span class="pre">make</span></code> ：用标准库构建Python。</p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">make</span> <span class="pre">platform:</span></code> ：构建 <code class="docutils literal notranslate"><span class="pre">python</span></code> 程序，但不构建标准库扩展模块。</p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">make</span> <span class="pre">profile-opt</span></code> ：使用 Profile Guided Optimization (PGO) 构建 Python 。你可以使用 configure 的 <a class="reference internal" href="#cmdoption-enable-optimizations"><code class="xref std std-option docutils literal notranslate"><span class="pre">--enable-optimizations</span></code></a> 选项来使其成为 <code class="docutils literal notranslate"><span class="pre">make</span></code> 命令的默认目标（ <code class="docutils literal notranslate"><span class="pre">make</span> <span class="pre">all</span></code> 或只是 <code class="docutils literal notranslate"><span class="pre">make</span></code> ）。</p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">make</span> <span class="pre">buildbottest</span></code> ：构建 Python 并运行 Python 测试套件，与 buildbots 测试 Python 的方式相同。设置变量 <code class="docutils literal notranslate"><span class="pre">TESTTIMEOUT</span></code> （单位：秒）来改变测试超时时间（默认为 1200 即 20 分钟）。</p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">make</span> <span class="pre">install</span></code>：构建并安装 Python 。</p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">make</span> <span class="pre">regen-all</span></code> ：重新生成（几乎）所有生成的文件； <code class="docutils literal notranslate"><span class="pre">make</span> <span class="pre">regen-stdlib-module-names</span></code> 和 <code class="docutils literal notranslate"><span class="pre">autoconf</span></code> 必须对其余生成的文件单独运行。</p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">make</span> <span class="pre">clean</span></code> ：移除构建的文件。</p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">make</span> <span class="pre">distclean</span></code> ：与 <code class="docutils literal notranslate"><span class="pre">make</span> <span class="pre">clean</span></code> 相同，但也删除由配置脚本创建的文件。</p></li>
</ul>
</section>
<section id="c-extensions">
<h3><span class="section-number">3.4.4. </span>C 扩展</h3>
<p>有些 C 扩展是作为内置模块构建的，比如 <code class="docutils literal notranslate"><span class="pre">sys</span></code> 模块。 它们在定义了 <code class="docutils literal notranslate"><span class="pre">Py_BUILD_CORE_BUILTIN</span></code> 宏的情况下构建。 内置模块没有 <code class="docutils literal notranslate"><span class="pre">__file__</span></code> 属性：</p>
<div class="highlight-pycon notranslate"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="kn">import</span> <span class="nn">sys</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">sys</span>
<span class="go">&lt;module &#39;sys&#39; (built-in)&gt;</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">sys</span><span class="o">.</span><span class="vm">__file__</span>
<span class="gt">Traceback (most recent call last):</span>
  File <span class="nb">&quot;&lt;stdin&gt;&quot;</span>, line <span class="m">1</span>, in <span class="n">&lt;module&gt;</span>
<span class="gr">AttributeError</span>: <span class="n">module &#39;sys&#39; has no attribute &#39;__file__&#39;</span>
</pre></div>
</div>
<p>其他 C 扩展是作为动态库来构建的，比如 <code class="docutils literal notranslate"><span class="pre">_asyncio</span></code> 模块。 它们在定义了 <code class="docutils literal notranslate"><span class="pre">Py_BUILD_CORE_MODULE</span></code> 宏的情况下构建。 在 Linux x86-64 上的例子：</p>
<div class="highlight-pycon notranslate"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="kn">import</span> <span class="nn">_asyncio</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">_asyncio</span>
<span class="go">&lt;module &#39;_asyncio&#39; from &#39;/usr/lib64/python3.9/lib-dynload/_asyncio.cpython-39-x86_64-linux-gnu.so&#39;&gt;</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">_asyncio</span><span class="o">.</span><span class="vm">__file__</span>
<span class="go">&#39;/usr/lib64/python3.9/lib-dynload/_asyncio.cpython-39-x86_64-linux-gnu.so&#39;</span>
</pre></div>
</div>
<p><code class="file docutils literal notranslate"><span class="pre">Modules/Setup</span></code> 用于生成 Makefile 目标，以构建 C 扩展。在文件的开头， C 被构建为内置模块。在标记 <code class="docutils literal notranslate"><span class="pre">*shared*</span></code> 之后定义的扩展被构建为动态库。</p>
<p>宏 <code class="xref c c-macro docutils literal notranslate"><span class="pre">PyAPI_FUNC()</span></code>, <code class="xref c c-macro docutils literal notranslate"><span class="pre">PyAPI_DATA()</span></code> 和 <a class="reference internal" href="../c-api/intro.xhtml#c.PyMODINIT_FUNC" title="PyMODINIT_FUNC"><code class="xref c c-macro docutils literal notranslate"><span class="pre">PyMODINIT_FUNC</span></code></a> 在 <code class="file docutils literal notranslate"><span class="pre">Include/exports.h</span></code> 中的定义将因是否定义了 <code class="docutils literal notranslate"><span class="pre">Py_BUILD_CORE_MODULE</span></code> 宏而不同:</p>
<ul class="simple">
<li><p>如果 <code class="docutils literal notranslate"><span class="pre">Py_BUILD_CORE_MODULE</span></code> 定义了，使用 <code class="docutils literal notranslate"><span class="pre">Py_EXPORTED_SYMBOL</span></code> 。</p></li>
<li><p>否则使用 <code class="docutils literal notranslate"><span class="pre">Py_IMPORTED_SYMBOL</span></code> 。</p></li>
</ul>
<p>如果宏 <code class="docutils literal notranslate"><span class="pre">Py_BUILD_CORE_BUILTIN</span></code> 被错误地用在作为共享库构建的 C 扩展上，它的 <code class="samp docutils literal notranslate"><span class="pre">PyInit_</span><em><span class="pre">xxx</span></em><span class="pre">()</span></code> 函数就不会被导出，导致导入时出现 <a class="reference internal" href="../library/exceptions.xhtml#ImportError" title="ImportError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">ImportError</span></code></a> 。</p>
</section>
</section>
<section id="compiler-and-linker-flags">
<h2><span class="section-number">3.5. </span>编译器和链接器的标志</h2>
<p>脚本 <code class="docutils literal notranslate"><span class="pre">./configure</span></code> 和环境变量设置的选项，并被 <code class="docutils literal notranslate"><span class="pre">Makefile</span></code> 使用。</p>
<section id="preprocessor-flags">
<h3><span class="section-number">3.5.1. </span>预处理器的标志</h3>
<dl class="std envvar">
<dt class="sig sig-object std" id="envvar-CONFIGURE_CPPFLAGS">
<span class="sig-name descname"><span class="pre">CONFIGURE_CPPFLAGS</span></span></dt>
<dd><p>变量 <span class="target" id="index-70"></span><a class="reference internal" href="#envvar-CPPFLAGS"><code class="xref std std-envvar docutils literal notranslate"><span class="pre">CPPFLAGS</span></code></a> 的值被传递给 <code class="docutils literal notranslate"><span class="pre">./configure</span></code> 脚本。</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.6.</span></p>
</div>
</dd></dl>

<dl class="std envvar">
<dt class="sig sig-object std" id="envvar-CPPFLAGS">
<span class="sig-name descname"><span class="pre">CPPFLAGS</span></span></dt>
<dd><p>(Objective) C/C++ 预处理器标志，例如，如果头文件位于非标准的目录 <em>include_dir</em> 中，请使用 <code class="samp docutils literal notranslate"><span class="pre">-I</span><em><span class="pre">include_dir</span></em></code> 。</p>
<p><span class="target" id="index-71"></span><a class="reference internal" href="#envvar-CPPFLAGS"><code class="xref std std-envvar docutils literal notranslate"><span class="pre">CPPFLAGS</span></code></a> 和 <span class="target" id="index-72"></span><a class="reference internal" href="#envvar-LDFLAGS"><code class="xref std std-envvar docutils literal notranslate"><span class="pre">LDFLAGS</span></code></a> 都需要包含 shell 的值以便能够使用环境变量中指定的目录构建扩展模块。</p>
</dd></dl>

<dl class="std envvar">
<dt class="sig sig-object std" id="envvar-BASECPPFLAGS">
<span class="sig-name descname"><span class="pre">BASECPPFLAGS</span></span></dt>
<dd><div class="versionadded">
<p><span class="versionmodified added">Added in version 3.4.</span></p>
</div>
</dd></dl>

<dl class="std envvar">
<dt class="sig sig-object std" id="envvar-PY_CPPFLAGS">
<span class="sig-name descname"><span class="pre">PY_CPPFLAGS</span></span></dt>
<dd><p>为构建解释器对象文件增加了额外的预处理器标志。</p>
<p>默认为：  <code class="docutils literal notranslate"><span class="pre">$(BASECPPFLAGS)</span> <span class="pre">-I.</span> <span class="pre">-I$(srcdir)/Include</span> <span class="pre">$(CONFIGURE_CPPFLAGS)</span> <span class="pre">$(CPPFLAGS)</span></code> 。</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.2.</span></p>
</div>
</dd></dl>

</section>
<section id="compiler-flags">
<h3><span class="section-number">3.5.2. </span>编译器标志</h3>
<dl class="std envvar">
<dt class="sig sig-object std" id="envvar-CC">
<span class="sig-name descname"><span class="pre">CC</span></span></dt>
<dd><p>C 编译器指令。</p>
<p>例如： <code class="docutils literal notranslate"><span class="pre">gcc</span> <span class="pre">-pthread</span></code> 。</p>
</dd></dl>

<dl class="std envvar">
<dt class="sig sig-object std" id="envvar-CXX">
<span class="sig-name descname"><span class="pre">CXX</span></span></dt>
<dd><p>C++ 编译器指令。</p>
<p>例如： <code class="docutils literal notranslate"><span class="pre">g++</span> <span class="pre">-pthread</span></code> 。</p>
</dd></dl>

<dl class="std envvar">
<dt class="sig sig-object std" id="envvar-CFLAGS">
<span class="sig-name descname"><span class="pre">CFLAGS</span></span></dt>
<dd><p>C 编译器标志。</p>
</dd></dl>

<dl class="std envvar">
<dt class="sig sig-object std" id="envvar-CFLAGS_NODIST">
<span class="sig-name descname"><span class="pre">CFLAGS_NODIST</span></span></dt>
<dd><p><span class="target" id="index-73"></span><a class="reference internal" href="#envvar-CFLAGS_NODIST"><code class="xref std std-envvar docutils literal notranslate"><span class="pre">CFLAGS_NODIST</span></code></a> 用于构建解释器和 stdlib C 扩展。 一旦装好 Python 则当某个编译器旗标 <em>不应</em> 成为 <span class="target" id="index-74"></span><a class="reference internal" href="#envvar-CFLAGS"><code class="xref std std-envvar docutils literal notranslate"><span class="pre">CFLAGS</span></code></a> 的一部分时将可使用它 (<a class="reference external" href="https://github.com/python/cpython/issues/65320">gh-65320</a><span class="link-target"> [https://github.com/python/cpython/issues/65320]</span>)。</p>
<p>特别地，<span class="target" id="index-75"></span><a class="reference internal" href="#envvar-CFLAGS"><code class="xref std std-envvar docutils literal notranslate"><span class="pre">CFLAGS</span></code></a> 不应当包含:</p>
<ul class="simple">
<li><p>编译器旗标 <code class="docutils literal notranslate"><span class="pre">-I</span></code> (用于为包括文件设置搜索路径)。 <code class="docutils literal notranslate"><span class="pre">-I</span></code> 旗标将按从左到右的顺序处理，并且 <span class="target" id="index-76"></span><a class="reference internal" href="#envvar-CFLAGS"><code class="xref std std-envvar docutils literal notranslate"><span class="pre">CFLAGS</span></code></a> 中的任何旗标都将优先于 user- 和 package- 层级所提供的 <code class="docutils literal notranslate"><span class="pre">-I</span></code> 旗标。</p></li>
<li><p>加固旗标如 <code class="docutils literal notranslate"><span class="pre">-Werror</span></code> 因为分发版无法控制由用户安装的包是否符合这样的高标准。</p></li>
</ul>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.5.</span></p>
</div>
</dd></dl>

<dl class="std envvar">
<dt class="sig sig-object std" id="envvar-COMPILEALL_OPTS">
<span class="sig-name descname"><span class="pre">COMPILEALL_OPTS</span></span></dt>
<dd><p>当在 <code class="docutils literal notranslate"><span class="pre">make</span> <span class="pre">install</span></code> 中构建 PYC 文件时传给 <a class="reference internal" href="../library/compileall.xhtml#module-compileall" title="compileall: Tools for byte-compiling all Python source files in a directory tree."><code class="xref py py-mod docutils literal notranslate"><span class="pre">compileall</span></code></a> 命令行的选项。 默认值: <code class="docutils literal notranslate"><span class="pre">-j0</span></code>。</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.12.</span></p>
</div>
</dd></dl>

<dl class="std envvar">
<dt class="sig sig-object std" id="envvar-EXTRA_CFLAGS">
<span class="sig-name descname"><span class="pre">EXTRA_CFLAGS</span></span></dt>
<dd><p>而外的 C 编译器指令。</p>
</dd></dl>

<dl class="std envvar">
<dt class="sig sig-object std" id="envvar-CONFIGURE_CFLAGS">
<span class="sig-name descname"><span class="pre">CONFIGURE_CFLAGS</span></span></dt>
<dd><p>变量 <span class="target" id="index-77"></span><a class="reference internal" href="#envvar-CFLAGS"><code class="xref std std-envvar docutils literal notranslate"><span class="pre">CFLAGS</span></code></a> 的值传递给 <code class="docutils literal notranslate"><span class="pre">./configure</span></code> 脚本。</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.2.</span></p>
</div>
</dd></dl>

<dl class="std envvar">
<dt class="sig sig-object std" id="envvar-CONFIGURE_CFLAGS_NODIST">
<span class="sig-name descname"><span class="pre">CONFIGURE_CFLAGS_NODIST</span></span></dt>
<dd><p>变量 <span class="target" id="index-78"></span><a class="reference internal" href="#envvar-CFLAGS_NODIST"><code class="xref std std-envvar docutils literal notranslate"><span class="pre">CFLAGS_NODIST</span></code></a> 的值传递给 <code class="docutils literal notranslate"><span class="pre">./configure</span></code> 脚本。</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.5.</span></p>
</div>
</dd></dl>

<dl class="std envvar">
<dt class="sig sig-object std" id="envvar-BASECFLAGS">
<span class="sig-name descname"><span class="pre">BASECFLAGS</span></span></dt>
<dd><p>基础编译器标志。</p>
</dd></dl>

<dl class="std envvar">
<dt class="sig sig-object std" id="envvar-OPT">
<span class="sig-name descname"><span class="pre">OPT</span></span></dt>
<dd><p>优化标志。</p>
</dd></dl>

<dl class="std envvar">
<dt class="sig sig-object std" id="envvar-CFLAGS_ALIASING">
<span class="sig-name descname"><span class="pre">CFLAGS_ALIASING</span></span></dt>
<dd><p>严格或不严格的别名标志，用于编译 <code class="docutils literal notranslate"><span class="pre">Python/dtoa.c</span></code> 、</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.7.</span></p>
</div>
</dd></dl>

<dl class="std envvar">
<dt class="sig sig-object std" id="envvar-CCSHARED">
<span class="sig-name descname"><span class="pre">CCSHARED</span></span></dt>
<dd><p>用于构建共享库的编译器标志。</p>
<p>例如， <code class="docutils literal notranslate"><span class="pre">-fPIC</span></code> 在 Linux 和 BSD 上使用。</p>
</dd></dl>

<dl class="std envvar">
<dt class="sig sig-object std" id="envvar-CFLAGSFORSHARED">
<span class="sig-name descname"><span class="pre">CFLAGSFORSHARED</span></span></dt>
<dd><p>为构建解释器对象文件增加了额外的 C 标志。</p>
<p>，默认为： <code class="docutils literal notranslate"><span class="pre">$(CCSHARED)</span></code> ，当 <a class="reference internal" href="#cmdoption-enable-shared"><code class="xref std std-option docutils literal notranslate"><span class="pre">--enable-shared</span></code></a> 被使用时，则为空字符串</p>
</dd></dl>

<dl class="std envvar">
<dt class="sig sig-object std" id="envvar-PY_CFLAGS">
<span class="sig-name descname"><span class="pre">PY_CFLAGS</span></span></dt>
<dd><p>默认为： <code class="docutils literal notranslate"><span class="pre">$(BASECFLAGS)</span> <span class="pre">$(OPT)</span> <span class="pre">$(CONFIGURE_CFLAGS)</span> <span class="pre">$(CFLAGS)</span> <span class="pre">$(EXTRA_CFLAGS)</span></code> 。</p>
</dd></dl>

<dl class="std envvar">
<dt class="sig sig-object std" id="envvar-PY_CFLAGS_NODIST">
<span class="sig-name descname"><span class="pre">PY_CFLAGS_NODIST</span></span></dt>
<dd><p>默认为： <code class="docutils literal notranslate"><span class="pre">$(CONFIGURE_CFLAGS_NODIST)</span> <span class="pre">$(CFLAGS_NODIST)</span> <span class="pre">-I$(srcdir)/Include/internal</span></code> 。</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.5.</span></p>
</div>
</dd></dl>

<dl class="std envvar">
<dt class="sig sig-object std" id="envvar-PY_STDMODULE_CFLAGS">
<span class="sig-name descname"><span class="pre">PY_STDMODULE_CFLAGS</span></span></dt>
<dd><p>用于构建解释器对象文件的 C 标志。</p>
<p>默认为： <code class="docutils literal notranslate"><span class="pre">$(PY_CFLAGS)</span> <span class="pre">$(PY_CFLAGS_NODIST)</span> <span class="pre">$(PY_CPPFLAGS)</span> <span class="pre">$(CFLAGSFORSHARED)</span></code>。</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.7.</span></p>
</div>
</dd></dl>

<dl class="std envvar">
<dt class="sig sig-object std" id="envvar-PY_CORE_CFLAGS">
<span class="sig-name descname"><span class="pre">PY_CORE_CFLAGS</span></span></dt>
<dd><p>默认为 <code class="docutils literal notranslate"><span class="pre">$(PY_STDMODULE_CFLAGS)</span> <span class="pre">-DPy_BUILD_CORE</span></code> 。</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.2.</span></p>
</div>
</dd></dl>

<dl class="std envvar">
<dt class="sig sig-object std" id="envvar-PY_BUILTIN_MODULE_CFLAGS">
<span class="sig-name descname"><span class="pre">PY_BUILTIN_MODULE_CFLAGS</span></span></dt>
<dd><p>编译器标志，将标准库的扩展模块作为内置模块来构建，如 <a class="reference internal" href="../library/posix.xhtml#module-posix" title="posix: The most common POSIX system calls (normally used via module os). (Unix)"><code class="xref py py-mod docutils literal notranslate"><span class="pre">posix</span></code></a> 模块</p>
<p>默认为： <code class="docutils literal notranslate"><span class="pre">$(PY_STDMODULE_CFLAGS)</span> <span class="pre">-DPy_BUILD_CORE_BUILTIN</span></code> 。</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.8.</span></p>
</div>
</dd></dl>

<dl class="std envvar">
<dt class="sig sig-object std" id="envvar-PURIFY">
<span class="sig-name descname"><span class="pre">PURIFY</span></span></dt>
<dd><p>Purify 命令。 Purify 是一个内存调试程序。</p>
<p>默认为：空字符串（不使用）。</p>
</dd></dl>

</section>
<section id="linker-flags">
<h3><span class="section-number">3.5.3. </span>链接器标志位</h3>
<dl class="std envvar">
<dt class="sig sig-object std" id="envvar-LINKCC">
<span class="sig-name descname"><span class="pre">LINKCC</span></span></dt>
<dd><p>用于构建如 <code class="docutils literal notranslate"><span class="pre">python</span></code> 和 <code class="docutils literal notranslate"><span class="pre">_testembed</span></code> 的程序的链接器命令。</p>
<p>默认值: <code class="docutils literal notranslate"><span class="pre">$(PURIFY)</span> <span class="pre">$(CC)</span></code>。</p>
</dd></dl>

<dl class="std envvar">
<dt class="sig sig-object std" id="envvar-CONFIGURE_LDFLAGS">
<span class="sig-name descname"><span class="pre">CONFIGURE_LDFLAGS</span></span></dt>
<dd><p>变量 <span class="target" id="index-79"></span><a class="reference internal" href="#envvar-LDFLAGS"><code class="xref std std-envvar docutils literal notranslate"><span class="pre">LDFLAGS</span></code></a> 的值被传递给 <code class="docutils literal notranslate"><span class="pre">./configure</span></code> 脚本。</p>
<p>避免指定 <span class="target" id="index-80"></span><a class="reference internal" href="#envvar-CFLAGS"><code class="xref std std-envvar docutils literal notranslate"><span class="pre">CFLAGS</span></code></a> ， <span class="target" id="index-81"></span><a class="reference internal" href="#envvar-LDFLAGS"><code class="xref std std-envvar docutils literal notranslate"><span class="pre">LDFLAGS</span></code></a> 等，这样用户就可以在命令行上使用它们来追加这些值，而不用触碰到预设的值。</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.2.</span></p>
</div>
</dd></dl>

<dl class="std envvar">
<dt class="sig sig-object std" id="envvar-LDFLAGS_NODIST">
<span class="sig-name descname"><span class="pre">LDFLAGS_NODIST</span></span></dt>
<dd><p><span class="target" id="index-82"></span><a class="reference internal" href="#envvar-LDFLAGS_NODIST"><code class="xref std std-envvar docutils literal notranslate"><span class="pre">LDFLAGS_NODIST</span></code></a> 的使用方式与 <span class="target" id="index-83"></span><a class="reference internal" href="#envvar-CFLAGS_NODIST"><code class="xref std std-envvar docutils literal notranslate"><span class="pre">CFLAGS_NODIST</span></code></a> 相同。 一旦装好 Python 则当某个链接器旗标 <em>不应</em> 成为 <span class="target" id="index-84"></span><a class="reference internal" href="#envvar-LDFLAGS"><code class="xref std std-envvar docutils literal notranslate"><span class="pre">LDFLAGS</span></code></a> 的一部分时将可使用它 (<a class="reference external" href="https://github.com/python/cpython/issues/65320">gh-65320</a><span class="link-target"> [https://github.com/python/cpython/issues/65320]</span>)。</p>
<p>特别地，<span class="target" id="index-85"></span><a class="reference internal" href="#envvar-LDFLAGS"><code class="xref std std-envvar docutils literal notranslate"><span class="pre">LDFLAGS</span></code></a> 不应当包含:</p>
<ul class="simple">
<li><p>编译器旗标 <code class="docutils literal notranslate"><span class="pre">-L</span></code> (用于为库设置搜索路径)。 <code class="docutils literal notranslate"><span class="pre">-L</span></code> 旗标将按从左到右的顺序处理，并且 <span class="target" id="index-86"></span><a class="reference internal" href="#envvar-LDFLAGS"><code class="xref std std-envvar docutils literal notranslate"><span class="pre">LDFLAGS</span></code></a> 中的任何旗标都将优先于 user- 和 package 层级所提供的 <code class="docutils literal notranslate"><span class="pre">-L</span></code> 旗标。</p></li>
</ul>
</dd></dl>

<dl class="std envvar">
<dt class="sig sig-object std" id="envvar-CONFIGURE_LDFLAGS_NODIST">
<span class="sig-name descname"><span class="pre">CONFIGURE_LDFLAGS_NODIST</span></span></dt>
<dd><p>变量 <span class="target" id="index-87"></span><a class="reference internal" href="#envvar-LDFLAGS_NODIST"><code class="xref std std-envvar docutils literal notranslate"><span class="pre">LDFLAGS_NODIST</span></code></a> 的值传递给 <code class="docutils literal notranslate"><span class="pre">./configure</span></code> 脚本。</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.8.</span></p>
</div>
</dd></dl>

<dl class="std envvar">
<dt class="sig sig-object std" id="envvar-LDFLAGS">
<span class="sig-name descname"><span class="pre">LDFLAGS</span></span></dt>
<dd><p>链接器标志，例如，如果库位于非标准的目录 <em>lib_dir</em> 中，请使用 <code class="samp docutils literal notranslate"><span class="pre">-L</span><em><span class="pre">lib_dir</span></em></code> 。</p>
<p><span class="target" id="index-88"></span><a class="reference internal" href="#envvar-CPPFLAGS"><code class="xref std std-envvar docutils literal notranslate"><span class="pre">CPPFLAGS</span></code></a> 和 <span class="target" id="index-89"></span><a class="reference internal" href="#envvar-LDFLAGS"><code class="xref std std-envvar docutils literal notranslate"><span class="pre">LDFLAGS</span></code></a> 都需要包含 shell 的值以便能够使用环境变量中指定的目录构建扩展模块。</p>
</dd></dl>

<dl class="std envvar">
<dt class="sig sig-object std" id="envvar-LIBS">
<span class="sig-name descname"><span class="pre">LIBS</span></span></dt>
<dd><p>链接器标志，在链接 Python 可执行文件时将库传递给链接器。</p>
<p>例如： <code class="docutils literal notranslate"><span class="pre">-lrt</span></code> 。</p>
</dd></dl>

<dl class="std envvar">
<dt class="sig sig-object std" id="envvar-LDSHARED">
<span class="sig-name descname"><span class="pre">LDSHARED</span></span></dt>
<dd><p>构建一个共享库的命令。</p>
<p>默认为： <code class="docutils literal notranslate"><span class="pre">&#64;LDSHARED&#64;</span> <span class="pre">$(PY_LDFLAGS)</span></code> 。</p>
</dd></dl>

<dl class="std envvar">
<dt class="sig sig-object std" id="envvar-BLDSHARED">
<span class="sig-name descname"><span class="pre">BLDSHARED</span></span></dt>
<dd><p>构建共享库 <code class="docutils literal notranslate"><span class="pre">libpython</span></code> 的命令。</p>
<p>默认为： <code class="docutils literal notranslate"><span class="pre">&#64;BLDSHARED&#64;</span> <span class="pre">$(PY_CORE_LDFLAGS)</span></code> 。</p>
</dd></dl>

<dl class="std envvar">
<dt class="sig sig-object std" id="envvar-PY_LDFLAGS">
<span class="sig-name descname"><span class="pre">PY_LDFLAGS</span></span></dt>
<dd><p>默认为： <code class="docutils literal notranslate"><span class="pre">$(CONFIGURE_LDFLAGS)</span> <span class="pre">$(LDFLAGS)</span></code> 。</p>
</dd></dl>

<dl class="std envvar">
<dt class="sig sig-object std" id="envvar-PY_LDFLAGS_NODIST">
<span class="sig-name descname"><span class="pre">PY_LDFLAGS_NODIST</span></span></dt>
<dd><p>默认为： <code class="docutils literal notranslate"><span class="pre">$(CONFIGURE_LDFLAGS_NODIST)</span> <span class="pre">$(LDFLAGS_NODIST)</span></code> 。</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.8.</span></p>
</div>
</dd></dl>

<dl class="std envvar">
<dt class="sig sig-object std" id="envvar-PY_CORE_LDFLAGS">
<span class="sig-name descname"><span class="pre">PY_CORE_LDFLAGS</span></span></dt>
<dd><p>用于构建解释器对象文件的链接器标志。</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.8.</span></p>
</div>
</dd></dl>

</section>
</section>
</section>


            <div class="clearer"></div>
          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>