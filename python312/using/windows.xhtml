<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" /><meta name="viewport" content="width=device-width, initial-scale=1" />
<meta property="og:title" content="4. 在Windows上使用 Python" />
<meta property="og:type" content="website" />
<meta property="og:url" content="https://docs.python.org/3/using/windows.xhtml" />
<meta property="og:site_name" content="Python documentation" />
<meta property="og:description" content="本文档旨在概述在 Microsoft Windows 上使用 Python 时应了解的特定于 Windows 的行为。 不同于大多数 Unix 系统和服务，Windows 未包括任何受系统支持的 Python 预安装版。 为了让 Python 可用，多年以来 CPython 团队为每个 发布版[https://www.python.org/downloads/] 编译了 Windows 安装..." />
<meta property="og:image" content="https://docs.python.org/3/_static/og-image.png" />
<meta property="og:image:alt" content="Python documentation" />
<meta name="description" content="本文档旨在概述在 Microsoft Windows 上使用 Python 时应了解的特定于 Windows 的行为。 不同于大多数 Unix 系统和服务，Windows 未包括任何受系统支持的 Python 预安装版。 为了让 Python 可用，多年以来 CPython 团队为每个 发布版[https://www.python.org/downloads/] 编译了 Windows 安装..." />
<meta property="og:image:width" content="200" />
<meta property="og:image:height" content="200" />
<meta name="theme-color" content="#3776ab" />

    <title>4. 在Windows上使用 Python</title>
    <link rel="stylesheet" type="text/css" href="../_static/pygments.css" />
    <link rel="stylesheet" type="text/css" href="../_static/epub.css" />
    <link rel="canonical" href="https://docs.python.org/3/using/windows.html" />
    
      
    

    
    <style>
      @media only screen {
        table.full-width-table {
            width: 100%;
        }
      }
    </style>
 

  </head><body>


    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <section id="using-python-on-windows">
<span id="using-on-windows"></span><h1><span class="section-number">4. </span>在Windows上使用 Python</h1>
<p>本文档旨在概述在 Microsoft Windows 上使用 Python 时应了解的特定于 Windows 的行为。</p>
<p>不同于大多数 Unix 系统和服务，Windows 未包括任何受系统支持的 Python 预安装版。 为了让 Python 可用，多年以来 CPython 团队为每个 <a class="reference external" href="https://www.python.org/downloads/">发布版</a><span class="link-target"> [https://www.python.org/downloads/]</span> 编译了 Windows 安装程序。 这些安装程序主要被用来安装用户级 Python 安装版，包含供单独用户使用的核心解释器和库。 安装程序也能够为单台机器上的所有用户进行安装，还提供了针对应用程序本地分发版的单独 ZIP 文件。</p>
<p>如 <span class="target" id="index-78"></span><a class="pep reference external" href="https://peps.python.org/pep-0011/"><strong>PEP 11</strong></a><span class="link-target"> [https://peps.python.org/pep-0011/]</span> 所述，Python 发布版对某个 Windows 平台的支持仅限于被 Microsoft 视为处于延长支持周期内的版本。 这意味着 Python 3.12 支持 Windows 8.1 及其后的版本。 如果你需要 Windows 7 支持，请安装 Python 3.8。</p>
<p>Windows提供了许多不同的安装程序，每个安装程序都有一定的优点和缺点。</p>
<p><a class="reference internal" href="#windows-full"><span class="std std-ref">完整安装程序</span></a> 内含所有组件，对于使用Python 进行任何类型项目的开发人员而言，它是最佳选择。</p>
<p><a class="reference internal" href="#windows-store"><span class="std std-ref">Microsoft Store包</span></a> 是一个适用于运行脚本和包，并使用 IDLE 或其他开发环境的简易 Python 安装版。 它需要 Windows 10 或更新的系统，但可以安全地安装而不会破坏其他程序。 它还提供了许多便捷命令用来启动 Python 及其工具。</p>
<p><a class="reference internal" href="#windows-nuget"><span class="std std-ref">nuget.org 安装包</span></a> 是用于持续集成系统的轻量级安装。它可用于构建Python包或运行脚本，但不可更新且没有用户界面工具。</p>
<p><a class="reference internal" href="#windows-embeddable"><span class="std std-ref">可嵌入的包</span></a> 是Python的最小安装包，适合嵌入到更大的应用程序中。</p>
<section id="the-full-installer">
<span id="windows-full"></span><h2><span class="section-number">4.1. </span>完整安装程序</h2>
<section id="installation-steps">
<h3><span class="section-number">4.1.1. </span>安装步骤</h3>
<p>四个 Python 3.12 安装程序可供下载 - 32位和64位版本的各有两个。 <em>web installer</em> （网络安装包）是一个小的初始化工具，它将在安装过程中，根据需要自动下载所需的组件。 <em>offline installer</em> （离线安装包）内含默认安装所需的组件，可选择功能仍需要Internet连接下载。请参阅 <a class="reference internal" href="#install-layout-option"><span class="std std-ref">免下载安装</span></a> 以了解在安装过程中避免下载的其他方法。</p>
<p>启动安装程序后，可以选择以下两个选项之一：</p>
<img alt="../_images/win_installer.png" src="../_images/win_installer.png" />
<p>如果选择“Install Now（立即安装）”：</p>
<ul class="simple">
<li><p>您 <em>不</em> 需要成为管理员（除非需要对C运行库进行系统更新，或者为所有用户安装 <a class="reference internal" href="#launcher"><span class="std std-ref">适用于Windows的Python启动器</span></a> ）</p></li>
<li><p>Python将安装到您的用户目录中</p></li>
<li><p><a class="reference internal" href="#launcher"><span class="std std-ref">适用于Windows的Python启动器</span></a> 将根据第一页底部的选项安装</p></li>
<li><p>将安装标准库，测试套件，启动器和pip</p></li>
<li><p>如果选择将安装目录将添加到 <span class="target" id="index-79"></span><code class="xref std std-envvar docutils literal notranslate"><span class="pre">PATH</span></code></p></li>
<li><p>快捷方式仅对当前用户可见</p></li>
</ul>
<p>选择“自定义安装”将允许您选择：要安装的功能、安装位置、其他选项或安装后的操作。如果要安装调试符号或二进制文件，您需要使用此选项。</p>
<p>如要为全部用户安装，应选择“自定义安装”。在这种情况下:</p>
<ul class="simple">
<li><p>您可能需要提供管理凭据或批准</p></li>
<li><p>Python 将安装到Program Files目录中</p></li>
<li><p><a class="reference internal" href="#launcher"><span class="std std-ref">适用于Windows的Python启动器</span></a> 将安装到Windows目录中</p></li>
<li><p>安装期间可以选择可选功能</p></li>
<li><p>标准库可以预编译为字节码</p></li>
<li><p>如果选中，安装目录将添加到系统 <span class="target" id="index-80"></span><code class="xref std std-envvar docutils literal notranslate"><span class="pre">PATH</span></code></p></li>
<li><p>快捷方式所有用户可用</p></li>
</ul>
</section>
<section id="removing-the-max-path-limitation">
<span id="max-path"></span><h3><span class="section-number">4.1.2. </span>删除 MAX_PATH 限制</h3>
<p>历史上Windows的路径长度限制为260个字符。这意味着长于此的路径将无法解决并导致错误。</p>
<p>在最新版本的 Windows 中，此限制可被扩展到大约 32,000 个字符。 但需要让管理员激活“启用 Win32 长路径”组策略，或在注册表键 <code class="docutils literal notranslate"><span class="pre">HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\FileSystem</span></code> 中设置 <code class="docutils literal notranslate"><span class="pre">LongPathsEnabled</span></code> 为 <code class="docutils literal notranslate"><span class="pre">1</span></code>。</p>
<p>这允许 <a class="reference internal" href="../library/functions.xhtml#open" title="open"><code class="xref py py-func docutils literal notranslate"><span class="pre">open()</span></code></a> 函数，<a class="reference internal" href="../library/os.xhtml#module-os" title="os: Miscellaneous operating system interfaces."><code class="xref py py-mod docutils literal notranslate"><span class="pre">os</span></code></a> 模块和大多数其他路径功能接受并返回长度超过 260 个字符的路径。</p>
<p>更改上述选项后，无需进一步配置。</p>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.6 版本发生变更: </span>Python中启用了对长路径的支持。</p>
</div>
</section>
<section id="installing-without-ui">
<span id="install-quiet-option"></span><h3><span class="section-number">4.1.3. </span>无UI 安装</h3>
<p>安装程序UI中的所有选项也可以从命令行指定，允许脚本安装程序在许多机器上复制安装，而无需用户交互。还可以在不禁用UI的情况下设置这些选项，以更改一些默认值。</p>
<p>下列选项（通过附带 <code class="docutils literal notranslate"><span class="pre">/?</span></code> 执行安装器来查看）可被传给安装器:</p>
<table class="docutils align-default">
<thead>
<tr class="row-odd"><th class="head"><p>名称</p></th>
<th class="head"><p>描述</p></th>
</tr>
</thead>
<tbody>
<tr class="row-even"><td><p>/passive</p></td>
<td><p>显示进度而无需用户交互</p></td>
</tr>
<tr class="row-odd"><td><p>/quiet</p></td>
<td><p>安装/卸载时不显示任何 UI</p></td>
</tr>
<tr class="row-even"><td><p>/simple</p></td>
<td><p>防止用户定制</p></td>
</tr>
<tr class="row-odd"><td><p>/uninstall</p></td>
<td><p>移除 Python（无需确认）</p></td>
</tr>
<tr class="row-even"><td><p>/layout [directory]</p></td>
<td><p>预下载所有组件</p></td>
</tr>
<tr class="row-odd"><td><p>/log [filename]</p></td>
<td><p>指定日志记录文件位置</p></td>
</tr>
</tbody>
</table>
<p>所有其他选项都传递为 <code class="docutils literal notranslate"><span class="pre">name=value</span></code> ，其中值通常是 <code class="docutils literal notranslate"><span class="pre">0</span></code> 来禁用某个特性， <code class="docutils literal notranslate"><span class="pre">1</span></code> 来启用某个特性或路径。可用选项的完整列表如下所示。</p>
<table class="docutils align-default">
<thead>
<tr class="row-odd"><th class="head"><p>名称</p></th>
<th class="head"><p>描述</p></th>
<th class="head"><p>默认值</p></th>
</tr>
</thead>
<tbody>
<tr class="row-even"><td><p>InstallAllUsers</p></td>
<td><p>为所有用户安装。</p></td>
<td><p>0</p></td>
</tr>
<tr class="row-odd"><td><p>TargetDir</p></td>
<td><p>安装目录</p></td>
<td><p>基于InstallAllUsers选择</p></td>
</tr>
<tr class="row-even"><td><p>DefaultAllUsersTargetDir</p></td>
<td><p>为所有用户安装时的默认安装路径</p></td>
<td><p><code class="file docutils literal notranslate"><span class="pre">%ProgramFiles%\Python</span> <span class="pre">X.Y</span></code> 或 <code class="file docutils literal notranslate"><span class="pre">%ProgramFiles(x86)%\Python</span> <span class="pre">X.Y</span></code></p></td>
</tr>
<tr class="row-odd"><td><p>DefaultJustForMeTargetDir</p></td>
<td><p>仅为当前用户安装时的默认安装路径</p></td>
<td><p><code class="file docutils literal notranslate"><span class="pre">%LocalAppData%\Programs\Python\PythonXY</span></code> 或 <code class="file docutils literal notranslate"><span class="pre">%LocalAppData%\Programs\Python\PythonXY-32</span></code> 或 <code class="file docutils literal notranslate"><span class="pre">%LocalAppData%\Programs\Python\PythonXY-64</span></code></p></td>
</tr>
<tr class="row-even"><td><p>DefaultCustomTargetDir</p></td>
<td><p>UI中显示的默认自定义安装目录</p></td>
<td><p>（空）</p></td>
</tr>
<tr class="row-odd"><td><p>AssociateFiles</p></td>
<td><p>如果还安装了启动器，则创建文件关联。</p></td>
<td><p>1</p></td>
</tr>
<tr class="row-even"><td><p>CompileAll</p></td>
<td><p>将所有 <code class="docutils literal notranslate"><span class="pre">.py</span></code> 文件编译为 <code class="docutils literal notranslate"><span class="pre">.pyc</span></code> 。</p></td>
<td><p>0</p></td>
</tr>
<tr class="row-odd"><td><p>PrependPath</p></td>
<td><p>将安装和脚本目录添加到 <span class="target" id="index-81"></span><code class="xref std std-envvar docutils literal notranslate"><span class="pre">PATH</span></code> 并将 <code class="docutils literal notranslate"><span class="pre">.PY</span></code> 添加到 <span class="target" id="index-82"></span><code class="xref std std-envvar docutils literal notranslate"><span class="pre">PATHEXT</span></code></p></td>
<td><p>0</p></td>
</tr>
<tr class="row-even"><td><p>AppendPath</p></td>
<td><p>将安装和脚本目录添加到 <span class="target" id="index-83"></span><code class="xref std std-envvar docutils literal notranslate"><span class="pre">PATH</span></code> 并将 <code class="docutils literal notranslate"><span class="pre">.PY</span></code> 添加到 <span class="target" id="index-84"></span><code class="xref std std-envvar docutils literal notranslate"><span class="pre">PATHEXT</span></code></p></td>
<td><p>0</p></td>
</tr>
<tr class="row-odd"><td><p>Shortcuts</p></td>
<td><p>如果已安装，为解释器，文档和IDLE创建快捷方式</p></td>
<td><p>1</p></td>
</tr>
<tr class="row-even"><td><p>Include_doc</p></td>
<td><p>安装Python手册</p></td>
<td><p>1</p></td>
</tr>
<tr class="row-odd"><td><p>Include_debug</p></td>
<td><p>安装调试二进制文件</p></td>
<td><p>0</p></td>
</tr>
<tr class="row-even"><td><p>Include_dev</p></td>
<td><p>安装开发者头文件和库文件。 省略这一步可能导致安装不可用。</p></td>
<td><p>1</p></td>
</tr>
<tr class="row-odd"><td><p>Include_exe</p></td>
<td><p>安装 <code class="file docutils literal notranslate"><span class="pre">python.exe</span></code> 以及相关文件。忽略此项可能会导致安装不可用。</p></td>
<td><p>1</p></td>
</tr>
<tr class="row-even"><td><p>Include_launcher</p></td>
<td><p>安装 <a class="reference internal" href="#launcher"><span class="std std-ref">适用于Windows的Python启动器</span></a> .</p></td>
<td><p>1</p></td>
</tr>
<tr class="row-odd"><td><p>InstallLauncherAllUsers</p></td>
<td><p>为所有用户安装启动器。还需要 <code class="docutils literal notranslate"><span class="pre">Include_launcher</span></code> 被设定为1</p></td>
<td><p>1</p></td>
</tr>
<tr class="row-even"><td><p>Include_lib</p></td>
<td><p>安装标准库和扩展模块。 省略这一步可能导致安装不可用。</p></td>
<td><p>1</p></td>
</tr>
<tr class="row-odd"><td><p>Include_pip</p></td>
<td><p>安装捆绑的pip和setuptools</p></td>
<td><p>1</p></td>
</tr>
<tr class="row-even"><td><p>Include_symbols</p></td>
<td><p>安装调试符号集 (<code class="docutils literal notranslate"><span class="pre">*.pdb</span></code>)</p></td>
<td><p>0</p></td>
</tr>
<tr class="row-odd"><td><p>Include_tcltk</p></td>
<td><p>安装Tcl/Tk 支持和IDLE</p></td>
<td><p>1</p></td>
</tr>
<tr class="row-even"><td><p>Include_test</p></td>
<td><p>安装标准库测试套件</p></td>
<td><p>1</p></td>
</tr>
<tr class="row-odd"><td><p>Include_tools</p></td>
<td><p>安装实用程序脚本</p></td>
<td><p>1</p></td>
</tr>
<tr class="row-even"><td><p>LauncherOnly</p></td>
<td><p>仅安装启动器。这将覆盖大多数其他选项。</p></td>
<td><p>0</p></td>
</tr>
<tr class="row-odd"><td><p>SimpleInstall</p></td>
<td><p>禁用大多数安装UI</p></td>
<td><p>0</p></td>
</tr>
<tr class="row-even"><td><p>SimpleInstallDescription</p></td>
<td><p>使用简化安装UI时显示的自定义消息。</p></td>
<td><p>（空）</p></td>
</tr>
</tbody>
</table>
<p>例如，要以静默方式全局安装默认的Python，您可以（在命令提示符&gt;）使用以下命令:</p>
<div class="highlight-none notranslate"><div class="highlight"><pre><span></span>python-3.9.0.exe /quiet InstallAllUsers=1 PrependPath=1 Include_test=0
</pre></div>
</div>
<p>要允许用户在没有测试套件的情况下轻松安装Python的个人副本，可以使用以下命令提供快捷方式。这将显示一个简化的初始页面，不允许自定义:</p>
<div class="highlight-none notranslate"><div class="highlight"><pre><span></span>python-3.9.0.exe InstallAllUsers=0 Include_launcher=0 Include_test=0
    SimpleInstall=1 SimpleInstallDescription=&quot;Just for me, no test suite.&quot;
</pre></div>
</div>
<p>（请注意，省略启动器也会省略文件关联，并且仅在全局安装包含启动器时才建议用于每用户安装。）</p>
<p>上面列出的选项也可以在一个名为 <code class="docutils literal notranslate"><span class="pre">unattend.xml</span></code> 的文件中与可执行文件一起提供。此文件指定选项和值的列表。作为属性提供的值，（如果可能）它将转换为数字。作为文本提供的值，始终保留为字符串。此示例文件设置与上一示例采用相同的选项：</p>
<div class="highlight-xml notranslate"><div class="highlight"><pre><span></span><span class="nt">&lt;Options&gt;</span>
<span class="w">    </span><span class="nt">&lt;Option</span><span class="w"> </span><span class="na">Name=</span><span class="s">&quot;InstallAllUsers&quot;</span><span class="w"> </span><span class="na">Value=</span><span class="s">&quot;no&quot;</span><span class="w"> </span><span class="nt">/&gt;</span>
<span class="w">    </span><span class="nt">&lt;Option</span><span class="w"> </span><span class="na">Name=</span><span class="s">&quot;Include_launcher&quot;</span><span class="w"> </span><span class="na">Value=</span><span class="s">&quot;0&quot;</span><span class="w"> </span><span class="nt">/&gt;</span>
<span class="w">    </span><span class="nt">&lt;Option</span><span class="w"> </span><span class="na">Name=</span><span class="s">&quot;Include_test&quot;</span><span class="w"> </span><span class="na">Value=</span><span class="s">&quot;no&quot;</span><span class="w"> </span><span class="nt">/&gt;</span>
<span class="w">    </span><span class="nt">&lt;Option</span><span class="w"> </span><span class="na">Name=</span><span class="s">&quot;SimpleInstall&quot;</span><span class="w"> </span><span class="na">Value=</span><span class="s">&quot;yes&quot;</span><span class="w"> </span><span class="nt">/&gt;</span>
<span class="w">    </span><span class="nt">&lt;Option</span><span class="w"> </span><span class="na">Name=</span><span class="s">&quot;SimpleInstallDescription&quot;</span><span class="nt">&gt;</span>Just<span class="w"> </span>for<span class="w"> </span>me,<span class="w"> </span>no<span class="w"> </span>test<span class="w"> </span>suite<span class="nt">&lt;/Option&gt;</span>
<span class="nt">&lt;/Options&gt;</span>
</pre></div>
</div>
</section>
<section id="installing-without-downloading">
<span id="install-layout-option"></span><h3><span class="section-number">4.1.4. </span>免下载安装</h3>
<p>由于下载的初始安装包中未包含Python的某些可选功能，如果选择安装这些功能可能需要Internet连接。为了避免这种需要，可以按需下载所有可能的组件，以创建一个完整的布局，该布局将不再需要internet连接，而不管所选择的特性是什么。请注意，此下载可能比要求的要大，但是如果要执行大量安装，则拥有本地缓存​​的副本非常有用。</p>
<p>从命令提示符执行以下命令以下载所有可能的必需文件。 请记得要将 <code class="docutils literal notranslate"><span class="pre">python-3.9.0.exe</span></code> 替换为安装程序的实际名称，并在单独的目录中创建子目录以避免同名文件间的冲突。</p>
<div class="highlight-none notranslate"><div class="highlight"><pre><span></span>python-3.9.0.exe /layout [optional target directory]
</pre></div>
</div>
<p>您也可以指定 <code class="docutils literal notranslate"><span class="pre">/quiet</span></code> 选项来隐藏进度显示。</p>
</section>
<section id="modifying-an-install">
<h3><span class="section-number">4.1.5. </span>修改安装</h3>
<p>安装Python后，您可以通过Windows中的“程序和功能”工具添加或删除功能。选择Python条目并选择“卸载/更改”以在维护模式下打开安装程序。</p>
<p>“修改” 允许您通过修改复选框来添加或删除功能 - 未更改的复选框将不会安装或删除任何内容。在此模式下无法更改某些选项，例如安装目录；要修改这些，您需要完全删除然后重新安装Python。</p>
<p>“修复” 将使用当前设置验证应安装的所有文件，并替换已删除或修改的任何文件</p>
<p>“卸载” 将完全删除Python，但 <a class="reference internal" href="#launcher"><span class="std std-ref">适用于Windows的Python启动器</span></a> 除外，它在“程序和功能”中有自己的条目。</p>
</section>
</section>
<section id="the-microsoft-store-package">
<span id="windows-store"></span><h2><span class="section-number">4.2. </span>Microsoft Store包</h2>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.7.2.</span></p>
</div>
<p>Microsoft Store 包是一个易于安装的 Python 解释器，主要针对在交互模式下使用，例如用于教学。</p>
<p>要安装此软件包，请确保您拥有最新的Windows 10更新，并在Microsoft Store应用程序中搜索 &quot;Python 3.12&quot; 。确保您选择的应用程序由 Python Software Foundation 发布并安装。</p>
<div class="admonition warning">
<p class="admonition-title">警告</p>
<p>Python将始终在Microsoft Store上免费提供。如果要求您付款，则表示您没有选择正确的包。</p>
</div>
<p>安装完成后，可以在开始菜单中找到它来启动 Python。或者可以在命令提示符或 PowerShell 会话中输入 <code class="docutils literal notranslate"><span class="pre">python</span></code> 来启动。此外可以输入 <code class="docutils literal notranslate"><span class="pre">pip</span></code> 或 <code class="docutils literal notranslate"><span class="pre">idle</span></code> 来使用 pip 和 IDLE。IDLE 也在开始菜单中。</p>
<p>所有这三个命令也可以使用版本号后缀，例如， <code class="docutils literal notranslate"><span class="pre">python3.exe</span></code> 和 <code class="docutils literal notranslate"><span class="pre">python3.x.exe</span></code> 以及 <code class="docutils literal notranslate"><span class="pre">python.exe</span></code> （其中 <code class="docutils literal notranslate"><span class="pre">3.x</span></code> 是您要启动的特定版本，例如 3.12 ）。在 <code class="docutils literal notranslate"><span class="pre">设置--&gt;主页--&gt;应用和功能</span></code> 页面中，点选 <code class="docutils literal notranslate"><span class="pre">管理可选功能</span></code> ，选择与每个命令关联的python版本。建议确保 <code class="docutils literal notranslate"><span class="pre">pip</span></code> 和 <code class="docutils literal notranslate"><span class="pre">idle</span></code> 与选择的 <code class="docutils literal notranslate"><span class="pre">python</span></code> 版本一致。</p>
<p>可以使用 <code class="docutils literal notranslate"><span class="pre">python</span> <span class="pre">-m</span> <span class="pre">venv</span></code> 创建虚拟环境并激活并正常使用。</p>
<p>如果你已经安装了另一个版本的Python并将它添加到你的 <code class="docutils literal notranslate"><span class="pre">PATH</span></code> 变量中，那么它将作为 <code class="docutils literal notranslate"><span class="pre">python.exe</span></code> 而不是来自Microsoft Store的那个。要访问新安装，请使用 <code class="docutils literal notranslate"><span class="pre">python3.exe</span></code> 或 <code class="docutils literal notranslate"><span class="pre">python3.x.exe</span></code> 。</p>
<p><code class="docutils literal notranslate"><span class="pre">py.exe</span></code> 启动器将检测此 Python 安装版，但会优先使用来自传统安装器的安装版。</p>
<p>要删除Python，请打开“设置”并使用“应用程序和功能”，或者在“开始”中找到Python，然后右键单击以选择“卸载”。卸载将删除该已安装Python程序中的所有软件包，但不会删除任何虚拟环境</p>
<section id="known-issues">
<h3><span class="section-number">4.2.1. </span>已知的问题</h3>
<section id="redirection-of-local-data-registry-and-temporary-paths">
<h4><span class="section-number">4.2.1.1. </span>本地数据、注册表项和临时路径的重定向</h4>
<p>由于 Microsoft Store 应用程序的限制，Python 脚本可能无法对共享位置如 <span class="target" id="index-85"></span><code class="xref std std-envvar docutils literal notranslate"><span class="pre">TEMP</span></code> 和注册表进行完全写入访问。 相反同，它将写入到一个私有副本。 如果你的脚本必须修改共享位置，则需要安装完整的安装器。</p>
<p>在运行时，Python 将使用知名 Windows 文件夹和注册表项的一个私有副本。 例如，如果环境变量 <span class="target" id="index-86"></span><code class="xref std std-envvar docutils literal notranslate"><span class="pre">%APPDATA%</span></code> 为 <code class="file docutils literal notranslate"><span class="pre">c:\Users\&lt;user&gt;\AppData\</span></code>，则当写入 <code class="file docutils literal notranslate"><span class="pre">C:\Users\&lt;user&gt;\AppData\Local</span></code> 时将会写入到 <code class="file docutils literal notranslate"><span class="pre">C:\Users\&lt;user&gt;\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.8_qbz5n2kfra8p0\LocalCache\Local\</span></code>。</p>
<p>当读取文件时，Windows 将返回来自私有文件夹的文件，或者如果文件不存在，则返回来自知名 Windows 目录的文件。 例如读取 <code class="file docutils literal notranslate"><span class="pre">C:\Windows\System32</span></code> 将返回 <code class="file docutils literal notranslate"><span class="pre">C:\Windows\System32</span></code> 的内容加上 <code class="file docutils literal notranslate"><span class="pre">C:\Program</span> <span class="pre">Files\WindowsApps\package_name\VFS\SystemX86</span></code> 的内容。</p>
<p>你可以使用 <a class="reference internal" href="../library/os.path.xhtml#os.path.realpath" title="os.path.realpath"><code class="xref py py-func docutils literal notranslate"><span class="pre">os.path.realpath()</span></code></a> 找到任何现有文件的真实路径:</p>
<div class="highlight-python notranslate"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="kn">import</span> <span class="nn">os</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">test_file</span> <span class="o">=</span> <span class="s1">&#39;C:</span><span class="se">\\</span><span class="s1">Users</span><span class="se">\\</span><span class="s1">example</span><span class="se">\\</span><span class="s1">AppData</span><span class="se">\\</span><span class="s1">Local</span><span class="se">\\</span><span class="s1">test.txt&#39;</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">realpath</span><span class="p">(</span><span class="n">test_file</span><span class="p">)</span>
<span class="go">&#39;C:\\Users\\example\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.8_qbz5n2kfra8p0\\LocalCache\\Local\\test.txt&#39;</span>
</pre></div>
</div>
<p>当写入到 Windows 注册表时，会存在以下行为:</p>
<ul class="simple">
<li><p>从 <code class="docutils literal notranslate"><span class="pre">HKLM\\Software</span></code> 读取是被允许的并且其结果将与包中的 <code class="file docutils literal notranslate"><span class="pre">registry.dat</span></code> 文件合并。</p></li>
<li><p>当相应的键/值存在时向 <code class="docutils literal notranslate"><span class="pre">HKLM\\Software</span></code> 写入，即修改现有键的值是不被允许的。</p></li>
<li><p>当包中相应的键/值不存在并且用户具有正确的访问权限时向 <code class="docutils literal notranslate"><span class="pre">HKLM\\Software</span></code> 写入是被允许的。</p></li>
</ul>
<p>有关此限制的技术原理的更多细节，请查询 Microsoft 已打包完全可信应用的文档，当前位于 <a class="reference external" href="https://docs.microsoft.com/en-us/windows/msix/desktop/desktop-to-uwp-behind-the-scenes">docs.microsoft.com/en-us/windows/msix/desktop/desktop-to-uwp-behind-the-scenes</a><span class="link-target"> [https://docs.microsoft.com/en-us/windows/msix/desktop/desktop-to-uwp-behind-the-scenes]</span></p>
</section>
</section>
</section>
<section id="the-nuget-org-packages">
<span id="windows-nuget"></span><h2><span class="section-number">4.3. </span>nuget.org 安装包</h2>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.5.2.</span></p>
</div>
<p>nuget.org是一个精简的Python环境，用于在没有全局安装Python的系统的持续集成和构建。虽然Nuget是“.NET的包管理器”，但是对于包含构建时工具的包来说，它也可以很好地工作。</p>
<p>访问 <a class="reference external" href="https://www.nuget.org/">nuget.org</a><span class="link-target"> [https://www.nuget.org/]</span>  获取有关使用nuget的最新信息。下面的摘要对Python开发人员来说已经足够了。</p>
<p> <code class="docutils literal notranslate"><span class="pre">nuget.exe</span></code> 命令行工具可以直接从 <code class="docutils literal notranslate"><span class="pre">https://aka.ms/nugetclidl</span></code> 下载，例如，使用curl或PowerShell。使用该工具安装64位或32位最新版本的Python:</p>
<div class="highlight-none notranslate"><div class="highlight"><pre><span></span>nuget.exe install python -ExcludeVersion -OutputDirectory .
nuget.exe install pythonx86 -ExcludeVersion -OutputDirectory .
</pre></div>
</div>
<p>要选择特定版本，请添加 <code class="docutils literal notranslate"><span class="pre">-Version</span> <span class="pre">3.x.y</span></code> 。输出目录可以从 <code class="docutils literal notranslate"><span class="pre">.</span></code> 更改，包将安装到子目录中。默认情况下，子目录的名称与包的名称相同，如果没有 <code class="docutils literal notranslate"><span class="pre">-ExcludeVersion</span></code> 选项，则此名称将包含已安装的特定版本。子目录里面是一个包含Python安装的 <code class="docutils literal notranslate"><span class="pre">tools</span></code> 目录：</p>
<div class="highlight-doscon notranslate"><div class="highlight"><pre><span></span><span class="go"># Without -ExcludeVersion</span>
<span class="gp">&gt;</span> .\python.3.5.2\tools\python.exe -V
<span class="go">Python 3.5.2</span>

<span class="go"># With -ExcludeVersion</span>
<span class="gp">&gt;</span> .\python\tools\python.exe -V
<span class="go">Python 3.5.2</span>
</pre></div>
</div>
<p>通常，nuget包不可升级，应该平行安装较新版本并使用完整路径引用。或者，手动删除程序包目录并再次安装。如果在构建之间不保留文件，许多CI系统将自动执行此操作。</p>
<p>除了 <code class="docutils literal notranslate"><span class="pre">tools</span></code> 目录外，还有一个 <code class="docutils literal notranslate"><span class="pre">build\native</span></code> 目录。它包含一个MSBuild属性文件 <code class="docutils literal notranslate"><span class="pre">python.props</span></code> ，可以在C++项目中使用该文件来引用Python安装。包含这些设置将自动在生成中使用标头和导入库。</p>
<p>The package information pages on nuget.org are
<a class="reference external" href="https://www.nuget.org/packages/python">www.nuget.org/packages/python</a><span class="link-target"> [https://www.nuget.org/packages/python]</span>
for the 64-bit version and <a class="reference external" href="https://www.nuget.org/packages/pythonx86">www.nuget.org/packages/pythonx86</a><span class="link-target"> [https://www.nuget.org/packages/pythonx86]</span> for the 32-bit version.</p>
</section>
<section id="the-embeddable-package">
<span id="windows-embeddable"></span><h2><span class="section-number">4.4. </span>可嵌入的包</h2>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.5.</span></p>
</div>
<p>嵌入式发行版是一个包含最小Python环境的ZIP文件。它旨在作为另一个应用程序的一部分，而不是由最终用户直接访问。</p>
<p>在解压缩后，嵌入的分发包（几乎）与用户的系统完全隔离，包括环境变量、系统注册表设置和已安装的软件包。 标准库作为预先编译和优化的 <code class="docutils literal notranslate"><span class="pre">.pyc</span></code> 文件被包括在一个 ZIP 文件中，并提供了 <code class="docutils literal notranslate"><span class="pre">python3.dll</span></code>, <code class="docutils literal notranslate"><span class="pre">python37.dll</span></code>, <code class="docutils literal notranslate"><span class="pre">python.exe</span></code> 和 <code class="docutils literal notranslate"><span class="pre">pythonw.exe</span></code>。 其中将不包括 Tcl/tk（包括所有依赖它的包，如 Idle 等）、pip 和 Python 文档。</p>
<div class="admonition note">
<p class="admonition-title">备注</p>
<p>嵌入式发行版不包括 <a class="reference external" href="https://docs.microsoft.com/en-US/cpp/windows/latest-supported-vc-redist#visual-studio-2015-2017-2019-and-2022">Microsoft C Runtime</a><span class="link-target"> [https://docs.microsoft.com/en-US/cpp/windows/latest-supported-vc-redist#visual-studio-2015-2017-2019-and-2022]</span> ，应用程序安装程序负责提供此功能。运行时可能已经预先安装在用户的系统上或通过Windows Update自动安装，并且可以通过在系统目录中找到 <code class="docutils literal notranslate"><span class="pre">ucrtbase.dll</span></code> 来检测</p>
</div>
<p>第三方软件包应该由应用程序与嵌入式发行版一起安装。这个发行版不支持像常规Python安装那样使用pip来管理依赖关系，不过可以小心地将pip包含进来并使用它进行自动更新。通常，第三方包应该作为应用程序的一部分(“打包”)处理，以便开发人员在向用户提供更新之前能够确保与新版本兼容。</p>
<p>下面描述了这个发行版的两个推荐用例。</p>
<section id="python-application">
<h3><span class="section-number">4.4.1. </span>Python应用程序</h3>
<p>用Python编写的应用程序并不一定要求用户了解这一事实。在这种情况下，可以使用嵌入式发行版在安装包中包含Python的私有版本。根据它应该有多透明(或者相反，它应该看起来有多专业)，有两个选项。</p>
<p>使用专门的可执行文件作为启动程序需要一些编码，但为用户提供了最透明的体验。使用定制的启动器，没有明显的迹象表明程序是在Python上运行的：图标可以定制，公司和版本信息可以指定，文件关联可以正常运行。在大多数情况下，自定义启动程序应该只需使用硬编码的命令行就能调用 <code class="docutils literal notranslate"><span class="pre">Py_Main</span></code></p>
<p>更简单的方法是提供批处理文件或生成的快捷方式，使用所需的命令行参数直接调用 <code class="docutils literal notranslate"><span class="pre">python.exe</span></code> 或 <code class="docutils literal notranslate"><span class="pre">pythonw.exe</span></code> 。在这种情况下，应用程序将显示为Python而不是其实际名称，并且用户可能无法将其与其他正在运行的Python进程或文件关联区分开来。</p>
<p>对于后一种方法，包应该与Python可执行文件一起作为目录安装，以确保它们在路径上可用。使用专用的启动器，包可以位于其他位置，因为在启动应用程序之前有机会指定搜索路径。</p>
</section>
<section id="embedding-python">
<h3><span class="section-number">4.4.2. </span>嵌入Python</h3>
<p>用本地代码编写的应用程序通常需要某种形式的脚本语言，嵌入式Python发行版可以用于此目的。通常，应用程序的大部分都是本机代码，某些部分将调用 <code class="docutils literal notranslate"><span class="pre">python.exe</span></code> 或直接使用 <code class="docutils literal notranslate"><span class="pre">python3.dll</span></code> 。无论是哪种情况，将嵌入的发行版解压缩到应用程序安装的子目录中就足以提供可加载的Python解释器。</p>
<p>与应用程序使用一样，包可以安装到任何位置，因为在初始化解释器之前有机会指定搜索路径。否则，使用嵌入式发行版和常规安装之间没有根本区别。</p>
</section>
</section>
<section id="alternative-bundles">
<h2><span class="section-number">4.5. </span>替代捆绑包</h2>
<p>除了标准的CPython发行版之外，还有一些包含附加功能的修改包。以下是热门版本及其主要功能的列表：</p>
<dl>
<dt><a class="reference external" href="https://www.activestate.com/products/python/">ActivePython</a><span class="link-target"> [https://www.activestate.com/products/python/]</span></dt><dd><p>具有多平台兼容性的安装程序，文档，PyWin32</p>
</dd>
<dt><a class="reference external" href="https://www.anaconda.com/download/">Anaconda</a><span class="link-target"> [https://www.anaconda.com/download/]</span></dt><dd><p>流行的科学模块（如numpy，scipy和pandas）和 <code class="docutils literal notranslate"><span class="pre">conda</span></code> 包管理器。</p>
</dd>
<dt><a class="reference external" href="https://www.enthought.com/edm/">Enthought 部署管理器</a><span class="link-target"> [https://www.enthought.com/edm/]</span></dt><dd><p>“下一代的 Python 环境和包管理器”</p>
<p>之前 Enthought 提供了 Canopy，但已经 <a class="reference external" href="https://support.enthought.com/hc/en-us/articles/360038600051-Canopy-GUI-end-of-life-transition-to-the-Enthought-Deployment-Manager-EDM-and-Visual-Studio-Code">于 2016 年结束生命期</a><span class="link-target"> [https://support.enthought.com/hc/en-us/articles/360038600051-Canopy-GUI-end-of-life-transition-to-the-Enthought-Deployment-Manager-EDM-and-Visual-Studio-Code]</span>。</p>
</dd>
<dt><a class="reference external" href="https://winpython.github.io/">WinPython</a><span class="link-target"> [https://winpython.github.io/]</span></dt><dd><p>特定于Windows的发行版，包含用于构建包的预构建科学包和工具。</p>
</dd>
</dl>
<p>请注意，这些软件包可能不包含最新版本的Python或其他库，并且不由核心Python团队维护或支持。</p>
</section>
<section id="configuring-python">
<h2><span class="section-number">4.6. </span>配置Python</h2>
<p>要从命令提示符方便地运行Python，您可以考虑在Windows中更改一些默认环境变量。虽然安装程序提供了为您配置PATH和PATHEXT变量的选项，但这仅适用于单版本、全局安装。如果您经常使用多个版本的Python，请考虑使用 <a class="reference internal" href="#launcher"><span class="std std-ref">适用于Windows的Python启动器</span></a> 。</p>
<section id="excursus-setting-environment-variables">
<span id="setting-envvars"></span><h3><span class="section-number">4.6.1. </span>附录：设置环境变量</h3>
<p>Windows允许在用户级别和系统级别永久配置环境变量，或临时在命令提示符中配置环境变量。</p>
<p>要临时设置环境变量，请打开命令提示符并使用 <strong class="command">set</strong> 命令：</p>
<div class="highlight-doscon notranslate"><div class="highlight"><pre><span></span><span class="gp">C:\&gt;</span><span class="k">set</span> <span class="nv">PATH</span><span class="p">=</span>C:\Program Files\Python 3.9;<span class="nv">%PATH%</span>
<span class="gp">C:\&gt;</span><span class="k">set</span> <span class="nv">PYTHONPATH</span><span class="p">=</span><span class="nv">%PYTHONPATH%</span>;C:\My_python_lib
<span class="gp">C:\&gt;</span>python
</pre></div>
</div>
<p>这些环境变量的更改将应用​​于在该控制台中执行的任何其他命令，并且，由该控制台启动的任何应用程序都继承设这些设置。</p>
<p>在百分号中包含的变量名将被现有值替换，允许在开始或结束时添加新值。通过将包含 <strong class="program">python.exe</strong> 的目录添加到开头来修改 <span class="target" id="index-87"></span><code class="xref std std-envvar docutils literal notranslate"><span class="pre">PATH</span></code>  是确保启动正确版本的Python的常用方法。</p>
<p>要永久修改默认环境变量，请单击“开始”并搜索“编辑环境变量”，或打开系统属性的 <span class="guilabel">高级系统设置</span> ，然后单击 <span class="guilabel">环境变量</span> 按钮。在此对话框中，您可以添加或修改用户和系统变量。要更改系统变量，您需要对计算机进行无限制访问（即管理员权限）。</p>
<div class="admonition note">
<p class="admonition-title">备注</p>
<p>Windows会将用户变量串联在系统变量 <em>之后</em> ，这可能会在修改 <span class="target" id="index-88"></span><code class="xref std std-envvar docutils literal notranslate"><span class="pre">PATH</span></code> 时导致意外结果。</p>
<p><span class="target" id="index-89"></span><a class="reference internal" href="cmdline.xhtml#envvar-PYTHONPATH"><code class="xref std std-envvar docutils literal notranslate"><span class="pre">PYTHONPATH</span></code></a> 变量被 Python 的所有版本使用，因此除非它列出的路径只包含与所有已安装的 Python 版本兼容的代码，否则不要永久配置此变量。</p>
</div>
<div class="admonition seealso">
<p class="admonition-title">参见</p>
<dl class="simple">
<dt><a class="reference external" href="https://docs.microsoft.com/en-us/windows/win32/procthread/environment-variables">https://docs.microsoft.com/en-us/windows/win32/procthread/environment-variables</a></dt><dd><p>Windows 中的环境变量概述</p>
</dd>
<dt><a class="reference external" href="https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/set_1">https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/set_1</a></dt><dd><p>用于临时修改环境变量的 <code class="docutils literal notranslate"><span class="pre">set</span></code> 命令</p>
</dd>
<dt><a class="reference external" href="https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/setx">https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/setx</a></dt><dd><p>用于永久修改环境变量的 <code class="docutils literal notranslate"><span class="pre">setx</span></code> 命令</p>
</dd>
</dl>
</div>
</section>
<section id="finding-the-python-executable">
<span id="windows-path-mod"></span><h3><span class="section-number">4.6.2. </span>查找Python可执行文件</h3>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.5 版本发生变更.</span></p>
</div>
<p>除了使用自动创建的Python解释器的开始菜单项之外，您可能还想在命令提示符下启动Python。安装程序有一个选项可以为您设置。</p>
<p>在安装程序的第一页上，可以选择标记为“将Python添加到环境变量”的选项，以使安装程序将安装位置添加到 <span class="target" id="index-90"></span><code class="xref std std-envvar docutils literal notranslate"><span class="pre">PATH</span></code> 。还添加了 <code class="file docutils literal notranslate"><span class="pre">Scripts\</span></code> 文件夹的位置。这允许你输入 <strong class="command">python</strong> 来运行解释器，并且 <strong class="command">pip</strong> 用于包安装程序。因此，您还可以使用命令行选项执行脚本，请参阅 <a class="reference internal" href="cmdline.xhtml#using-on-cmdline"><span class="std std-ref">命令行</span></a> 文档。</p>
<p>如果在安装时未启用此选项，则始终可以重新运行安装程序，选择“修改”并启用它。或者，您可以使用 <a class="reference internal" href="#setting-envvars"><span class="std std-ref">附录：设置环境变量</span></a> 的方法手动修改 <span class="target" id="index-91"></span><code class="xref std std-envvar docutils literal notranslate"><span class="pre">PATH</span></code> 。您需要将Python安装目录添加到 <span class="target" id="index-92"></span><code class="xref std std-envvar docutils literal notranslate"><span class="pre">PATH</span></code> 环境变量中，该内容与其他条目用分号分隔。示例变量可能如下所示（假设前两个条目已经存在）:</p>
<div class="highlight-none notranslate"><div class="highlight"><pre><span></span>C:\WINDOWS\system32;C:\WINDOWS;C:\Program Files\Python 3.9
</pre></div>
</div>
</section>
</section>
<section id="utf-8-mode">
<span id="win-utf8-mode"></span><h2><span class="section-number">4.7. </span>UTF-8 模式</h2>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.7.</span></p>
</div>
<p>Windows 仍然使用传统编码格式作为系统的编码格式 (ANSI 代码页)。 Python 使用它作为文本文件默认的编码格式 (即 <a class="reference internal" href="../library/locale.xhtml#locale.getencoding" title="locale.getencoding"><code class="xref py py-func docutils literal notranslate"><span class="pre">locale.getencoding()</span></code></a>)。</p>
<p>这可能会造成问题，因为因特网和大多数 Unix 系统包括 WSL (Windows Subsystem for Linux) 广泛使用 UTF-8。</p>
<p>你可以使用 <a class="reference internal" href="../library/os.xhtml#utf8-mode"><span class="std std-ref">Python UTF-8 模式</span></a> 将默认的文本编码格式改为 UTF-8。 要启用 <a class="reference internal" href="../library/os.xhtml#utf8-mode"><span class="std std-ref">Python UTF-8 模式</span></a> 可以通过 <code class="docutils literal notranslate"><span class="pre">-X</span> <span class="pre">utf8</span></code> 命令行选项，或者 <code class="docutils literal notranslate"><span class="pre">PYTHONUTF8=1</span></code> 环境变量。 请参阅 <span class="target" id="index-93"></span><a class="reference internal" href="cmdline.xhtml#envvar-PYTHONUTF8"><code class="xref std std-envvar docutils literal notranslate"><span class="pre">PYTHONUTF8</span></code></a> 了解如何启用 UTF-8 模式，并参阅 <a class="reference internal" href="#setting-envvars"><span class="std std-ref">附录：设置环境变量</span></a> 了解如何修改环境变量。</p>
<p>当 <a class="reference internal" href="../library/os.xhtml#utf8-mode"><span class="std std-ref">Python UTF-8 模式</span></a> 启用时，你仍然可以通过 &quot;mbcs&quot; 编解码器使用系统编码格式（ANSI 代码页）。</p>
<p>请注意添加 <code class="docutils literal notranslate"><span class="pre">PYTHONUTF8=1</span></code> 到默认环境变量将会影响你的系统中的所有 Python 3.7+ 应用。 如果你有任何 Python 3.7+ 应用仍然依赖于传统的系统编码格式，则推荐设置临时环境变量或使用 <code class="docutils literal notranslate"><span class="pre">-X</span> <span class="pre">utf8</span></code> 命令行选项。</p>
<div class="admonition note">
<p class="admonition-title">备注</p>
<p>即使在不启用 UTF-8 模式时，Windows 版的 Python 也会在以下情况中默认使用 UTF-8：</p>
<ul class="simple">
<li><p>控制台 I/O 包括标准 I/O (详情见 <span class="target" id="index-94"></span><a class="pep reference external" href="https://peps.python.org/pep-0528/"><strong>PEP 528</strong></a><span class="link-target"> [https://peps.python.org/pep-0528/]</span>)。</p></li>
<li><p><a class="reference internal" href="../glossary.xhtml#term-filesystem-encoding-and-error-handler"><span class="xref std std-term">文件系统编码格式</span></a> (参见 <span class="target" id="index-95"></span><a class="pep reference external" href="https://peps.python.org/pep-0529/"><strong>PEP 529</strong></a><span class="link-target"> [https://peps.python.org/pep-0529/]</span> 了解详情)。</p></li>
</ul>
</div>
</section>
<section id="python-launcher-for-windows">
<span id="launcher"></span><h2><span class="section-number">4.8. </span>适用于Windows的Python启动器</h2>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.3.</span></p>
</div>
<p>用于Windows的Python启动器是一个实用程序，可帮助定位和执行不同的Python版本。它允许脚本（或命令行）指示特定Python版本的首选项，并将定位并执行该版本。</p>
<p>与 <span class="target" id="index-96"></span><code class="xref std std-envvar docutils literal notranslate"><span class="pre">PATH</span></code> 变量不同，启动器将正确选择最合适的Python版本。它更倾向于按用户安装而不是系统安装，并按语言版本排序，而不是使用最新安装的版本。</p>
<p>启动器最初是在 <span class="target" id="index-97"></span><a class="pep reference external" href="https://peps.python.org/pep-0397/"><strong>PEP 397</strong></a><span class="link-target"> [https://peps.python.org/pep-0397/]</span> 中指定的。</p>
<section id="getting-started">
<h3><span class="section-number">4.8.1. </span>入门</h3>
<section id="from-the-command-line">
<h4><span class="section-number">4.8.1.1. </span>从命令行</h4>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.6 版本发生变更.</span></p>
</div>
<p>全局安装Python 3.3及更高版本将把启动器放在你的 <span class="target" id="index-98"></span><code class="xref std std-envvar docutils literal notranslate"><span class="pre">PATH</span></code> 上。启动程序与所有可用的Python版本兼容，因此安装哪个版本无关紧要。要检查启动程序是否可用，请在命令提示符中执行以下命令：</p>
<div class="highlight-none notranslate"><div class="highlight"><pre><span></span>py
</pre></div>
</div>
<p>您应该会发现已安装的最新版本的Python已启动 - 它可以正常退出，并且将指定的任何其他命令行参数直接发送到Python。</p>
<p>如果您安装了多个版本的Python（例如，3.7和 3.12 ），您会注意到Python 3.12 启动 - 如果要启动 Python 3.7，尝试命令：</p>
<div class="highlight-none notranslate"><div class="highlight"><pre><span></span>py -3.7
</pre></div>
</div>
<p>如果您想使用已安装的 Python 2 的最新版本，请尝试以下命令：</p>
<div class="highlight-none notranslate"><div class="highlight"><pre><span></span>py -2
</pre></div>
</div>
<p>如果您看到以下错误，则表明您没有安装启动器：</p>
<div class="highlight-none notranslate"><div class="highlight"><pre><span></span>&#39;py&#39; is not recognized as an internal or external command,
operable program or batch file.
</pre></div>
</div>
<p>Tix 命令：</p>
<div class="highlight-none notranslate"><div class="highlight"><pre><span></span>py --list
</pre></div>
</div>
<p>显示当前已安装的Python版本。</p>
<p><code class="docutils literal notranslate"><span class="pre">-x.y</span></code> 参数是 <code class="docutils literal notranslate"><span class="pre">-V:Company/Tag</span></code> 参数的简短形式，它允许选择一个特定的 Python 运行时，包括可能来自于 python.org 以外地方的版本。 任何遵循 <span class="target" id="index-99"></span><a class="pep reference external" href="https://peps.python.org/pep-0514/"><strong>PEP 514</strong></a><span class="link-target"> [https://peps.python.org/pep-0514/]</span> 进行注册的运行时都将是可被发现的。 <code class="docutils literal notranslate"><span class="pre">--list</span></code> 命令将列出所有使用 <code class="docutils literal notranslate"><span class="pre">-V:</span></code> 格式的可用运行时。</p>
<p>当使用 <code class="docutils literal notranslate"><span class="pre">-V:</span></code> 参数时，指定 Company 将把选择限制到来自该提供方的运行时，而仅指定 Tag 将选择来自所有提供方的运行时。 请注意省略斜杠将会视作是一个 Tag:</p>
<div class="highlight-none notranslate"><div class="highlight"><pre><span></span># Select any &#39;3.*&#39; tagged runtime
py -V:3

# Select any &#39;PythonCore&#39; released runtime
py -V:PythonCore/

# Select PythonCore&#39;s latest Python 3 runtime
py -V:PythonCore/3
</pre></div>
</div>
<p>该参数的简短形式 (<code class="docutils literal notranslate"><span class="pre">-3</span></code>) 将只选择来自核心 Python 发布版的运行时，而不选择其他分发版。 但是，完整形式 (<code class="docutils literal notranslate"><span class="pre">-V:3</span></code>) 则将选择来自任何版本的运行时。</p>
<p>Company 是在完整字符串上以大小写不敏感的方式进行匹配。 Tag 则是在完整字符串或前缀上进行匹配，具体取决于下一个字符是点号还是横杠。 这将允许 <code class="docutils literal notranslate"><span class="pre">-V:3.1</span></code> 匹配 <code class="docutils literal notranslate"><span class="pre">3.1-32</span></code>，但不匹配 <code class="docutils literal notranslate"><span class="pre">3.10</span></code>。 Tag 是按数字值进行排序 (<code class="docutils literal notranslate"><span class="pre">3.10</span></code> 比 <code class="docutils literal notranslate"><span class="pre">3.1</span></code> 新)，但是按文本进行比较 (<code class="docutils literal notranslate"><span class="pre">-V:3.01</span></code> 将不匹配 <code class="docutils literal notranslate"><span class="pre">3.1</span></code>)。</p>
</section>
<section id="virtual-environments">
<h4><span class="section-number">4.8.1.2. </span>从虚拟环境</h4>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.5.</span></p>
</div>
<p>如果启动程序运行时没有明确的Python版本，并且虚拟环境（使用标准库创建 <a class="reference internal" href="../library/venv.xhtml#module-venv" title="venv: Creation of virtual environments."><code class="xref py py-mod docutils literal notranslate"><span class="pre">venv</span></code></a> 模块或外部 <code class="docutils literal notranslate"><span class="pre">virtualenv</span></code> 工具）处于活动状态，则启动程序将运行虚拟环境的解释器而不是全局的。要运行全局解释器，请停用虚拟环境，或显式指定全局Python版本。</p>
</section>
<section id="from-a-script">
<h4><span class="section-number">4.8.1.3. </span>从脚本</h4>
<p>让我们创建一个测试Python脚本 - 创建一个名为 <code class="docutils literal notranslate"><span class="pre">hello.py</span></code> 的文件，其中包含以下内容</p>
<div class="highlight-python notranslate"><div class="highlight"><pre><span></span><span class="ch">#! python</span>
<span class="kn">import</span> <span class="nn">sys</span>
<span class="n">sys</span><span class="o">.</span><span class="n">stdout</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s2">&quot;hello from Python </span><span class="si">%s</span><span class="se">\n</span><span class="s2">&quot;</span> <span class="o">%</span> <span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">version</span><span class="p">,))</span>
</pre></div>
</div>
<p>从hello.py所在的目录中，执行以下命令：</p>
<div class="highlight-none notranslate"><div class="highlight"><pre><span></span>py hello.py
</pre></div>
</div>
<p>您应该注意到最新的Python 2.x安装的版本号已打印出来。现在尝试将第一行更改为：</p>
<div class="highlight-python notranslate"><div class="highlight"><pre><span></span><span class="ch">#! python3</span>
</pre></div>
</div>
<p>现在重新执行该命令将打印最新的 Python 3.x 信息。 如上面的命令行示例一样，你可以更明确地指定版本限定符。 假设你已安装了 Python 3.7，请尝试将第一行改为 <code class="docutils literal notranslate"><span class="pre">#!</span> <span class="pre">python3.7</span></code> 那么你应当看到打印出了 3.7 的版本信息。</p>
<p>请注意，与交互式使用不同，裸“python”将使用您已安装的Python 2.x的最新版本。这是为了向后兼容及兼容Unix，其中命令 <code class="docutils literal notranslate"><span class="pre">python</span></code> 通常是指Python 2。</p>
</section>
<section id="from-file-associations">
<h4><span class="section-number">4.8.1.4. </span>从文件关联</h4>
<p>安装时应该将启动器与Python文件（即 <code class="docutils literal notranslate"><span class="pre">.py</span></code>, <code class="docutils literal notranslate"><span class="pre">.pyw</span></code>, <code class="docutils literal notranslate"><span class="pre">.pyc</span></code> 文件）相关联。这意味着当您从Windows资源管理器中双击其中一个文件时，将使用启动程序，因此您可以使用上述相同的工具让脚本指定应使用的版本。</p>
<p>这样做的主要好处是，单个启动程序可以同时支持多个Python版本，具体取决于第一行的内容。</p>
</section>
</section>
<section id="shebang-lines">
<h3><span class="section-number">4.8.2. </span>Shebang Lines</h3>
<p>如果脚本文件的第一行以 <code class="docutils literal notranslate"><span class="pre">#!</span></code> 开头，则称为 &quot;shebang&quot; 行。Linux和其他类Unix操作系统都有对这些行的本机支持，它们通常在此类系统上用来指示应该如何执行脚本。这个启动器允许在Windows上对Python脚本使用相同的工具，上面的示例演示了它们的使用。</p>
<p>为了允许Python脚本中的shebang行在Unix和Windows之间移植，该启动器支持许多“虚拟”命令来指定要使用的解释器。支持的虚拟命令是：</p>
<ul class="simple">
<li><p><code class="docutils literal notranslate"><span class="pre">/usr/bin/env</span></code></p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">/usr/bin/python</span></code></p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">/usr/local/bin/python</span></code></p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">python</span></code></p></li>
</ul>
<p>例如，如果脚本开始的第一行</p>
<div class="highlight-sh notranslate"><div class="highlight"><pre><span></span><span class="ch">#! /usr/bin/python</span>
</pre></div>
</div>
<p>The default Python will be located and used.  As many Python scripts written
to work on Unix will already have this line, you should find these scripts can
be used by the launcher without modification.  If you are writing a new script
on Windows which you hope will be useful on Unix, you should use one of the
shebang lines starting with <code class="docutils literal notranslate"><span class="pre">/usr</span></code>.</p>
<p>Any of the above virtual commands can be suffixed with an explicit version
(either just the major version, or the major and minor version).
Furthermore the 32-bit version can be requested by adding &quot;-32&quot; after the
minor version. I.e. <code class="docutils literal notranslate"><span class="pre">/usr/bin/python3.7-32</span></code> will request usage of the
32-bit python 3.7.</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.7: </span>从python启动程序3.7开始，可以通过“-64”后缀调用64位版本。此外，可以指定没有次要的主要和架构（即 <code class="docutils literal notranslate"><span class="pre">/usr/bin/python3-64</span></code> ）。</p>
</div>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.11 版本发生变更: </span>“-64”后缀已被弃用，现在会被视为“任何不被确定为 i386/32 位的架构”。 要请求一个特定的环境，请使用新的 <code class="samp docutils literal notranslate"><span class="pre">-V:</span><em><span class="pre">TAG</span></em></code> 参数并附带完整的标签。</p>
</div>
<p>井号叹号行的 <code class="docutils literal notranslate"><span class="pre">/usr/bin/env</span></code> 形式具有一个额外的特别属性。 在查找已安装的 Python 解释器时，此形式将在可执行程序目录 <span class="target" id="index-100"></span><code class="xref std std-envvar docutils literal notranslate"><span class="pre">PATH</span></code> 中搜索与作为第一个参数传入的名称相匹配的 Python 可执行程序。 这对应于 Unix 中 <span class="target" id="index-101"></span><code class="xref std std-envvar docutils literal notranslate"><span class="pre">PATH</span></code> 执行搜索的 <code class="docutils literal notranslate"><span class="pre">env</span></code> 程序的行为。 如果无法找到与 <code class="docutils literal notranslate"><span class="pre">env</span></code> 命令之后的第一个参数相匹配的可执行程序，但该参数是以 <code class="docutils literal notranslate"><span class="pre">python</span></code> 开头的，它将按针对其他虚拟命令的描述来处理。 可以设置环境变量 <span class="target" id="index-102"></span><code class="xref std std-envvar docutils literal notranslate"><span class="pre">PYLAUNCHER_NO_SEARCH_PATH</span></code> (为任意值) 来跳过对 <span class="target" id="index-103"></span><code class="xref std std-envvar docutils literal notranslate"><span class="pre">PATH</span></code> 的搜索。</p>
<p>无法匹配这些模式中任何一个的井号叹号行将在启动器的 <a class="reference internal" href="#launcher-ini"><span class="std std-ref">.INI 文件</span></a> 的 <code class="docutils literal notranslate"><span class="pre">[commands]</span></code> 一节中查找。 这可被用来以对你的系统来说有意义的方式处理某些命令。 命名的名称必须是一个单独的参数（在井号叹号行的可执行程序中不可有空格），而被替代的值则是该可执行程序的完整路径（在 .INI 中指定的附加参数将作为文件名的一部分被引用）。</p>
<div class="highlight-ini notranslate"><div class="highlight"><pre><span></span><span class="k">[commands]</span>
<span class="na">/bin/xpython</span><span class="o">=</span><span class="s">C:\Program Files\XPython\python.exe</span>
</pre></div>
</div>
<p>任何未出现在 .INI 文件中的命令都会被当作 <strong>Windows</strong> 可执行程序的绝对或相对于包含脚本文件的目录的路径。 这对于 Windows 专属的脚本来说很方便，例如由安装器所生成的脚本，因为此行为与 Unix 风格的 shell 是不兼容的。 这些路径可以加上引号，并可以包含多个参数，在它之后将会加上脚本路径以及任何附加参数。</p>
</section>
<section id="arguments-in-shebang-lines">
<h3><span class="section-number">4.8.3. </span>shebang lines 的参数</h3>
<p>shebang lines 还可以指定要传递给Python解释器的其他选项。例如，如果你有一个shebang lines ：</p>
<div class="highlight-sh notranslate"><div class="highlight"><pre><span></span><span class="ch">#! /usr/bin/python -v</span>
</pre></div>
</div>
<p>然后Python将以 <code class="docutils literal notranslate"><span class="pre">-v</span></code> 选项启动</p>
</section>
<section id="customization">
<h3><span class="section-number">4.8.4. </span>自定义</h3>
<section id="customization-via-ini-files">
<span id="launcher-ini"></span><h4><span class="section-number">4.8.4.1. </span>通过INI文件自定义</h4>
<p>启动器将搜索两个 .ini 文件 —— 当前用户应用程序数据目录中的 <code class="docutils literal notranslate"><span class="pre">py.ini</span></code> (<code class="docutils literal notranslate"><span class="pre">%LOCALAPPDATA%</span></code> 或 <code class="docutils literal notranslate"><span class="pre">$env:LocalAppData</span></code>) 以及启动器所在目录中的 <code class="docutils literal notranslate"><span class="pre">py.ini</span></code>。 同样的 .ini 文件还会被用于启动器的‘控制台’版本 (即 py.exe) 和‘窗口’版本 (即 pyw.exe)。</p>
<p>“应用程序目录”中指定的自定义优先于可执行文件旁边.ini文件的自定义，因此对启动程序旁边的.ini文件不具有写访问权限的用户可以覆盖该全局.ini文件中的命令。</p>
</section>
<section id="customizing-default-python-versions">
<h4><span class="section-number">4.8.4.2. </span>自定义默认的Python版本</h4>
<p>在某些情况下，可以在命令中包含版本限定符，以指定命令将使用哪个Python版本。版本限定符以主版本号开头，可以选择后跟 ('.') 和次版本说明符。此外，可以通过添加 &quot;-32&quot; 或 “-64” 来指定是请求32位还是64位实现。</p>
<p>例如，一个shebang line 的 <code class="docutils literal notranslate"><span class="pre">#!python</span></code> 行没有版本限定符，而 <code class="docutils literal notranslate"><span class="pre">#!python3</span></code> 有一个版本限定符，它只指定一个主要版本。</p>
<p>如果在命令中找不到版本限定符，则可以设置环境变量 <span class="target" id="index-104"></span><code class="xref std std-envvar docutils literal notranslate"><span class="pre">PY_PYTHON</span></code> 以指定默认版本限定符。 如果未设置，则默认为 &quot;3&quot;。 该变量可以指定能通过命令行传递的任何值，比如 &quot;3&quot;, &quot;3.7&quot;, &quot;3.7-32&quot; 或 &quot;3.7-64&quot;。 （请注意 &quot;-64&quot; 选项仅适用于 Python 3.7 或更高版本中包含的启动器。）</p>
<p>如果没有找到次要版本限定符，则可以设置环境变量 <code class="docutils literal notranslate"><span class="pre">PY_PYTHON{major}</span></code> （其中 <code class="docutils literal notranslate"><span class="pre">{major}</span></code> 是上面确定的当前主要版本限定符）以指定完整版本。如果没有找到这样的选项，启动器将枚举已安装的Python版本并使用为主要版本找到的最新次要版本，尽管不能保证，但该版本可能是该系列中最新安装的版本。</p>
<p>在安装了相同（major.minor）Python版本的32位和64位的64位Windows上，64位版本将始终是首选。对于启动程序的32位和64位实现都是如此 -- 这对于启动程序32位和64位都是正确的 -- 如果可用，32位启动程序将倾向于执行指定版本的64位Python安装。这样就可以预测启动器的行为，只知道PC上安装了哪些版本，而不考虑它们的安装顺序（即，不知道32位或64位版本的Python和相应的启动器是否是最后安装）。如上所述，可以在版本说明符上使用可选的“-32”或“-64”后缀来更改此行为。</p>
<p>示例：</p>
<ul class="simple">
<li><p>如果没有设置相关选项，命令 <code class="docutils literal notranslate"><span class="pre">python</span></code> 和 <code class="docutils literal notranslate"><span class="pre">python2</span></code> 将使用安装的最新Python 2.x版本，命令 <code class="docutils literal notranslate"><span class="pre">python3</span></code> 将使用最新安装的Python 3.x.</p></li>
<li><p>命令 <code class="docutils literal notranslate"><span class="pre">python3.7</span></code> 根本不会查阅任何选项，因为版本已完全指定。</p></li>
<li><p>如果 <code class="docutils literal notranslate"><span class="pre">PY_PYTHON=3</span></code> ，命令 <code class="docutils literal notranslate"><span class="pre">python</span></code> 和 <code class="docutils literal notranslate"><span class="pre">python3</span></code> 都将使用最新安装的Python 3版本。</p></li>
<li><p>如果 <code class="docutils literal notranslate"><span class="pre">PY_PYTHON=3.7-32</span></code> ，命令 <code class="docutils literal notranslate"><span class="pre">python</span></code> 将使用3.7的32位实现，而命令 <code class="docutils literal notranslate"><span class="pre">python3</span></code> 将使用最新安装的Python（PY_PYTHON根本没有被视为指定了主要版本。）</p></li>
<li><p>如果 <code class="docutils literal notranslate"><span class="pre">PY_PYTHON=3</span></code> 且 <code class="docutils literal notranslate"><span class="pre">PY_PYTHON3=3.7</span></code> ，命令 <code class="docutils literal notranslate"><span class="pre">python</span></code> 和 <code class="docutils literal notranslate"><span class="pre">python3</span></code> 都将特别使用3.7</p></li>
</ul>
<p>除环境变量外，还可以在启动程序使用的.INI文件中配置相同的设置。 INI文件中的部分称为 <code class="docutils literal notranslate"><span class="pre">[defaults]</span></code> ，键名称将与没有前导 <code class="docutils literal notranslate"><span class="pre">PY_</span></code> 前缀的环境变量相同（并注意INI文件中的键名不区分大小写） 。）环境变量的内容将覆盖INI文件中指定的内容。</p>
<p>例如:</p>
<ul class="simple">
<li><p>设置 <code class="docutils literal notranslate"><span class="pre">PY_PYTHON=3.7</span></code> 等同于包含以下内容的INI文件：</p></li>
</ul>
<div class="highlight-ini notranslate"><div class="highlight"><pre><span></span><span class="k">[defaults]</span>
<span class="na">python</span><span class="o">=</span><span class="s">3.7</span>
</pre></div>
</div>
<ul class="simple">
<li><p>设置 <code class="docutils literal notranslate"><span class="pre">PY_PYTHON=3</span></code> 和 <code class="docutils literal notranslate"><span class="pre">PY_PYTHON3=3.7</span></code> 相当于包含以下内容的INI文件：</p></li>
</ul>
<div class="highlight-ini notranslate"><div class="highlight"><pre><span></span><span class="k">[defaults]</span>
<span class="na">python</span><span class="o">=</span><span class="s">3</span>
<span class="na">python3</span><span class="o">=</span><span class="s">3.7</span>
</pre></div>
</div>
</section>
</section>
<section id="diagnostics">
<h3><span class="section-number">4.8.5. </span>诊断</h3>
<p>如果环境变量 <span class="target" id="index-105"></span><code class="xref std std-envvar docutils literal notranslate"><span class="pre">PYLAUNCHER_DEBUG</span></code> 已设置（为任何值），启动器将把诊断信息打印到 stderr（即控制台）。 此信息会尽量做到既详细 <em>又</em> 简洁，它应当允许你查看已被定位的 Python 的版本，特定版本为何被选择以及被用于执行目标 Python 的实际命令行。 它的主要目标是用于测试和调试。</p>
</section>
<section id="dry-run">
<h3><span class="section-number">4.8.6. </span>试运行</h3>
<p>如果环境变量 <span class="target" id="index-106"></span><code class="xref std std-envvar docutils literal notranslate"><span class="pre">PYLAUNCHER_DRYRUN</span></code> 已设置（为任意值），启动器将输出它将要运行的命令，但不会实际启动 Python。 这对于想要使用启动器执行检测然后再直接启动 Python 的工具来说很有用处。 请注意写入到标准输出的命令总是会使用 UTF-8 来编码，因而在控制台中可能无法正确渲染。</p>
</section>
<section id="install-on-demand">
<h3><span class="section-number">4.8.7. </span>按需安装</h3>
<p>如果环境变量 <span class="target" id="index-107"></span><code class="xref std std-envvar docutils literal notranslate"><span class="pre">PYLAUNCHER_ALLOW_INSTALL</span></code> 已经设置（为任何值），而所请求的 Python 版本没有安装但可以在 Microsoft Store 获得，启动器将尝试安装它。 这可能需要用户进行交互来完成，你可能需要再次运行此命令。</p>
<p>额外的 <span class="target" id="index-108"></span><code class="xref std std-envvar docutils literal notranslate"><span class="pre">PYLAUNCHER_ALWAYS_INSTALL</span></code> 变量将导致启动器总是尝试安装 Python，即使它已经被检测到。 这主要是出于测试目的（并且应当与 <span class="target" id="index-109"></span><code class="xref std std-envvar docutils literal notranslate"><span class="pre">PYLAUNCHER_DRYRUN</span></code> 一起使用）。</p>
</section>
<section id="return-codes">
<h3><span class="section-number">4.8.8. </span>返回码</h3>
<p>Python 启动器可能返回以下的退出码。 不幸的是，没有任何办法可以将这些退出码与 Python 本身的退出码区分开来。</p>
<p>退出码的名称将在源代码中使用，并且仅供参考。 除了阅读本页面以外没有其他办法可以获取或解读它们。 这些条目是以名称的字母顺序列出的。</p>
<table class="docutils align-default">
<thead>
<tr class="row-odd"><th class="head"><p>名称</p></th>
<th class="head"><p>值</p></th>
<th class="head"><p>描述</p></th>
</tr>
</thead>
<tbody>
<tr class="row-even"><td><p>RC_BAD_VENV_CFG</p></td>
<td><p>107</p></td>
<td><p>找到了 <code class="file docutils literal notranslate"><span class="pre">pyvenv.cfg</span></code> 但文件已损坏。</p></td>
</tr>
<tr class="row-odd"><td><p>RC_CREATE_PROCESS</p></td>
<td><p>101</p></td>
<td><p>启动 Python 失败。</p></td>
</tr>
<tr class="row-even"><td><p>RC_INSTALLING</p></td>
<td><p>111</p></td>
<td><p>安装已启动，但命令需要在其完成后重新运行。</p></td>
</tr>
<tr class="row-odd"><td><p>RC_INTERNAL_ERROR</p></td>
<td><p>109</p></td>
<td><p>未预期的错误。 请报告程序错误。</p></td>
</tr>
<tr class="row-even"><td><p>RC_NO_COMMANDLINE</p></td>
<td><p>108</p></td>
<td><p>无法从操作系统获取命令行。</p></td>
</tr>
<tr class="row-odd"><td><p>RC_NO_PYTHON</p></td>
<td><p>103</p></td>
<td><p>无法定位所请求的版本。</p></td>
</tr>
<tr class="row-even"><td><p>RC_NO_VENV_CFG</p></td>
<td><p>106</p></td>
<td><p>需要 <code class="file docutils literal notranslate"><span class="pre">pyvenv.cfg</span></code> 但没有找到。</p></td>
</tr>
</tbody>
</table>
</section>
</section>
<section id="finding-modules">
<span id="windows-finding-modules"></span><h2><span class="section-number">4.9. </span>查找模块</h2>
<p>这些注释以详细的 Windows 注释对 <a class="reference internal" href="../library/sys_path_init.xhtml#sys-path-init"><span class="std std-ref">sys.path 模块搜索路径的初始化</span></a> 中的描述进行了补充。</p>
<p>当找不到 <code class="docutils literal notranslate"><span class="pre">._pth</span></code> 文件时， <a class="reference internal" href="../library/sys.xhtml#sys.path" title="sys.path"><code class="xref py py-data docutils literal notranslate"><span class="pre">sys.path</span></code></a> 是如何在Windows上填充的：</p>
<ul class="simple">
<li><p>在开始时，添加一个空条目，该条目对应于当前目录。</p></li>
<li><p>如果环境变量 <span class="target" id="index-110"></span><a class="reference internal" href="cmdline.xhtml#envvar-PYTHONPATH"><code class="xref std std-envvar docutils literal notranslate"><span class="pre">PYTHONPATH</span></code></a> 存在，如 <a class="reference internal" href="cmdline.xhtml#using-on-envvars"><span class="std std-ref">环境变量</span></a> 中所述，则接下来添加其条目。请注意，在Windows上，此变量中的路径必须用分号分隔，以区别于驱动器标识符中使用的冒号（ <code class="docutils literal notranslate"><span class="pre">C:\</span></code>  等）。</p></li>
<li><p>额外的 &quot;应用程序路径&quot; 可以作为子键被同时添加到注册表 <code class="docutils literal notranslate"><span class="pre">HKEY_CURRENT_USER</span></code> 和 <code class="docutils literal notranslate"><span class="pre">HKEY_LOCAL_MACHINE</span></code> 分支下的 <code class="samp docutils literal notranslate"><span class="pre">\SOFTWARE\Python\PythonCore{version}\PythonPath</span></code> 中。 以分号分隔的路径字符串作为默认值的子键将导致每个路径都被添加到 <a class="reference internal" href="../library/sys.xhtml#sys.path" title="sys.path"><code class="xref py py-data docutils literal notranslate"><span class="pre">sys.path</span></code></a> 中。 （请注意所有已知的安装程序都只使用 HKLM，因此 HKCU 通常为空。）</p></li>
<li><p>如果设置了环境变量 <span class="target" id="index-111"></span><a class="reference internal" href="cmdline.xhtml#envvar-PYTHONHOME"><code class="xref std std-envvar docutils literal notranslate"><span class="pre">PYTHONHOME</span></code></a>  ，则将其假定为 “Python 主目录” 。否则，主Python可执行文件的路径用于定位 “landmark 文件” （ <code class="docutils literal notranslate"><span class="pre">Lib\os.py</span></code> 或 <code class="docutils literal notranslate"><span class="pre">pythonXY.zip</span></code> ）以推断 ”Python 主目录“ 。如果找到了Python主目录，则基于该文件夹将相关的子目录添加到 <a class="reference internal" href="../library/sys.xhtml#sys.path" title="sys.path"><code class="xref py py-data docutils literal notranslate"><span class="pre">sys.path</span></code></a> （<code class="docutils literal notranslate"><span class="pre">Lib</span></code> , <code class="docutils literal notranslate"><span class="pre">plat-win</span></code> 等）。否则，核心Python路径是从存储在注册表中的PythonPath构造的。</p></li>
<li><p>如果找不到Python Home，也没有指定 <span class="target" id="index-112"></span><a class="reference internal" href="cmdline.xhtml#envvar-PYTHONPATH"><code class="xref std std-envvar docutils literal notranslate"><span class="pre">PYTHONPATH</span></code></a> 环境变量，并且找不到注册表项，则使用具有相对条目的默认路径（例如 <code class="docutils literal notranslate"><span class="pre">.\Lib;</span> <span class="pre">.\plat-win</span></code> 等等）。</p></li>
</ul>
<p>如果在主可执行文件旁边或在可执行文件上一级的目录中找到 <code class="docutils literal notranslate"><span class="pre">pyvenv.cfg</span></code> 文件，则以下变体适用：</p>
<ul class="simple">
<li><p>如果 <code class="docutils literal notranslate"><span class="pre">home</span></code> 是一个绝对路径，并且 <span class="target" id="index-113"></span><a class="reference internal" href="cmdline.xhtml#envvar-PYTHONHOME"><code class="xref std std-envvar docutils literal notranslate"><span class="pre">PYTHONHOME</span></code></a> 未设置，则在推断起始位置时使用此路径而不是主可执行文件的路径。</p></li>
</ul>
<p>这一切的最终结果是：</p>
<ul class="simple">
<li><p>运行 <code class="file docutils literal notranslate"><span class="pre">python.exe</span></code> ，或主Python目录中的任何其他.exe（安装版本，或直接来自PCbuild目录）时，推导出核心路径，并忽略注册表中的核心路径。始终读取注册表中的其他“应用程序路径”。</p></li>
<li><p>当Python托管在另一个.exe（不同的目录，通过COM嵌入等）时，将不会推断出“Python Home”，因此使用了来自注册表的核心路径。始终读取注册表中的其他“应用程序路径”。</p></li>
<li><p>如果Python找不到它的主目录并且没有注册表值（冻结的.exe，一些非常奇怪的安装设置），那么你会得到一条带有一些默认但相对的路径的路径。</p></li>
</ul>
<p>对于那些想要将Python捆绑到其应用程序或发行版中的人，以下建议将防止与其他安装冲突：</p>
<ul class="simple">
<li><p>在您的可执行文件中包含一个 <code class="docutils literal notranslate"><span class="pre">._pth</span></code> 文件，其中包含目录。这将忽略注册表和环境变量中列出的路径，并忽略 <a class="reference internal" href="../library/site.xhtml#module-site" title="site: Module responsible for site-specific configuration."><code class="xref py py-mod docutils literal notranslate"><span class="pre">site</span></code></a> ，除非列出 <code class="docutils literal notranslate"><span class="pre">import</span> <span class="pre">site</span></code> 。</p></li>
<li><p>If you are loading <code class="file docutils literal notranslate"><span class="pre">python3.dll</span></code> or <code class="file docutils literal notranslate"><span class="pre">python37.dll</span></code> in your own
executable, explicitly call <a class="reference internal" href="../c-api/init.xhtml#c.Py_SetPath" title="Py_SetPath"><code class="xref c c-func docutils literal notranslate"><span class="pre">Py_SetPath()</span></code></a> or (at least)
<a class="reference internal" href="../c-api/init.xhtml#c.Py_SetProgramName" title="Py_SetProgramName"><code class="xref c c-func docutils literal notranslate"><span class="pre">Py_SetProgramName()</span></code></a> before <a class="reference internal" href="../c-api/init.xhtml#c.Py_Initialize" title="Py_Initialize"><code class="xref c c-func docutils literal notranslate"><span class="pre">Py_Initialize()</span></code></a>.</p></li>
<li><p>清除 和/或 覆盖 <span class="target" id="index-114"></span><a class="reference internal" href="cmdline.xhtml#envvar-PYTHONPATH"><code class="xref std std-envvar docutils literal notranslate"><span class="pre">PYTHONPATH</span></code></a> 并在启动来自应用程序的 <code class="file docutils literal notranslate"><span class="pre">python.exe</span></code> 之前设置 <span class="target" id="index-115"></span><a class="reference internal" href="cmdline.xhtml#envvar-PYTHONHOME"><code class="xref std std-envvar docutils literal notranslate"><span class="pre">PYTHONHOME</span></code></a> 。</p></li>
<li><p>如果您不能使用前面的建议（例如，您是一个允许人们直接运行 <code class="file docutils literal notranslate"><span class="pre">python.exe</span></code> 的分发版），请确保安装目录中存在 landmark 文件 (<code class="file docutils literal notranslate"><span class="pre">Lib\os.py</span></code>)。 （请注意，在 ZIP 文件中不会检测到该文件，但会检测到正确命名的 ZIP 文件。）</p></li>
</ul>
<p>这些将确保系统范围安装中的文件不会优先于与应用程序捆绑在一起的标准库的副本。否则，用户可能会在使用您的应用程序时遇到问题请注意，第一个建议是最好的，因为其他建议可能仍然容易受到注册表和用户站点包中的非标准路径的影响。</p>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.6 版本发生变更: </span>添加 <code class="docutils literal notranslate"><span class="pre">._pth</span></code> 文件支持并从 <code class="docutils literal notranslate"><span class="pre">pyvenv.cfg</span></code> 中移除了 <code class="docutils literal notranslate"><span class="pre">applocal</span></code> 选项。</p>
</div>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.6 版本发生变更: </span>当与可执行文件直接相邻时将添加 <code class="file docutils literal notranslate"><span class="pre">python</span><em><span class="pre">XX</span></em><span class="pre">.zip</span></code> 作为潜在的标志物。</p>
</div>
<div class="deprecated">
<p><span class="versionmodified deprecated">自 3.6 版本弃用: </span>在 <code class="docutils literal notranslate"><span class="pre">Modules</span></code> (不是 <code class="docutils literal notranslate"><span class="pre">PythonPath</span></code>) 下的注册表中指定的模块可以通过 <a class="reference internal" href="../library/importlib.xhtml#importlib.machinery.WindowsRegistryFinder" title="importlib.machinery.WindowsRegistryFinder"><code class="xref py py-class docutils literal notranslate"><span class="pre">importlib.machinery.WindowsRegistryFinder</span></code></a> 导入。 在 Windows 上此查找器在 3.6.0 及更早版本中被启用，但在将来可能需要显式地添加到 <a class="reference internal" href="../library/sys.xhtml#sys.meta_path" title="sys.meta_path"><code class="xref py py-data docutils literal notranslate"><span class="pre">sys.meta_path</span></code></a>。</p>
</div>
</section>
<section id="additional-modules">
<h2><span class="section-number">4.10. </span>附加模块</h2>
<p>尽管Python的目标是在所有平台中都可移植，但是Windows有一些独特的特性。在标准库和外部都有一些模块和代码片段在使用这些特性。</p>
<p>特定于Windows的标准模块记录在 <a class="reference internal" href="../library/windows.xhtml#mswin-specific-services"><span class="std std-ref">Windows系统相关模块</span></a> 中。</p>
<section id="pywin32">
<h3><span class="section-number">4.10.1. </span>PyWin32</h3>
<p>Mark Hammond 编写的 <a class="reference external" href="https://pypi.org/project/PyWin32/">PyWin32</a><span class="link-target"> [https://pypi.org/project/PyWin32/]</span> 模块是一组用于高级 Windows 专属支持的模块。 这包括以下实用工具：</p>
<ul class="simple">
<li><p><a class="reference external" href="https://docs.microsoft.com/en-us/windows/win32/com/component-object-model--com--portal">组件对象模型</a><span class="link-target"> [https://docs.microsoft.com/en-us/windows/win32/com/component-object-model--com--portal]</span> (COM)</p></li>
<li><p>Win32 API 调用</p></li>
<li><p>注册</p></li>
<li><p>事件日志</p></li>
<li><p><a class="reference external" href="https://docs.microsoft.com/en-us/cpp/mfc/mfc-desktop-applications">Microsoft Foundation Classes</a><span class="link-target"> [https://docs.microsoft.com/en-us/cpp/mfc/mfc-desktop-applications]</span> (MFC) 用户界面</p></li>
</ul>
<p><a class="reference external" href="https://web.archive.org/web/20060524042422/https://www.python.org/windows/pythonwin/">PythonWin</a><span class="link-target"> [https://web.archive.org/web/20060524042422/https://www.python.org/windows/pythonwin/]</span> 是PyWin32附带的一个示例MFC应用程序。它是一个内置调试器的可嵌入IDE。</p>
<div class="admonition seealso">
<p class="admonition-title">参见</p>
<dl class="simple">
<dt><a class="reference external" href="http://timgolden.me.uk/python/win32_how_do_i.html">Win32 How Do I...?</a><span class="link-target"> [http://timgolden.me.uk/python/win32_how_do_i.html]</span></dt><dd><p>Tim Golden 著</p>
</dd>
<dt><a class="reference external" href="https://www.boddie.org.uk/python/COM.html">Python and COM</a><span class="link-target"> [https://www.boddie.org.uk/python/COM.html]</span></dt><dd><p>David 和 Paul Boddie 著</p>
</dd>
</dl>
</div>
</section>
<section id="cx-freeze">
<h3><span class="section-number">4.10.2. </span>cx_Freeze</h3>
<p><a class="reference external" href="https://cx-freeze.readthedocs.io/en/latest/">cx_Freeze</a><span class="link-target"> [https://cx-freeze.readthedocs.io/en/latest/]</span> 将 Python 脚本包装成可执行的 Windows 程序 (<code class="file docutils literal notranslate"><em><span class="pre">*</span></em><span class="pre">.exe</span></code> 文件)。 当你完成此操作后，你就可以分发你的应用程序而无需用户安装 Python。</p>
</section>
</section>
<section id="compiling-python-on-windows">
<h2><span class="section-number">4.11. </span>在Windows上编译Python</h2>
<p>如果你想要自己编译 CPython，首先要做的是获取 <a class="reference external" href="https://www.python.org/downloads/source/">源代码</a><span class="link-target"> [https://www.python.org/downloads/source/]</span>。 你可以下载最新发行版的源代码或是执行最新的 <a class="reference external" href="https://devguide.python.org/setup/#get-the-source-code">签出</a><span class="link-target"> [https://devguide.python.org/setup/#get-the-source-code]</span>。</p>
<p>源代码树包含Microsoft Visual Studio的构建解决方案和项目文件，它是用于构建官方Python版本的编译器。这些文件位于 <code class="file docutils literal notranslate"><span class="pre">PCbuild</span></code> 目录中。</p>
<p>检查 <code class="file docutils literal notranslate"><span class="pre">PCbuild/readme.txt</span></code> 以获取有关构建过程的一般信息。</p>
<p>有关扩展模块，请参阅 <a class="reference internal" href="../extending/windows.xhtml#building-on-windows"><span class="std std-ref">在 Windows 上构建 C 和 C++ 扩展</span></a> 。</p>
</section>
<section id="other-platforms">
<h2><span class="section-number">4.12. </span>其他平台</h2>
<p>随着Python的不断发展，不再支持以前曾经支持的一些平台（由于缺少用户或开发人员）。检查 <span class="target" id="index-116"></span><a class="pep reference external" href="https://peps.python.org/pep-0011/"><strong>PEP 11</strong></a><span class="link-target"> [https://peps.python.org/pep-0011/]</span> 了解所有不支持的平台的详细信息。</p>
<ul class="simple">
<li><p><a class="reference external" href="https://pythonce.sourceforge.net/">Windows CE</a><span class="link-target"> [https://pythonce.sourceforge.net/]</span> 自 Python 3 起 <a class="reference external" href="https://github.com/python/cpython/issues/71542">不再受支持</a><span class="link-target"> [https://github.com/python/cpython/issues/71542]</span> (如果曾经受支持的话)。</p></li>
<li><p>Cygwin <a class="reference external" href="https://cygwin.com/packages/summary/python3.html">&lt;https://cygwin.com/&gt;`_安装程序也提供了安装 `Python 解释器</a><span class="link-target"> [https://cygwin.com/packages/summary/python3.html]</span> 的功能。</p></li>
</ul>
<p>有关具有预编译安装程序平台的详细信息，请参阅 <a class="reference external" href="https://www.python.org/downloads/windows/">Python for Windows</a><span class="link-target"> [https://www.python.org/downloads/windows/]</span></p>
</section>
</section>


            <div class="clearer"></div>
          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>