<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" /><meta name="viewport" content="width=device-width, initial-scale=1" />
<meta property="og:title" content="Python常见问题" />
<meta property="og:type" content="website" />
<meta property="og:url" content="https://docs.python.org/3/faq/general.xhtml" />
<meta property="og:site_name" content="Python documentation" />
<meta property="og:description" content="目录: Python常见问题- 一般信息- 什么是 Python？, 什么是 Python 软件基金会？, 使用 Python 是否存在版权限制？, 创造 Python 的最初理由是什么？, Python 适合做什么？, Python 版本的编号形式是怎样的？, 我应如何获取一份 Python 源代码的副本？, 我应如何获取 Python 的文档？, 我之前从未接触过编程。 哪里有 Pyth..." />
<meta property="og:image" content="https://docs.python.org/3/_static/og-image.png" />
<meta property="og:image:alt" content="Python documentation" />
<meta name="description" content="目录: Python常见问题- 一般信息- 什么是 Python？, 什么是 Python 软件基金会？, 使用 Python 是否存在版权限制？, 创造 Python 的最初理由是什么？, Python 适合做什么？, Python 版本的编号形式是怎样的？, 我应如何获取一份 Python 源代码的副本？, 我应如何获取 Python 的文档？, 我之前从未接触过编程。 哪里有 Pyth..." />
<meta property="og:image:width" content="200" />
<meta property="og:image:height" content="200" />
<meta name="theme-color" content="#3776ab" />

    <title>Python常见问题</title>
    <link rel="stylesheet" type="text/css" href="../_static/pygments.css" />
    <link rel="stylesheet" type="text/css" href="../_static/epub.css" />
    <link rel="canonical" href="https://docs.python.org/3/faq/general.html" />
    
      
    

    
    <style>
      @media only screen {
        table.full-width-table {
            width: 100%;
        }
      }
    </style>
 

  </head><body>


    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <section id="general-python-faq">
<h1><a class="toc-backref" href="#id3" role="doc-backlink">Python常见问题</a></h1>
<nav class="contents" id="id1">
<p class="topic-title">目录</p>
<ul class="simple">
<li><p><a class="reference internal" href="#general-python-faq" id="id3">Python常见问题</a></p>
<ul>
<li><p><a class="reference internal" href="#general-information" id="id4">一般信息</a></p>
<ul>
<li><p><a class="reference internal" href="#what-is-python" id="id5">什么是 Python？</a></p></li>
<li><p><a class="reference internal" href="#what-is-the-python-software-foundation" id="id6">什么是 Python 软件基金会？</a></p></li>
<li><p><a class="reference internal" href="#are-there-copyright-restrictions-on-the-use-of-python" id="id7">使用 Python 是否存在版权限制？</a></p></li>
<li><p><a class="reference internal" href="#why-was-python-created-in-the-first-place" id="id8">创造 Python 的最初理由是什么？</a></p></li>
<li><p><a class="reference internal" href="#what-is-python-good-for" id="id9">Python 适合做什么？</a></p></li>
<li><p><a class="reference internal" href="#how-does-the-python-version-numbering-scheme-work" id="id10">Python 版本的编号形式是怎样的？</a></p></li>
<li><p><a class="reference internal" href="#how-do-i-obtain-a-copy-of-the-python-source" id="id11">我应如何获取一份 Python 源代码的副本？</a></p></li>
<li><p><a class="reference internal" href="#how-do-i-get-documentation-on-python" id="id12">我应如何获取 Python 的文档？</a></p></li>
<li><p><a class="reference internal" href="#i-ve-never-programmed-before-is-there-a-python-tutorial" id="id13">我之前从未接触过编程。 哪里有 Python 的教程？</a></p></li>
<li><p><a class="reference internal" href="#is-there-a-newsgroup-or-mailing-list-devoted-to-python" id="id14">是否有专门针对 Python 的新闻组或邮件列表？</a></p></li>
<li><p><a class="reference internal" href="#how-do-i-get-a-beta-test-version-of-python" id="id15">我应如何获取 Python 的公开测试版本？</a></p></li>
<li><p><a class="reference internal" href="#how-do-i-submit-bug-reports-and-patches-for-python" id="id16">我应如何为 Python 提交错误报告和补丁？</a></p></li>
<li><p><a class="reference internal" href="#are-there-any-published-articles-about-python-that-i-can-reference" id="id17">是否有任何公开发表的 Python 相关文章可以供我参考引用？</a></p></li>
<li><p><a class="reference internal" href="#are-there-any-books-on-python" id="id18">是否有任何 Python 相关的书籍？</a></p></li>
<li><p><a class="reference internal" href="#where-in-the-world-is-www-python-org-located" id="id19">www.python.org 具体位于世界上的哪个地点？</a></p></li>
<li><p><a class="reference internal" href="#why-is-it-called-python" id="id20">为何命名为 Python？</a></p></li>
<li><p><a class="reference internal" href="#do-i-have-to-like-monty-python-s-flying-circus" id="id21">我必须喜欢 &quot;Monty Python 的飞行马戏团&quot; 吗？</a></p></li>
</ul>
</li>
<li><p><a class="reference internal" href="#python-in-the-real-world" id="id22">现实世界中的 Python</a></p>
<ul>
<li><p><a class="reference internal" href="#how-stable-is-python" id="id23">Python 有多稳定？</a></p></li>
<li><p><a class="reference internal" href="#how-many-people-are-using-python" id="id24">有多少人在使用 Python？</a></p></li>
<li><p><a class="reference internal" href="#have-any-significant-projects-been-done-in-python" id="id25">有哪些重要的项目是用 Python 开发的？</a></p></li>
<li><p><a class="reference internal" href="#what-new-developments-are-expected-for-python-in-the-future" id="id26">在未来可以期待 Python 将有什么新进展？</a></p></li>
<li><p><a class="reference internal" href="#is-it-reasonable-to-propose-incompatible-changes-to-python" id="id27">提议对 Python 加入不兼容的更改是否合理？</a></p></li>
<li><p><a class="reference internal" href="#is-python-a-good-language-for-beginning-programmers" id="id28">Python 是一种对编程初学者友好的语言吗？</a></p></li>
</ul>
</li>
</ul>
</li>
</ul>
</nav>
<section id="general-information">
<h2><a class="toc-backref" href="#id4" role="doc-backlink">一般信息</a></h2>
<section id="what-is-python">
<h3><a class="toc-backref" href="#id5" role="doc-backlink">什么是 Python？</a></h3>
<p>Python 是一种解释型、交互式、面向对象的编程语言。 它包含了模块、异常、动态类型、高层级动态数据类型以及类等特性。 在面向对象编程以外它还支持多种编程范式，例如过程式和函数式编程等。 Python 结合了超强的功能和极清晰的语法。 它带有许多系统调用和库以及多种窗口系统的接口，并且能用 C 或 C++ 来进行扩展。 它还可用作需要可编程接口的应用程序的扩展语言。 最后，Python 非常易于移植：它可以在包括 Linux 和 macOS 在内的许多 Unix 变种以及 Windows 上运行。</p>
<p>要了解更多详情，请先查看 <a class="reference internal" href="../tutorial/index.xhtml#tutorial-index"><span class="std std-ref">Python 教程</span></a>。 <a class="reference external" href="https://wiki.python.org/moin/BeginnersGuide">Python 新手指南</a><span class="link-target"> [https://wiki.python.org/moin/BeginnersGuide]</span> 提供了学习 Python 的其他入门教程及资源的链接。</p>
</section>
<section id="what-is-the-python-software-foundation">
<h3><a class="toc-backref" href="#id6" role="doc-backlink">什么是 Python 软件基金会？</a></h3>
<p>Python 软件基金会（Python Software Foundation，简称 PSF）是一个独立的非盈利组织，它拥有 Python 2.1 及以上各版本的版权。 PSF 的使命是推进与 Python 编程语言相关的开源技术，并推广 Python 的使用。 PSF 的主页是 <a class="reference external" href="https://www.python.org/psf/">https://www.python.org/psf/</a>。</p>
<p>向 PSF 提供捐助在美国是免税的。 如果你在使用 Python 并且感觉它对你很有帮助，可以通过 <a class="reference external" href="https://www.python.org/psf/donations/">PSF 捐助页</a><span class="link-target"> [https://www.python.org/psf/donations/]</span> 进行捐助。</p>
</section>
<section id="are-there-copyright-restrictions-on-the-use-of-python">
<h3><a class="toc-backref" href="#id7" role="doc-backlink">使用 Python 是否存在版权限制？</a></h3>
<p>你可以任意使用源码，只要你保留版权信息并在你基于 Python 的产品文档中显示该版权信息。 如果你遵守此版权规则，就可以将 Python 用于商业领域，以源码或二进制码的形式（不论是否经过修改）销售 Python 的副本，或是以某种形式包含了 Python 的产品。 当然，我们仍然希望获知所有对 Python 的商业使用。</p>
<p>请参阅 <a class="reference external" href="https://docs.python.org/3/license.html">许可页</a><span class="link-target"> [https://docs.python.org/3/license.html]</span> 以查看进一步的说明以及 PSF 许可的完整文本。</p>
<p>Python 的徽标是注册商标，在某些情况下需要获得允许方可使用。 请参阅 <a class="reference external" href="https://www.python.org/psf/trademarks/">商标使用政策</a><span class="link-target"> [https://www.python.org/psf/trademarks/]</span> 了解详情。</p>
</section>
<section id="why-was-python-created-in-the-first-place">
<h3><a class="toc-backref" href="#id8" role="doc-backlink">创造 Python 的最初理由是什么？</a></h3>
<p>以下是有关最初缘起的一份 <em>非常</em> 简短的摘要，由 Guido van Rossum 本人撰写:</p>
<blockquote>
<div><p>我在 CWI 的 ABC 部门时在实现解释型语言方面积累了丰富经验，通过与这个部门成员的协同工作，我学到了大量有关语言设计的知识。 这是许多 Python 特性的最初来源，包括使用缩进来组织语句以及包含非常高层级的数据结构（虽然在 Python 中具体的实现细节完全不同）。</p>
<p>我对 ABC 语言有过许多抱怨，但同时也很喜欢它的许多特性。 没有可能通过扩展 ABC 语言（或它的实现）来弥补我的不满 —— 实际上缺乏可扩展性就是它最大的问题之一。 我也有一些使用 Modula-2+ 的经验，并曾与 Modula-3 的设计者进行交流，还阅读了 Modula-3 的报告。 Modula-3 是 Python 中异常机制所用语法和语义，以及其他一些语言特性的最初来源。</p>
<p>我还曾在 CWI 的 Amoeba 分布式操作系统部门工作。 当时我们需要有一种比编写 C 程序或 Bash 脚本更好的方式来进行系统管理，因为 Amoeba 有它自己的系统调用接口，并且无法方便地通过 Bash 来访问。 我在 Amoeba 中处理错误的经验令我深刻地意识到异常处理在编程语言特性当中的重要地位。</p>
<p>我发现，某种具有 ABC 式的语法而又能访问 Amoeba 系统调用的脚本语言将可满足需求。 我意识到编写一种 Amoeba 专属的语言是愚蠢的，所以我决定编写一种具有全面可扩展性的语言。</p>
<p>在 1989 年的圣诞假期中，我手头的时间非常充裕，因此我决定开始尝试一下。 在接下来的一年里，虽然我仍然主要用我的业余时间来做这件事，但 Python 在 Amoeba 项目中的使用获得了很大的成功，来自同事的反馈让我得以增加了许多早期的改进。</p>
<p>到 1991 年 2 月，经过一年多的开发，我决定将其发布到 USENET。 之后的事情就都可以在 <code class="docutils literal notranslate"><span class="pre">Misc/HISTORY</span></code> 文件里面看了。</p>
</div></blockquote>
</section>
<section id="what-is-python-good-for">
<h3><a class="toc-backref" href="#id9" role="doc-backlink">Python 适合做什么？</a></h3>
<p>Python 是一种高层级的多用途编程语言，可用于解决许多不同门类的问题。</p>
<p>本语言自带一个庞大标准库，所涵盖的编程领域包括字符串处理（正则表达式、Unicode、文件间的差异比较等），互联网协议（HTTP, FTP, SMTP, XML-RPC, POP, IMAP），软件工程（单元测试、日志记录、性能分析、Python 代码解析），以及操作系统接口（系统调用、文件系统、TCP/IP 套接字）。 请查看 <a class="reference internal" href="../library/index.xhtml#library-index"><span class="std std-ref">Python 标准库</span></a> 目录页以获取所有可用内容的概览。 此外还有大量第三方扩展包可供使用。 请访问 <a class="reference external" href="https://pypi.org">Python 软件包索引</a><span class="link-target"> [https://pypi.org]</span> 来查找你感兴趣的软件包。</p>
</section>
<section id="how-does-the-python-version-numbering-scheme-work">
<span id="faq-version-numbering-scheme"></span><h3><a class="toc-backref" href="#id10" role="doc-backlink">Python 版本的编号形式是怎样的？</a></h3>
<p>Python 版本的编号形式为 &quot;A.B.C&quot; 或 &quot;A.B&quot;:</p>
<ul class="simple">
<li><p><em>A</em> 是主版本号 -- 它仅会针对语言中非常重大的改变而递增。</p></li>
<li><p><em>B</em> 是次版本号 -- 它会针对不太重大的改变而递增。</p></li>
<li><p><em>C</em> 是微版本号 -- 它针对每次问题修正发布而递增。</p></li>
</ul>
<p>并非所有发布版本都是问题修正版本。 在新特征发布版本的开发过程中，会制作一系列的开发版本，它们以 alpha, beta 或 release candidate 来标示。 其中 alpha 版本是早期发布版，它的接口尚未最终确定；在两个 alpha 发布版本间出现接口的改变并不意外。 而 beta 版本更为稳定，它会保留现有的接口，但也可能增加新的模块，而 release candidate 版则会保持冻结状态，不做任何改变，除非有需要修复的严重问题。</p>
<p>Alpha, beta 和候选发布版带有额外的后缀:</p>
<ul class="simple">
<li><p>带有某个小数字 <em>N</em> 的 alpha 版后缀是 &quot;aN&quot;。</p></li>
<li><p>带有某个小数字 <em>N</em> 的 beta 版后缀是 &quot;bN&quot;。</p></li>
<li><p>带有某个小数字 <em>N</em> 的候选发布版后缀是 &quot;rcN&quot;。</p></li>
</ul>
<p>换句话说，所有标记为 <em>2.0aN</em> 的版本都早于标记为 <em>2.0bN</em> 的版本，后者又都早于标记为 <em>2.0rcN</em> 的版本，而 <em>后者</em> 又都早于标记为 2.0 的版本。</p>
<p>你还可能看到带有“+”后缀的版本号，例如“2.2+”。 这表示未发布版本，直接基于 CPython 开发代码仓库构建。 在实际操作中，当一个小版本最终发布后，未发布版本号会递增到下一个小版本号，成为“a0”版本，例如“2.4a0”。</p>
<p>请参阅 <a class="reference external" href="https://devguide.python.org/developer-workflow/development-cycle/">Developer's Guide</a><span class="link-target"> [https://devguide.python.org/developer-workflow/development-cycle/]</span> 获取更多有关开发流程的信息，并参阅 <span class="target" id="index-6"></span><a class="pep reference external" href="https://peps.python.org/pep-0387/"><strong>PEP 387</strong></a><span class="link-target"> [https://peps.python.org/pep-0387/]</span> 了解更多有关 Python 的向下兼容策略的信息。 另请参阅有关 <a class="reference internal" href="../library/sys.xhtml#sys.version" title="sys.version"><code class="xref py py-data docutils literal notranslate"><span class="pre">sys.version</span></code></a>, <a class="reference internal" href="../library/sys.xhtml#sys.hexversion" title="sys.hexversion"><code class="xref py py-data docutils literal notranslate"><span class="pre">sys.hexversion</span></code></a> 和 <a class="reference internal" href="../library/sys.xhtml#sys.version_info" title="sys.version_info"><code class="xref py py-data docutils literal notranslate"><span class="pre">sys.version_info</span></code></a> 的文档。</p>
</section>
<section id="how-do-i-obtain-a-copy-of-the-python-source">
<h3><a class="toc-backref" href="#id11" role="doc-backlink">我应如何获取一份 Python 源代码的副本？</a></h3>
<p>最新的 Python 发布版源代码总能从 python.org 获取，下载页链接为 <a class="reference external" href="https://www.python.org/downloads/">https://www.python.org/downloads/</a>。 最新的开发版源代码可以在 <a class="reference external" href="https://github.com/python/cpython/">https://github.com/python/cpython/</a> 获取。</p>
<p>发布版源代码是一个以 gzip 压缩的 tar 文件，其中包含完整的 C 源代码、Sphinx 格式的文档、Python 库模块、示例程序以及一些有用的自由分发软件。 该源代码将可在大多数 UNIX 类平台上直接编译并运行。</p>
<p>请参阅 <a class="reference external" href="https://devguide.python.org/setup/">Python 开发者指南的初步上手部分</a><span class="link-target"> [https://devguide.python.org/setup/]</span> 了解有关获取源代码并进行编译的更多信息。</p>
</section>
<section id="how-do-i-get-documentation-on-python">
<h3><a class="toc-backref" href="#id12" role="doc-backlink">我应如何获取 Python 的文档？</a></h3>
<p>当前的 Python 稳定版本的标准文档可在 <a class="reference external" href="https://docs.python.org/3/">https://docs.python.org/3/</a> 查看。 也可在 <a class="reference external" href="https://docs.python.org/3/download.html">https://docs.python.org/3/download.html</a> 获取PDF、纯文本以及可下载的 HTML 版本。</p>
<p>文档以 reStructuredText 格式撰写并使用 <a class="reference external" href="https://www.sphinx-doc.org/">Sphinx 文档工具</a><span class="link-target"> [https://www.sphinx-doc.org/]</span> 生成。 文档的 reStructuredText 源文件是 Python 源代码发布版的一部分。</p>
</section>
<section id="i-ve-never-programmed-before-is-there-a-python-tutorial">
<h3><a class="toc-backref" href="#id13" role="doc-backlink">我之前从未接触过编程。 哪里有 Python 的教程？</a></h3>
<p>有许多可选择的教程和书籍。 标准文档中也包含有 <a class="reference internal" href="../tutorial/index.xhtml#tutorial-index"><span class="std std-ref">Python 教程</span></a>。</p>
<p>请参阅 <a class="reference external" href="https://wiki.python.org/moin/BeginnersGuide">新手指南</a><span class="link-target"> [https://wiki.python.org/moin/BeginnersGuide]</span> 以获取针对 Python 编程初学者的信息，包括教程的清单。</p>
</section>
<section id="is-there-a-newsgroup-or-mailing-list-devoted-to-python">
<h3><a class="toc-backref" href="#id14" role="doc-backlink">是否有专门针对 Python 的新闻组或邮件列表？</a></h3>
<p>有一个新闻组 <em class="newsgroup">comp.lang.python</em> 和一个邮件列表 <a class="reference external" href="https://mail.python.org/mailman/listinfo/python-list">python-list</a><span class="link-target"> [https://mail.python.org/mailman/listinfo/python-list]</span>。 新闻组和邮件列表是彼此互通的 —— 如果你可以阅读新闻就不必再订阅邮件列表。 <em class="newsgroup">comp.lang.python</em> 的流量很大，每天会收到数以百计的发帖，Usenet 使用者通常更擅长处理这样大的流量。</p>
<p>有关新软件发布和活动的公告可以在 comp.lang.python.announce 中找到，这是个严格管理的低流量列表，每天发帖五个左右。 可在 <a class="reference external" href="https://mail.python.org/mailman3/lists/python-announce-list.python.org/">python-announce 邮件列表</a><span class="link-target"> [https://mail.python.org/mailman3/lists/python-announce-list.python.org/]</span> 订阅。</p>
<p>有关其他邮件列表和新闻组的更多信息可以在 <a class="reference external" href="https://www.python.org/community/lists/">https://www.python.org/community/lists/</a> 找到。</p>
</section>
<section id="how-do-i-get-a-beta-test-version-of-python">
<h3><a class="toc-backref" href="#id15" role="doc-backlink">我应如何获取 Python 的公开测试版本？</a></h3>
<p>可以从 <a class="reference external" href="https://www.python.org/downloads/">https://www.python.org/downloads/</a> 下载 alpha 和 beta 发布版。 所有发布版都会在 comp.lang.python 和 comp.lang.python.announce 新闻组以及 Python 主页 <a class="reference external" href="https://www.python.org/">https://www.python.org/</a> 上进行公告；并会推送到 RSS 新闻源。</p>
<p>你还可以通过 Git 访问 Python 的开发版。 请参阅 <a class="reference external" href="https://devguide.python.org/">Python 开发者指南</a><span class="link-target"> [https://devguide.python.org/]</span> 了解详情。</p>
</section>
<section id="how-do-i-submit-bug-reports-and-patches-for-python">
<h3><a class="toc-backref" href="#id16" role="doc-backlink">我应如何为 Python 提交错误报告和补丁？</a></h3>
<p>要报告问题或提交补丁，请使用位于 <a class="reference external" href="https://github.com/python/cpython/issues">https://github.com/python/cpython/issues</a> 的问题追踪器。</p>
<p>有关 Python 开发流程的更多信息，请参阅 <a class="reference external" href="https://devguide.python.org/">Python 开发者指南</a><span class="link-target"> [https://devguide.python.org/]</span>。</p>
</section>
<section id="are-there-any-published-articles-about-python-that-i-can-reference">
<h3><a class="toc-backref" href="#id17" role="doc-backlink">是否有任何公开发表的 Python 相关文章可以供我参考引用？</a></h3>
<p>可能作为参考文献的最好方式还是引用你喜欢的 Python 相关书籍。</p>
<p>有关 Python 的 <a class="reference external" href="https://ir.cwi.nl/pub/18204">最早的文章</a><span class="link-target"> [https://ir.cwi.nl/pub/18204]</span> 撰写于 1991 年因而现在已相当过时。</p>
<blockquote>
<div><p>Guido van Rossum 与 Jelke de Boer, &quot;使用 Python 编程语言交互式地测试远程服务器&quot;, CWI 季刊, 第 4 卷, 第 4 期 (1991 年 12 月), 阿姆斯特丹, 第 283--303 页。</p>
</div></blockquote>
</section>
<section id="are-there-any-books-on-python">
<h3><a class="toc-backref" href="#id18" role="doc-backlink">是否有任何 Python 相关的书籍？</a></h3>
<p>是的，相关的书籍很多，还有更多即将发行。 请访问 python.org 的 wiki 页面 <a class="reference external" href="https://wiki.python.org/moin/PythonBooks">https://wiki.python.org/moin/PythonBooks</a> 获取一份清单。</p>
<p>你也可以到各大在线书店搜索 &quot;Python&quot; 并过滤掉对 Monty Python 的引用；或者也可以搜索 &quot;Python&quot; 加 &quot;language&quot;。</p>
</section>
<section id="where-in-the-world-is-www-python-org-located">
<h3><a class="toc-backref" href="#id19" role="doc-backlink">www.python.org 具体位于世界上的哪个地点？</a></h3>
<p>Python 项目的基础设施分布于世界各地并由 Python 基础设施团队负责管理。 相关细节请访问 <a class="reference external" href="https://infra.psf.io">这里</a><span class="link-target"> [https://infra.psf.io]</span>。</p>
</section>
<section id="why-is-it-called-python">
<h3><a class="toc-backref" href="#id20" role="doc-backlink">为何命名为 Python？</a></h3>
<p>在着手编写 Python 实现的时候，Guido van Rossum 同时还阅读了刚出版的 <a class="reference external" href="https://en.wikipedia.org/wiki/Monty_Python">&quot;Monty Python 的飞行马戏团&quot;</a><span class="link-target"> [https://en.wikipedia.org/wiki/Monty_Python]</span> 剧本，这是一部自 1970 年代开始播出的 BBC 系列喜剧。 Van Rossum 觉得他需要选择一个简短、独特而又略显神秘的名字，于是他决定将这个新语言命名为 Python。</p>
</section>
<section id="do-i-have-to-like-monty-python-s-flying-circus">
<h3><a class="toc-backref" href="#id21" role="doc-backlink">我必须喜欢 &quot;Monty Python 的飞行马戏团&quot; 吗？</a></h3>
<p>不必，但这对学习会有帮助。 :)</p>
</section>
</section>
<section id="python-in-the-real-world">
<h2><a class="toc-backref" href="#id22" role="doc-backlink">现实世界中的 Python</a></h2>
<section id="how-stable-is-python">
<h3><a class="toc-backref" href="#id23" role="doc-backlink">Python 有多稳定？</a></h3>
<p>非常稳定。 自 1991 年起大约每隔 6 至 18 个月就会推出新的稳定发布版，这种状态看来还会持续下去。 从 3.9 版开始，Python 将会每隔 12 个月推出一个新增特征版本 (<span class="target" id="index-7"></span><a class="pep reference external" href="https://peps.python.org/pep-0602/"><strong>PEP 602</strong></a><span class="link-target"> [https://peps.python.org/pep-0602/]</span>)。</p>
<p>开发者也会推出较旧版本的问题修正发布版，因此现有发布版的稳定性还会逐步提升。 问题修正发布版会以版本号第三部分的数字来标示（例如 3.5.3, 3.6.2），用于稳定性管理；只有对已知问题的修正会包含在问题修正发布版中，而同一系列的问题修正发布版中的接口将会始终保持一致。</p>
<p>最新的稳定版本总是可以在 <a class="reference external" href="https://www.python.org/downloads/">Python 下载页</a><span class="link-target"> [https://www.python.org/downloads/]</span> 中找到。 有两个适用于生产环境的版本: 2.x 和 3.x。 推荐的版本是 3.x，它被大多数广泛使用的库所支持。 虽然 2.x 也仍被广泛使用，但是 <a class="reference external" href="https://peps.python.org/pep-0373/">它已经不再维护</a><span class="link-target"> [https://peps.python.org/pep-0373/]</span>。</p>
</section>
<section id="how-many-people-are-using-python">
<h3><a class="toc-backref" href="#id24" role="doc-backlink">有多少人在使用 Python？</a></h3>
<p>使用者应该数以百万计，但很难获得一个精确的数字。</p>
<p>Python 可以免费下载，因此并不存在销量数据，此外它也可以从许多不同网站获取，并且包含于许多 Linux 发行版之中，因此下载量统计同样无法完全说明问题。</p>
<p>comp.lang.python 新闻组非常活跃，但不是所有 Python 用户都会在新闻组发帖，许多人甚至不会阅读新闻组。</p>
</section>
<section id="have-any-significant-projects-been-done-in-python">
<h3><a class="toc-backref" href="#id25" role="doc-backlink">有哪些重要的项目是用 Python 开发的？</a></h3>
<p>请访问 <a class="reference external" href="https://www.python.org/about/success">https://www.python.org/about/success</a> 查看使用了 Python 的项目列表。 阅览 <a class="reference external" href="https://www.python.org/community/workshops/">历次 Python 会议</a><span class="link-target"> [https://www.python.org/community/workshops/]</span> 的日程纪要可以看到许多不同公司和组织所做的贡献。</p>
<p>高水准的 Python 项目包括 <a class="reference external" href="https://www.list.org">Mailman 邮件列表管理器</a><span class="link-target"> [https://www.list.org]</span> 和 <a class="reference external" href="https://www.zope.dev">Zope 应用服务器</a><span class="link-target"> [https://www.zope.dev]</span>。 多个 Linux 发行版，其中最著名的是 <a class="reference external" href="https://www.redhat.com">Red Hat</a><span class="link-target"> [https://www.redhat.com]</span>，都使用 Python 来编写其部分或全部的安装器和系统管理软件。 在内部使用 Python 的公司包括了 Google, Yahoo 和 Lucasfilm 等等。</p>
</section>
<section id="what-new-developments-are-expected-for-python-in-the-future">
<h3><a class="toc-backref" href="#id26" role="doc-backlink">在未来可以期待 Python 将有什么新进展？</a></h3>
<p>请访问 <a class="reference external" href="https://peps.python.org/">https://peps.python.org/</a> 查看 Python 增强提议（PEP）。 PEP 是为 Python 加入某种新特性的提议进行描述的设计文档，其中会提供简明的技术规格说明与基本原理。 可查找标题为 &quot;Python X.Y Release Schedule&quot; 的 PEP，其中 X.Y 是某个尚未公开发布的版本。</p>
<p>新版本的开发会在 <a class="reference external" href="https://mail.python.org/mailman3/lists/python-dev.python.org/">python-dev 邮件列表</a><span class="link-target"> [https://mail.python.org/mailman3/lists/python-dev.python.org/]</span> 中进行讨论。</p>
</section>
<section id="is-it-reasonable-to-propose-incompatible-changes-to-python">
<h3><a class="toc-backref" href="#id27" role="doc-backlink">提议对 Python 加入不兼容的更改是否合理？</a></h3>
<p>通常来说是不合理的。 世界上已存在的 Python 代码数以亿计，因此，任何对该语言的更改即便仅会使得现有程序中极少的一部分失效也是难以令人接受的。 就算你可以提供一个转换程序，也仍然存在需要更新全部文档的问题；另外还有大量已出版的 Python 书籍，我们不希望让它们在一瞬间全部变成废纸。</p>
<p>如果必须更改某个特性，则应该提供渐进式的升级路径。 <span class="target" id="index-8"></span><a class="pep reference external" href="https://peps.python.org/pep-0005/"><strong>PEP 5</strong></a><span class="link-target"> [https://peps.python.org/pep-0005/]</span> 描述了引入向后不兼容的更改所需遵循的流程，以尽可能减少对用户的干扰。</p>
</section>
<section id="is-python-a-good-language-for-beginning-programmers">
<h3><a class="toc-backref" href="#id28" role="doc-backlink">Python 是一种对编程初学者友好的语言吗？</a></h3>
<p>有的。</p>
<p>从过程式、静态类型的编程语言例如 Pascal, C 或者 C++ 以及 Java 的某一子集开始引导学生入门仍然是常见的做法。 但以  Python 作为第一种编程语言进行学习对学生可能更有利。Python 具有非常简单和一致的语法和庞大的标准库，而且最重要的是，在编程入门教学中使用 Python 可以让学生专注于更重要的编程技能，例如问题分解与数据类型设计。 使用 Python，可以快速向学生介绍基本概念例如循环与过程等。 他们甚至有可能在第一次课里就开始接触用户自定义对象。</p>
<p>对于之前从未接触过编程的学生来说，使用静态类型语言会感觉不够自然。 这会给学生带来必须掌握的额外复杂性，并减慢教学的进度。 学生需要尝试像计算机一样思考，分解问题，设计一致的接口并封装数据。 虽然从长远来看，学习和使用一种静态类型语言是很重要的，但这并不是最适宜在学生的第一次编程课上就进行探讨的主题。</p>
<p>还有许多其他方面的特点使得 Python 成为很好的入门语言。 像 Java 一样，Python 拥有一个庞大的标准库，因此可以在课程非常早期的阶段就给学生布置一些 <em>实用</em> 的编程项目。 编程作业不必仅限于标准四则运算和账目检查程序。 通过使用标准库，学生可以在学习编程基础知识的同时开发真正的应用，从而获得更大的满足感。 使用标准库还能使学生了解代码重用的概念。 而像 PyGame 这样的第三方模块同样有助于扩大学生的接触领域。</p>
<p>Python 的解释器使学生能够在编程时测试语言特性。 他们可以在一个窗口中输入程序源代码的同时开启一个解释器运行窗口。 如果他们不记得列表有哪些方法，他们这以这样做:</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">L</span> <span class="o">=</span> <span class="p">[]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">dir</span><span class="p">(</span><span class="n">L</span><span class="p">)</span> 
<span class="go">[&#39;__add__&#39;, &#39;__class__&#39;, &#39;__contains__&#39;, &#39;__delattr__&#39;, &#39;__delitem__&#39;,</span>
<span class="go">&#39;__dir__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;,</span>
<span class="go">&#39;__getattribute__&#39;, &#39;__getitem__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__iadd__&#39;,</span>
<span class="go">&#39;__imul__&#39;, &#39;__init__&#39;, &#39;__iter__&#39;, &#39;__le__&#39;, &#39;__len__&#39;, &#39;__lt__&#39;,</span>
<span class="go">&#39;__mul__&#39;, &#39;__ne__&#39;, &#39;__new__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;,</span>
<span class="go">&#39;__repr__&#39;, &#39;__reversed__&#39;, &#39;__rmul__&#39;, &#39;__setattr__&#39;, &#39;__setitem__&#39;,</span>
<span class="go">&#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__subclasshook__&#39;, &#39;append&#39;, &#39;clear&#39;,</span>
<span class="go">&#39;copy&#39;, &#39;count&#39;, &#39;extend&#39;, &#39;index&#39;, &#39;insert&#39;, &#39;pop&#39;, &#39;remove&#39;,</span>
<span class="go">&#39;reverse&#39;, &#39;sort&#39;]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="p">[</span><span class="n">d</span> <span class="k">for</span> <span class="n">d</span> <span class="ow">in</span> <span class="nb">dir</span><span class="p">(</span><span class="n">L</span><span class="p">)</span> <span class="k">if</span> <span class="s1">&#39;__&#39;</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">d</span><span class="p">]</span>
<span class="go">[&#39;append&#39;, &#39;clear&#39;, &#39;copy&#39;, &#39;count&#39;, &#39;extend&#39;, &#39;index&#39;, &#39;insert&#39;, &#39;pop&#39;, &#39;remove&#39;, &#39;reverse&#39;, &#39;sort&#39;]</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">help</span><span class="p">(</span><span class="n">L</span><span class="o">.</span><span class="n">append</span><span class="p">)</span>
<span class="go">Help on built-in function append:</span>

<span class="go">append(...)</span>
<span class="go">    L.append(object) -&gt; None -- append object to end</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">L</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">L</span>
<span class="go">[1]</span>
</pre></div>
</div>
<p>通过使用解释器，学生编写程序时参考文档总是能伴随在他们身边。</p>
<p>Python 还拥有一些很好的 IDE。 IDLE 是一个以 Python 基于 Tkinter 编写的跨平台 Python IDE。 Emacs 用户将高兴地了解到 Emacs 具有非常好的 Python 模式。 所有这些编程环境都提供语法高亮、自动缩进以及在编写代码时使用交互式解释器等功能。 请访问 <a class="reference external" href="https://wiki.python.org/moin/PythonEditors">Python wiki</a><span class="link-target"> [https://wiki.python.org/moin/PythonEditors]</span> 查看 Python 编程环境的完整列表。</p>
<p>如果你想要讨论 Python 在教育中的使用，你可能会有兴趣加入 <a class="reference external" href="https://www.python.org/community/sigs/current/edu-sig">edu-sig 邮件列表</a><span class="link-target"> [https://www.python.org/community/sigs/current/edu-sig]</span>。</p>
</section>
</section>
</section>


            <div class="clearer"></div>
          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>