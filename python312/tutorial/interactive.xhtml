<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" /><meta name="viewport" content="width=device-width, initial-scale=1" />
<meta property="og:title" content="14. 交互式编辑和编辑历史" />
<meta property="og:type" content="website" />
<meta property="og:url" content="https://docs.python.org/3/tutorial/interactive.xhtml" />
<meta property="og:site_name" content="Python documentation" />
<meta property="og:description" content="某些版本的 Python 解释器支持编辑当前输入行和编辑历史记录，类似 Korn shell 和 GNU Bash shell 的功能 。这个功能使用了 GNU Readline[https://tiswww.case.edu/php/chet/readline/rltop.html] 来实现，一个支持多种编辑方式的库。这个库有它自己的文档，在这里我们就不重复说明了。 Tab 补全和编辑历史..." />
<meta property="og:image" content="https://docs.python.org/3/_static/og-image.png" />
<meta property="og:image:alt" content="Python documentation" />
<meta name="description" content="某些版本的 Python 解释器支持编辑当前输入行和编辑历史记录，类似 Korn shell 和 GNU Bash shell 的功能 。这个功能使用了 GNU Readline[https://tiswww.case.edu/php/chet/readline/rltop.html] 来实现，一个支持多种编辑方式的库。这个库有它自己的文档，在这里我们就不重复说明了。 Tab 补全和编辑历史..." />
<meta property="og:image:width" content="200" />
<meta property="og:image:height" content="200" />
<meta name="theme-color" content="#3776ab" />

    <title>14. 交互式编辑和编辑历史</title>
    <link rel="stylesheet" type="text/css" href="../_static/pygments.css" />
    <link rel="stylesheet" type="text/css" href="../_static/epub.css" />
    <link rel="canonical" href="https://docs.python.org/3/tutorial/interactive.html" />
    
      
    

    
    <style>
      @media only screen {
        table.full-width-table {
            width: 100%;
        }
      }
    </style>
 

  </head><body>


    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <section id="interactive-input-editing-and-history-substitution">
<span id="tut-interacting"></span><h1><span class="section-number">14. </span>交互式编辑和编辑历史</h1>
<p>某些版本的 Python 解释器支持编辑当前输入行和编辑历史记录，类似 Korn shell 和 GNU Bash shell 的功能 。这个功能使用了 <a class="reference external" href="https://tiswww.case.edu/php/chet/readline/rltop.html">GNU Readline</a><span class="link-target"> [https://tiswww.case.edu/php/chet/readline/rltop.html]</span> 来实现，一个支持多种编辑方式的库。这个库有它自己的文档，在这里我们就不重复说明了。</p>
<section id="tab-completion-and-history-editing">
<span id="tut-keybindings"></span><h2><span class="section-number">14.1. </span>Tab 补全和编辑历史</h2>
<p>在解释器启动的时候变量和模块名补全功能将 <a class="reference internal" href="../library/site.xhtml#rlcompleter-config"><span class="std std-ref">自动启用</span></a> 以便在按下 <kbd class="kbd docutils literal notranslate">Tab</kbd> 键时发起调用补全函数；它会查找 Python 语句名称、当前局部变量和可用的模块名称。 对于带点号的表达式如 <code class="docutils literal notranslate"><span class="pre">string.a</span></code>，它会对该表达式最后一个 <code class="docutils literal notranslate"><span class="pre">'.'</span></code> 之前的部分求值然后根据结果对象的属性给出补全建议。 请注意如果具有 <a class="reference internal" href="../reference/datamodel.xhtml#object.__getattr__" title="object.__getattr__"><code class="xref py py-meth docutils literal notranslate"><span class="pre">__getattr__()</span></code></a> 方法的对象是该表达式的一部分这可能会执行应用程序定义的代码。 默认配置还会将你的编辑历史保存到你的用户目录下名为 <code class="file docutils literal notranslate"><span class="pre">.python_history</span></code> 的文件。 该历史在下一次交互式解释器会话期间将继续可用。</p>
</section>
<section id="alternatives-to-the-interactive-interpreter">
<span id="tut-commentary"></span><h2><span class="section-number">14.2. </span>默认交互式解释器的替代品</h2>
<p>Python 解释器与早期版本的相比，向前迈进了一大步；无论怎样，还有些希望的功能：如果能在编辑连续行时建议缩进（解析器知道接下来是否需要缩进符号），那将很棒。补全机制可以使用解释器的符号表。有命令去检查（甚至建议）括号，引号以及其他符号是否匹配。</p>
<p>一个可选的增强型交互式解释器是 <a class="reference external" href="https://ipython.org/">IPython</a><span class="link-target"> [https://ipython.org/]</span>，它已经存在了有一段时间，它具有 tab 补全，探索对象和高级历史记录管理功能。它还可以彻底定制并嵌入到其他应用程序中。另一个相似的增强型交互式环境是 <a class="reference external" href="https://bpython-interpreter.org/">bpython</a><span class="link-target"> [https://bpython-interpreter.org/]</span>。</p>
</section>
</section>


            <div class="clearer"></div>
          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>