<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" /><meta name="viewport" content="width=device-width, initial-scale=1" />
<meta property="og:title" content="16. 附录" />
<meta property="og:type" content="website" />
<meta property="og:url" content="https://docs.python.org/3/tutorial/appendix.xhtml" />
<meta property="og:site_name" content="Python documentation" />
<meta property="og:description" content="交互模式: 错误处理: 当发生错误时，解释器会打印错误消息和栈回溯。 在交互模式下，将返回到主提示符；当输入是来自文件的时候，它将在打印栈回溯之后退出并附带一个非零的退出状态码。 （由 try 语句中 except 子句所处理的异常在此上下文中不属于错误。） 有些错误属于无条件致命错误，会导致程序附带非零状态码退出；这适用于内部一致性丧失以及某些内存耗尽的情况等。 所有错误消息都将被写入到标..." />
<meta property="og:image" content="https://docs.python.org/3/_static/og-image.png" />
<meta property="og:image:alt" content="Python documentation" />
<meta name="description" content="交互模式: 错误处理: 当发生错误时，解释器会打印错误消息和栈回溯。 在交互模式下，将返回到主提示符；当输入是来自文件的时候，它将在打印栈回溯之后退出并附带一个非零的退出状态码。 （由 try 语句中 except 子句所处理的异常在此上下文中不属于错误。） 有些错误属于无条件致命错误，会导致程序附带非零状态码退出；这适用于内部一致性丧失以及某些内存耗尽的情况等。 所有错误消息都将被写入到标..." />
<meta property="og:image:width" content="200" />
<meta property="og:image:height" content="200" />
<meta name="theme-color" content="#3776ab" />

    <title>16. 附录</title>
    <link rel="stylesheet" type="text/css" href="../_static/pygments.css" />
    <link rel="stylesheet" type="text/css" href="../_static/epub.css" />
    <link rel="canonical" href="https://docs.python.org/3/tutorial/appendix.html" />
    
      
    

    
    <style>
      @media only screen {
        table.full-width-table {
            width: 100%;
        }
      }
    </style>
 

  </head><body>


    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <section id="appendix">
<span id="tut-appendix"></span><h1><span class="section-number">16. </span>附录</h1>
<section id="interactive-mode">
<span id="tut-interac"></span><h2><span class="section-number">16.1. </span>交互模式</h2>
<section id="error-handling">
<span id="tut-error"></span><h3><span class="section-number">16.1.1. </span>错误处理</h3>
<p>当发生错误时，解释器会打印错误消息和栈回溯。 在交互模式下，将返回到主提示符；当输入是来自文件的时候，它将在打印栈回溯之后退出并附带一个非零的退出状态码。 （由 <a class="reference internal" href="../reference/compound_stmts.xhtml#try"><code class="xref std std-keyword docutils literal notranslate"><span class="pre">try</span></code></a> 语句中 <a class="reference internal" href="../reference/compound_stmts.xhtml#except"><code class="xref std std-keyword docutils literal notranslate"><span class="pre">except</span></code></a> 子句所处理的异常在此上下文中不属于错误。） 有些错误属于无条件致命错误，会导致程序附带非零状态码退出；这适用于内部一致性丧失以及某些内存耗尽的情况等。 所有错误消息都将被写入到标准错误流；来自被执行命令的正常输出测会被写入到标准输出。</p>
<p>将中断字符（通常为 <kbd class="kbd compound docutils literal notranslate"><kbd class="kbd docutils literal notranslate">Control</kbd>-<kbd class="kbd docutils literal notranslate">C</kbd></kbd> 或 <kbd class="kbd docutils literal notranslate">Delete</kbd> ）键入主要或辅助提示符会取消输入并返回主提示符。 <a class="footnote-reference brackets" href="#id2" id="id1" role="doc-noteref"><span class="fn-bracket">[</span>1<span class="fn-bracket">]</span></a> 在执行命令时键入中断引发的 <a class="reference internal" href="../library/exceptions.xhtml#KeyboardInterrupt" title="KeyboardInterrupt"><code class="xref py py-exc docutils literal notranslate"><span class="pre">KeyboardInterrupt</span></code></a> 异常，可以由 <a class="reference internal" href="../reference/compound_stmts.xhtml#try"><code class="xref std std-keyword docutils literal notranslate"><span class="pre">try</span></code></a> 语句处理。</p>
</section>
<section id="executable-python-scripts">
<span id="tut-scripts"></span><h3><span class="section-number">16.1.2. </span>可执行的Python脚本</h3>
<p>在 BSD 等类Unix系统上，Python 脚本可以像 shell 脚本一样直接执行，通过在第一行添加：</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="ch">#!/usr/bin/env python3</span>
</pre></div>
</div>
<p>（假设解释器位于用户的 <span class="target" id="index-12"></span><code class="xref std std-envvar docutils literal notranslate"><span class="pre">PATH</span></code> ）脚本的开头，并将文件设置为可执行。 <code class="docutils literal notranslate"><span class="pre">#!</span></code> 必须是文件的前两个字符。在某些平台上，第一行必须以Unix样式的行结尾（<code class="docutils literal notranslate"><span class="pre">'\n'</span></code>）结束，而不是以Windows（<code class="docutils literal notranslate"><span class="pre">'\r\n'</span></code>）行结尾。注意，“散列字符”，或者说“磅字符”， <code class="docutils literal notranslate"><span class="pre">'#'</span></code> ，在Python中代表注释开始。</p>
<p>可以使用 <strong class="program">chmod</strong> 命令为脚本提供可执行模式或权限。</p>
<div class="highlight-shell-session notranslate"><div class="highlight"><pre><span></span><span class="gp">$ </span>chmod<span class="w"> </span>+x<span class="w"> </span>myscript.py
</pre></div>
</div>
<p>在Windows系统上，没有“可执行模式”的概念。 Python安装程序自动将 <code class="docutils literal notranslate"><span class="pre">.py</span></code> 文件与 <code class="docutils literal notranslate"><span class="pre">python.exe</span></code> 相关联，这样双击Python文件就会将其作为脚本运行。扩展也可以是 <code class="docutils literal notranslate"><span class="pre">.pyw</span></code> ，在这种情况下，会隐藏通常出现的控制台窗口。</p>
</section>
<section id="the-interactive-startup-file">
<span id="tut-startup"></span><h3><span class="section-number">16.1.3. </span>交互式启动文件</h3>
<p>当您以交互模式使用 Python 时，您可能会希望在每次启动解释器时，解释器先执行几条您预先编写的命令，然后您再以交互模式继续使用。您可以通过将名为 <span class="target" id="index-13"></span><a class="reference internal" href="../using/cmdline.xhtml#envvar-PYTHONSTARTUP"><code class="xref std std-envvar docutils literal notranslate"><span class="pre">PYTHONSTARTUP</span></code></a> 的环境变量设置为包含启动命令的文件的文件名来实现。这类似于 Unix shell 的 <code class="file docutils literal notranslate"><span class="pre">.profile</span></code> 功能。</p>
<p>Python 只有在交互模式时，才会读取此文件，而非在从脚本读指令或是将 <code class="file docutils literal notranslate"><span class="pre">/dev/tty</span></code> 显式作为被运行的 Python 脚本的文件名时（后者反而表现得像一个交互式会话）。这个文件与交互式指令共享相同的命名空间，所以它定义或导入的对象可以在交互式会话中直接使用。您也可以在该文件中更改提示符 <code class="docutils literal notranslate"><span class="pre">sys.ps1</span></code> 和 <code class="docutils literal notranslate"><span class="pre">sys.ps2</span></code>。</p>
<p>如果您想 <em>从当前目录中</em> 读取一个额外的启动文件，您可以在上文所说的全局启动文件中编写像 <code class="docutils literal notranslate"><span class="pre">if</span> <span class="pre">os.path.isfile('.pythonrc.py'):</span> <span class="pre">exec(open('.pythonrc.py').read())</span></code> 这样的代码。如果要在脚本中使用启动文件，则必须在脚本中显式执行此操作：</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="kn">import</span> <span class="nn">os</span>
<span class="n">filename</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">environ</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;PYTHONSTARTUP&#39;</span><span class="p">)</span>
<span class="k">if</span> <span class="n">filename</span> <span class="ow">and</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">isfile</span><span class="p">(</span><span class="n">filename</span><span class="p">):</span>
    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span> <span class="k">as</span> <span class="n">fobj</span><span class="p">:</span>
        <span class="n">startup_file</span> <span class="o">=</span> <span class="n">fobj</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
    <span class="n">exec</span><span class="p">(</span><span class="n">startup_file</span><span class="p">)</span>
</pre></div>
</div>
</section>
<section id="the-customization-modules">
<span id="tut-customize"></span><h3><span class="section-number">16.1.4. </span>定制模块</h3>
<p>Python 提供了两个钩子供你进行自定义: <span class="target" id="index-14"></span>sitecustomize 和 <span class="target" id="index-15"></span>usercustomize。 要了解它是如何工作的，首先需要找到用户 site-packages 目录的位置。 启动 Python 并运行以下代码:</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="kn">import</span> <span class="nn">site</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">site</span><span class="o">.</span><span class="n">getusersitepackages</span><span class="p">()</span>
<span class="go">&#39;/home/user/.local/lib/python3.x/site-packages&#39;</span>
</pre></div>
</div>
<p>现在，您可以在该目录中创建一个名为 <code class="file docutils literal notranslate"><span class="pre">usercustomize.py</span></code> 的文件，并将所需内容放入其中。它会影响Python的每次启动，除非它以 <a class="reference internal" href="../using/cmdline.xhtml#cmdoption-s"><code class="xref std std-option docutils literal notranslate"><span class="pre">-s</span></code></a> 选项启动，以禁用自动导入。</p>
<p><span class="target" id="index-16"></span>sitecustomize 的工作方式相同，但通常由计算机管理员在全局 site-packages 目录中创建，并在 <span class="target" id="index-17"></span>usercustomize 之前导入。 更多细节请参阅 <a class="reference internal" href="../library/site.xhtml#module-site" title="site: Module responsible for site-specific configuration."><code class="xref py py-mod docutils literal notranslate"><span class="pre">site</span></code></a> 模块的文档。</p>
<p class="rubric">备注</p>
<aside class="footnote-list brackets">
<aside class="footnote brackets" id="id2" role="doc-footnote">
<span class="label"><span class="fn-bracket">[</span><a role="doc-backlink" href="#id1">1</a><span class="fn-bracket">]</span></span>
<p>GNU Readline 包的问题可能会阻止这种情况。</p>
</aside>
</aside>
</section>
</section>
</section>


            <div class="clearer"></div>
          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>