<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" /><meta name="viewport" content="width=device-width, initial-scale=1" />
<meta property="og:title" content="字符串转换与格式化" />
<meta property="og:type" content="website" />
<meta property="og:url" content="https://docs.python.org/3/c-api/conversion.xhtml" />
<meta property="og:site_name" content="Python documentation" />
<meta property="og:description" content="用于数字转换和格式化字符串输出的函数 PyOS_snprintf() 和 PyOS_vsnprintf() 包装 C 标准库函数 snprintf() 和 vsnprintf() 。它们的目的是保证在极端情况下的一致行为，而标准 C 的函数则不然。 此包装器会确保 str[size-1] 在返回时始终为'\0' 。 它们从不写入超过 size 字节 (包括末尾的'\0') 到 str。 两个..." />
<meta property="og:image" content="https://docs.python.org/3/_static/og-image.png" />
<meta property="og:image:alt" content="Python documentation" />
<meta name="description" content="用于数字转换和格式化字符串输出的函数 PyOS_snprintf() 和 PyOS_vsnprintf() 包装 C 标准库函数 snprintf() 和 vsnprintf() 。它们的目的是保证在极端情况下的一致行为，而标准 C 的函数则不然。 此包装器会确保 str[size-1] 在返回时始终为'\0' 。 它们从不写入超过 size 字节 (包括末尾的'\0') 到 str。 两个..." />
<meta property="og:image:width" content="200" />
<meta property="og:image:height" content="200" />
<meta name="theme-color" content="#3776ab" />

    <title>字符串转换与格式化</title>
    <link rel="stylesheet" type="text/css" href="../_static/pygments.css" />
    <link rel="stylesheet" type="text/css" href="../_static/epub.css" />
    <link rel="canonical" href="https://docs.python.org/3/c-api/conversion.html" />
    
      
    

    
    <style>
      @media only screen {
        table.full-width-table {
            width: 100%;
        }
      }
    </style>
 

  </head><body>


    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <section id="string-conversion-and-formatting">
<span id="string-conversion"></span><h1>字符串转换与格式化</h1>
<p>用于数字转换和格式化字符串输出的函数</p>
<dl class="c function">
<dt class="sig sig-object c" id="c.PyOS_snprintf">
<span class="kt"><span class="pre">int</span></span><span class="w"> </span><span class="sig-name descname"><span class="n"><span class="pre">PyOS_snprintf</span></span></span><span class="sig-paren">(</span><span class="kt"><span class="pre">char</span></span><span class="w"> </span><span class="p"><span class="pre">*</span></span><span class="n"><span class="pre">str</span></span>, <span class="n"><span class="pre">size_t</span></span><span class="w"> </span><span class="n"><span class="pre">size</span></span>, <span class="k"><span class="pre">const</span></span><span class="w"> </span><span class="kt"><span class="pre">char</span></span><span class="w"> </span><span class="p"><span class="pre">*</span></span><span class="n"><span class="pre">format</span></span>, <span class="p"><span class="pre">...</span></span><span class="sig-paren">)</span><br /></dt>
<dd><em class="stableabi"> 属于 <a class="reference internal" href="stable.xhtml#stable"><span class="std std-ref">稳定 ABI</span></a>.</em><p>根据格式字符串 <em>format</em> 和额外参数，输出不超过 <em>size</em> 个字节到 <em>str</em>。 参见 Unix 手册页面 <em class="manpage"><a class="manpage reference external" href="https://manpages.debian.org/snprintf(3)">snprintf(3)</a><span class="link-target"> [https://manpages.debian.org/snprintf(3)]</span></em>。</p>
</dd></dl>

<dl class="c function">
<dt class="sig sig-object c" id="c.PyOS_vsnprintf">
<span class="kt"><span class="pre">int</span></span><span class="w"> </span><span class="sig-name descname"><span class="n"><span class="pre">PyOS_vsnprintf</span></span></span><span class="sig-paren">(</span><span class="kt"><span class="pre">char</span></span><span class="w"> </span><span class="p"><span class="pre">*</span></span><span class="n"><span class="pre">str</span></span>, <span class="n"><span class="pre">size_t</span></span><span class="w"> </span><span class="n"><span class="pre">size</span></span>, <span class="k"><span class="pre">const</span></span><span class="w"> </span><span class="kt"><span class="pre">char</span></span><span class="w"> </span><span class="p"><span class="pre">*</span></span><span class="n"><span class="pre">format</span></span>, <span class="n"><span class="pre">va_list</span></span><span class="w"> </span><span class="n"><span class="pre">va</span></span><span class="sig-paren">)</span><br /></dt>
<dd><em class="stableabi"> 属于 <a class="reference internal" href="stable.xhtml#stable"><span class="std std-ref">稳定 ABI</span></a>.</em><p>根据格式字符串 <em>format</em> 和变量参数列表 <em>va</em>，输出不超过 <em>size</em> 个字节到 <em>str</em>。 参见 Unix 手册页面 <em class="manpage"><a class="manpage reference external" href="https://manpages.debian.org/vsnprintf(3)">vsnprintf(3)</a><span class="link-target"> [https://manpages.debian.org/vsnprintf(3)]</span></em>。</p>
</dd></dl>

<p><a class="reference internal" href="#c.PyOS_snprintf" title="PyOS_snprintf"><code class="xref c c-func docutils literal notranslate"><span class="pre">PyOS_snprintf()</span></code></a> 和 <a class="reference internal" href="#c.PyOS_vsnprintf" title="PyOS_vsnprintf"><code class="xref c c-func docutils literal notranslate"><span class="pre">PyOS_vsnprintf()</span></code></a> 包装 C 标准库函数 <code class="xref c c-func docutils literal notranslate"><span class="pre">snprintf()</span></code> 和 <code class="xref c c-func docutils literal notranslate"><span class="pre">vsnprintf()</span></code> 。它们的目的是保证在极端情况下的一致行为，而标准 C 的函数则不然。</p>
<p>此包装器会确保 <code class="docutils literal notranslate"><span class="pre">str[size-1]</span></code> 在返回时始终为 <code class="docutils literal notranslate"><span class="pre">'\0'</span></code>。 它们从不写入超过 <em>size</em> 字节 (包括末尾的 <code class="docutils literal notranslate"><span class="pre">'\0'</span></code>) 到 str。 两个函数都要求 <code class="docutils literal notranslate"><span class="pre">str</span> <span class="pre">!=</span> <span class="pre">NULL</span></code>, <code class="docutils literal notranslate"><span class="pre">size</span> <span class="pre">&gt;</span> <span class="pre">0</span></code>, <code class="docutils literal notranslate"><span class="pre">format</span> <span class="pre">!=</span> <span class="pre">NULL</span></code> 且 <code class="docutils literal notranslate"><span class="pre">size</span> <span class="pre">&lt;</span> <span class="pre">INT_MAX</span></code>。 请注意这意味着不存在可确定所需缓冲区大小的 C99 <code class="docutils literal notranslate"><span class="pre">n</span> <span class="pre">=</span> <span class="pre">snprintf(NULL,</span> <span class="pre">0,</span> <span class="pre">...)</span></code> 的等价物。</p>
<p>这些函数的返回值（ <em>rv</em> ）应按照以下规则被解释：</p>
<ul class="simple">
<li><p>当 <code class="docutils literal notranslate"><span class="pre">0</span> <span class="pre">&lt;=</span> <span class="pre">rv</span> <span class="pre">&lt;</span> <span class="pre">size</span></code> 时，输出转换即成功并将 <em>rv</em> 个字符写入到 <em>str</em> (不包括末尾 <code class="docutils literal notranslate"><span class="pre">str[rv]</span></code> 位置的 <code class="docutils literal notranslate"><span class="pre">'\0'</span></code> 字节)。</p></li>
<li><p>当 <code class="docutils literal notranslate"><span class="pre">rv</span> <span class="pre">&gt;=</span> <span class="pre">size</span></code> 时，输出转换会被截断并且需要一个具有 <code class="docutils literal notranslate"><span class="pre">rv</span> <span class="pre">+</span> <span class="pre">1</span></code> 字节的缓冲区才能成功执行。 在此情况下 <code class="docutils literal notranslate"><span class="pre">str[size-1]</span></code> 为 <code class="docutils literal notranslate"><span class="pre">'\0'</span></code>。</p></li>
<li><p>当 <code class="docutils literal notranslate"><span class="pre">rv</span> <span class="pre">&lt;</span> <span class="pre">0</span></code> 时，&quot;会发生不好的事情。&quot; 在此情况下 <code class="docutils literal notranslate"><span class="pre">str[size-1]</span></code> 也为 <code class="docutils literal notranslate"><span class="pre">'\0'</span></code>，但 <em>str</em> 的其余部分是未定义的。 错误的确切原因取决于底层平台。</p></li>
</ul>
<p>以下函数提供与语言环境无关的字符串到数字转换。</p>
<dl class="c function">
<dt class="sig sig-object c" id="c.PyOS_strtoul">
<span class="kt"><span class="pre">unsigned</span></span><span class="w"> </span><span class="kt"><span class="pre">long</span></span><span class="w"> </span><span class="sig-name descname"><span class="n"><span class="pre">PyOS_strtoul</span></span></span><span class="sig-paren">(</span><span class="k"><span class="pre">const</span></span><span class="w"> </span><span class="kt"><span class="pre">char</span></span><span class="w"> </span><span class="p"><span class="pre">*</span></span><span class="n"><span class="pre">str</span></span>, <span class="kt"><span class="pre">char</span></span><span class="w"> </span><span class="p"><span class="pre">*</span></span><span class="p"><span class="pre">*</span></span><span class="n"><span class="pre">ptr</span></span>, <span class="kt"><span class="pre">int</span></span><span class="w"> </span><span class="n"><span class="pre">base</span></span><span class="sig-paren">)</span><br /></dt>
<dd><em class="stableabi"> 属于 <a class="reference internal" href="stable.xhtml#stable"><span class="std std-ref">稳定 ABI</span></a>.</em><p>根据给定的 <code class="docutils literal notranslate"><span class="pre">base</span></code> 将 <code class="docutils literal notranslate"><span class="pre">str</span></code> 中字符串的初始部分转换为 <span class="c-expr sig sig-inline c"><span class="kt">unsigned</span><span class="w"> </span><span class="kt">long</span></span> 值，该值必须在 <code class="docutils literal notranslate"><span class="pre">2</span></code> 至 <code class="docutils literal notranslate"><span class="pre">36</span></code> 的开区间内，或者为特殊值 <code class="docutils literal notranslate"><span class="pre">0</span></code>。</p>
<p>空白前缀和字符大小写将被忽略。 如果 <code class="docutils literal notranslate"><span class="pre">base</span></code> 为零则会查找 <code class="docutils literal notranslate"><span class="pre">0b</span></code>、<code class="docutils literal notranslate"><span class="pre">0o</span></code> 或 <code class="docutils literal notranslate"><span class="pre">0x</span></code> 前缀以确定基数。 如果没有则默认基数为 <code class="docutils literal notranslate"><span class="pre">10</span></code>。 基数必须为 0 或在 2 和 36 之间（包括边界值）。 如果 <code class="docutils literal notranslate"><span class="pre">ptr</span></code> 不为 <code class="docutils literal notranslate"><span class="pre">NULL</span></code> 则它将包含一个指向扫描结束位置的指针。</p>
<p>如果转换后的值不在对应返回类型的取值范围之内，则会发生取值范围错误 (<code class="xref c c-data docutils literal notranslate"><span class="pre">errno</span></code> 被设为 <code class="xref c c-macro docutils literal notranslate"><span class="pre">ERANGE</span></code>) 并返回 <code class="xref c c-macro docutils literal notranslate"><span class="pre">ULONG_MAX</span></code>。 如果无法执行转换，则返回 <code class="docutils literal notranslate"><span class="pre">0</span></code>。</p>
<p>另请参阅 Unix 指南页 <em class="manpage"><a class="manpage reference external" href="https://manpages.debian.org/strtoul(3)">strtoul(3)</a><span class="link-target"> [https://manpages.debian.org/strtoul(3)]</span></em>。</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.2.</span></p>
</div>
</dd></dl>

<dl class="c function">
<dt class="sig sig-object c" id="c.PyOS_strtol">
<span class="kt"><span class="pre">long</span></span><span class="w"> </span><span class="sig-name descname"><span class="n"><span class="pre">PyOS_strtol</span></span></span><span class="sig-paren">(</span><span class="k"><span class="pre">const</span></span><span class="w"> </span><span class="kt"><span class="pre">char</span></span><span class="w"> </span><span class="p"><span class="pre">*</span></span><span class="n"><span class="pre">str</span></span>, <span class="kt"><span class="pre">char</span></span><span class="w"> </span><span class="p"><span class="pre">*</span></span><span class="p"><span class="pre">*</span></span><span class="n"><span class="pre">ptr</span></span>, <span class="kt"><span class="pre">int</span></span><span class="w"> </span><span class="n"><span class="pre">base</span></span><span class="sig-paren">)</span><br /></dt>
<dd><em class="stableabi"> 属于 <a class="reference internal" href="stable.xhtml#stable"><span class="std std-ref">稳定 ABI</span></a>.</em><p>根据给定的 <code class="docutils literal notranslate"><span class="pre">base</span></code> 将 <code class="docutils literal notranslate"><span class="pre">str</span></code> 中字符串的初始部分转换为 <span class="c-expr sig sig-inline c"><span class="kt">long</span></span> 值，该值必须在 <code class="docutils literal notranslate"><span class="pre">2</span></code> 至 <code class="docutils literal notranslate"><span class="pre">36</span></code> 的开区间内，或者为特殊值 <code class="docutils literal notranslate"><span class="pre">0</span></code>。</p>
<p>类似于 <a class="reference internal" href="#c.PyOS_strtoul" title="PyOS_strtoul"><code class="xref c c-func docutils literal notranslate"><span class="pre">PyOS_strtoul()</span></code></a>，但在溢出时将返回一个 <span class="c-expr sig sig-inline c"><span class="kt">long</span></span> 值而不是 <code class="xref c c-macro docutils literal notranslate"><span class="pre">LONG_MAX</span></code>。</p>
<p>另请参阅 Unix 指南页 <em class="manpage"><a class="manpage reference external" href="https://manpages.debian.org/strtol(3)">strtol(3)</a><span class="link-target"> [https://manpages.debian.org/strtol(3)]</span></em>。</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.2.</span></p>
</div>
</dd></dl>

<dl class="c function">
<dt class="sig sig-object c" id="c.PyOS_string_to_double">
<span class="kt"><span class="pre">double</span></span><span class="w"> </span><span class="sig-name descname"><span class="n"><span class="pre">PyOS_string_to_double</span></span></span><span class="sig-paren">(</span><span class="k"><span class="pre">const</span></span><span class="w"> </span><span class="kt"><span class="pre">char</span></span><span class="w"> </span><span class="p"><span class="pre">*</span></span><span class="n"><span class="pre">s</span></span>, <span class="kt"><span class="pre">char</span></span><span class="w"> </span><span class="p"><span class="pre">*</span></span><span class="p"><span class="pre">*</span></span><span class="n"><span class="pre">endptr</span></span>, <a class="reference internal" href="structures.xhtml#c.PyObject" title="PyObject"><span class="n"><span class="pre">PyObject</span></span></a><span class="w"> </span><span class="p"><span class="pre">*</span></span><span class="n"><span class="pre">overflow_exception</span></span><span class="sig-paren">)</span><br /></dt>
<dd><em class="stableabi"> 属于 <a class="reference internal" href="stable.xhtml#stable"><span class="std std-ref">稳定 ABI</span></a>.</em><p>将字符串 <code class="docutils literal notranslate"><span class="pre">s</span></code> 转换为 <span class="c-expr sig sig-inline c"><span class="kt">double</span></span> 类型，失败时会引发 Python 异常。 接受的字符串集合对应于可被 Python 的 <a class="reference internal" href="../library/functions.xhtml#float" title="float"><code class="xref py py-func docutils literal notranslate"><span class="pre">float()</span></code></a> 构造器所接受的字符集集合，除了 <code class="docutils literal notranslate"><span class="pre">s</span></code> 必须没有前导或尾随空格。 转换必须独立于当前的语言区域。</p>
<p>如果 <code class="docutils literal notranslate"><span class="pre">endptr</span></code> 是 <code class="docutils literal notranslate"><span class="pre">NULL</span></code> ，转换整个字符串。引发 <a class="reference internal" href="../library/exceptions.xhtml#ValueError" title="ValueError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">ValueError</span></code></a> 并且 返回 <code class="docutils literal notranslate"><span class="pre">-1.0</span></code> 如果字符串不是浮点数的有效的表达方式。</p>
<p>如果 <code class="docutils literal notranslate"><span class="pre">endptr</span></code> 不是 <code class="docutils literal notranslate"><span class="pre">NULL</span></code> ，尽可能多的转换字符串并将 <code class="docutils literal notranslate"><span class="pre">*endptr</span></code> 设置为指向第一个未转换的字符。如果字符串的初始段不是浮点数的有效的表达方式，将 <code class="docutils literal notranslate"><span class="pre">*endptr</span></code> 设置为指向字符串的开头，引发 ValueError 异常，并且返回 <code class="docutils literal notranslate"><span class="pre">-1.0</span></code> 。</p>
<p>如果 <code class="docutils literal notranslate"><span class="pre">s</span></code> 表示一个太大而不能存储在一个浮点数中的值（比方说， <code class="docutils literal notranslate"><span class="pre">&quot;1e500&quot;</span></code> 在许多平台上是一个字符串）然后如果 <code class="docutils literal notranslate"><span class="pre">overflow_exception</span></code> 是 <code class="docutils literal notranslate"><span class="pre">NULL</span></code> 返回 <code class="docutils literal notranslate"><span class="pre">Py_HUGE_VAL</span></code> （用适当的符号）并且不设置任何异常。 在其他方面， <code class="docutils literal notranslate"><span class="pre">overflow_exception</span></code> 必须指向一个 Python 异常对象；引发异常并返回 <code class="docutils literal notranslate"><span class="pre">-1.0</span></code> 。在这两种情况下，设置 <code class="docutils literal notranslate"><span class="pre">*endptr</span></code> 指向转换值之后的第一个字符。</p>
<p>如果在转换期间发生任何其他错误（比如一个内存不足的错误），设置适当的 Python 异常并且返回 <code class="docutils literal notranslate"><span class="pre">-1.0</span></code> 。</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.1.</span></p>
</div>
</dd></dl>

<dl class="c function">
<dt class="sig sig-object c" id="c.PyOS_double_to_string">
<span class="kt"><span class="pre">char</span></span><span class="w"> </span><span class="p"><span class="pre">*</span></span><span class="sig-name descname"><span class="n"><span class="pre">PyOS_double_to_string</span></span></span><span class="sig-paren">(</span><span class="kt"><span class="pre">double</span></span><span class="w"> </span><span class="n"><span class="pre">val</span></span>, <span class="kt"><span class="pre">char</span></span><span class="w"> </span><span class="n"><span class="pre">format_code</span></span>, <span class="kt"><span class="pre">int</span></span><span class="w"> </span><span class="n"><span class="pre">precision</span></span>, <span class="kt"><span class="pre">int</span></span><span class="w"> </span><span class="n"><span class="pre">flags</span></span>, <span class="kt"><span class="pre">int</span></span><span class="w"> </span><span class="p"><span class="pre">*</span></span><span class="n"><span class="pre">ptype</span></span><span class="sig-paren">)</span><br /></dt>
<dd><em class="stableabi"> 属于 <a class="reference internal" href="stable.xhtml#stable"><span class="std std-ref">稳定 ABI</span></a>.</em><p>将 <span class="c-expr sig sig-inline c"><span class="kt">double</span></span> <em>val</em> 转换为一个使用给定的 <em>format_code</em>, <em>precision</em> 和 <em>flags</em> 的字符串。</p>
<p><em>格式码</em> 必须是以下其中之一, <code class="docutils literal notranslate"><span class="pre">'e'</span></code>, <code class="docutils literal notranslate"><span class="pre">'E'</span></code>, <code class="docutils literal notranslate"><span class="pre">'f'</span></code>, <code class="docutils literal notranslate"><span class="pre">'F'</span></code>, <code class="docutils literal notranslate"><span class="pre">'g'</span></code>, <code class="docutils literal notranslate"><span class="pre">'G'</span></code> 或者 <code class="docutils literal notranslate"><span class="pre">'r'</span></code>。对于 <code class="docutils literal notranslate"><span class="pre">'r'</span></code> , 提供的 <em>精度</em> 必须是0。<code class="docutils literal notranslate"><span class="pre">'r'</span></code> 格式码指定了标准函数 <a class="reference internal" href="../library/functions.xhtml#repr" title="repr"><code class="xref py py-func docutils literal notranslate"><span class="pre">repr()</span></code></a> 格式。</p>
<p><em>flags</em> 可以为零或者其他值 <code class="docutils literal notranslate"><span class="pre">Py_DTSF_SIGN</span></code>, <code class="docutils literal notranslate"><span class="pre">Py_DTSF_ADD_DOT_0</span></code> 或 <code class="docutils literal notranslate"><span class="pre">Py_DTSF_ALT</span></code> 或其组合：</p>
<ul class="simple">
<li><p><code class="docutils literal notranslate"><span class="pre">Py_DTSF_SIGN</span></code> 表示总是在返回的字符串前附加一个符号字符，即使 <em>val</em> 为非负数。</p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">Py_DTSF_ADD_DOT_0</span></code> 表示确保返回的字符串看起来不像是一个整数。</p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">Py_DTSF_ALT</span></code> 表示应用 &quot;替代的&quot; 格式化规则。 相关细节请参阅 <a class="reference internal" href="#c.PyOS_snprintf" title="PyOS_snprintf"><code class="xref c c-func docutils literal notranslate"><span class="pre">PyOS_snprintf()</span></code></a> <code class="docutils literal notranslate"><span class="pre">'#'</span></code> 定义文档。</p></li>
</ul>
<p>如果 <em>ptype</em> 不为 <code class="docutils literal notranslate"><span class="pre">NULL</span></code>，则它指向的值将被设为 <code class="docutils literal notranslate"><span class="pre">Py_DTST_FINITE</span></code>, <code class="docutils literal notranslate"><span class="pre">Py_DTST_INFINITE</span></code> 或 <code class="docutils literal notranslate"><span class="pre">Py_DTST_NAN</span></code> 中的一个，分别表示 <em>val</em> 是一个有限数字、无限数字或非数字。</p>
<p>返回值是一个指向包含转换后字符串的 <em>buffer</em> 的指针，如果转换失败则为 <code class="docutils literal notranslate"><span class="pre">NULL</span></code>。 调用方要负责调用 <a class="reference internal" href="memory.xhtml#c.PyMem_Free" title="PyMem_Free"><code class="xref c c-func docutils literal notranslate"><span class="pre">PyMem_Free()</span></code></a> 来释放返回的字符串。</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.1.</span></p>
</div>
</dd></dl>

<dl class="c function">
<dt class="sig sig-object c" id="c.PyOS_stricmp">
<span class="kt"><span class="pre">int</span></span><span class="w"> </span><span class="sig-name descname"><span class="n"><span class="pre">PyOS_stricmp</span></span></span><span class="sig-paren">(</span><span class="k"><span class="pre">const</span></span><span class="w"> </span><span class="kt"><span class="pre">char</span></span><span class="w"> </span><span class="p"><span class="pre">*</span></span><span class="n"><span class="pre">s1</span></span>, <span class="k"><span class="pre">const</span></span><span class="w"> </span><span class="kt"><span class="pre">char</span></span><span class="w"> </span><span class="p"><span class="pre">*</span></span><span class="n"><span class="pre">s2</span></span><span class="sig-paren">)</span><br /></dt>
<dd><p>不区分大小写的字符串比较。 除了忽略大小写之外，该函数的工作方式与 <code class="xref c c-func docutils literal notranslate"><span class="pre">strcmp()</span></code> 相同。</p>
</dd></dl>

<dl class="c function">
<dt class="sig sig-object c" id="c.PyOS_strnicmp">
<span class="kt"><span class="pre">int</span></span><span class="w"> </span><span class="sig-name descname"><span class="n"><span class="pre">PyOS_strnicmp</span></span></span><span class="sig-paren">(</span><span class="k"><span class="pre">const</span></span><span class="w"> </span><span class="kt"><span class="pre">char</span></span><span class="w"> </span><span class="p"><span class="pre">*</span></span><span class="n"><span class="pre">s1</span></span>, <span class="k"><span class="pre">const</span></span><span class="w"> </span><span class="kt"><span class="pre">char</span></span><span class="w"> </span><span class="p"><span class="pre">*</span></span><span class="n"><span class="pre">s2</span></span>, <a class="reference internal" href="intro.xhtml#c.Py_ssize_t" title="Py_ssize_t"><span class="n"><span class="pre">Py_ssize_t</span></span></a><span class="w"> </span><span class="n"><span class="pre">size</span></span><span class="sig-paren">)</span><br /></dt>
<dd><p>不区分大小写的字符串比较。 除了忽略大小写之外，该函数的工作方式与 <code class="xref c c-func docutils literal notranslate"><span class="pre">strncmp()</span></code> 相同。</p>
</dd></dl>

</section>


            <div class="clearer"></div>
          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>