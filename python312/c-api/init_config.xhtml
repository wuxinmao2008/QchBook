<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" /><meta name="viewport" content="width=device-width, initial-scale=1" />
<meta property="og:title" content="Python初始化配置" />
<meta property="og:type" content="website" />
<meta property="og:url" content="https://docs.python.org/3/c-api/init_config.xhtml" />
<meta property="og:site_name" content="Python documentation" />
<meta property="og:description" content="Python 可以使用 Py_InitializeFromConfig() 和 PyConfig 结构体来初始化。 它可以使用 Py_PreInitialize() 和 PyPreConfig 结构体来预初始化。 有两种配置方式： Python 配置 可被用于构建一个定制的 Python，其行为与常规 Python 类似。 例如，环境变量和命令行参数可被用于配置 Python。, 隔离配置 ..." />
<meta property="og:image" content="https://docs.python.org/3/_static/og-image.png" />
<meta property="og:image:alt" content="Python documentation" />
<meta name="description" content="Python 可以使用 Py_InitializeFromConfig() 和 PyConfig 结构体来初始化。 它可以使用 Py_PreInitialize() 和 PyPreConfig 结构体来预初始化。 有两种配置方式： Python 配置 可被用于构建一个定制的 Python，其行为与常规 Python 类似。 例如，环境变量和命令行参数可被用于配置 Python。, 隔离配置 ..." />
<meta property="og:image:width" content="200" />
<meta property="og:image:height" content="200" />
<meta name="theme-color" content="#3776ab" />

    <title>Python初始化配置</title>
    <link rel="stylesheet" type="text/css" href="../_static/pygments.css" />
    <link rel="stylesheet" type="text/css" href="../_static/epub.css" />
    <link rel="canonical" href="https://docs.python.org/3/c-api/init_config.html" />
    
      
    

    
    <style>
      @media only screen {
        table.full-width-table {
            width: 100%;
        }
      }
    </style>
 

  </head><body>


    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <section id="python-initialization-configuration">
<span id="init-config"></span><h1>Python初始化配置</h1>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.8.</span></p>
</div>
<p>Python 可以使用 <a class="reference internal" href="#c.Py_InitializeFromConfig" title="Py_InitializeFromConfig"><code class="xref c c-func docutils literal notranslate"><span class="pre">Py_InitializeFromConfig()</span></code></a> 和 <a class="reference internal" href="#c.PyConfig" title="PyConfig"><code class="xref c c-type docutils literal notranslate"><span class="pre">PyConfig</span></code></a> 结构体来初始化。 它可以使用 <a class="reference internal" href="#c.Py_PreInitialize" title="Py_PreInitialize"><code class="xref c c-func docutils literal notranslate"><span class="pre">Py_PreInitialize()</span></code></a> 和 <a class="reference internal" href="#c.PyPreConfig" title="PyPreConfig"><code class="xref c c-type docutils literal notranslate"><span class="pre">PyPreConfig</span></code></a> 结构体来预初始化。</p>
<p>有两种配置方式：</p>
<ul class="simple">
<li><p><a class="reference internal" href="#init-python-config"><span class="std std-ref">Python 配置</span></a> 可被用于构建一个定制的 Python，其行为与常规 Python 类似。 例如，环境变量和命令行参数可被用于配置 Python。</p></li>
<li><p><a class="reference internal" href="#init-isolated-conf"><span class="std std-ref">隔离配置</span></a> 可被用于将 Python 嵌入到应用程序。 它将 Python 与系统隔离开来。 例如，环境变量将被忽略，LC_CTYPE 语言区域设置保持不变并且不会注册任何信号处理器。</p></li>
</ul>
<p><a class="reference internal" href="#c.Py_RunMain" title="Py_RunMain"><code class="xref c c-func docutils literal notranslate"><span class="pre">Py_RunMain()</span></code></a> 函数可被用来编写定制的 Python 程序。</p>
<p>参见 <a class="reference internal" href="init.xhtml#initialization"><span class="std std-ref">Initialization, Finalization, and Threads</span></a>.</p>
<div class="admonition seealso">
<p class="admonition-title">参见</p>
<p><span class="target" id="index-76"></span><a class="pep reference external" href="https://peps.python.org/pep-0587/"><strong>PEP 587</strong></a><span class="link-target"> [https://peps.python.org/pep-0587/]</span> &quot;Python 初始化配置&quot;.</p>
</div>
<section id="example">
<h2>示例</h2>
<p>定制的 Python 的示例总是会以隔离模式运行:</p>
<div class="highlight-c notranslate"><div class="highlight"><pre><span></span><span class="kt">int</span><span class="w"> </span><span class="nf">main</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">argc</span><span class="p">,</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="o">**</span><span class="n">argv</span><span class="p">)</span>
<span class="p">{</span>
<span class="w">    </span><span class="n">PyStatus</span><span class="w"> </span><span class="n">status</span><span class="p">;</span>

<span class="w">    </span><span class="n">PyConfig</span><span class="w"> </span><span class="n">config</span><span class="p">;</span>
<span class="w">    </span><span class="n">PyConfig_InitPythonConfig</span><span class="p">(</span><span class="o">&amp;</span><span class="n">config</span><span class="p">);</span>
<span class="w">    </span><span class="n">config</span><span class="p">.</span><span class="n">isolated</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span>

<span class="w">    </span><span class="cm">/* Decode command line arguments.</span>
<span class="cm">       Implicitly preinitialize Python (in isolated mode). */</span>
<span class="w">    </span><span class="n">status</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">PyConfig_SetBytesArgv</span><span class="p">(</span><span class="o">&amp;</span><span class="n">config</span><span class="p">,</span><span class="w"> </span><span class="n">argc</span><span class="p">,</span><span class="w"> </span><span class="n">argv</span><span class="p">);</span>
<span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">PyStatus_Exception</span><span class="p">(</span><span class="n">status</span><span class="p">))</span><span class="w"> </span><span class="p">{</span>
<span class="w">        </span><span class="k">goto</span><span class="w"> </span><span class="n">exception</span><span class="p">;</span>
<span class="w">    </span><span class="p">}</span>

<span class="w">    </span><span class="n">status</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Py_InitializeFromConfig</span><span class="p">(</span><span class="o">&amp;</span><span class="n">config</span><span class="p">);</span>
<span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">PyStatus_Exception</span><span class="p">(</span><span class="n">status</span><span class="p">))</span><span class="w"> </span><span class="p">{</span>
<span class="w">        </span><span class="k">goto</span><span class="w"> </span><span class="n">exception</span><span class="p">;</span>
<span class="w">    </span><span class="p">}</span>
<span class="w">    </span><span class="n">PyConfig_Clear</span><span class="p">(</span><span class="o">&amp;</span><span class="n">config</span><span class="p">);</span>

<span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">Py_RunMain</span><span class="p">();</span>

<span class="nl">exception</span><span class="p">:</span>
<span class="w">    </span><span class="n">PyConfig_Clear</span><span class="p">(</span><span class="o">&amp;</span><span class="n">config</span><span class="p">);</span>
<span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">PyStatus_IsExit</span><span class="p">(</span><span class="n">status</span><span class="p">))</span><span class="w"> </span><span class="p">{</span>
<span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="n">status</span><span class="p">.</span><span class="n">exitcode</span><span class="p">;</span>
<span class="w">    </span><span class="p">}</span>
<span class="w">    </span><span class="cm">/* Display the error message and exit the process with</span>
<span class="cm">       non-zero exit code */</span>
<span class="w">    </span><span class="n">Py_ExitStatusException</span><span class="p">(</span><span class="n">status</span><span class="p">);</span>
<span class="p">}</span>
</pre></div>
</div>
</section>
<section id="pywidestringlist">
<h2>PyWideStringList</h2>
<dl class="c type">
<dt class="sig sig-object c" id="c.PyWideStringList">
<span class="k"><span class="pre">type</span></span><span class="w"> </span><span class="sig-name descname"><span class="n"><span class="pre">PyWideStringList</span></span></span><br /></dt>
<dd><p>由 <code class="docutils literal notranslate"><span class="pre">wchar_t*</span></code> 字符串组成的列表。</p>
<p>如果 <em>length</em> 为非零值，则 <em>items</em> 必须不为 <code class="docutils literal notranslate"><span class="pre">NULL</span></code> 并且所有字符串均必须不为 <code class="docutils literal notranslate"><span class="pre">NULL</span></code>。</p>
<p>方法</p>
<dl class="c function">
<dt class="sig sig-object c" id="c.PyWideStringList_Append">
<a class="reference internal" href="#c.PyStatus" title="PyStatus"><span class="n"><span class="pre">PyStatus</span></span></a><span class="w"> </span><span class="sig-name descname"><span class="n"><span class="pre">PyWideStringList_Append</span></span></span><span class="sig-paren">(</span><a class="reference internal" href="#c.PyWideStringList" title="PyWideStringList"><span class="n"><span class="pre">PyWideStringList</span></span></a><span class="w"> </span><span class="p"><span class="pre">*</span></span><span class="n"><span class="pre">list</span></span>, <span class="k"><span class="pre">const</span></span><span class="w"> </span><span class="n"><span class="pre">wchar_t</span></span><span class="w"> </span><span class="p"><span class="pre">*</span></span><span class="n"><span class="pre">item</span></span><span class="sig-paren">)</span><br /></dt>
<dd><p>将 <em>item</em> 添加到 <em>list</em>。</p>
<p>Python 必须被预初始化以便调用此函数。</p>
</dd></dl>

<dl class="c function">
<dt class="sig sig-object c" id="c.PyWideStringList_Insert">
<a class="reference internal" href="#c.PyStatus" title="PyStatus"><span class="n"><span class="pre">PyStatus</span></span></a><span class="w"> </span><span class="sig-name descname"><span class="n"><span class="pre">PyWideStringList_Insert</span></span></span><span class="sig-paren">(</span><a class="reference internal" href="#c.PyWideStringList" title="PyWideStringList"><span class="n"><span class="pre">PyWideStringList</span></span></a><span class="w"> </span><span class="p"><span class="pre">*</span></span><span class="n"><span class="pre">list</span></span>, <a class="reference internal" href="intro.xhtml#c.Py_ssize_t" title="Py_ssize_t"><span class="n"><span class="pre">Py_ssize_t</span></span></a><span class="w"> </span><span class="n"><span class="pre">index</span></span>, <span class="k"><span class="pre">const</span></span><span class="w"> </span><span class="n"><span class="pre">wchar_t</span></span><span class="w"> </span><span class="p"><span class="pre">*</span></span><span class="n"><span class="pre">item</span></span><span class="sig-paren">)</span><br /></dt>
<dd><p>将 <em>item</em> 插入到 <em>list</em> 的 <em>index</em> 位置上。</p>
<p>如果 <em>index</em> 大于等于 <em>list</em> 的长度，则将 <em>item</em> 添加到 <em>list</em>。</p>
<p><em>index</em> 必须大于等于 <code class="docutils literal notranslate"><span class="pre">0</span></code>。</p>
<p>Python 必须被预初始化以便调用此函数。</p>
</dd></dl>

<p>结构体字段:</p>
<dl class="c member">
<dt class="sig sig-object c" id="c.PyWideStringList.length">
<a class="reference internal" href="intro.xhtml#c.Py_ssize_t" title="Py_ssize_t"><span class="n"><span class="pre">Py_ssize_t</span></span></a><span class="w"> </span><span class="sig-name descname"><span class="n"><span class="pre">length</span></span></span><br /></dt>
<dd><p>List 长度。</p>
</dd></dl>

<dl class="c member">
<dt class="sig sig-object c" id="c.PyWideStringList.items">
<span class="n"><span class="pre">wchar_t</span></span><span class="w"> </span><span class="p"><span class="pre">*</span></span><span class="p"><span class="pre">*</span></span><span class="sig-name descname"><span class="n"><span class="pre">items</span></span></span><br /></dt>
<dd><p>列表项目。</p>
</dd></dl>

</dd></dl>

</section>
<section id="pystatus">
<h2>PyStatus</h2>
<dl class="c type">
<dt class="sig sig-object c" id="c.PyStatus">
<span class="k"><span class="pre">type</span></span><span class="w"> </span><span class="sig-name descname"><span class="n"><span class="pre">PyStatus</span></span></span><br /></dt>
<dd><p>存储初始函数状态：成功、错误或退出的结构体。</p>
<p>对于错误，它可以存储造成错误的 C 函数的名称。</p>
<p>结构体字段:</p>
<dl class="c member">
<dt class="sig sig-object c" id="c.PyStatus.exitcode">
<span class="kt"><span class="pre">int</span></span><span class="w"> </span><span class="sig-name descname"><span class="n"><span class="pre">exitcode</span></span></span><br /></dt>
<dd><p>退出码。 传给 <code class="docutils literal notranslate"><span class="pre">exit()</span></code> 的参数。</p>
</dd></dl>

<dl class="c member">
<dt class="sig sig-object c" id="c.PyStatus.err_msg">
<span class="k"><span class="pre">const</span></span><span class="w"> </span><span class="kt"><span class="pre">char</span></span><span class="w"> </span><span class="p"><span class="pre">*</span></span><span class="sig-name descname"><span class="n"><span class="pre">err_msg</span></span></span><br /></dt>
<dd><p>错误信息</p>
</dd></dl>

<dl class="c member">
<dt class="sig sig-object c" id="c.PyStatus.func">
<span class="k"><span class="pre">const</span></span><span class="w"> </span><span class="kt"><span class="pre">char</span></span><span class="w"> </span><span class="p"><span class="pre">*</span></span><span class="sig-name descname"><span class="n"><span class="pre">func</span></span></span><br /></dt>
<dd><p>造成错误的函数的名称，可以为 <code class="docutils literal notranslate"><span class="pre">NULL</span></code>。</p>
</dd></dl>

<p>创建状态的函数:</p>
<dl class="c function">
<dt class="sig sig-object c" id="c.PyStatus_Ok">
<a class="reference internal" href="#c.PyStatus" title="PyStatus"><span class="n"><span class="pre">PyStatus</span></span></a><span class="w"> </span><span class="sig-name descname"><span class="n"><span class="pre">PyStatus_Ok</span></span></span><span class="sig-paren">(</span><span class="kt"><span class="pre">void</span></span><span class="sig-paren">)</span><br /></dt>
<dd><p>完成。</p>
</dd></dl>

<dl class="c function">
<dt class="sig sig-object c" id="c.PyStatus_Error">
<a class="reference internal" href="#c.PyStatus" title="PyStatus"><span class="n"><span class="pre">PyStatus</span></span></a><span class="w"> </span><span class="sig-name descname"><span class="n"><span class="pre">PyStatus_Error</span></span></span><span class="sig-paren">(</span><span class="k"><span class="pre">const</span></span><span class="w"> </span><span class="kt"><span class="pre">char</span></span><span class="w"> </span><span class="p"><span class="pre">*</span></span><span class="n"><span class="pre">err_msg</span></span><span class="sig-paren">)</span><br /></dt>
<dd><p>带消息的初始化错误。</p>
<p><em>err_msg</em> 不可为 <code class="docutils literal notranslate"><span class="pre">NULL</span></code>。</p>
</dd></dl>

<dl class="c function">
<dt class="sig sig-object c" id="c.PyStatus_NoMemory">
<a class="reference internal" href="#c.PyStatus" title="PyStatus"><span class="n"><span class="pre">PyStatus</span></span></a><span class="w"> </span><span class="sig-name descname"><span class="n"><span class="pre">PyStatus_NoMemory</span></span></span><span class="sig-paren">(</span><span class="kt"><span class="pre">void</span></span><span class="sig-paren">)</span><br /></dt>
<dd><p>内存分配失败（内存不足）。</p>
</dd></dl>

<dl class="c function">
<dt class="sig sig-object c" id="c.PyStatus_Exit">
<a class="reference internal" href="#c.PyStatus" title="PyStatus"><span class="n"><span class="pre">PyStatus</span></span></a><span class="w"> </span><span class="sig-name descname"><span class="n"><span class="pre">PyStatus_Exit</span></span></span><span class="sig-paren">(</span><span class="kt"><span class="pre">int</span></span><span class="w"> </span><span class="n"><span class="pre">exitcode</span></span><span class="sig-paren">)</span><br /></dt>
<dd><p>以指定的退出代码退出 Python。</p>
</dd></dl>

<p>处理状态的函数:</p>
<dl class="c function">
<dt class="sig sig-object c" id="c.PyStatus_Exception">
<span class="kt"><span class="pre">int</span></span><span class="w"> </span><span class="sig-name descname"><span class="n"><span class="pre">PyStatus_Exception</span></span></span><span class="sig-paren">(</span><a class="reference internal" href="#c.PyStatus" title="PyStatus"><span class="n"><span class="pre">PyStatus</span></span></a><span class="w"> </span><span class="n"><span class="pre">status</span></span><span class="sig-paren">)</span><br /></dt>
<dd><p>状态为错误还是退出？如为真值，则异常必须被处理；例如通过调用 <a class="reference internal" href="#c.Py_ExitStatusException" title="Py_ExitStatusException"><code class="xref c c-func docutils literal notranslate"><span class="pre">Py_ExitStatusException()</span></code></a>。</p>
</dd></dl>

<dl class="c function">
<dt class="sig sig-object c" id="c.PyStatus_IsError">
<span class="kt"><span class="pre">int</span></span><span class="w"> </span><span class="sig-name descname"><span class="n"><span class="pre">PyStatus_IsError</span></span></span><span class="sig-paren">(</span><a class="reference internal" href="#c.PyStatus" title="PyStatus"><span class="n"><span class="pre">PyStatus</span></span></a><span class="w"> </span><span class="n"><span class="pre">status</span></span><span class="sig-paren">)</span><br /></dt>
<dd><p>结果错误吗？</p>
</dd></dl>

<dl class="c function">
<dt class="sig sig-object c" id="c.PyStatus_IsExit">
<span class="kt"><span class="pre">int</span></span><span class="w"> </span><span class="sig-name descname"><span class="n"><span class="pre">PyStatus_IsExit</span></span></span><span class="sig-paren">(</span><a class="reference internal" href="#c.PyStatus" title="PyStatus"><span class="n"><span class="pre">PyStatus</span></span></a><span class="w"> </span><span class="n"><span class="pre">status</span></span><span class="sig-paren">)</span><br /></dt>
<dd><p>结果是否退出？</p>
</dd></dl>

<dl class="c function">
<dt class="sig sig-object c" id="c.Py_ExitStatusException">
<span class="kt"><span class="pre">void</span></span><span class="w"> </span><span class="sig-name descname"><span class="n"><span class="pre">Py_ExitStatusException</span></span></span><span class="sig-paren">(</span><a class="reference internal" href="#c.PyStatus" title="PyStatus"><span class="n"><span class="pre">PyStatus</span></span></a><span class="w"> </span><span class="n"><span class="pre">status</span></span><span class="sig-paren">)</span><br /></dt>
<dd><p>如果 <em>status</em> 是一个退出码则调用 <code class="docutils literal notranslate"><span class="pre">exit(exitcode)</span></code>。如果 <em>status</em> 是一个错误码则打印错误消息并设置一个非零退出码再退出。 必须在 <code class="docutils literal notranslate"><span class="pre">PyStatus_Exception(status)</span></code> 为非零值时才能被调用。</p>
</dd></dl>

</dd></dl>

<div class="admonition note">
<p class="admonition-title">备注</p>
<p>在内部，Python 将使用设置 <code class="docutils literal notranslate"><span class="pre">PyStatus.func</span></code> 的宏，而创建状态的函数则会将 <code class="docutils literal notranslate"><span class="pre">func</span></code> 设为 <code class="docutils literal notranslate"><span class="pre">NULL</span></code>。</p>
</div>
<p>示例:</p>
<div class="highlight-c notranslate"><div class="highlight"><pre><span></span><span class="n">PyStatus</span><span class="w"> </span><span class="nf">alloc</span><span class="p">(</span><span class="kt">void</span><span class="w"> </span><span class="o">**</span><span class="n">ptr</span><span class="p">,</span><span class="w"> </span><span class="kt">size_t</span><span class="w"> </span><span class="n">size</span><span class="p">)</span>
<span class="p">{</span>
<span class="w">    </span><span class="o">*</span><span class="n">ptr</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">PyMem_RawMalloc</span><span class="p">(</span><span class="n">size</span><span class="p">);</span>
<span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="o">*</span><span class="n">ptr</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="nb">NULL</span><span class="p">)</span><span class="w"> </span><span class="p">{</span>
<span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="n">PyStatus_NoMemory</span><span class="p">();</span>
<span class="w">    </span><span class="p">}</span>
<span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">PyStatus_Ok</span><span class="p">();</span>
<span class="p">}</span>

<span class="kt">int</span><span class="w"> </span><span class="nf">main</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">argc</span><span class="p">,</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="o">**</span><span class="n">argv</span><span class="p">)</span>
<span class="p">{</span>
<span class="w">    </span><span class="kt">void</span><span class="w"> </span><span class="o">*</span><span class="n">ptr</span><span class="p">;</span>
<span class="w">    </span><span class="n">PyStatus</span><span class="w"> </span><span class="n">status</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">alloc</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ptr</span><span class="p">,</span><span class="w"> </span><span class="mi">16</span><span class="p">);</span>
<span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">PyStatus_Exception</span><span class="p">(</span><span class="n">status</span><span class="p">))</span><span class="w"> </span><span class="p">{</span>
<span class="w">        </span><span class="n">Py_ExitStatusException</span><span class="p">(</span><span class="n">status</span><span class="p">);</span>
<span class="w">    </span><span class="p">}</span>
<span class="w">    </span><span class="n">PyMem_Free</span><span class="p">(</span><span class="n">ptr</span><span class="p">);</span>
<span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</div>
</section>
<section id="pypreconfig">
<h2>PyPreConfig</h2>
<dl class="c type">
<dt class="sig sig-object c" id="c.PyPreConfig">
<span class="k"><span class="pre">type</span></span><span class="w"> </span><span class="sig-name descname"><span class="n"><span class="pre">PyPreConfig</span></span></span><br /></dt>
<dd><p>用于预初始化 Python 的结构体。</p>
<p>用于初始化预先配置的函数:</p>
<dl class="c function">
<dt class="sig sig-object c" id="c.PyPreConfig_InitPythonConfig">
<span class="kt"><span class="pre">void</span></span><span class="w"> </span><span class="sig-name descname"><span class="n"><span class="pre">PyPreConfig_InitPythonConfig</span></span></span><span class="sig-paren">(</span><a class="reference internal" href="#c.PyPreConfig" title="PyPreConfig"><span class="n"><span class="pre">PyPreConfig</span></span></a><span class="w"> </span><span class="p"><span class="pre">*</span></span><span class="n"><span class="pre">preconfig</span></span><span class="sig-paren">)</span><br /></dt>
<dd><p>通过 <a class="reference internal" href="#init-python-config"><span class="std std-ref">Python 配置</span></a> 来初始化预先配置。</p>
</dd></dl>

<dl class="c function">
<dt class="sig sig-object c" id="c.PyPreConfig_InitIsolatedConfig">
<span class="kt"><span class="pre">void</span></span><span class="w"> </span><span class="sig-name descname"><span class="n"><span class="pre">PyPreConfig_InitIsolatedConfig</span></span></span><span class="sig-paren">(</span><a class="reference internal" href="#c.PyPreConfig" title="PyPreConfig"><span class="n"><span class="pre">PyPreConfig</span></span></a><span class="w"> </span><span class="p"><span class="pre">*</span></span><span class="n"><span class="pre">preconfig</span></span><span class="sig-paren">)</span><br /></dt>
<dd><p>通过 <a class="reference internal" href="#init-isolated-conf"><span class="std std-ref">隔离配置</span></a> 来初始化预先配置。</p>
</dd></dl>

<p>结构体字段:</p>
<dl class="c member">
<dt class="sig sig-object c" id="c.PyPreConfig.allocator">
<span class="kt"><span class="pre">int</span></span><span class="w"> </span><span class="sig-name descname"><span class="n"><span class="pre">allocator</span></span></span><br /></dt>
<dd><p>Python 内存分配器名称:</p>
<ul class="simple">
<li><p><code class="docutils literal notranslate"><span class="pre">PYMEM_ALLOCATOR_NOT_SET</span></code> (<code class="docutils literal notranslate"><span class="pre">0</span></code>): 不改变内存分配器 (使用默认)。</p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">PYMEM_ALLOCATOR_DEFAULT</span></code> (<code class="docutils literal notranslate"><span class="pre">1</span></code>): <a class="reference internal" href="memory.xhtml#default-memory-allocators"><span class="std std-ref">默认内存分配器</span></a>。</p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">PYMEM_ALLOCATOR_DEBUG</span></code> (<code class="docutils literal notranslate"><span class="pre">2</span></code>): <a class="reference internal" href="memory.xhtml#default-memory-allocators"><span class="std std-ref">默认内存分配器</span></a> 附带 <a class="reference internal" href="memory.xhtml#pymem-debug-hooks"><span class="std std-ref">调试钩子</span></a>。</p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">PYMEM_ALLOCATOR_MALLOC</span></code> (<code class="docutils literal notranslate"><span class="pre">3</span></code>): 使用 C 库的 <code class="docutils literal notranslate"><span class="pre">malloc()</span></code>。</p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">PYMEM_ALLOCATOR_MALLOC_DEBUG</span></code> (<code class="docutils literal notranslate"><span class="pre">4</span></code>): 强制使用 <code class="docutils literal notranslate"><span class="pre">malloc()</span></code> 附带 <a class="reference internal" href="memory.xhtml#pymem-debug-hooks"><span class="std std-ref">调试钩子</span></a>。</p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">PYMEM_ALLOCATOR_PYMALLOC</span></code> (<code class="docutils literal notranslate"><span class="pre">5</span></code>): <a class="reference internal" href="memory.xhtml#pymalloc"><span class="std std-ref">Python pymalloc 内存分配器</span></a>。</p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">PYMEM_ALLOCATOR_PYMALLOC_DEBUG</span></code> (<code class="docutils literal notranslate"><span class="pre">6</span></code>): <a class="reference internal" href="memory.xhtml#pymalloc"><span class="std std-ref">Python pymalloc 内存分配器</span></a> 附带 <a class="reference internal" href="memory.xhtml#pymem-debug-hooks"><span class="std std-ref">调试钩子</span></a>。</p></li>
</ul>
<p>如果 Python 是 <a class="reference internal" href="../using/configure.xhtml#cmdoption-without-pymalloc"><code class="xref std std-option docutils literal notranslate"><span class="pre">使用</span> <span class="pre">--without-pymalloc</span> <span class="pre">进行配置</span></code></a> 则 <code class="docutils literal notranslate"><span class="pre">PYMEM_ALLOCATOR_PYMALLOC</span></code> 和 <code class="docutils literal notranslate"><span class="pre">PYMEM_ALLOCATOR_PYMALLOC_DEBUG</span></code> 将不被支持。</p>
<p>参见 <a class="reference internal" href="memory.xhtml#memory"><span class="std std-ref">Memory Management</span></a>.</p>
<p>默认值: <code class="docutils literal notranslate"><span class="pre">PYMEM_ALLOCATOR_NOT_SET</span></code>。</p>
</dd></dl>

<dl class="c member">
<dt class="sig sig-object c" id="c.PyPreConfig.configure_locale">
<span class="kt"><span class="pre">int</span></span><span class="w"> </span><span class="sig-name descname"><span class="n"><span class="pre">configure_locale</span></span></span><br /></dt>
<dd><p>将 LC_CTYPE 语言区域设为用户选择的语言区域。</p>
<p>如果等于 <code class="docutils literal notranslate"><span class="pre">0</span></code>，则将 <a class="reference internal" href="#c.PyPreConfig.coerce_c_locale" title="PyPreConfig.coerce_c_locale"><code class="xref c c-member docutils literal notranslate"><span class="pre">coerce_c_locale</span></code></a> 和 <a class="reference internal" href="#c.PyPreConfig.coerce_c_locale_warn" title="PyPreConfig.coerce_c_locale_warn"><code class="xref c c-member docutils literal notranslate"><span class="pre">coerce_c_locale_warn</span></code></a> 的成员设为 <code class="docutils literal notranslate"><span class="pre">0</span></code>。</p>
<p>参见 <a class="reference internal" href="../glossary.xhtml#term-locale-encoding"><span class="xref std std-term">locale encoding</span></a>。</p>
<p>默认值: 在 Python 配置中为 <code class="docutils literal notranslate"><span class="pre">1</span></code>，在隔离配置中为 <code class="docutils literal notranslate"><span class="pre">0</span></code>。</p>
</dd></dl>

<dl class="c member">
<dt class="sig sig-object c" id="c.PyPreConfig.coerce_c_locale">
<span class="kt"><span class="pre">int</span></span><span class="w"> </span><span class="sig-name descname"><span class="n"><span class="pre">coerce_c_locale</span></span></span><br /></dt>
<dd><p>如果等于 <code class="docutils literal notranslate"><span class="pre">2</span></code>，强制转换 C 语言区域。</p>
<p>如果等于 <code class="docutils literal notranslate"><span class="pre">1</span></code>，则读取 LC_CTYPE 语言区域来确定其是否应当被强制转换。</p>
<p>参见 <a class="reference internal" href="../glossary.xhtml#term-locale-encoding"><span class="xref std std-term">locale encoding</span></a>。</p>
<p>默认值: 在 Python 配置中为 <code class="docutils literal notranslate"><span class="pre">-1</span></code>，在隔离配置中为 <code class="docutils literal notranslate"><span class="pre">0</span></code>。</p>
</dd></dl>

<dl class="c member">
<dt class="sig sig-object c" id="c.PyPreConfig.coerce_c_locale_warn">
<span class="kt"><span class="pre">int</span></span><span class="w"> </span><span class="sig-name descname"><span class="n"><span class="pre">coerce_c_locale_warn</span></span></span><br /></dt>
<dd><p>如为非零值，则会在 C 语言区域被强制转换时发出警告。</p>
<p>默认值: 在 Python 配置中为 <code class="docutils literal notranslate"><span class="pre">-1</span></code>，在隔离配置中为 <code class="docutils literal notranslate"><span class="pre">0</span></code>。</p>
</dd></dl>

<dl class="c member">
<dt class="sig sig-object c" id="c.PyPreConfig.dev_mode">
<span class="kt"><span class="pre">int</span></span><span class="w"> </span><span class="sig-name descname"><span class="n"><span class="pre">dev_mode</span></span></span><br /></dt>
<dd><p><a class="reference internal" href="../library/devmode.xhtml#devmode"><span class="std std-ref">Python 开发模式</span></a>: 参见 <a class="reference internal" href="#c.PyConfig.dev_mode" title="PyConfig.dev_mode"><code class="xref c c-member docutils literal notranslate"><span class="pre">PyConfig.dev_mode</span></code></a>。</p>
<p>默认值: 在 Python 模式中为 <code class="docutils literal notranslate"><span class="pre">-1</span></code>，在隔离模式中为 <code class="docutils literal notranslate"><span class="pre">0</span></code>。</p>
</dd></dl>

<dl class="c member">
<dt class="sig sig-object c" id="c.PyPreConfig.isolated">
<span class="kt"><span class="pre">int</span></span><span class="w"> </span><span class="sig-name descname"><span class="n"><span class="pre">isolated</span></span></span><br /></dt>
<dd><p>隔离模式：参见 <a class="reference internal" href="#c.PyConfig.isolated" title="PyConfig.isolated"><code class="xref c c-member docutils literal notranslate"><span class="pre">PyConfig.isolated</span></code></a>。</p>
<p>默认值: 在 Python 模式中为 <code class="docutils literal notranslate"><span class="pre">0</span></code>，在隔离模式中为 <code class="docutils literal notranslate"><span class="pre">1</span></code>。</p>
</dd></dl>

<dl class="c member">
<dt class="sig sig-object c" id="c.PyPreConfig.legacy_windows_fs_encoding">
<span class="kt"><span class="pre">int</span></span><span class="w"> </span><span class="sig-name descname"><span class="n"><span class="pre">legacy_windows_fs_encoding</span></span></span><br /></dt>
<dd><p>如为非零值:</p>
<ul class="simple">
<li><p>设置 <a class="reference internal" href="#c.PyPreConfig.utf8_mode" title="PyPreConfig.utf8_mode"><code class="xref c c-member docutils literal notranslate"><span class="pre">PyPreConfig.utf8_mode</span></code></a> 为 <code class="docutils literal notranslate"><span class="pre">0</span></code>,</p></li>
<li><p>设置 <a class="reference internal" href="#c.PyConfig.filesystem_encoding" title="PyConfig.filesystem_encoding"><code class="xref c c-member docutils literal notranslate"><span class="pre">PyConfig.filesystem_encoding</span></code></a> 为 <code class="docutils literal notranslate"><span class="pre">&quot;mbcs&quot;</span></code>,</p></li>
<li><p>设置 <a class="reference internal" href="#c.PyConfig.filesystem_errors" title="PyConfig.filesystem_errors"><code class="xref c c-member docutils literal notranslate"><span class="pre">PyConfig.filesystem_errors</span></code></a> 为 <code class="docutils literal notranslate"><span class="pre">&quot;replace&quot;</span></code>.</p></li>
</ul>
<p>初始化来自 <span class="target" id="index-77"></span><a class="reference internal" href="../using/cmdline.xhtml#envvar-PYTHONLEGACYWINDOWSFSENCODING"><code class="xref std std-envvar docutils literal notranslate"><span class="pre">PYTHONLEGACYWINDOWSFSENCODING</span></code></a> 的环境变量值。</p>
<p>仅在 Windows 上可用。 <code class="docutils literal notranslate"><span class="pre">#ifdef</span> <span class="pre">MS_WINDOWS</span></code> 宏可被用于 Windows 专属的代码。</p>
<p>默认值: <code class="docutils literal notranslate"><span class="pre">0</span></code>.</p>
</dd></dl>

<dl class="c member">
<dt class="sig sig-object c" id="c.PyPreConfig.parse_argv">
<span class="kt"><span class="pre">int</span></span><span class="w"> </span><span class="sig-name descname"><span class="n"><span class="pre">parse_argv</span></span></span><br /></dt>
<dd><p>如为非零值，<a class="reference internal" href="#c.Py_PreInitializeFromArgs" title="Py_PreInitializeFromArgs"><code class="xref c c-func docutils literal notranslate"><span class="pre">Py_PreInitializeFromArgs()</span></code></a> 和 <a class="reference internal" href="#c.Py_PreInitializeFromBytesArgs" title="Py_PreInitializeFromBytesArgs"><code class="xref c c-func docutils literal notranslate"><span class="pre">Py_PreInitializeFromBytesArgs()</span></code></a> 将以与常规 Python 解析命令行参数的相同方式解析其 <code class="docutils literal notranslate"><span class="pre">argv</span></code> 参数：参见 <a class="reference internal" href="../using/cmdline.xhtml#using-on-cmdline"><span class="std std-ref">命令行参数</span></a>。</p>
<p>默认值: 在 Python 配置中为 <code class="docutils literal notranslate"><span class="pre">1</span></code>，在隔离配置中为 <code class="docutils literal notranslate"><span class="pre">0</span></code>。</p>
</dd></dl>

<dl class="c member">
<dt class="sig sig-object c" id="c.PyPreConfig.use_environment">
<span class="kt"><span class="pre">int</span></span><span class="w"> </span><span class="sig-name descname"><span class="n"><span class="pre">use_environment</span></span></span><br /></dt>
<dd><p>使用 <a class="reference internal" href="../using/cmdline.xhtml#using-on-envvars"><span class="std std-ref">环境变量</span></a>? 参见 <a class="reference internal" href="#c.PyConfig.use_environment" title="PyConfig.use_environment"><code class="xref c c-member docutils literal notranslate"><span class="pre">PyConfig.use_environment</span></code></a>。</p>
<p>默认值: 在 Python 配置中为 <code class="docutils literal notranslate"><span class="pre">1</span></code> 而在隔离配置中为 <code class="docutils literal notranslate"><span class="pre">0</span></code>。</p>
</dd></dl>

<dl class="c member">
<dt class="sig sig-object c" id="c.PyPreConfig.utf8_mode">
<span class="kt"><span class="pre">int</span></span><span class="w"> </span><span class="sig-name descname"><span class="n"><span class="pre">utf8_mode</span></span></span><br /></dt>
<dd><p>如为非零值，则启用 <a class="reference internal" href="../library/os.xhtml#utf8-mode"><span class="std std-ref">Python UTF-8 模式</span></a>。</p>
<p>通过 <a class="reference internal" href="../using/cmdline.xhtml#cmdoption-X"><code class="xref std std-option docutils literal notranslate"><span class="pre">-X</span> <span class="pre">utf8</span></code></a> 命令行选项和 <span class="target" id="index-78"></span><a class="reference internal" href="../using/cmdline.xhtml#envvar-PYTHONUTF8"><code class="xref std std-envvar docutils literal notranslate"><span class="pre">PYTHONUTF8</span></code></a> 环境变量设为 <code class="docutils literal notranslate"><span class="pre">0</span></code> 或 <code class="docutils literal notranslate"><span class="pre">1</span></code>。</p>
<p>如果 <code class="docutils literal notranslate"><span class="pre">LC_CTYPE</span></code> 语言区域为 <code class="docutils literal notranslate"><span class="pre">C</span></code> 或 <code class="docutils literal notranslate"><span class="pre">POSIX</span></code> 也会被设为 <code class="docutils literal notranslate"><span class="pre">1</span></code>。</p>
<p>默认值: 在 Python 配置中为 <code class="docutils literal notranslate"><span class="pre">-1</span></code> 而在隔离配置中为 <code class="docutils literal notranslate"><span class="pre">0</span></code>。</p>
</dd></dl>

</dd></dl>

</section>
<section id="preinitialize-python-with-pypreconfig">
<span id="c-preinit"></span><h2>使用 PyPreConfig 预初始化 Python</h2>
<p>Python 的预初始化:</p>
<ul class="simple">
<li><p>设置 Python 内存分配器 (<a class="reference internal" href="#c.PyPreConfig.allocator" title="PyPreConfig.allocator"><code class="xref c c-member docutils literal notranslate"><span class="pre">PyPreConfig.allocator</span></code></a>)</p></li>
<li><p>配置 LC_CTYPE 语言区域 (<a class="reference internal" href="../glossary.xhtml#term-locale-encoding"><span class="xref std std-term">locale encoding</span></a>)</p></li>
<li><p>设置 <a class="reference internal" href="../library/os.xhtml#utf8-mode"><span class="std std-ref">Python UTF-8 模式</span></a> (<a class="reference internal" href="#c.PyPreConfig.utf8_mode" title="PyPreConfig.utf8_mode"><code class="xref c c-member docutils literal notranslate"><span class="pre">PyPreConfig.utf8_mode</span></code></a>)</p></li>
</ul>
<p>当前的预配置 (<code class="docutils literal notranslate"><span class="pre">PyPreConfig</span></code> 类型) 保存在 <code class="docutils literal notranslate"><span class="pre">_PyRuntime.preconfig</span></code> 中。</p>
<p>用于预初始化 Python 的函数：</p>
<dl class="c function">
<dt class="sig sig-object c" id="c.Py_PreInitialize">
<a class="reference internal" href="#c.PyStatus" title="PyStatus"><span class="n"><span class="pre">PyStatus</span></span></a><span class="w"> </span><span class="sig-name descname"><span class="n"><span class="pre">Py_PreInitialize</span></span></span><span class="sig-paren">(</span><span class="k"><span class="pre">const</span></span><span class="w"> </span><a class="reference internal" href="#c.PyPreConfig" title="PyPreConfig"><span class="n"><span class="pre">PyPreConfig</span></span></a><span class="w"> </span><span class="p"><span class="pre">*</span></span><span class="n"><span class="pre">preconfig</span></span><span class="sig-paren">)</span><br /></dt>
<dd><p>根据 <em>preconfig</em> 预配置来预初始化 Python。</p>
<p><em>preconfig</em> 不可为 <code class="docutils literal notranslate"><span class="pre">NULL</span></code>。</p>
</dd></dl>

<dl class="c function">
<dt class="sig sig-object c" id="c.Py_PreInitializeFromBytesArgs">
<a class="reference internal" href="#c.PyStatus" title="PyStatus"><span class="n"><span class="pre">PyStatus</span></span></a><span class="w"> </span><span class="sig-name descname"><span class="n"><span class="pre">Py_PreInitializeFromBytesArgs</span></span></span><span class="sig-paren">(</span><span class="k"><span class="pre">const</span></span><span class="w"> </span><a class="reference internal" href="#c.PyPreConfig" title="PyPreConfig"><span class="n"><span class="pre">PyPreConfig</span></span></a><span class="w"> </span><span class="p"><span class="pre">*</span></span><span class="n"><span class="pre">preconfig</span></span>, <span class="kt"><span class="pre">int</span></span><span class="w"> </span><span class="n"><span class="pre">argc</span></span>, <span class="kt"><span class="pre">char</span></span><span class="w"> </span><span class="p"><span class="pre">*</span></span><span class="k"><span class="pre">const</span></span><span class="w"> </span><span class="p"><span class="pre">*</span></span><span class="n"><span class="pre">argv</span></span><span class="sig-paren">)</span><br /></dt>
<dd><p>根据 <em>preconfig</em> 预配置来预初始化 Python。</p>
<p>如果 <em>preconfig</em> 的 <a class="reference internal" href="#c.PyPreConfig.parse_argv" title="PyPreConfig.parse_argv"><code class="xref c c-member docutils literal notranslate"><span class="pre">parse_argv</span></code></a> 为非零值则解析 <em>argv</em> 命令行参数（字节串）。</p>
<p><em>preconfig</em> 不可为 <code class="docutils literal notranslate"><span class="pre">NULL</span></code>。</p>
</dd></dl>

<dl class="c function">
<dt class="sig sig-object c" id="c.Py_PreInitializeFromArgs">
<a class="reference internal" href="#c.PyStatus" title="PyStatus"><span class="n"><span class="pre">PyStatus</span></span></a><span class="w"> </span><span class="sig-name descname"><span class="n"><span class="pre">Py_PreInitializeFromArgs</span></span></span><span class="sig-paren">(</span><span class="k"><span class="pre">const</span></span><span class="w"> </span><a class="reference internal" href="#c.PyPreConfig" title="PyPreConfig"><span class="n"><span class="pre">PyPreConfig</span></span></a><span class="w"> </span><span class="p"><span class="pre">*</span></span><span class="n"><span class="pre">preconfig</span></span>, <span class="kt"><span class="pre">int</span></span><span class="w"> </span><span class="n"><span class="pre">argc</span></span>, <span class="n"><span class="pre">wchar_t</span></span><span class="w"> </span><span class="p"><span class="pre">*</span></span><span class="k"><span class="pre">const</span></span><span class="w"> </span><span class="p"><span class="pre">*</span></span><span class="n"><span class="pre">argv</span></span><span class="sig-paren">)</span><br /></dt>
<dd><p>根据 <em>preconfig</em> 预配置来预初始化 Python。</p>
<p>如果 <em>preconfig</em> 的 <a class="reference internal" href="#c.PyPreConfig.parse_argv" title="PyPreConfig.parse_argv"><code class="xref c c-member docutils literal notranslate"><span class="pre">parse_argv</span></code></a> 为非零值则解析 <em>argv</em> 命令行参数（宽字符串）。</p>
<p><em>preconfig</em> 不可为 <code class="docutils literal notranslate"><span class="pre">NULL</span></code>。</p>
</dd></dl>

<p>调用方要负责使用 <a class="reference internal" href="#c.PyStatus_Exception" title="PyStatus_Exception"><code class="xref c c-func docutils literal notranslate"><span class="pre">PyStatus_Exception()</span></code></a> 和 <a class="reference internal" href="#c.Py_ExitStatusException" title="Py_ExitStatusException"><code class="xref c c-func docutils literal notranslate"><span class="pre">Py_ExitStatusException()</span></code></a> 来处理异常（错误或退出）。</p>
<p>对于 <a class="reference internal" href="#init-python-config"><span class="std std-ref">Python 配置</span></a> (<a class="reference internal" href="#c.PyPreConfig_InitPythonConfig" title="PyPreConfig_InitPythonConfig"><code class="xref c c-func docutils literal notranslate"><span class="pre">PyPreConfig_InitPythonConfig()</span></code></a>)，如果 Python 是用命令行参数初始化的，那么在预初始化 Python 时也必须传递命令行参数，因为它们会对编码格式等预配置产生影响。 例如，<a class="reference internal" href="../using/cmdline.xhtml#cmdoption-X"><code class="xref std std-option docutils literal notranslate"><span class="pre">-X</span> <span class="pre">utf8</span></code></a> 命令行选项将启用 <a class="reference internal" href="../library/os.xhtml#utf8-mode"><span class="std std-ref">Python UTF-8 模式</span></a>。</p>
<p><code class="docutils literal notranslate"><span class="pre">PyMem_SetAllocator()</span></code> 可在 <a class="reference internal" href="#c.Py_PreInitialize" title="Py_PreInitialize"><code class="xref c c-func docutils literal notranslate"><span class="pre">Py_PreInitialize()</span></code></a> 之后、<a class="reference internal" href="#c.Py_InitializeFromConfig" title="Py_InitializeFromConfig"><code class="xref c c-func docutils literal notranslate"><span class="pre">Py_InitializeFromConfig()</span></code></a> 之前被调用以安装自定义的内存分配器。 如果 <a class="reference internal" href="#c.PyPreConfig.allocator" title="PyPreConfig.allocator"><code class="xref c c-member docutils literal notranslate"><span class="pre">PyPreConfig.allocator</span></code></a> 被设为 <code class="docutils literal notranslate"><span class="pre">PYMEM_ALLOCATOR_NOT_SET</span></code> 则可在 <a class="reference internal" href="#c.Py_PreInitialize" title="Py_PreInitialize"><code class="xref c c-func docutils literal notranslate"><span class="pre">Py_PreInitialize()</span></code></a> 之前被调用。</p>
<p>像 <a class="reference internal" href="memory.xhtml#c.PyMem_RawMalloc" title="PyMem_RawMalloc"><code class="xref c c-func docutils literal notranslate"><span class="pre">PyMem_RawMalloc()</span></code></a> 这样的 Python 内存分配函数不能在 Python 预初始化之前使用，而直接调用 <code class="docutils literal notranslate"><span class="pre">malloc()</span></code> 和 <code class="docutils literal notranslate"><span class="pre">free()</span></code> 则始终会是安全的。 <a class="reference internal" href="sys.xhtml#c.Py_DecodeLocale" title="Py_DecodeLocale"><code class="xref c c-func docutils literal notranslate"><span class="pre">Py_DecodeLocale()</span></code></a> 不能在 Python 预初始化之前被调用。</p>
<p>使用预初始化来启用 <a class="reference internal" href="../library/os.xhtml#utf8-mode"><span class="std std-ref">Python UTF-8 模式</span></a> 的例子:</p>
<div class="highlight-c notranslate"><div class="highlight"><pre><span></span><span class="n">PyStatus</span><span class="w"> </span><span class="n">status</span><span class="p">;</span>
<span class="n">PyPreConfig</span><span class="w"> </span><span class="n">preconfig</span><span class="p">;</span>
<span class="n">PyPreConfig_InitPythonConfig</span><span class="p">(</span><span class="o">&amp;</span><span class="n">preconfig</span><span class="p">);</span>

<span class="n">preconfig</span><span class="p">.</span><span class="n">utf8_mode</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span>

<span class="n">status</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Py_PreInitialize</span><span class="p">(</span><span class="o">&amp;</span><span class="n">preconfig</span><span class="p">);</span>
<span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">PyStatus_Exception</span><span class="p">(</span><span class="n">status</span><span class="p">))</span><span class="w"> </span><span class="p">{</span>
<span class="w">    </span><span class="n">Py_ExitStatusException</span><span class="p">(</span><span class="n">status</span><span class="p">);</span>
<span class="p">}</span>

<span class="cm">/* at this point, Python speaks UTF-8 */</span>

<span class="n">Py_Initialize</span><span class="p">();</span>
<span class="cm">/* ... use Python API here ... */</span>
<span class="n">Py_Finalize</span><span class="p">();</span>
</pre></div>
</div>
</section>
<section id="pyconfig">
<h2>PyConfig</h2>
<dl class="c type">
<dt class="sig sig-object c" id="c.PyConfig">
<span class="k"><span class="pre">type</span></span><span class="w"> </span><span class="sig-name descname"><span class="n"><span class="pre">PyConfig</span></span></span><br /></dt>
<dd><p>包含了大部分用于配置 Python 的形参的结构体。</p>
<p>在完成后，必须使用 <a class="reference internal" href="#c.PyConfig_Clear" title="PyConfig_Clear"><code class="xref c c-func docutils literal notranslate"><span class="pre">PyConfig_Clear()</span></code></a> 函数来释放配置内存。</p>
<p>结构体方法:</p>
<dl class="c function">
<dt class="sig sig-object c" id="c.PyConfig_InitPythonConfig">
<span class="kt"><span class="pre">void</span></span><span class="w"> </span><span class="sig-name descname"><span class="n"><span class="pre">PyConfig_InitPythonConfig</span></span></span><span class="sig-paren">(</span><a class="reference internal" href="#c.PyConfig" title="PyConfig"><span class="n"><span class="pre">PyConfig</span></span></a><span class="w"> </span><span class="p"><span class="pre">*</span></span><span class="n"><span class="pre">config</span></span><span class="sig-paren">)</span><br /></dt>
<dd><p>通过 <a class="reference internal" href="#init-python-config"><span class="std std-ref">Python 配置</span></a> 来初始化配置。</p>
</dd></dl>

<dl class="c function">
<dt class="sig sig-object c" id="c.PyConfig_InitIsolatedConfig">
<span class="kt"><span class="pre">void</span></span><span class="w"> </span><span class="sig-name descname"><span class="n"><span class="pre">PyConfig_InitIsolatedConfig</span></span></span><span class="sig-paren">(</span><a class="reference internal" href="#c.PyConfig" title="PyConfig"><span class="n"><span class="pre">PyConfig</span></span></a><span class="w"> </span><span class="p"><span class="pre">*</span></span><span class="n"><span class="pre">config</span></span><span class="sig-paren">)</span><br /></dt>
<dd><p>通过 <a class="reference internal" href="#init-isolated-conf"><span class="std std-ref">隔离配置</span></a> 来初始化配置。</p>
</dd></dl>

<dl class="c function">
<dt class="sig sig-object c" id="c.PyConfig_SetString">
<a class="reference internal" href="#c.PyStatus" title="PyStatus"><span class="n"><span class="pre">PyStatus</span></span></a><span class="w"> </span><span class="sig-name descname"><span class="n"><span class="pre">PyConfig_SetString</span></span></span><span class="sig-paren">(</span><a class="reference internal" href="#c.PyConfig" title="PyConfig"><span class="n"><span class="pre">PyConfig</span></span></a><span class="w"> </span><span class="p"><span class="pre">*</span></span><span class="n"><span class="pre">config</span></span>, <span class="n"><span class="pre">wchar_t</span></span><span class="w"> </span><span class="p"><span class="pre">*</span></span><span class="k"><span class="pre">const</span></span><span class="w"> </span><span class="p"><span class="pre">*</span></span><span class="n"><span class="pre">config_str</span></span>, <span class="k"><span class="pre">const</span></span><span class="w"> </span><span class="n"><span class="pre">wchar_t</span></span><span class="w"> </span><span class="p"><span class="pre">*</span></span><span class="n"><span class="pre">str</span></span><span class="sig-paren">)</span><br /></dt>
<dd><p>将宽字符串 <em>str</em> 拷贝至 <code class="docutils literal notranslate"><span class="pre">*config_str</span></code>。</p>
<p>在必要时 <a class="reference internal" href="#c-preinit"><span class="std std-ref">预初始化 Python</span></a>。</p>
</dd></dl>

<dl class="c function">
<dt class="sig sig-object c" id="c.PyConfig_SetBytesString">
<a class="reference internal" href="#c.PyStatus" title="PyStatus"><span class="n"><span class="pre">PyStatus</span></span></a><span class="w"> </span><span class="sig-name descname"><span class="n"><span class="pre">PyConfig_SetBytesString</span></span></span><span class="sig-paren">(</span><a class="reference internal" href="#c.PyConfig" title="PyConfig"><span class="n"><span class="pre">PyConfig</span></span></a><span class="w"> </span><span class="p"><span class="pre">*</span></span><span class="n"><span class="pre">config</span></span>, <span class="n"><span class="pre">wchar_t</span></span><span class="w"> </span><span class="p"><span class="pre">*</span></span><span class="k"><span class="pre">const</span></span><span class="w"> </span><span class="p"><span class="pre">*</span></span><span class="n"><span class="pre">config_str</span></span>, <span class="k"><span class="pre">const</span></span><span class="w"> </span><span class="kt"><span class="pre">char</span></span><span class="w"> </span><span class="p"><span class="pre">*</span></span><span class="n"><span class="pre">str</span></span><span class="sig-paren">)</span><br /></dt>
<dd><p>使用 <a class="reference internal" href="sys.xhtml#c.Py_DecodeLocale" title="Py_DecodeLocale"><code class="xref c c-func docutils literal notranslate"><span class="pre">Py_DecodeLocale()</span></code></a> 对 <em>str</em> 进行解码并将结果设置到 <code class="docutils literal notranslate"><span class="pre">*config_str</span></code>。</p>
<p>在必要时 <a class="reference internal" href="#c-preinit"><span class="std std-ref">预初始化 Python</span></a>。</p>
</dd></dl>

<dl class="c function">
<dt class="sig sig-object c" id="c.PyConfig_SetArgv">
<a class="reference internal" href="#c.PyStatus" title="PyStatus"><span class="n"><span class="pre">PyStatus</span></span></a><span class="w"> </span><span class="sig-name descname"><span class="n"><span class="pre">PyConfig_SetArgv</span></span></span><span class="sig-paren">(</span><a class="reference internal" href="#c.PyConfig" title="PyConfig"><span class="n"><span class="pre">PyConfig</span></span></a><span class="w"> </span><span class="p"><span class="pre">*</span></span><span class="n"><span class="pre">config</span></span>, <span class="kt"><span class="pre">int</span></span><span class="w"> </span><span class="n"><span class="pre">argc</span></span>, <span class="n"><span class="pre">wchar_t</span></span><span class="w"> </span><span class="p"><span class="pre">*</span></span><span class="k"><span class="pre">const</span></span><span class="w"> </span><span class="p"><span class="pre">*</span></span><span class="n"><span class="pre">argv</span></span><span class="sig-paren">)</span><br /></dt>
<dd><p>根据宽字符串列表 <em>argv</em> 设置命令行参数 (<em>config</em> 的 <a class="reference internal" href="#c.PyConfig.argv" title="PyConfig.argv"><code class="xref c c-member docutils literal notranslate"><span class="pre">argv</span></code></a> 成员)。</p>
<p>在必要时 <a class="reference internal" href="#c-preinit"><span class="std std-ref">预初始化 Python</span></a>。</p>
</dd></dl>

<dl class="c function">
<dt class="sig sig-object c" id="c.PyConfig_SetBytesArgv">
<a class="reference internal" href="#c.PyStatus" title="PyStatus"><span class="n"><span class="pre">PyStatus</span></span></a><span class="w"> </span><span class="sig-name descname"><span class="n"><span class="pre">PyConfig_SetBytesArgv</span></span></span><span class="sig-paren">(</span><a class="reference internal" href="#c.PyConfig" title="PyConfig"><span class="n"><span class="pre">PyConfig</span></span></a><span class="w"> </span><span class="p"><span class="pre">*</span></span><span class="n"><span class="pre">config</span></span>, <span class="kt"><span class="pre">int</span></span><span class="w"> </span><span class="n"><span class="pre">argc</span></span>, <span class="kt"><span class="pre">char</span></span><span class="w"> </span><span class="p"><span class="pre">*</span></span><span class="k"><span class="pre">const</span></span><span class="w"> </span><span class="p"><span class="pre">*</span></span><span class="n"><span class="pre">argv</span></span><span class="sig-paren">)</span><br /></dt>
<dd><p>根据字节串列表 <em>argv</em> 设置命令行参数 (<em>config</em> 的 <a class="reference internal" href="#c.PyConfig.argv" title="PyConfig.argv"><code class="xref c c-member docutils literal notranslate"><span class="pre">argv</span></code></a> 成员)。 使用 <a class="reference internal" href="sys.xhtml#c.Py_DecodeLocale" title="Py_DecodeLocale"><code class="xref c c-func docutils literal notranslate"><span class="pre">Py_DecodeLocale()</span></code></a> 对字节串进行解码。</p>
<p>在必要时 <a class="reference internal" href="#c-preinit"><span class="std std-ref">预初始化 Python</span></a>。</p>
</dd></dl>

<dl class="c function">
<dt class="sig sig-object c" id="c.PyConfig_SetWideStringList">
<a class="reference internal" href="#c.PyStatus" title="PyStatus"><span class="n"><span class="pre">PyStatus</span></span></a><span class="w"> </span><span class="sig-name descname"><span class="n"><span class="pre">PyConfig_SetWideStringList</span></span></span><span class="sig-paren">(</span><a class="reference internal" href="#c.PyConfig" title="PyConfig"><span class="n"><span class="pre">PyConfig</span></span></a><span class="w"> </span><span class="p"><span class="pre">*</span></span><span class="n"><span class="pre">config</span></span>, <a class="reference internal" href="#c.PyWideStringList" title="PyWideStringList"><span class="n"><span class="pre">PyWideStringList</span></span></a><span class="w"> </span><span class="p"><span class="pre">*</span></span><span class="n"><span class="pre">list</span></span>, <a class="reference internal" href="intro.xhtml#c.Py_ssize_t" title="Py_ssize_t"><span class="n"><span class="pre">Py_ssize_t</span></span></a><span class="w"> </span><span class="n"><span class="pre">length</span></span>, <span class="n"><span class="pre">wchar_t</span></span><span class="w"> </span><span class="p"><span class="pre">*</span></span><span class="p"><span class="pre">*</span></span><span class="n"><span class="pre">items</span></span><span class="sig-paren">)</span><br /></dt>
<dd><p>将宽字符串列表 <em>list</em> 设置为 <em>length</em> 和 <em>items</em>。</p>
<p>在必要时 <a class="reference internal" href="#c-preinit"><span class="std std-ref">预初始化 Python</span></a>。</p>
</dd></dl>

<dl class="c function">
<dt class="sig sig-object c" id="c.PyConfig_Read">
<a class="reference internal" href="#c.PyStatus" title="PyStatus"><span class="n"><span class="pre">PyStatus</span></span></a><span class="w"> </span><span class="sig-name descname"><span class="n"><span class="pre">PyConfig_Read</span></span></span><span class="sig-paren">(</span><a class="reference internal" href="#c.PyConfig" title="PyConfig"><span class="n"><span class="pre">PyConfig</span></span></a><span class="w"> </span><span class="p"><span class="pre">*</span></span><span class="n"><span class="pre">config</span></span><span class="sig-paren">)</span><br /></dt>
<dd><p>读取所有 Python 配置。</p>
<p>已经初始化的字段会保持不变。</p>
<p>调用此函数时不再计算或修改用于 <a class="reference internal" href="#init-path-config"><span class="std std-ref">路径配置</span></a> 的字段，如 Python 3.11 那样。</p>
<p><a class="reference internal" href="#c.PyConfig_Read" title="PyConfig_Read"><code class="xref c c-func docutils literal notranslate"><span class="pre">PyConfig_Read()</span></code></a> 函数只解析 <a class="reference internal" href="#c.PyConfig.argv" title="PyConfig.argv"><code class="xref c c-member docutils literal notranslate"><span class="pre">PyConfig.argv</span></code></a> 参数一次：在参数解析完成后，<a class="reference internal" href="#c.PyConfig.parse_argv" title="PyConfig.parse_argv"><code class="xref c c-member docutils literal notranslate"><span class="pre">PyConfig.parse_argv</span></code></a> 将被设为 <code class="docutils literal notranslate"><span class="pre">2</span></code>。 由于 Python 参数是从 <a class="reference internal" href="#c.PyConfig.argv" title="PyConfig.argv"><code class="xref c c-member docutils literal notranslate"><span class="pre">PyConfig.argv</span></code></a> 中剥离的，因此解析参数两次会将应用程序选项解析为 Python 选项。</p>
<p>在必要时 <a class="reference internal" href="#c-preinit"><span class="std std-ref">预初始化 Python</span></a>。</p>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.10 版本发生变更: </span><a class="reference internal" href="#c.PyConfig.argv" title="PyConfig.argv"><code class="xref c c-member docutils literal notranslate"><span class="pre">PyConfig.argv</span></code></a> 参数现在只会被解析一次，在参数解析完成后，<a class="reference internal" href="#c.PyConfig.parse_argv" title="PyConfig.parse_argv"><code class="xref c c-member docutils literal notranslate"><span class="pre">PyConfig.parse_argv</span></code></a> 将被设为 <code class="docutils literal notranslate"><span class="pre">2</span></code>，只有当 <a class="reference internal" href="#c.PyConfig.parse_argv" title="PyConfig.parse_argv"><code class="xref c c-member docutils literal notranslate"><span class="pre">PyConfig.parse_argv</span></code></a> 等于 <code class="docutils literal notranslate"><span class="pre">1</span></code> 时才会解析参数。</p>
</div>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.11 版本发生变更: </span><a class="reference internal" href="#c.PyConfig_Read" title="PyConfig_Read"><code class="xref c c-func docutils literal notranslate"><span class="pre">PyConfig_Read()</span></code></a> 不会再计算所有路径，因此在 <a class="reference internal" href="#init-path-config"><span class="std std-ref">Python 路径配置</span></a> 下列出的字段可能不会再更新直到 <a class="reference internal" href="#c.Py_InitializeFromConfig" title="Py_InitializeFromConfig"><code class="xref c c-func docutils literal notranslate"><span class="pre">Py_InitializeFromConfig()</span></code></a> 被调用。</p>
</div>
</dd></dl>

<dl class="c function">
<dt class="sig sig-object c" id="c.PyConfig_Clear">
<span class="kt"><span class="pre">void</span></span><span class="w"> </span><span class="sig-name descname"><span class="n"><span class="pre">PyConfig_Clear</span></span></span><span class="sig-paren">(</span><a class="reference internal" href="#c.PyConfig" title="PyConfig"><span class="n"><span class="pre">PyConfig</span></span></a><span class="w"> </span><span class="p"><span class="pre">*</span></span><span class="n"><span class="pre">config</span></span><span class="sig-paren">)</span><br /></dt>
<dd><p>释放配置内存</p>
</dd></dl>

<p>如有必要大多数 <code class="docutils literal notranslate"><span class="pre">PyConfig</span></code> 方法将会 <a class="reference internal" href="#c-preinit"><span class="std std-ref">预初始化 Python</span></a>。 在这种情况下，Python 预初始化配置 (<a class="reference internal" href="#c.PyPreConfig" title="PyPreConfig"><code class="xref c c-type docutils literal notranslate"><span class="pre">PyPreConfig</span></code></a>) 将以 <a class="reference internal" href="#c.PyConfig" title="PyConfig"><code class="xref c c-type docutils literal notranslate"><span class="pre">PyConfig</span></code></a> 为基础。 如果要调整与 <a class="reference internal" href="#c.PyPreConfig" title="PyPreConfig"><code class="xref c c-type docutils literal notranslate"><span class="pre">PyPreConfig</span></code></a> 相同的配置字段，它们必须在调用 <a class="reference internal" href="#c.PyConfig" title="PyConfig"><code class="xref c c-type docutils literal notranslate"><span class="pre">PyConfig</span></code></a> 方法之前被设置：</p>
<ul class="simple">
<li><p><a class="reference internal" href="#c.PyConfig.dev_mode" title="PyConfig.dev_mode"><code class="xref c c-member docutils literal notranslate"><span class="pre">PyConfig.dev_mode</span></code></a></p></li>
<li><p><a class="reference internal" href="#c.PyConfig.isolated" title="PyConfig.isolated"><code class="xref c c-member docutils literal notranslate"><span class="pre">PyConfig.isolated</span></code></a></p></li>
<li><p><a class="reference internal" href="#c.PyConfig.parse_argv" title="PyConfig.parse_argv"><code class="xref c c-member docutils literal notranslate"><span class="pre">PyConfig.parse_argv</span></code></a></p></li>
<li><p><a class="reference internal" href="#c.PyConfig.use_environment" title="PyConfig.use_environment"><code class="xref c c-member docutils literal notranslate"><span class="pre">PyConfig.use_environment</span></code></a></p></li>
</ul>
<p>此外，如果使用了 <a class="reference internal" href="#c.PyConfig_SetArgv" title="PyConfig_SetArgv"><code class="xref c c-func docutils literal notranslate"><span class="pre">PyConfig_SetArgv()</span></code></a> 或 <a class="reference internal" href="#c.PyConfig_SetBytesArgv" title="PyConfig_SetBytesArgv"><code class="xref c c-func docutils literal notranslate"><span class="pre">PyConfig_SetBytesArgv()</span></code></a>，则必须在调用其他方法之前调用该方法，因为预初始化配置取决于命令行参数（如果 <a class="reference internal" href="#c.PyConfig.parse_argv" title="PyConfig.parse_argv"><code class="xref c c-member docutils literal notranslate"><span class="pre">parse_argv</span></code></a> 为非零值）。</p>
<p>这些方法的调用者要负责使用 <code class="docutils literal notranslate"><span class="pre">PyStatus_Exception()</span></code> 和 <code class="docutils literal notranslate"><span class="pre">Py_ExitStatusException()</span></code> 来处理异常（错误或退出）。</p>
<p>结构体字段:</p>
<dl class="c member">
<dt class="sig sig-object c" id="c.PyConfig.argv">
<a class="reference internal" href="#c.PyWideStringList" title="PyWideStringList"><span class="n"><span class="pre">PyWideStringList</span></span></a><span class="w"> </span><span class="sig-name descname"><span class="n"><span class="pre">argv</span></span></span><br /></dt>
<dd><p>Command line arguments: <a class="reference internal" href="../library/sys.xhtml#sys.argv" title="sys.argv"><code class="xref py py-data docutils literal notranslate"><span class="pre">sys.argv</span></code></a>.</p>
<p>将 <a class="reference internal" href="#c.PyConfig.parse_argv" title="PyConfig.parse_argv"><code class="xref c c-member docutils literal notranslate"><span class="pre">parse_argv</span></code></a> 设为 <code class="docutils literal notranslate"><span class="pre">1</span></code> 将以与普通 Python 解析 Python 命令行参数相同的方式解析 <a class="reference internal" href="#c.PyConfig.argv" title="PyConfig.argv"><code class="xref c c-member docutils literal notranslate"><span class="pre">argv</span></code></a> 再从 <a class="reference internal" href="#c.PyConfig.argv" title="PyConfig.argv"><code class="xref c c-member docutils literal notranslate"><span class="pre">argv</span></code></a> 中剥离 Python 参数。</p>
<p>如果 <a class="reference internal" href="#c.PyConfig.argv" title="PyConfig.argv"><code class="xref c c-member docutils literal notranslate"><span class="pre">argv</span></code></a> 为空，则会添加一个空字符串以确保 <a class="reference internal" href="../library/sys.xhtml#sys.argv" title="sys.argv"><code class="xref py py-data docutils literal notranslate"><span class="pre">sys.argv</span></code></a> 始终存在并且永远不为空。</p>
<p>默认值: <code class="docutils literal notranslate"><span class="pre">NULL</span></code>.</p>
<p>另请参阅 <a class="reference internal" href="#c.PyConfig.orig_argv" title="PyConfig.orig_argv"><code class="xref c c-member docutils literal notranslate"><span class="pre">orig_argv</span></code></a> 成员。</p>
</dd></dl>

<dl class="c member">
<dt class="sig sig-object c" id="c.PyConfig.safe_path">
<span class="kt"><span class="pre">int</span></span><span class="w"> </span><span class="sig-name descname"><span class="n"><span class="pre">safe_path</span></span></span><br /></dt>
<dd><p>如果等于零，<code class="docutils literal notranslate"><span class="pre">Py_RunMain()</span></code> 会在启动时向 <a class="reference internal" href="../library/sys.xhtml#sys.path" title="sys.path"><code class="xref py py-data docutils literal notranslate"><span class="pre">sys.path</span></code></a> 开头添加一个可能不安全的路径:</p>
<ul class="simple">
<li><p>如果 <a class="reference internal" href="#c.PyConfig.argv" title="PyConfig.argv"><code class="xref c c-member docutils literal notranslate"><span class="pre">argv[0]</span></code></a> 等于 <code class="docutils literal notranslate"><span class="pre">L&quot;-m&quot;</span></code> (<code class="docutils literal notranslate"><span class="pre">python</span> <span class="pre">-m</span> <span class="pre">module</span></code>)，则添加当前工作目录。</p></li>
<li><p>如果是运行脚本 (<code class="docutils literal notranslate"><span class="pre">python</span> <span class="pre">script.py</span></code>)，则添加脚本的目录。 如果是符号链接，则会解析符号链接。</p></li>
<li><p>在其他情况下 (<code class="docutils literal notranslate"><span class="pre">python</span> <span class="pre">-c</span> <span class="pre">code</span></code> 和 <code class="docutils literal notranslate"><span class="pre">python</span></code>)，将添加一个空字符串，这表示当前工作目录。</p></li>
</ul>
<p>通过 <a class="reference internal" href="../using/cmdline.xhtml#cmdoption-P"><code class="xref std std-option docutils literal notranslate"><span class="pre">-P</span></code></a> 命令行选项和 <span class="target" id="index-79"></span><a class="reference internal" href="../using/cmdline.xhtml#envvar-PYTHONSAFEPATH"><code class="xref std std-envvar docutils literal notranslate"><span class="pre">PYTHONSAFEPATH</span></code></a> 环境变量设置为 <code class="docutils literal notranslate"><span class="pre">1</span></code>。</p>
<p>默认值：Python 配置中为 <code class="docutils literal notranslate"><span class="pre">0</span></code>，隔离配置中为 <code class="docutils literal notranslate"><span class="pre">1</span></code>。</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.11.</span></p>
</div>
</dd></dl>

<dl class="c member">
<dt class="sig sig-object c" id="c.PyConfig.base_exec_prefix">
<span class="n"><span class="pre">wchar_t</span></span><span class="w"> </span><span class="p"><span class="pre">*</span></span><span class="sig-name descname"><span class="n"><span class="pre">base_exec_prefix</span></span></span><br /></dt>
<dd><p><a class="reference internal" href="../library/sys.xhtml#sys.base_exec_prefix" title="sys.base_exec_prefix"><code class="xref py py-data docutils literal notranslate"><span class="pre">sys.base_exec_prefix</span></code></a>.</p>
<p>默认值: <code class="docutils literal notranslate"><span class="pre">NULL</span></code>.</p>
<p><a class="reference internal" href="#init-path-config"><span class="std std-ref">Python 路径配置</span></a> 的一部分。</p>
</dd></dl>

<dl class="c member">
<dt class="sig sig-object c" id="c.PyConfig.base_executable">
<span class="n"><span class="pre">wchar_t</span></span><span class="w"> </span><span class="p"><span class="pre">*</span></span><span class="sig-name descname"><span class="n"><span class="pre">base_executable</span></span></span><br /></dt>
<dd><p>Python 基础可执行文件: <code class="xref py py-data docutils literal notranslate"><span class="pre">sys._base_executable</span></code>。</p>
<p>由 <span class="target" id="index-80"></span><code class="xref std std-envvar docutils literal notranslate"><span class="pre">__PYVENV_LAUNCHER__</span></code> 环境变量设置。</p>
<p>如为 <code class="docutils literal notranslate"><span class="pre">NULL</span></code> 则从 <a class="reference internal" href="#c.PyConfig.executable" title="PyConfig.executable"><code class="xref c c-member docutils literal notranslate"><span class="pre">PyConfig.executable</span></code></a> 设置。</p>
<p>默认值: <code class="docutils literal notranslate"><span class="pre">NULL</span></code>.</p>
<p><a class="reference internal" href="#init-path-config"><span class="std std-ref">Python 路径配置</span></a> 的一部分。</p>
</dd></dl>

<dl class="c member">
<dt class="sig sig-object c" id="c.PyConfig.base_prefix">
<span class="n"><span class="pre">wchar_t</span></span><span class="w"> </span><span class="p"><span class="pre">*</span></span><span class="sig-name descname"><span class="n"><span class="pre">base_prefix</span></span></span><br /></dt>
<dd><p><a class="reference internal" href="../library/sys.xhtml#sys.base_prefix" title="sys.base_prefix"><code class="xref py py-data docutils literal notranslate"><span class="pre">sys.base_prefix</span></code></a>.</p>
<p>默认值: <code class="docutils literal notranslate"><span class="pre">NULL</span></code>.</p>
<p><a class="reference internal" href="#init-path-config"><span class="std std-ref">Python 路径配置</span></a> 的一部分。</p>
</dd></dl>

<dl class="c member">
<dt class="sig sig-object c" id="c.PyConfig.buffered_stdio">
<span class="kt"><span class="pre">int</span></span><span class="w"> </span><span class="sig-name descname"><span class="n"><span class="pre">buffered_stdio</span></span></span><br /></dt>
<dd><p>如果等于 <code class="docutils literal notranslate"><span class="pre">0</span></code> 且 <a class="reference internal" href="#c.PyConfig.configure_c_stdio" title="PyConfig.configure_c_stdio"><code class="xref c c-member docutils literal notranslate"><span class="pre">configure_c_stdio</span></code></a> 为非零值，则禁用 C 数据流 stdout 和 stderr 的缓冲。</p>
<p>通过 <a class="reference internal" href="../using/cmdline.xhtml#cmdoption-u"><code class="xref std std-option docutils literal notranslate"><span class="pre">-u</span></code></a> 命令行选项和 <span class="target" id="index-81"></span><a class="reference internal" href="../using/cmdline.xhtml#envvar-PYTHONUNBUFFERED"><code class="xref std std-envvar docutils literal notranslate"><span class="pre">PYTHONUNBUFFERED</span></code></a> 环境变量设置为 <code class="docutils literal notranslate"><span class="pre">0</span></code>。</p>
<p>stdin 始终以缓冲模式打开。</p>
<p>默认值: <code class="docutils literal notranslate"><span class="pre">1</span></code>.</p>
</dd></dl>

<dl class="c member">
<dt class="sig sig-object c" id="c.PyConfig.bytes_warning">
<span class="kt"><span class="pre">int</span></span><span class="w"> </span><span class="sig-name descname"><span class="n"><span class="pre">bytes_warning</span></span></span><br /></dt>
<dd><p>如果等于 <code class="docutils literal notranslate"><span class="pre">1</span></code>，则在将 <a class="reference internal" href="../library/stdtypes.xhtml#bytes" title="bytes"><code class="xref py py-class docutils literal notranslate"><span class="pre">bytes</span></code></a> 或 <a class="reference internal" href="../library/stdtypes.xhtml#bytearray" title="bytearray"><code class="xref py py-class docutils literal notranslate"><span class="pre">bytearray</span></code></a> 与 <a class="reference internal" href="../library/stdtypes.xhtml#str" title="str"><code class="xref py py-class docutils literal notranslate"><span class="pre">str</span></code></a> 进行比较，或将 <a class="reference internal" href="../library/stdtypes.xhtml#bytes" title="bytes"><code class="xref py py-class docutils literal notranslate"><span class="pre">bytes</span></code></a> 与 <a class="reference internal" href="../library/functions.xhtml#int" title="int"><code class="xref py py-class docutils literal notranslate"><span class="pre">int</span></code></a> 进行比较时发出警告。</p>
<p>如果大于等于 <code class="docutils literal notranslate"><span class="pre">2</span></code>，则在这些情况下引发 <a class="reference internal" href="../library/exceptions.xhtml#BytesWarning" title="BytesWarning"><code class="xref py py-exc docutils literal notranslate"><span class="pre">BytesWarning</span></code></a> 异常。</p>
<p>由 <a class="reference internal" href="../using/cmdline.xhtml#cmdoption-b"><code class="xref std std-option docutils literal notranslate"><span class="pre">-b</span></code></a> 命令行选项执行递增。</p>
<p>默认值: <code class="docutils literal notranslate"><span class="pre">0</span></code>.</p>
</dd></dl>

<dl class="c member">
<dt class="sig sig-object c" id="c.PyConfig.warn_default_encoding">
<span class="kt"><span class="pre">int</span></span><span class="w"> </span><span class="sig-name descname"><span class="n"><span class="pre">warn_default_encoding</span></span></span><br /></dt>
<dd><p>如为非零值，则在 <a class="reference internal" href="../library/io.xhtml#io.TextIOWrapper" title="io.TextIOWrapper"><code class="xref py py-class docutils literal notranslate"><span class="pre">io.TextIOWrapper</span></code></a> 使用默认编码格式时发出 <a class="reference internal" href="../library/exceptions.xhtml#EncodingWarning" title="EncodingWarning"><code class="xref py py-exc docutils literal notranslate"><span class="pre">EncodingWarning</span></code></a> 警告。 详情请参阅 <a class="reference internal" href="../library/io.xhtml#io-encoding-warning"><span class="std std-ref">选择性的 EncodingWarning</span></a>。</p>
<p>默认值: <code class="docutils literal notranslate"><span class="pre">0</span></code>.</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.10.</span></p>
</div>
</dd></dl>

<dl class="c member">
<dt class="sig sig-object c" id="c.PyConfig.code_debug_ranges">
<span class="kt"><span class="pre">int</span></span><span class="w"> </span><span class="sig-name descname"><span class="n"><span class="pre">code_debug_ranges</span></span></span><br /></dt>
<dd><p>如果等于 <code class="docutils literal notranslate"><span class="pre">0</span></code>，则禁用在代码对象中包括末尾行和列映射。 并且禁用在特定错误位置打印回溯标记。</p>
<p>通过 <span class="target" id="index-82"></span><a class="reference internal" href="../using/cmdline.xhtml#envvar-PYTHONNODEBUGRANGES"><code class="xref std std-envvar docutils literal notranslate"><span class="pre">PYTHONNODEBUGRANGES</span></code></a> 环境变量和 <a class="reference internal" href="../using/cmdline.xhtml#cmdoption-X"><code class="xref std std-option docutils literal notranslate"><span class="pre">-X</span> <span class="pre">no_debug_ranges</span></code></a> 命令行选项设置为 <code class="docutils literal notranslate"><span class="pre">0</span></code>。</p>
<p>默认值: <code class="docutils literal notranslate"><span class="pre">1</span></code>.</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.11.</span></p>
</div>
</dd></dl>

<dl class="c member">
<dt class="sig sig-object c" id="c.PyConfig.check_hash_pycs_mode">
<span class="n"><span class="pre">wchar_t</span></span><span class="w"> </span><span class="p"><span class="pre">*</span></span><span class="sig-name descname"><span class="n"><span class="pre">check_hash_pycs_mode</span></span></span><br /></dt>
<dd><p>控制基于哈希值的 <code class="docutils literal notranslate"><span class="pre">.pyc</span></code> 文件的验证行为: <a class="reference internal" href="../using/cmdline.xhtml#cmdoption-check-hash-based-pycs"><code class="xref std std-option docutils literal notranslate"><span class="pre">--check-hash-based-pycs</span></code></a> 命令行选项的值。</p>
<p>有效的值：</p>
<ul class="simple">
<li><p><code class="docutils literal notranslate"><span class="pre">L&quot;always&quot;</span></code>: 无论 'check_source' 旗标的值是什么都会对源文件进行哈希验证。</p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">L&quot;never&quot;</span></code>: 假定基于哈希值的 pyc 始终是有效的。</p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">L&quot;default&quot;</span></code>: 基于哈希值的 pyc 中的 'check_source' 旗标确定是否验证无效。</p></li>
</ul>
<p>默认值： <code class="docutils literal notranslate"><span class="pre">L&quot;default&quot;</span></code>。</p>
<p>参见 <span class="target" id="index-83"></span><a class="pep reference external" href="https://peps.python.org/pep-0552/"><strong>PEP 552</strong></a><span class="link-target"> [https://peps.python.org/pep-0552/]</span> &quot;Deterministic pycs&quot;。</p>
</dd></dl>

<dl class="c member">
<dt class="sig sig-object c" id="c.PyConfig.configure_c_stdio">
<span class="kt"><span class="pre">int</span></span><span class="w"> </span><span class="sig-name descname"><span class="n"><span class="pre">configure_c_stdio</span></span></span><br /></dt>
<dd><p>如为非零值，则配置 C 标准流:</p>
<ul class="simple">
<li><p>在 Windows 中，在 stdin, stdout 和 stderr 上设置二进制模式 (<code class="docutils literal notranslate"><span class="pre">O_BINARY</span></code>)。</p></li>
<li><p>如果 <a class="reference internal" href="#c.PyConfig.buffered_stdio" title="PyConfig.buffered_stdio"><code class="xref c c-member docutils literal notranslate"><span class="pre">buffered_stdio</span></code></a> 等于零，则禁用 stdin, stdout 和 stderr 流的缓冲。</p></li>
<li><p>如果 <a class="reference internal" href="#c.PyConfig.interactive" title="PyConfig.interactive"><code class="xref c c-member docutils literal notranslate"><span class="pre">interactive</span></code></a> 为非零值，则启用 stdin 和 stdout 上的流缓冲（Windows 中仅限 stdout）。</p></li>
</ul>
<p>默认值: 在 Python 配置中为 <code class="docutils literal notranslate"><span class="pre">1</span></code>，在隔离配置中为 <code class="docutils literal notranslate"><span class="pre">0</span></code>。</p>
</dd></dl>

<dl class="c member">
<dt class="sig sig-object c" id="c.PyConfig.dev_mode">
<span class="kt"><span class="pre">int</span></span><span class="w"> </span><span class="sig-name descname"><span class="n"><span class="pre">dev_mode</span></span></span><br /></dt>
<dd><p>如果为非零值，则启用 <a class="reference internal" href="../library/devmode.xhtml#devmode"><span class="std std-ref">Python 开发模式</span></a>。</p>
<p>通过 <a class="reference internal" href="../using/cmdline.xhtml#cmdoption-X"><code class="xref std std-option docutils literal notranslate"><span class="pre">-X</span> <span class="pre">dev</span></code></a> 选项和 <span class="target" id="index-84"></span><a class="reference internal" href="../using/cmdline.xhtml#envvar-PYTHONDEVMODE"><code class="xref std std-envvar docutils literal notranslate"><span class="pre">PYTHONDEVMODE</span></code></a> 环境变量设置为 <code class="docutils literal notranslate"><span class="pre">1</span></code>。</p>
<p>默认值: 在 Python 模式中为 <code class="docutils literal notranslate"><span class="pre">-1</span></code>，在隔离模式中为 <code class="docutils literal notranslate"><span class="pre">0</span></code>。</p>
</dd></dl>

<dl class="c member">
<dt class="sig sig-object c" id="c.PyConfig.dump_refs">
<span class="kt"><span class="pre">int</span></span><span class="w"> </span><span class="sig-name descname"><span class="n"><span class="pre">dump_refs</span></span></span><br /></dt>
<dd><p>转储 Python 引用？</p>
<p>如果为非零值，则转储所有在退出时仍存活的对象。</p>
<p>由 <span class="target" id="index-85"></span><a class="reference internal" href="../using/cmdline.xhtml#envvar-PYTHONDUMPREFS"><code class="xref std std-envvar docutils literal notranslate"><span class="pre">PYTHONDUMPREFS</span></code></a> 环境变量设置为 <code class="docutils literal notranslate"><span class="pre">1</span></code>。</p>
<p>Need a special build of Python with the <code class="docutils literal notranslate"><span class="pre">Py_TRACE_REFS</span></code> macro defined:
see the <a class="reference internal" href="../using/configure.xhtml#cmdoption-with-trace-refs"><code class="xref std std-option docutils literal notranslate"><span class="pre">configure</span> <span class="pre">--with-trace-refs</span> <span class="pre">option</span></code></a>.</p>
<p>默认值: <code class="docutils literal notranslate"><span class="pre">0</span></code>.</p>
</dd></dl>

<dl class="c member">
<dt class="sig sig-object c" id="c.PyConfig.exec_prefix">
<span class="n"><span class="pre">wchar_t</span></span><span class="w"> </span><span class="p"><span class="pre">*</span></span><span class="sig-name descname"><span class="n"><span class="pre">exec_prefix</span></span></span><br /></dt>
<dd><p>安装依赖于平台的 Python 文件的站点专属目录前缀: <a class="reference internal" href="../library/sys.xhtml#sys.exec_prefix" title="sys.exec_prefix"><code class="xref py py-data docutils literal notranslate"><span class="pre">sys.exec_prefix</span></code></a>。</p>
<p>默认值: <code class="docutils literal notranslate"><span class="pre">NULL</span></code>.</p>
<p><a class="reference internal" href="#init-path-config"><span class="std std-ref">Python 路径配置</span></a> 的一部分。</p>
</dd></dl>

<dl class="c member">
<dt class="sig sig-object c" id="c.PyConfig.executable">
<span class="n"><span class="pre">wchar_t</span></span><span class="w"> </span><span class="p"><span class="pre">*</span></span><span class="sig-name descname"><span class="n"><span class="pre">executable</span></span></span><br /></dt>
<dd><p>Python 解释器可执行二进制文件的绝对路径: <a class="reference internal" href="../library/sys.xhtml#sys.executable" title="sys.executable"><code class="xref py py-data docutils literal notranslate"><span class="pre">sys.executable</span></code></a>。</p>
<p>默认值: <code class="docutils literal notranslate"><span class="pre">NULL</span></code>.</p>
<p><a class="reference internal" href="#init-path-config"><span class="std std-ref">Python 路径配置</span></a> 的一部分。</p>
</dd></dl>

<dl class="c member">
<dt class="sig sig-object c" id="c.PyConfig.faulthandler">
<span class="kt"><span class="pre">int</span></span><span class="w"> </span><span class="sig-name descname"><span class="n"><span class="pre">faulthandler</span></span></span><br /></dt>
<dd><p>启用 faulthandler？</p>
<p>如果为非零值，则在启动时调用 <a class="reference internal" href="../library/faulthandler.xhtml#faulthandler.enable" title="faulthandler.enable"><code class="xref py py-func docutils literal notranslate"><span class="pre">faulthandler.enable()</span></code></a>。</p>
<p>通过 <a class="reference internal" href="../using/cmdline.xhtml#cmdoption-X"><code class="xref std std-option docutils literal notranslate"><span class="pre">-X</span> <span class="pre">faulthandler</span></code></a> 和 <span class="target" id="index-86"></span><a class="reference internal" href="../using/cmdline.xhtml#envvar-PYTHONFAULTHANDLER"><code class="xref std std-envvar docutils literal notranslate"><span class="pre">PYTHONFAULTHANDLER</span></code></a> 环境变量设为 <code class="docutils literal notranslate"><span class="pre">1</span></code>。</p>
<p>默认值: 在 Python 模式中为 <code class="docutils literal notranslate"><span class="pre">-1</span></code>，在隔离模式中为 <code class="docutils literal notranslate"><span class="pre">0</span></code>。</p>
</dd></dl>

<dl class="c member">
<dt class="sig sig-object c" id="c.PyConfig.filesystem_encoding">
<span class="n"><span class="pre">wchar_t</span></span><span class="w"> </span><span class="p"><span class="pre">*</span></span><span class="sig-name descname"><span class="n"><span class="pre">filesystem_encoding</span></span></span><br /></dt>
<dd><p><a class="reference internal" href="../glossary.xhtml#term-filesystem-encoding-and-error-handler"><span class="xref std std-term">文件系统编码格式</span></a>: <a class="reference internal" href="../library/sys.xhtml#sys.getfilesystemencoding" title="sys.getfilesystemencoding"><code class="xref py py-func docutils literal notranslate"><span class="pre">sys.getfilesystemencoding()</span></code></a>。</p>
<p>在 macOS, Android 和 VxWorks 上：默认使用 <code class="docutils literal notranslate"><span class="pre">&quot;utf-8&quot;</span></code>。</p>
<p>在 Windows 上：默认使用 <code class="docutils literal notranslate"><span class="pre">&quot;utf-8&quot;</span></code>，或者如果 <a class="reference internal" href="#c.PyPreConfig" title="PyPreConfig"><code class="xref c c-type docutils literal notranslate"><span class="pre">PyPreConfig</span></code></a> 的 <a class="reference internal" href="#c.PyPreConfig.legacy_windows_fs_encoding" title="PyPreConfig.legacy_windows_fs_encoding"><code class="xref c c-member docutils literal notranslate"><span class="pre">legacy_windows_fs_encoding</span></code></a> 为非零值则使用 <code class="docutils literal notranslate"><span class="pre">&quot;mbcs&quot;</span></code>。</p>
<p>在其他平台上的默认编码格式：</p>
<ul class="simple">
<li><p>如果 <a class="reference internal" href="#c.PyPreConfig.utf8_mode" title="PyPreConfig.utf8_mode"><code class="xref c c-member docutils literal notranslate"><span class="pre">PyPreConfig.utf8_mode</span></code></a> 为非零值则使用 <code class="docutils literal notranslate"><span class="pre">&quot;utf-8&quot;</span></code>。</p></li>
<li><p>如果 Python 检测到 <code class="docutils literal notranslate"><span class="pre">nl_langinfo(CODESET)</span></code> 声明为 ASCII 编码格式，而 <code class="docutils literal notranslate"><span class="pre">mbstowcs()</span></code> 是从其他的编码格式解码（通常为 Latin1）则使用 <code class="docutils literal notranslate"><span class="pre">&quot;ascii&quot;</span></code>。</p></li>
<li><p>如果 <code class="docutils literal notranslate"><span class="pre">nl_langinfo(CODESET)</span></code> 返回空字符串则使用 <code class="docutils literal notranslate"><span class="pre">&quot;utf-8&quot;</span></code>。</p></li>
<li><p>在其他情况下，使用 <a class="reference internal" href="../glossary.xhtml#term-locale-encoding"><span class="xref std std-term">locale encoding</span></a>: <code class="docutils literal notranslate"><span class="pre">nl_langinfo(CODESET)</span></code> 的结果。</p></li>
</ul>
<p>在 Python 启动时，编码格式名称会规范化为 Python 编解码器名称。 例如，<code class="docutils literal notranslate"><span class="pre">&quot;ANSI_X3.4-1968&quot;</span></code> 将被替换为 <code class="docutils literal notranslate"><span class="pre">&quot;ascii&quot;</span></code>。</p>
<p>参见 <a class="reference internal" href="#c.PyConfig.filesystem_errors" title="PyConfig.filesystem_errors"><code class="xref c c-member docutils literal notranslate"><span class="pre">filesystem_errors</span></code></a> 的成员。</p>
</dd></dl>

<dl class="c member">
<dt class="sig sig-object c" id="c.PyConfig.filesystem_errors">
<span class="n"><span class="pre">wchar_t</span></span><span class="w"> </span><span class="p"><span class="pre">*</span></span><span class="sig-name descname"><span class="n"><span class="pre">filesystem_errors</span></span></span><br /></dt>
<dd><p><a class="reference internal" href="../glossary.xhtml#term-filesystem-encoding-and-error-handler"><span class="xref std std-term">文件系统错误处理器</span></a>: <a class="reference internal" href="../library/sys.xhtml#sys.getfilesystemencodeerrors" title="sys.getfilesystemencodeerrors"><code class="xref py py-func docutils literal notranslate"><span class="pre">sys.getfilesystemencodeerrors()</span></code></a>。</p>
<p>在 Windows 上：默认使用 <code class="docutils literal notranslate"><span class="pre">&quot;surrogatepass&quot;</span></code>，或者如果 <a class="reference internal" href="#c.PyPreConfig" title="PyPreConfig"><code class="xref c c-type docutils literal notranslate"><span class="pre">PyPreConfig</span></code></a> 的  <a class="reference internal" href="#c.PyPreConfig.legacy_windows_fs_encoding" title="PyPreConfig.legacy_windows_fs_encoding"><code class="xref c c-member docutils literal notranslate"><span class="pre">legacy_windows_fs_encoding</span></code></a> 为非零值则使用 <code class="docutils literal notranslate"><span class="pre">&quot;replace&quot;</span></code>。</p>
<p>在其他平台上：默认使用 <code class="docutils literal notranslate"><span class="pre">&quot;surrogateescape&quot;</span></code>。</p>
<p>支持的错误处理器：</p>
<ul class="simple">
<li><p><code class="docutils literal notranslate"><span class="pre">&quot;strict&quot;</span></code></p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">&quot;surrogateescape&quot;</span></code></p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">&quot;surrogatepass&quot;</span></code> (仅支持 UTF-8 编码格式)</p></li>
</ul>
<p>参见 <a class="reference internal" href="#c.PyConfig.filesystem_encoding" title="PyConfig.filesystem_encoding"><code class="xref c c-member docutils literal notranslate"><span class="pre">filesystem_encoding</span></code></a> 的成员。</p>
</dd></dl>

<dl class="c member">
<dt class="sig sig-object c" id="c.PyConfig.hash_seed">
<span class="kt"><span class="pre">unsigned</span></span><span class="w"> </span><span class="kt"><span class="pre">long</span></span><span class="w"> </span><span class="sig-name descname"><span class="n"><span class="pre">hash_seed</span></span></span><br /></dt>
<dd></dd></dl>

<dl class="c member">
<dt class="sig sig-object c" id="c.PyConfig.use_hash_seed">
<span class="kt"><span class="pre">int</span></span><span class="w"> </span><span class="sig-name descname"><span class="n"><span class="pre">use_hash_seed</span></span></span><br /></dt>
<dd><p>随机化的哈希函数种子。</p>
<p>如果 <a class="reference internal" href="#c.PyConfig.use_hash_seed" title="PyConfig.use_hash_seed"><code class="xref c c-member docutils literal notranslate"><span class="pre">use_hash_seed</span></code></a> 为零，则在 Python 启动时随机选择一个种子，并忽略 <a class="reference internal" href="#c.PyConfig.hash_seed" title="PyConfig.hash_seed"><code class="xref c c-member docutils literal notranslate"><span class="pre">hash_seed</span></code></a>。</p>
<p>由 <span class="target" id="index-87"></span><a class="reference internal" href="../using/cmdline.xhtml#envvar-PYTHONHASHSEED"><code class="xref std std-envvar docutils literal notranslate"><span class="pre">PYTHONHASHSEED</span></code></a> 环境变量设置。</p>
<p>默认的 <em>use_hash_seed</em> 值：在 Python 模式下为 <code class="docutils literal notranslate"><span class="pre">-1</span></code>，在隔离模式下为 <code class="docutils literal notranslate"><span class="pre">0</span></code>。</p>
</dd></dl>

<dl class="c member">
<dt class="sig sig-object c" id="c.PyConfig.home">
<span class="n"><span class="pre">wchar_t</span></span><span class="w"> </span><span class="p"><span class="pre">*</span></span><span class="sig-name descname"><span class="n"><span class="pre">home</span></span></span><br /></dt>
<dd><p>Python home directory.</p>
<p>If <a class="reference internal" href="init.xhtml#c.Py_SetPythonHome" title="Py_SetPythonHome"><code class="xref c c-func docutils literal notranslate"><span class="pre">Py_SetPythonHome()</span></code></a> has been called, use its argument if it is
not <code class="docutils literal notranslate"><span class="pre">NULL</span></code>.</p>
<p>由 <span class="target" id="index-88"></span><a class="reference internal" href="../using/cmdline.xhtml#envvar-PYTHONHOME"><code class="xref std std-envvar docutils literal notranslate"><span class="pre">PYTHONHOME</span></code></a> 环境变量设置。</p>
<p>默认值: <code class="docutils literal notranslate"><span class="pre">NULL</span></code>.</p>
<p><a class="reference internal" href="#init-path-config"><span class="std std-ref">Python 路径配置</span></a> 输入的一部分。</p>
</dd></dl>

<dl class="c member">
<dt class="sig sig-object c" id="c.PyConfig.import_time">
<span class="kt"><span class="pre">int</span></span><span class="w"> </span><span class="sig-name descname"><span class="n"><span class="pre">import_time</span></span></span><br /></dt>
<dd><p>如为非零值，则对导入时间执行性能分析。</p>
<p>通过 <a class="reference internal" href="../using/cmdline.xhtml#cmdoption-X"><code class="xref std std-option docutils literal notranslate"><span class="pre">-X</span> <span class="pre">importtime</span></code></a> 选项和 <span class="target" id="index-89"></span><a class="reference internal" href="../using/cmdline.xhtml#envvar-PYTHONPROFILEIMPORTTIME"><code class="xref std std-envvar docutils literal notranslate"><span class="pre">PYTHONPROFILEIMPORTTIME</span></code></a> 环境变量设置为 <code class="docutils literal notranslate"><span class="pre">1</span></code>。</p>
<p>默认值: <code class="docutils literal notranslate"><span class="pre">0</span></code>.</p>
</dd></dl>

<dl class="c member">
<dt class="sig sig-object c" id="c.PyConfig.inspect">
<span class="kt"><span class="pre">int</span></span><span class="w"> </span><span class="sig-name descname"><span class="n"><span class="pre">inspect</span></span></span><br /></dt>
<dd><p>在执行脚本或命令之后进入交互模式。</p>
<p>如果大于 <code class="docutils literal notranslate"><span class="pre">0</span></code> ，则启用检查：当脚本作为第一个参数传入或使用了 -c 选项时，在执行脚本或命令后进入交互模式，即使在 <a class="reference internal" href="../library/sys.xhtml#sys.stdin" title="sys.stdin"><code class="xref py py-data docutils literal notranslate"><span class="pre">sys.stdin</span></code></a> 看来并非一个终端时也是如此。</p>
<p>通过 <a class="reference internal" href="../using/cmdline.xhtml#cmdoption-i"><code class="xref std std-option docutils literal notranslate"><span class="pre">-i</span></code></a> 命令行选项执行递增。 如果 <span class="target" id="index-90"></span><a class="reference internal" href="../using/cmdline.xhtml#envvar-PYTHONINSPECT"><code class="xref std std-envvar docutils literal notranslate"><span class="pre">PYTHONINSPECT</span></code></a> 环境变量为非空值则设为 <code class="docutils literal notranslate"><span class="pre">1</span></code>。</p>
<p>默认值: <code class="docutils literal notranslate"><span class="pre">0</span></code>.</p>
</dd></dl>

<dl class="c member">
<dt class="sig sig-object c" id="c.PyConfig.install_signal_handlers">
<span class="kt"><span class="pre">int</span></span><span class="w"> </span><span class="sig-name descname"><span class="n"><span class="pre">install_signal_handlers</span></span></span><br /></dt>
<dd><p>安装 Python 信号处理器？</p>
<p>默认值：在 Python 模式下为 <code class="docutils literal notranslate"><span class="pre">1</span></code>，在隔离模式下为 <code class="docutils literal notranslate"><span class="pre">0</span></code>。</p>
</dd></dl>

<dl class="c member">
<dt class="sig sig-object c" id="c.PyConfig.interactive">
<span class="kt"><span class="pre">int</span></span><span class="w"> </span><span class="sig-name descname"><span class="n"><span class="pre">interactive</span></span></span><br /></dt>
<dd><p>如果大于 <code class="docutils literal notranslate"><span class="pre">0</span></code>，则启用交互模式（REPL）。</p>
<p>由 <a class="reference internal" href="../using/cmdline.xhtml#cmdoption-i"><code class="xref std std-option docutils literal notranslate"><span class="pre">-i</span></code></a> 命令行选项执行递增。</p>
<p>默认值: <code class="docutils literal notranslate"><span class="pre">0</span></code>.</p>
</dd></dl>

<dl class="c member">
<dt class="sig sig-object c" id="c.PyConfig.int_max_str_digits">
<span class="kt"><span class="pre">int</span></span><span class="w"> </span><span class="sig-name descname"><span class="n"><span class="pre">int_max_str_digits</span></span></span><br /></dt>
<dd><p>配置 <a class="reference internal" href="../library/stdtypes.xhtml#int-max-str-digits"><span class="std std-ref">整数字符串转换长度限制</span></a>。 初始值为 <code class="docutils literal notranslate"><span class="pre">-1</span></code> 表示该值将从命令行或环境获取否则默认为 4300 (<a class="reference internal" href="../library/sys.xhtml#sys.int_info.default_max_str_digits" title="sys.int_info.default_max_str_digits"><code class="xref py py-data docutils literal notranslate"><span class="pre">sys.int_info.default_max_str_digits</span></code></a>)。 值为 <code class="docutils literal notranslate"><span class="pre">0</span></code> 表示禁用限制。 大于 0 但小于 640 (<a class="reference internal" href="../library/sys.xhtml#sys.int_info.str_digits_check_threshold" title="sys.int_info.str_digits_check_threshold"><code class="xref py py-data docutils literal notranslate"><span class="pre">sys.int_info.str_digits_check_threshold</span></code></a>) 的值将不被支持并会产生错误。</p>
<p>通过 <a class="reference internal" href="../using/cmdline.xhtml#cmdoption-X"><code class="xref std std-option docutils literal notranslate"><span class="pre">-X</span> <span class="pre">int_max_str_digits</span></code></a> 命令行旗标或 <span class="target" id="index-91"></span><a class="reference internal" href="../using/cmdline.xhtml#envvar-PYTHONINTMAXSTRDIGITS"><code class="xref std std-envvar docutils literal notranslate"><span class="pre">PYTHONINTMAXSTRDIGITS</span></code></a> 环境变量配置。</p>
<p>默认值：在 Python 模式下为 <code class="docutils literal notranslate"><span class="pre">-1</span></code> 。 在孤立模式下为 4300 (<a class="reference internal" href="../library/sys.xhtml#sys.int_info.default_max_str_digits" title="sys.int_info.default_max_str_digits"><code class="xref py py-data docutils literal notranslate"><span class="pre">sys.int_info.default_max_str_digits</span></code></a>)。</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.12.</span></p>
</div>
</dd></dl>

<dl class="c member">
<dt class="sig sig-object c" id="c.PyConfig.isolated">
<span class="kt"><span class="pre">int</span></span><span class="w"> </span><span class="sig-name descname"><span class="n"><span class="pre">isolated</span></span></span><br /></dt>
<dd><p>如果大于 <code class="docutils literal notranslate"><span class="pre">0</span></code> ，则启用隔离模式：</p>
<ul class="simple">
<li><p>将 <a class="reference internal" href="#c.PyConfig.safe_path" title="PyConfig.safe_path"><code class="xref c c-member docutils literal notranslate"><span class="pre">safe_path</span></code></a> 设为 <code class="docutils literal notranslate"><span class="pre">1</span></code>: 在 Python 启动时将不在 <a class="reference internal" href="../library/sys.xhtml#sys.path" title="sys.path"><code class="xref py py-data docutils literal notranslate"><span class="pre">sys.path</span></code></a> 前添加有潜在不安全性的路径，如当前目录、脚本所在目录或空字符串。</p></li>
<li><p>将 <a class="reference internal" href="#c.PyConfig.use_environment" title="PyConfig.use_environment"><code class="xref c c-member docutils literal notranslate"><span class="pre">use_environment</span></code></a> 设为 <code class="docutils literal notranslate"><span class="pre">0</span></code>: 忽略 <code class="docutils literal notranslate"><span class="pre">PYTHON</span></code> 环境变量。</p></li>
<li><p>将 <a class="reference internal" href="#c.PyConfig.user_site_directory" title="PyConfig.user_site_directory"><code class="xref c c-member docutils literal notranslate"><span class="pre">user_site_directory</span></code></a> 设为 <code class="docutils literal notranslate"><span class="pre">0</span></code>: 不要将用户级站点目录添加到 <a class="reference internal" href="../library/sys.xhtml#sys.path" title="sys.path"><code class="xref py py-data docutils literal notranslate"><span class="pre">sys.path</span></code></a>。</p></li>
<li><p>Python REPL 将不导入 <a class="reference internal" href="../library/readline.xhtml#module-readline" title="readline: GNU readline support for Python. (Unix)"><code class="xref py py-mod docutils literal notranslate"><span class="pre">readline</span></code></a> 也不在交互提示符中启用默认的 readline 配置。</p></li>
</ul>
<p>通过 <a class="reference internal" href="../using/cmdline.xhtml#cmdoption-I"><code class="xref std std-option docutils literal notranslate"><span class="pre">-I</span></code></a> 命令行选项设置为 <code class="docutils literal notranslate"><span class="pre">1</span></code>。</p>
<p>默认值: 在 Python 模式中为 <code class="docutils literal notranslate"><span class="pre">0</span></code>，在隔离模式中为 <code class="docutils literal notranslate"><span class="pre">1</span></code>。</p>
<p>另请参阅 <a class="reference internal" href="#init-isolated-conf"><span class="std std-ref">隔离配置</span></a> 和 <a class="reference internal" href="#c.PyPreConfig.isolated" title="PyPreConfig.isolated"><code class="xref c c-member docutils literal notranslate"><span class="pre">PyPreConfig.isolated</span></code></a>。</p>
</dd></dl>

<dl class="c member">
<dt class="sig sig-object c" id="c.PyConfig.legacy_windows_stdio">
<span class="kt"><span class="pre">int</span></span><span class="w"> </span><span class="sig-name descname"><span class="n"><span class="pre">legacy_windows_stdio</span></span></span><br /></dt>
<dd><p>如为非零值，则使用 <a class="reference internal" href="../library/io.xhtml#io.FileIO" title="io.FileIO"><code class="xref py py-class docutils literal notranslate"><span class="pre">io.FileIO</span></code></a> 代替 <code class="xref py py-class docutils literal notranslate"><span class="pre">io._WindowsConsoleIO</span></code> 作为 <a class="reference internal" href="../library/sys.xhtml#sys.stdin" title="sys.stdin"><code class="xref py py-data docutils literal notranslate"><span class="pre">sys.stdin</span></code></a>、<a class="reference internal" href="../library/sys.xhtml#sys.stdout" title="sys.stdout"><code class="xref py py-data docutils literal notranslate"><span class="pre">sys.stdout</span></code></a> 和 <a class="reference internal" href="../library/sys.xhtml#sys.stderr" title="sys.stderr"><code class="xref py py-data docutils literal notranslate"><span class="pre">sys.stderr</span></code></a>。</p>
<p>如果 <span class="target" id="index-92"></span><a class="reference internal" href="../using/cmdline.xhtml#envvar-PYTHONLEGACYWINDOWSSTDIO"><code class="xref std std-envvar docutils literal notranslate"><span class="pre">PYTHONLEGACYWINDOWSSTDIO</span></code></a> 环境变量被设为非空字符串则设为 <code class="docutils literal notranslate"><span class="pre">1</span></code>。</p>
<p>仅在 Windows 上可用。 <code class="docutils literal notranslate"><span class="pre">#ifdef</span> <span class="pre">MS_WINDOWS</span></code> 宏可被用于 Windows 专属的代码。</p>
<p>默认值: <code class="docutils literal notranslate"><span class="pre">0</span></code>.</p>
<p>另请参阅 <span class="target" id="index-93"></span><a class="pep reference external" href="https://peps.python.org/pep-0528/"><strong>PEP 528</strong></a><span class="link-target"> [https://peps.python.org/pep-0528/]</span> (将 Windows 控制台编码格式更改为 UTF-8)。</p>
</dd></dl>

<dl class="c member">
<dt class="sig sig-object c" id="c.PyConfig.malloc_stats">
<span class="kt"><span class="pre">int</span></span><span class="w"> </span><span class="sig-name descname"><span class="n"><span class="pre">malloc_stats</span></span></span><br /></dt>
<dd><p>如为非零值，则在退出时转储 <a class="reference internal" href="memory.xhtml#pymalloc"><span class="std std-ref">Python pymalloc 内存分配器</span></a> 的统计数据。</p>
<p>由 <span class="target" id="index-94"></span><a class="reference internal" href="../using/cmdline.xhtml#envvar-PYTHONMALLOCSTATS"><code class="xref std std-envvar docutils literal notranslate"><span class="pre">PYTHONMALLOCSTATS</span></code></a> 环境变量设置为 <code class="docutils literal notranslate"><span class="pre">1</span></code>。</p>
<p>如果 Python 是 <a class="reference internal" href="../using/configure.xhtml#cmdoption-without-pymalloc"><code class="xref std std-option docutils literal notranslate"><span class="pre">使用</span> <span class="pre">--without-pymalloc</span> <span class="pre">选项进行配置</span></code></a> 则该选项将被忽略。</p>
<p>默认值: <code class="docutils literal notranslate"><span class="pre">0</span></code>.</p>
</dd></dl>

<dl class="c member">
<dt class="sig sig-object c" id="c.PyConfig.platlibdir">
<span class="n"><span class="pre">wchar_t</span></span><span class="w"> </span><span class="p"><span class="pre">*</span></span><span class="sig-name descname"><span class="n"><span class="pre">platlibdir</span></span></span><br /></dt>
<dd><p>平台库目录名称: <a class="reference internal" href="../library/sys.xhtml#sys.platlibdir" title="sys.platlibdir"><code class="xref py py-data docutils literal notranslate"><span class="pre">sys.platlibdir</span></code></a>。</p>
<p>由 <span class="target" id="index-95"></span><a class="reference internal" href="../using/cmdline.xhtml#envvar-PYTHONPLATLIBDIR"><code class="xref std std-envvar docutils literal notranslate"><span class="pre">PYTHONPLATLIBDIR</span></code></a> 环境变量设置。</p>
<p>默认值：由 <a class="reference internal" href="../using/configure.xhtml#cmdoption-with-platlibdir"><code class="xref std std-option docutils literal notranslate"><span class="pre">configure</span> <span class="pre">--with-platlibdir</span> <span class="pre">选项</span></code></a> 设置的 <code class="docutils literal notranslate"><span class="pre">PLATLIBDIR</span></code> 宏的值 (默认值: <code class="docutils literal notranslate"><span class="pre">&quot;lib&quot;</span></code>，在 Windows 上则为 <code class="docutils literal notranslate"><span class="pre">&quot;DLLs&quot;</span></code>)。</p>
<p><a class="reference internal" href="#init-path-config"><span class="std std-ref">Python 路径配置</span></a> 输入的一部分。</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.9.</span></p>
</div>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.11 版本发生变更: </span>目前在 Windows 系统中该宏被用于定位标准库扩展模块，通常位于 <code class="docutils literal notranslate"><span class="pre">DLLs</span></code> 下。 不过，出于兼容性考虑，请注意在任何非标准布局包括树内构建和虚拟环境中，该值都将被忽略。</p>
</div>
</dd></dl>

<dl class="c member">
<dt class="sig sig-object c" id="c.PyConfig.pythonpath_env">
<span class="n"><span class="pre">wchar_t</span></span><span class="w"> </span><span class="p"><span class="pre">*</span></span><span class="sig-name descname"><span class="n"><span class="pre">pythonpath_env</span></span></span><br /></dt>
<dd><p>模块搜索路径 (<a class="reference internal" href="../library/sys.xhtml#sys.path" title="sys.path"><code class="xref py py-data docutils literal notranslate"><span class="pre">sys.path</span></code></a>) 为一个用 <code class="docutils literal notranslate"><span class="pre">DELIM</span></code> (<a class="reference internal" href="../library/os.xhtml#os.pathsep" title="os.pathsep"><code class="xref py py-data docutils literal notranslate"><span class="pre">os.pathsep</span></code></a>) 分隔的字符串。</p>
<p>由 <span class="target" id="index-96"></span><a class="reference internal" href="../using/cmdline.xhtml#envvar-PYTHONPATH"><code class="xref std std-envvar docutils literal notranslate"><span class="pre">PYTHONPATH</span></code></a> 环境变量设置。</p>
<p>默认值: <code class="docutils literal notranslate"><span class="pre">NULL</span></code>.</p>
<p><a class="reference internal" href="#init-path-config"><span class="std std-ref">Python 路径配置</span></a> 输入的一部分。</p>
</dd></dl>

<dl class="c member">
<dt class="sig sig-object c" id="c.PyConfig.module_search_paths">
<a class="reference internal" href="#c.PyWideStringList" title="PyWideStringList"><span class="n"><span class="pre">PyWideStringList</span></span></a><span class="w"> </span><span class="sig-name descname"><span class="n"><span class="pre">module_search_paths</span></span></span><br /></dt>
<dd></dd></dl>

<dl class="c member">
<dt class="sig sig-object c" id="c.PyConfig.module_search_paths_set">
<span class="kt"><span class="pre">int</span></span><span class="w"> </span><span class="sig-name descname"><span class="n"><span class="pre">module_search_paths_set</span></span></span><br /></dt>
<dd><p>模块搜索路径: <a class="reference internal" href="../library/sys.xhtml#sys.path" title="sys.path"><code class="xref py py-data docutils literal notranslate"><span class="pre">sys.path</span></code></a>。</p>
<p>如果 <a class="reference internal" href="#c.PyConfig.module_search_paths_set" title="PyConfig.module_search_paths_set"><code class="xref c c-member docutils literal notranslate"><span class="pre">module_search_paths_set</span></code></a> 等于 <code class="docutils literal notranslate"><span class="pre">0</span></code>，<a class="reference internal" href="#c.Py_InitializeFromConfig" title="Py_InitializeFromConfig"><code class="xref c c-func docutils literal notranslate"><span class="pre">Py_InitializeFromConfig()</span></code></a> 将替代 <a class="reference internal" href="#c.PyConfig.module_search_paths" title="PyConfig.module_search_paths"><code class="xref c c-member docutils literal notranslate"><span class="pre">module_search_paths</span></code></a> 并将 <a class="reference internal" href="#c.PyConfig.module_search_paths_set" title="PyConfig.module_search_paths_set"><code class="xref c c-member docutils literal notranslate"><span class="pre">module_search_paths_set</span></code></a> 设为 <code class="docutils literal notranslate"><span class="pre">1</span></code>。</p>
<p>默认值：空列表 (<code class="docutils literal notranslate"><span class="pre">module_search_paths</span></code>) 和 <code class="docutils literal notranslate"><span class="pre">0</span></code> (<code class="docutils literal notranslate"><span class="pre">module_search_paths_set</span></code>)。</p>
<p><a class="reference internal" href="#init-path-config"><span class="std std-ref">Python 路径配置</span></a> 的一部分。</p>
</dd></dl>

<dl class="c member">
<dt class="sig sig-object c" id="c.PyConfig.optimization_level">
<span class="kt"><span class="pre">int</span></span><span class="w"> </span><span class="sig-name descname"><span class="n"><span class="pre">optimization_level</span></span></span><br /></dt>
<dd><p>编译优化级别：</p>
<ul class="simple">
<li><p><code class="docutils literal notranslate"><span class="pre">0</span></code>: Peephole 优化器，将 <code class="docutils literal notranslate"><span class="pre">__debug__</span></code> 设为 <code class="docutils literal notranslate"><span class="pre">True</span></code>。</p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">1</span></code>: 0 级，移除断言，将 <code class="docutils literal notranslate"><span class="pre">__debug__</span></code> 设为 <code class="docutils literal notranslate"><span class="pre">False</span></code>。</p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">2</span></code>: 1 级，去除文档字符串。</p></li>
</ul>
<p>通过 <a class="reference internal" href="../using/cmdline.xhtml#cmdoption-O"><code class="xref std std-option docutils literal notranslate"><span class="pre">-O</span></code></a> 命令行选项递增。 设置为 <span class="target" id="index-97"></span><a class="reference internal" href="../using/cmdline.xhtml#envvar-PYTHONOPTIMIZE"><code class="xref std std-envvar docutils literal notranslate"><span class="pre">PYTHONOPTIMIZE</span></code></a> 环境变量值。</p>
<p>默认值: <code class="docutils literal notranslate"><span class="pre">0</span></code>.</p>
</dd></dl>

<dl class="c member">
<dt class="sig sig-object c" id="c.PyConfig.orig_argv">
<a class="reference internal" href="#c.PyWideStringList" title="PyWideStringList"><span class="n"><span class="pre">PyWideStringList</span></span></a><span class="w"> </span><span class="sig-name descname"><span class="n"><span class="pre">orig_argv</span></span></span><br /></dt>
<dd><p>传给 Python 可执行程序的原始命令行参数列表: <a class="reference internal" href="../library/sys.xhtml#sys.orig_argv" title="sys.orig_argv"><code class="xref py py-data docutils literal notranslate"><span class="pre">sys.orig_argv</span></code></a>。</p>
<p>如果 <a class="reference internal" href="#c.PyConfig.orig_argv" title="PyConfig.orig_argv"><code class="xref c c-member docutils literal notranslate"><span class="pre">orig_argv</span></code></a> 列表为空并且 <a class="reference internal" href="#c.PyConfig.argv" title="PyConfig.argv"><code class="xref c c-member docutils literal notranslate"><span class="pre">argv</span></code></a> 不是一个只包含空字符串的列表，<a class="reference internal" href="#c.PyConfig_Read" title="PyConfig_Read"><code class="xref c c-func docutils literal notranslate"><span class="pre">PyConfig_Read()</span></code></a> 将在修改 <a class="reference internal" href="#c.PyConfig.argv" title="PyConfig.argv"><code class="xref c c-member docutils literal notranslate"><span class="pre">argv</span></code></a> 之前把 <a class="reference internal" href="#c.PyConfig.argv" title="PyConfig.argv"><code class="xref c c-member docutils literal notranslate"><span class="pre">argv</span></code></a> 拷贝至 <a class="reference internal" href="#c.PyConfig.orig_argv" title="PyConfig.orig_argv"><code class="xref c c-member docutils literal notranslate"><span class="pre">orig_argv</span></code></a> (如果 <a class="reference internal" href="#c.PyConfig.parse_argv" title="PyConfig.parse_argv"><code class="xref c c-member docutils literal notranslate"><span class="pre">parse_argv</span></code></a> 不为空)。</p>
<p>另请参阅 <a class="reference internal" href="#c.PyConfig.argv" title="PyConfig.argv"><code class="xref c c-member docutils literal notranslate"><span class="pre">argv</span></code></a> 成员和 <a class="reference internal" href="#c.Py_GetArgcArgv" title="Py_GetArgcArgv"><code class="xref c c-func docutils literal notranslate"><span class="pre">Py_GetArgcArgv()</span></code></a> 函数。</p>
<p>默认值：空列表。</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.10.</span></p>
</div>
</dd></dl>

<dl class="c member">
<dt class="sig sig-object c" id="c.PyConfig.parse_argv">
<span class="kt"><span class="pre">int</span></span><span class="w"> </span><span class="sig-name descname"><span class="n"><span class="pre">parse_argv</span></span></span><br /></dt>
<dd><p>解析命令行参数？</p>
<p>如果等于 <code class="docutils literal notranslate"><span class="pre">1</span></code>，则以与常规 Python 解析 <a class="reference internal" href="../using/cmdline.xhtml#using-on-cmdline"><span class="std std-ref">命令行参数</span></a> 相同的方式解析 <a class="reference internal" href="#c.PyConfig.argv" title="PyConfig.argv"><code class="xref c c-member docutils literal notranslate"><span class="pre">argv</span></code></a>，并从 <a class="reference internal" href="#c.PyConfig.argv" title="PyConfig.argv"><code class="xref c c-member docutils literal notranslate"><span class="pre">argv</span></code></a> 中剥离 Python 参数。</p>
<p><a class="reference internal" href="#c.PyConfig_Read" title="PyConfig_Read"><code class="xref c c-func docutils literal notranslate"><span class="pre">PyConfig_Read()</span></code></a> 函数只解析 <a class="reference internal" href="#c.PyConfig.argv" title="PyConfig.argv"><code class="xref c c-member docutils literal notranslate"><span class="pre">PyConfig.argv</span></code></a> 参数一次：在参数解析完成后，<a class="reference internal" href="#c.PyConfig.parse_argv" title="PyConfig.parse_argv"><code class="xref c c-member docutils literal notranslate"><span class="pre">PyConfig.parse_argv</span></code></a> 将被设为 <code class="docutils literal notranslate"><span class="pre">2</span></code>。 由于 Python 参数是从 <a class="reference internal" href="#c.PyConfig.argv" title="PyConfig.argv"><code class="xref c c-member docutils literal notranslate"><span class="pre">PyConfig.argv</span></code></a> 中剥离的，因此解析参数两次会将应用程序选项解析为 Python 选项。</p>
<p>默认值：在 Python 模式下为 <code class="docutils literal notranslate"><span class="pre">1</span></code>，在隔离模式下为 <code class="docutils literal notranslate"><span class="pre">0</span></code>。</p>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.10 版本发生变更: </span>现在只有当 <a class="reference internal" href="#c.PyConfig.parse_argv" title="PyConfig.parse_argv"><code class="xref c c-member docutils literal notranslate"><span class="pre">PyConfig.parse_argv</span></code></a> 等于 <code class="docutils literal notranslate"><span class="pre">1</span></code> 时才会解析 <a class="reference internal" href="#c.PyConfig.argv" title="PyConfig.argv"><code class="xref c c-member docutils literal notranslate"><span class="pre">PyConfig.argv</span></code></a> 参数。</p>
</div>
</dd></dl>

<dl class="c member">
<dt class="sig sig-object c" id="c.PyConfig.parser_debug">
<span class="kt"><span class="pre">int</span></span><span class="w"> </span><span class="sig-name descname"><span class="n"><span class="pre">parser_debug</span></span></span><br /></dt>
<dd><p>解析器调试模式。 如果大于 <code class="docutils literal notranslate"><span class="pre">0</span></code>，则打开解析器调试输出（仅针对专家，取决于编译选项）。</p>
<p>通过 <a class="reference internal" href="../using/cmdline.xhtml#cmdoption-d"><code class="xref std std-option docutils literal notranslate"><span class="pre">-d</span></code></a> 命令行选项递增。 设置为 <span class="target" id="index-98"></span><a class="reference internal" href="../using/cmdline.xhtml#envvar-PYTHONDEBUG"><code class="xref std std-envvar docutils literal notranslate"><span class="pre">PYTHONDEBUG</span></code></a> 环境变量值。</p>
<p>Need a <a class="reference internal" href="../using/configure.xhtml#debug-build"><span class="std std-ref">debug build of Python</span></a> (the <code class="docutils literal notranslate"><span class="pre">Py_DEBUG</span></code> macro
must be defined).</p>
<p>默认值: <code class="docutils literal notranslate"><span class="pre">0</span></code>.</p>
</dd></dl>

<dl class="c member">
<dt class="sig sig-object c" id="c.PyConfig.pathconfig_warnings">
<span class="kt"><span class="pre">int</span></span><span class="w"> </span><span class="sig-name descname"><span class="n"><span class="pre">pathconfig_warnings</span></span></span><br /></dt>
<dd><p>如为非零值，则允许计算路径配置以将警告记录到 <code class="docutils literal notranslate"><span class="pre">stderr</span></code> 中。 如果等于 <code class="docutils literal notranslate"><span class="pre">0</span></code>，则抑制这些警告。</p>
<p>默认值：在 Python 模式下为 <code class="docutils literal notranslate"><span class="pre">1</span></code>，在隔离模式下为 <code class="docutils literal notranslate"><span class="pre">0</span></code>。</p>
<p><a class="reference internal" href="#init-path-config"><span class="std std-ref">Python 路径配置</span></a> 输入的一部分。</p>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.11 版本发生变更: </span>现在也适用于 Windows。</p>
</div>
</dd></dl>

<dl class="c member">
<dt class="sig sig-object c" id="c.PyConfig.prefix">
<span class="n"><span class="pre">wchar_t</span></span><span class="w"> </span><span class="p"><span class="pre">*</span></span><span class="sig-name descname"><span class="n"><span class="pre">prefix</span></span></span><br /></dt>
<dd><p>安装依赖于平台的 Python 文件的站点专属目录前缀: <a class="reference internal" href="../library/sys.xhtml#sys.prefix" title="sys.prefix"><code class="xref py py-data docutils literal notranslate"><span class="pre">sys.prefix</span></code></a>。</p>
<p>默认值: <code class="docutils literal notranslate"><span class="pre">NULL</span></code>.</p>
<p><a class="reference internal" href="#init-path-config"><span class="std std-ref">Python 路径配置</span></a> 的一部分。</p>
</dd></dl>

<dl class="c member">
<dt class="sig sig-object c" id="c.PyConfig.program_name">
<span class="n"><span class="pre">wchar_t</span></span><span class="w"> </span><span class="p"><span class="pre">*</span></span><span class="sig-name descname"><span class="n"><span class="pre">program_name</span></span></span><br /></dt>
<dd><p>用于初始化 <a class="reference internal" href="#c.PyConfig.executable" title="PyConfig.executable"><code class="xref c c-member docutils literal notranslate"><span class="pre">executable</span></code></a> 和在 Python 初始化期间早期错误消息中使用的程序名称。</p>
<ul class="simple">
<li><p>If <code class="xref py py-func docutils literal notranslate"><span class="pre">Py_SetProgramName()</span></code> has been called, use its argument.</p></li>
<li><p>在 macOS 上，如果设置了 <span class="target" id="index-99"></span><a class="reference internal" href="../using/cmdline.xhtml#envvar-PYTHONEXECUTABLE"><code class="xref std std-envvar docutils literal notranslate"><span class="pre">PYTHONEXECUTABLE</span></code></a> 环境变量则会使用它。</p></li>
<li><p>如果定义了 <code class="docutils literal notranslate"><span class="pre">WITH_NEXT_FRAMEWORK</span></code> 宏，当设置了 <span class="target" id="index-100"></span><code class="xref std std-envvar docutils literal notranslate"><span class="pre">__PYVENV_LAUNCHER__</span></code> 环境变量时将会使用它。</p></li>
<li><p>如果 <a class="reference internal" href="#c.PyConfig.argv" title="PyConfig.argv"><code class="xref c c-member docutils literal notranslate"><span class="pre">argv</span></code></a> 的 <code class="docutils literal notranslate"><span class="pre">argv[0]</span></code> 可用并且不为空值则会使用它。</p></li>
<li><p>否则，在 Windows 上将使用 <code class="docutils literal notranslate"><span class="pre">L&quot;python&quot;</span></code>，在其他平台上将使用 <code class="docutils literal notranslate"><span class="pre">L&quot;python3&quot;</span></code>。</p></li>
</ul>
<p>默认值: <code class="docutils literal notranslate"><span class="pre">NULL</span></code>.</p>
<p><a class="reference internal" href="#init-path-config"><span class="std std-ref">Python 路径配置</span></a> 输入的一部分。</p>
</dd></dl>

<dl class="c member">
<dt class="sig sig-object c" id="c.PyConfig.pycache_prefix">
<span class="n"><span class="pre">wchar_t</span></span><span class="w"> </span><span class="p"><span class="pre">*</span></span><span class="sig-name descname"><span class="n"><span class="pre">pycache_prefix</span></span></span><br /></dt>
<dd><p>缓存 <code class="docutils literal notranslate"><span class="pre">.pyc</span></code> 文件被写入到的目录: <a class="reference internal" href="../library/sys.xhtml#sys.pycache_prefix" title="sys.pycache_prefix"><code class="xref py py-data docutils literal notranslate"><span class="pre">sys.pycache_prefix</span></code></a>。</p>
<p>Set by the <a class="reference internal" href="../using/cmdline.xhtml#cmdoption-X"><code class="xref std std-option docutils literal notranslate"><span class="pre">-X</span> <span class="pre">pycache_prefix=PATH</span></code></a> command line option and
the <span class="target" id="index-25"></span><a class="reference internal" href="../using/cmdline.xhtml#envvar-PYTHONPYCACHEPREFIX"><code class="xref std std-envvar docutils literal notranslate"><span class="pre">PYTHONPYCACHEPREFIX</span></code></a> environment variable.</p>
<p>如果为 <code class="docutils literal notranslate"><span class="pre">NULL</span></code>，则 <a class="reference internal" href="../library/sys.xhtml#sys.pycache_prefix" title="sys.pycache_prefix"><code class="xref py py-data docutils literal notranslate"><span class="pre">sys.pycache_prefix</span></code></a> 将被设为 <code class="docutils literal notranslate"><span class="pre">None</span></code>。</p>
<p>默认值: <code class="docutils literal notranslate"><span class="pre">NULL</span></code>.</p>
</dd></dl>

<dl class="c member">
<dt class="sig sig-object c" id="c.PyConfig.quiet">
<span class="kt"><span class="pre">int</span></span><span class="w"> </span><span class="sig-name descname"><span class="n"><span class="pre">quiet</span></span></span><br /></dt>
<dd><p>安静模式。 如果大于 <code class="docutils literal notranslate"><span class="pre">0</span></code>，则在交互模式下启动 Python 时不显示版权和版本。</p>
<p>由 <a class="reference internal" href="../using/cmdline.xhtml#cmdoption-q"><code class="xref std std-option docutils literal notranslate"><span class="pre">-q</span></code></a> 命令行选项执行递增。</p>
<p>默认值: <code class="docutils literal notranslate"><span class="pre">0</span></code>.</p>
</dd></dl>

<dl class="c member">
<dt class="sig sig-object c" id="c.PyConfig.run_command">
<span class="n"><span class="pre">wchar_t</span></span><span class="w"> </span><span class="p"><span class="pre">*</span></span><span class="sig-name descname"><span class="n"><span class="pre">run_command</span></span></span><br /></dt>
<dd><p><a class="reference internal" href="../using/cmdline.xhtml#cmdoption-c"><code class="xref std std-option docutils literal notranslate"><span class="pre">-c</span></code></a> 命令行选项的值。</p>
<p>由 <a class="reference internal" href="#c.Py_RunMain" title="Py_RunMain"><code class="xref c c-func docutils literal notranslate"><span class="pre">Py_RunMain()</span></code></a> 使用。</p>
<p>默认值: <code class="docutils literal notranslate"><span class="pre">NULL</span></code>.</p>
</dd></dl>

<dl class="c member">
<dt class="sig sig-object c" id="c.PyConfig.run_filename">
<span class="n"><span class="pre">wchar_t</span></span><span class="w"> </span><span class="p"><span class="pre">*</span></span><span class="sig-name descname"><span class="n"><span class="pre">run_filename</span></span></span><br /></dt>
<dd><p>通过命令行传入的文件名：不包含 <a class="reference internal" href="../using/cmdline.xhtml#cmdoption-c"><code class="xref std std-option docutils literal notranslate"><span class="pre">-c</span></code></a> 或 <a class="reference internal" href="../using/cmdline.xhtml#cmdoption-m"><code class="xref std std-option docutils literal notranslate"><span class="pre">-m</span></code></a> 的附加命令行参数。 它会被 <a class="reference internal" href="#c.Py_RunMain" title="Py_RunMain"><code class="xref c c-func docutils literal notranslate"><span class="pre">Py_RunMain()</span></code></a> 函数使用。</p>
<p>例如，对于命令行 <code class="docutils literal notranslate"><span class="pre">python3</span> <span class="pre">script.py</span> <span class="pre">arg</span></code> 它将被设为 <code class="docutils literal notranslate"><span class="pre">script.py</span></code>。</p>
<p>另请参阅 <a class="reference internal" href="#c.PyConfig.skip_source_first_line" title="PyConfig.skip_source_first_line"><code class="xref c c-member docutils literal notranslate"><span class="pre">PyConfig.skip_source_first_line</span></code></a> 选项。</p>
<p>默认值: <code class="docutils literal notranslate"><span class="pre">NULL</span></code>.</p>
</dd></dl>

<dl class="c member">
<dt class="sig sig-object c" id="c.PyConfig.run_module">
<span class="n"><span class="pre">wchar_t</span></span><span class="w"> </span><span class="p"><span class="pre">*</span></span><span class="sig-name descname"><span class="n"><span class="pre">run_module</span></span></span><br /></dt>
<dd><p><a class="reference internal" href="../using/cmdline.xhtml#cmdoption-m"><code class="xref std std-option docutils literal notranslate"><span class="pre">-m</span></code></a> 命令行选项的值。</p>
<p>由 <a class="reference internal" href="#c.Py_RunMain" title="Py_RunMain"><code class="xref c c-func docutils literal notranslate"><span class="pre">Py_RunMain()</span></code></a> 使用。</p>
<p>默认值: <code class="docutils literal notranslate"><span class="pre">NULL</span></code>.</p>
</dd></dl>

<dl class="c member">
<dt class="sig sig-object c" id="c.PyConfig.show_ref_count">
<span class="kt"><span class="pre">int</span></span><span class="w"> </span><span class="sig-name descname"><span class="n"><span class="pre">show_ref_count</span></span></span><br /></dt>
<dd><p>Show total reference count at exit (excluding immortal objects)?</p>
<p>通过 <a class="reference internal" href="../using/cmdline.xhtml#cmdoption-X"><code class="xref std std-option docutils literal notranslate"><span class="pre">-X</span> <span class="pre">showrefcount</span></code></a> 命令行选项设置为 <code class="docutils literal notranslate"><span class="pre">1</span></code>。</p>
<p>Need a <a class="reference internal" href="../using/configure.xhtml#debug-build"><span class="std std-ref">debug build of Python</span></a> (the <code class="docutils literal notranslate"><span class="pre">Py_REF_DEBUG</span></code>
macro must be defined).</p>
<p>默认值: <code class="docutils literal notranslate"><span class="pre">0</span></code>.</p>
</dd></dl>

<dl class="c member">
<dt class="sig sig-object c" id="c.PyConfig.site_import">
<span class="kt"><span class="pre">int</span></span><span class="w"> </span><span class="sig-name descname"><span class="n"><span class="pre">site_import</span></span></span><br /></dt>
<dd><p>在启动时导入 <a class="reference internal" href="../library/site.xhtml#module-site" title="site: Module responsible for site-specific configuration."><code class="xref py py-mod docutils literal notranslate"><span class="pre">site</span></code></a> 模块？</p>
<p>如果等于零，则禁用模块站点的导入以及由此产生的与站点相关的 <a class="reference internal" href="../library/sys.xhtml#sys.path" title="sys.path"><code class="xref py py-data docutils literal notranslate"><span class="pre">sys.path</span></code></a> 操作。</p>
<p>如果以后显式地导入 <a class="reference internal" href="../library/site.xhtml#module-site" title="site: Module responsible for site-specific configuration."><code class="xref py py-mod docutils literal notranslate"><span class="pre">site</span></code></a> 模块也要禁用这些操作（如果你希望触发这些操作，请调用 <a class="reference internal" href="../library/site.xhtml#site.main" title="site.main"><code class="xref py py-func docutils literal notranslate"><span class="pre">site.main()</span></code></a> 函数）。</p>
<p>通过 <a class="reference internal" href="../using/cmdline.xhtml#cmdoption-S"><code class="xref std std-option docutils literal notranslate"><span class="pre">-S</span></code></a> 命令行选项设置为 <code class="docutils literal notranslate"><span class="pre">0</span></code>。</p>
<p><a class="reference internal" href="../library/sys.xhtml#sys.flags" title="sys.flags"><code class="xref py py-data docutils literal notranslate"><span class="pre">sys.flags.no_site</span></code></a> 会被设为 <a class="reference internal" href="#c.PyConfig.site_import" title="PyConfig.site_import"><code class="xref c c-member docutils literal notranslate"><span class="pre">site_import</span></code></a> 取反后的值。</p>
<p>默认值: <code class="docutils literal notranslate"><span class="pre">1</span></code>.</p>
</dd></dl>

<dl class="c member">
<dt class="sig sig-object c" id="c.PyConfig.skip_source_first_line">
<span class="kt"><span class="pre">int</span></span><span class="w"> </span><span class="sig-name descname"><span class="n"><span class="pre">skip_source_first_line</span></span></span><br /></dt>
<dd><p>如为非零值，则跳过 <a class="reference internal" href="#c.PyConfig.run_filename" title="PyConfig.run_filename"><code class="xref c c-member docutils literal notranslate"><span class="pre">PyConfig.run_filename</span></code></a> 源的第一行。</p>
<p>它将允许使用非 Unix 形式的 <code class="docutils literal notranslate"><span class="pre">#!cmd</span></code>。 这是针对 DOS 专属的破解操作。</p>
<p>通过 <a class="reference internal" href="../using/cmdline.xhtml#cmdoption-x"><code class="xref std std-option docutils literal notranslate"><span class="pre">-x</span></code></a> 命令行选项设置为 <code class="docutils literal notranslate"><span class="pre">1</span></code>。</p>
<p>默认值: <code class="docutils literal notranslate"><span class="pre">0</span></code>.</p>
</dd></dl>

<dl class="c member">
<dt class="sig sig-object c" id="c.PyConfig.stdio_encoding">
<span class="n"><span class="pre">wchar_t</span></span><span class="w"> </span><span class="p"><span class="pre">*</span></span><span class="sig-name descname"><span class="n"><span class="pre">stdio_encoding</span></span></span><br /></dt>
<dd></dd></dl>

<dl class="c member">
<dt class="sig sig-object c" id="c.PyConfig.stdio_errors">
<span class="n"><span class="pre">wchar_t</span></span><span class="w"> </span><span class="p"><span class="pre">*</span></span><span class="sig-name descname"><span class="n"><span class="pre">stdio_errors</span></span></span><br /></dt>
<dd><p><a class="reference internal" href="../library/sys.xhtml#sys.stdin" title="sys.stdin"><code class="xref py py-data docutils literal notranslate"><span class="pre">sys.stdin</span></code></a>、<a class="reference internal" href="../library/sys.xhtml#sys.stdout" title="sys.stdout"><code class="xref py py-data docutils literal notranslate"><span class="pre">sys.stdout</span></code></a> 和 <a class="reference internal" href="../library/sys.xhtml#sys.stderr" title="sys.stderr"><code class="xref py py-data docutils literal notranslate"><span class="pre">sys.stderr</span></code></a> 的编码格式和编码格式错误（但 <a class="reference internal" href="../library/sys.xhtml#sys.stderr" title="sys.stderr"><code class="xref py py-data docutils literal notranslate"><span class="pre">sys.stderr</span></code></a> 将始终使用 <code class="docutils literal notranslate"><span class="pre">&quot;backslashreplace&quot;</span></code> 错误处理器）。</p>
<p>If <a class="reference internal" href="init.xhtml#c.Py_SetStandardStreamEncoding" title="Py_SetStandardStreamEncoding"><code class="xref c c-func docutils literal notranslate"><span class="pre">Py_SetStandardStreamEncoding()</span></code></a> has been called, use its
<em>error</em> and <em>errors</em> arguments if they are not <code class="docutils literal notranslate"><span class="pre">NULL</span></code>.</p>
<p>如果 <span class="target" id="index-101"></span><a class="reference internal" href="../using/cmdline.xhtml#envvar-PYTHONIOENCODING"><code class="xref std std-envvar docutils literal notranslate"><span class="pre">PYTHONIOENCODING</span></code></a> 环境变量非空则会使用它。</p>
<p>默认编码格式：</p>
<ul class="simple">
<li><p>如果 <a class="reference internal" href="#c.PyPreConfig.utf8_mode" title="PyPreConfig.utf8_mode"><code class="xref c c-member docutils literal notranslate"><span class="pre">PyPreConfig.utf8_mode</span></code></a> 为非零值则使用 <code class="docutils literal notranslate"><span class="pre">&quot;UTF-8&quot;</span></code>。</p></li>
<li><p>在其他情况下，使用 <a class="reference internal" href="../glossary.xhtml#term-locale-encoding"><span class="xref std std-term">locale encoding</span></a>。</p></li>
</ul>
<p>默认错误处理器：</p>
<ul class="simple">
<li><p>在 Windows 上：使用 <code class="docutils literal notranslate"><span class="pre">&quot;surrogateescape&quot;</span></code>。</p></li>
<li><p>如果 <a class="reference internal" href="#c.PyPreConfig.utf8_mode" title="PyPreConfig.utf8_mode"><code class="xref c c-member docutils literal notranslate"><span class="pre">PyPreConfig.utf8_mode</span></code></a> 为非零值，或者如果 LC_CTYPE 语言区域为 &quot;C&quot; 或 &quot;POSIX&quot; 则使用 <code class="docutils literal notranslate"><span class="pre">&quot;surrogateescape&quot;</span></code>。</p></li>
<li><p>在其他情况下则使用 <code class="docutils literal notranslate"><span class="pre">&quot;strict&quot;</span></code>。</p></li>
</ul>
</dd></dl>

<dl class="c member">
<dt class="sig sig-object c" id="c.PyConfig.tracemalloc">
<span class="kt"><span class="pre">int</span></span><span class="w"> </span><span class="sig-name descname"><span class="n"><span class="pre">tracemalloc</span></span></span><br /></dt>
<dd><p>启用 tracemalloc？</p>
<p>如果为非零值，则在启动时调用 <a class="reference internal" href="../library/tracemalloc.xhtml#tracemalloc.start" title="tracemalloc.start"><code class="xref py py-func docutils literal notranslate"><span class="pre">tracemalloc.start()</span></code></a>。</p>
<p>通过 <a class="reference internal" href="../using/cmdline.xhtml#cmdoption-X"><code class="xref std std-option docutils literal notranslate"><span class="pre">-X</span> <span class="pre">tracemalloc=N</span></code></a> 命令行选项和 <span class="target" id="index-102"></span><a class="reference internal" href="../using/cmdline.xhtml#envvar-PYTHONTRACEMALLOC"><code class="xref std std-envvar docutils literal notranslate"><span class="pre">PYTHONTRACEMALLOC</span></code></a> 环境变量设置。</p>
<p>默认值: 在 Python 模式中为 <code class="docutils literal notranslate"><span class="pre">-1</span></code>，在隔离模式中为 <code class="docutils literal notranslate"><span class="pre">0</span></code>。</p>
</dd></dl>

<dl class="c member">
<dt class="sig sig-object c" id="c.PyConfig.perf_profiling">
<span class="kt"><span class="pre">int</span></span><span class="w"> </span><span class="sig-name descname"><span class="n"><span class="pre">perf_profiling</span></span></span><br /></dt>
<dd><p>启用与 perf 性能分析器兼容的模式？</p>
<p>如果为非零值，则初始化 perf trampoline。 更多信息参见 <a class="reference internal" href="../howto/perf_profiling.xhtml#perf-profiling"><span class="std std-ref">Python 对 Linux perf 性能分析器的支持</span></a>。</p>
<p>Set by <a class="reference internal" href="../using/cmdline.xhtml#cmdoption-X"><code class="xref std std-option docutils literal notranslate"><span class="pre">-X</span> <span class="pre">perf</span></code></a> command line option and by the
<span class="target" id="index-28"></span><a class="reference internal" href="../using/cmdline.xhtml#envvar-PYTHONPERFSUPPORT"><code class="xref std std-envvar docutils literal notranslate"><span class="pre">PYTHONPERFSUPPORT</span></code></a> environment variable.</p>
<p>默认值: <code class="docutils literal notranslate"><span class="pre">-1</span></code>。</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.12.</span></p>
</div>
</dd></dl>

<dl class="c member">
<dt class="sig sig-object c" id="c.PyConfig.use_environment">
<span class="kt"><span class="pre">int</span></span><span class="w"> </span><span class="sig-name descname"><span class="n"><span class="pre">use_environment</span></span></span><br /></dt>
<dd><p>使用 <a class="reference internal" href="../using/cmdline.xhtml#using-on-envvars"><span class="std std-ref">环境变量</span></a>？</p>
<p>如果等于零，则忽略 <a class="reference internal" href="../using/cmdline.xhtml#using-on-envvars"><span class="std std-ref">环境变量</span></a>。</p>
<p>由 <a class="reference internal" href="../using/cmdline.xhtml#cmdoption-E"><code class="xref std std-option docutils literal notranslate"><span class="pre">-E</span></code></a> 环境变量设置为 <code class="docutils literal notranslate"><span class="pre">0</span></code>。</p>
<p>默认值: 在 Python 配置中为 <code class="docutils literal notranslate"><span class="pre">1</span></code> 而在隔离配置中为 <code class="docutils literal notranslate"><span class="pre">0</span></code>。</p>
</dd></dl>

<dl class="c member">
<dt class="sig sig-object c" id="c.PyConfig.user_site_directory">
<span class="kt"><span class="pre">int</span></span><span class="w"> </span><span class="sig-name descname"><span class="n"><span class="pre">user_site_directory</span></span></span><br /></dt>
<dd><p>如果为非零值，则将用户站点目录添加到 <a class="reference internal" href="../library/sys.xhtml#sys.path" title="sys.path"><code class="xref py py-data docutils literal notranslate"><span class="pre">sys.path</span></code></a>。</p>
<p>通过 <a class="reference internal" href="../using/cmdline.xhtml#cmdoption-s"><code class="xref std std-option docutils literal notranslate"><span class="pre">-s</span></code></a> 和 <a class="reference internal" href="../using/cmdline.xhtml#cmdoption-I"><code class="xref std std-option docutils literal notranslate"><span class="pre">-I</span></code></a> 命令行选项设置为 <code class="docutils literal notranslate"><span class="pre">0</span></code>。</p>
<p>由 <span class="target" id="index-103"></span><a class="reference internal" href="../using/cmdline.xhtml#envvar-PYTHONNOUSERSITE"><code class="xref std std-envvar docutils literal notranslate"><span class="pre">PYTHONNOUSERSITE</span></code></a> 环境变量设置为 <code class="docutils literal notranslate"><span class="pre">0</span></code>。</p>
<p>默认值：在 Python 模式下为 <code class="docutils literal notranslate"><span class="pre">1</span></code>，在隔离模式下为 <code class="docutils literal notranslate"><span class="pre">0</span></code>。</p>
</dd></dl>

<dl class="c member">
<dt class="sig sig-object c" id="c.PyConfig.verbose">
<span class="kt"><span class="pre">int</span></span><span class="w"> </span><span class="sig-name descname"><span class="n"><span class="pre">verbose</span></span></span><br /></dt>
<dd><p>详细模式。 如果大于 <code class="docutils literal notranslate"><span class="pre">0</span></code>，则每次导入模块时都会打印一条消息，显示加载模块的位置（文件名或内置模块）。</p>
<p>如果大于等于 <code class="docutils literal notranslate"><span class="pre">2</span></code>，则为搜索模块时每个被检查的文件打印一条消息。 还在退出时提供关于模块清理的信息。</p>
<p>由 <a class="reference internal" href="../using/cmdline.xhtml#cmdoption-v"><code class="xref std std-option docutils literal notranslate"><span class="pre">-v</span></code></a> 命令行选项执行递增。</p>
<p>通过 <span class="target" id="index-104"></span><a class="reference internal" href="../using/cmdline.xhtml#envvar-PYTHONVERBOSE"><code class="xref std std-envvar docutils literal notranslate"><span class="pre">PYTHONVERBOSE</span></code></a> 环境变量值设置。</p>
<p>默认值: <code class="docutils literal notranslate"><span class="pre">0</span></code>.</p>
</dd></dl>

<dl class="c member">
<dt class="sig sig-object c" id="c.PyConfig.warnoptions">
<a class="reference internal" href="#c.PyWideStringList" title="PyWideStringList"><span class="n"><span class="pre">PyWideStringList</span></span></a><span class="w"> </span><span class="sig-name descname"><span class="n"><span class="pre">warnoptions</span></span></span><br /></dt>
<dd><p><a class="reference internal" href="../library/warnings.xhtml#module-warnings" title="warnings: Issue warning messages and control their disposition."><code class="xref py py-mod docutils literal notranslate"><span class="pre">warnings</span></code></a> 模块用于构建警告过滤器的选项，优先级从低到高: <a class="reference internal" href="../library/sys.xhtml#sys.warnoptions" title="sys.warnoptions"><code class="xref py py-data docutils literal notranslate"><span class="pre">sys.warnoptions</span></code></a>。</p>
<p><a class="reference internal" href="../library/warnings.xhtml#module-warnings" title="warnings: Issue warning messages and control their disposition."><code class="xref py py-mod docutils literal notranslate"><span class="pre">warnings</span></code></a> 模块以相反的顺序添加 <a class="reference internal" href="../library/sys.xhtml#sys.warnoptions" title="sys.warnoptions"><code class="xref py py-data docutils literal notranslate"><span class="pre">sys.warnoptions</span></code></a>: 最后一个 <a class="reference internal" href="#c.PyConfig.warnoptions" title="PyConfig.warnoptions"><code class="xref c c-member docutils literal notranslate"><span class="pre">PyConfig.warnoptions</span></code></a> 条目将成为 <code class="xref py py-data docutils literal notranslate"><span class="pre">warnings.filters</span></code> 的第一个条目并将最先被检查（最高优先级）。</p>
<p><a class="reference internal" href="../using/cmdline.xhtml#cmdoption-W"><code class="xref std std-option docutils literal notranslate"><span class="pre">-W</span></code></a> 命令行选项会将其值添加到 <a class="reference internal" href="#c.PyConfig.warnoptions" title="PyConfig.warnoptions"><code class="xref c c-member docutils literal notranslate"><span class="pre">warnoptions</span></code></a> 中，它可以被多次使用。</p>
<p><span class="target" id="index-105"></span><a class="reference internal" href="../using/cmdline.xhtml#envvar-PYTHONWARNINGS"><code class="xref std std-envvar docutils literal notranslate"><span class="pre">PYTHONWARNINGS</span></code></a> 环境变量也可被用于添加警告选项。 可以指定多个选项，并以逗号 (<code class="docutils literal notranslate"><span class="pre">,</span></code>) 分隔。</p>
<p>默认值：空列表。</p>
</dd></dl>

<dl class="c member">
<dt class="sig sig-object c" id="c.PyConfig.write_bytecode">
<span class="kt"><span class="pre">int</span></span><span class="w"> </span><span class="sig-name descname"><span class="n"><span class="pre">write_bytecode</span></span></span><br /></dt>
<dd><p>如果等于 <code class="docutils literal notranslate"><span class="pre">0</span></code>，Python 将不会尝试在导入源模块时写入 <code class="docutils literal notranslate"><span class="pre">.pyc</span></code> 文件。</p>
<p>通过 <a class="reference internal" href="../using/cmdline.xhtml#cmdoption-B"><code class="xref std std-option docutils literal notranslate"><span class="pre">-B</span></code></a> 命令行选项和 <span class="target" id="index-106"></span><a class="reference internal" href="../using/cmdline.xhtml#envvar-PYTHONDONTWRITEBYTECODE"><code class="xref std std-envvar docutils literal notranslate"><span class="pre">PYTHONDONTWRITEBYTECODE</span></code></a> 环境变量设置为 <code class="docutils literal notranslate"><span class="pre">0</span></code>。</p>
<p><a class="reference internal" href="../library/sys.xhtml#sys.dont_write_bytecode" title="sys.dont_write_bytecode"><code class="xref py py-data docutils literal notranslate"><span class="pre">sys.dont_write_bytecode</span></code></a> 会被初始化为 <a class="reference internal" href="#c.PyConfig.write_bytecode" title="PyConfig.write_bytecode"><code class="xref c c-member docutils literal notranslate"><span class="pre">write_bytecode</span></code></a> 取反后的值。</p>
<p>默认值: <code class="docutils literal notranslate"><span class="pre">1</span></code>.</p>
</dd></dl>

<dl class="c member">
<dt class="sig sig-object c" id="c.PyConfig.xoptions">
<a class="reference internal" href="#c.PyWideStringList" title="PyWideStringList"><span class="n"><span class="pre">PyWideStringList</span></span></a><span class="w"> </span><span class="sig-name descname"><span class="n"><span class="pre">xoptions</span></span></span><br /></dt>
<dd><p><a class="reference internal" href="../using/cmdline.xhtml#cmdoption-X"><code class="xref std std-option docutils literal notranslate"><span class="pre">-X</span></code></a> 命令行选项的值: <a class="reference internal" href="../library/sys.xhtml#sys._xoptions" title="sys._xoptions"><code class="xref py py-data docutils literal notranslate"><span class="pre">sys._xoptions</span></code></a>。</p>
<p>默认值：空列表。</p>
</dd></dl>

</dd></dl>

<p>如果 <a class="reference internal" href="#c.PyConfig.parse_argv" title="PyConfig.parse_argv"><code class="xref c c-member docutils literal notranslate"><span class="pre">parse_argv</span></code></a> 为非零值，则 <a class="reference internal" href="#c.PyConfig.argv" title="PyConfig.argv"><code class="xref c c-member docutils literal notranslate"><span class="pre">argv</span></code></a> 参数将以与常规 Python 解析 <a class="reference internal" href="../using/cmdline.xhtml#using-on-cmdline"><span class="std std-ref">命令行参数</span></a> 相同的方式被解析，并从 <a class="reference internal" href="#c.PyConfig.argv" title="PyConfig.argv"><code class="xref c c-member docutils literal notranslate"><span class="pre">argv</span></code></a> 中剥离 Python 参数。</p>
<p><a class="reference internal" href="#c.PyConfig.xoptions" title="PyConfig.xoptions"><code class="xref c c-member docutils literal notranslate"><span class="pre">xoptions</span></code></a> 选项将会被解析以设置其他选项：参见 <a class="reference internal" href="../using/cmdline.xhtml#cmdoption-X"><code class="xref std std-option docutils literal notranslate"><span class="pre">-X</span></code></a> 命令行选项。</p>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.9 版本发生变更: </span><code class="docutils literal notranslate"><span class="pre">show_alloc_count</span></code> 字段已被移除。</p>
</div>
</section>
<section id="initialization-with-pyconfig">
<h2>使用 PyConfig 初始化</h2>
<p>用于初始化 Python 的函数：</p>
<dl class="c function">
<dt class="sig sig-object c" id="c.Py_InitializeFromConfig">
<a class="reference internal" href="#c.PyStatus" title="PyStatus"><span class="n"><span class="pre">PyStatus</span></span></a><span class="w"> </span><span class="sig-name descname"><span class="n"><span class="pre">Py_InitializeFromConfig</span></span></span><span class="sig-paren">(</span><span class="k"><span class="pre">const</span></span><span class="w"> </span><a class="reference internal" href="#c.PyConfig" title="PyConfig"><span class="n"><span class="pre">PyConfig</span></span></a><span class="w"> </span><span class="p"><span class="pre">*</span></span><span class="n"><span class="pre">config</span></span><span class="sig-paren">)</span><br /></dt>
<dd><p>根据 <em>config</em> 配置来初始化 Python。</p>
</dd></dl>

<p>调用方要负责使用 <a class="reference internal" href="#c.PyStatus_Exception" title="PyStatus_Exception"><code class="xref c c-func docutils literal notranslate"><span class="pre">PyStatus_Exception()</span></code></a> 和 <a class="reference internal" href="#c.Py_ExitStatusException" title="Py_ExitStatusException"><code class="xref c c-func docutils literal notranslate"><span class="pre">Py_ExitStatusException()</span></code></a> 来处理异常（错误或退出）。</p>
<p>如果使用了 <a class="reference internal" href="import.xhtml#c.PyImport_FrozenModules" title="PyImport_FrozenModules"><code class="xref c c-func docutils literal notranslate"><span class="pre">PyImport_FrozenModules()</span></code></a>、<a class="reference internal" href="import.xhtml#c.PyImport_AppendInittab" title="PyImport_AppendInittab"><code class="xref c c-func docutils literal notranslate"><span class="pre">PyImport_AppendInittab()</span></code></a> 或 <a class="reference internal" href="import.xhtml#c.PyImport_ExtendInittab" title="PyImport_ExtendInittab"><code class="xref c c-func docutils literal notranslate"><span class="pre">PyImport_ExtendInittab()</span></code></a>，则必须在 Python 预初始化之后、Python 初始化之前设置或调用它们。 如果 Python 被多次初始化，则必须在每次初始化 Python 之前调用 <a class="reference internal" href="import.xhtml#c.PyImport_AppendInittab" title="PyImport_AppendInittab"><code class="xref c c-func docutils literal notranslate"><span class="pre">PyImport_AppendInittab()</span></code></a> 或 <a class="reference internal" href="import.xhtml#c.PyImport_ExtendInittab" title="PyImport_ExtendInittab"><code class="xref c c-func docutils literal notranslate"><span class="pre">PyImport_ExtendInittab()</span></code></a>。</p>
<p>当前的配置 (<code class="docutils literal notranslate"><span class="pre">PyConfig</span></code> 类型) 保存在 <code class="docutils literal notranslate"><span class="pre">PyInterpreterState.config</span></code> 中。</p>
<p>设置程序名称的示例:</p>
<div class="highlight-c notranslate"><div class="highlight"><pre><span></span><span class="kt">void</span><span class="w"> </span><span class="nf">init_python</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
<span class="w">    </span><span class="n">PyStatus</span><span class="w"> </span><span class="n">status</span><span class="p">;</span>

<span class="w">    </span><span class="n">PyConfig</span><span class="w"> </span><span class="n">config</span><span class="p">;</span>
<span class="w">    </span><span class="n">PyConfig_InitPythonConfig</span><span class="p">(</span><span class="o">&amp;</span><span class="n">config</span><span class="p">);</span>

<span class="w">    </span><span class="cm">/* Set the program name. Implicitly preinitialize Python. */</span>
<span class="w">    </span><span class="n">status</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">PyConfig_SetString</span><span class="p">(</span><span class="o">&amp;</span><span class="n">config</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">config</span><span class="p">.</span><span class="n">program_name</span><span class="p">,</span>
<span class="w">                                </span><span class="sa">L</span><span class="s">&quot;/path/to/my_program&quot;</span><span class="p">);</span>
<span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">PyStatus_Exception</span><span class="p">(</span><span class="n">status</span><span class="p">))</span><span class="w"> </span><span class="p">{</span>
<span class="w">        </span><span class="k">goto</span><span class="w"> </span><span class="n">exception</span><span class="p">;</span>
<span class="w">    </span><span class="p">}</span>

<span class="w">    </span><span class="n">status</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Py_InitializeFromConfig</span><span class="p">(</span><span class="o">&amp;</span><span class="n">config</span><span class="p">);</span>
<span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">PyStatus_Exception</span><span class="p">(</span><span class="n">status</span><span class="p">))</span><span class="w"> </span><span class="p">{</span>
<span class="w">        </span><span class="k">goto</span><span class="w"> </span><span class="n">exception</span><span class="p">;</span>
<span class="w">    </span><span class="p">}</span>
<span class="w">    </span><span class="n">PyConfig_Clear</span><span class="p">(</span><span class="o">&amp;</span><span class="n">config</span><span class="p">);</span>
<span class="w">    </span><span class="k">return</span><span class="p">;</span>

<span class="nl">exception</span><span class="p">:</span>
<span class="w">    </span><span class="n">PyConfig_Clear</span><span class="p">(</span><span class="o">&amp;</span><span class="n">config</span><span class="p">);</span>
<span class="w">    </span><span class="n">Py_ExitStatusException</span><span class="p">(</span><span class="n">status</span><span class="p">);</span>
<span class="p">}</span>
</pre></div>
</div>
<p>更完整的示例会修改默认配置，读取配置，然后覆盖某些参数。 请注意自 3.11 版开始，许多参数在初始化之前不会被计算，因此无法从配置结构体中读取值。在调用初始化之前设置的任何值都将不会被初始化操作改变:</p>
<div class="highlight-c notranslate"><div class="highlight"><pre><span></span><span class="n">PyStatus</span><span class="w"> </span><span class="nf">init_python</span><span class="p">(</span><span class="k">const</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="n">program_name</span><span class="p">)</span>
<span class="p">{</span>
<span class="w">    </span><span class="n">PyStatus</span><span class="w"> </span><span class="n">status</span><span class="p">;</span>

<span class="w">    </span><span class="n">PyConfig</span><span class="w"> </span><span class="n">config</span><span class="p">;</span>
<span class="w">    </span><span class="n">PyConfig_InitPythonConfig</span><span class="p">(</span><span class="o">&amp;</span><span class="n">config</span><span class="p">);</span>

<span class="w">    </span><span class="cm">/* Set the program name before reading the configuration</span>
<span class="cm">       (decode byte string from the locale encoding).</span>

<span class="cm">       Implicitly preinitialize Python. */</span>
<span class="w">    </span><span class="n">status</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">PyConfig_SetBytesString</span><span class="p">(</span><span class="o">&amp;</span><span class="n">config</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">config</span><span class="p">.</span><span class="n">program_name</span><span class="p">,</span>
<span class="w">                                     </span><span class="n">program_name</span><span class="p">);</span>
<span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">PyStatus_Exception</span><span class="p">(</span><span class="n">status</span><span class="p">))</span><span class="w"> </span><span class="p">{</span>
<span class="w">        </span><span class="k">goto</span><span class="w"> </span><span class="n">done</span><span class="p">;</span>
<span class="w">    </span><span class="p">}</span>

<span class="w">    </span><span class="cm">/* Read all configuration at once */</span>
<span class="w">    </span><span class="n">status</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">PyConfig_Read</span><span class="p">(</span><span class="o">&amp;</span><span class="n">config</span><span class="p">);</span>
<span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">PyStatus_Exception</span><span class="p">(</span><span class="n">status</span><span class="p">))</span><span class="w"> </span><span class="p">{</span>
<span class="w">        </span><span class="k">goto</span><span class="w"> </span><span class="n">done</span><span class="p">;</span>
<span class="w">    </span><span class="p">}</span>

<span class="w">    </span><span class="cm">/* Specify sys.path explicitly */</span>
<span class="w">    </span><span class="cm">/* If you want to modify the default set of paths, finish</span>
<span class="cm">       initialization first and then use PySys_GetObject(&quot;path&quot;) */</span>
<span class="w">    </span><span class="n">config</span><span class="p">.</span><span class="n">module_search_paths_set</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span>
<span class="w">    </span><span class="n">status</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">PyWideStringList_Append</span><span class="p">(</span><span class="o">&amp;</span><span class="n">config</span><span class="p">.</span><span class="n">module_search_paths</span><span class="p">,</span>
<span class="w">                                     </span><span class="sa">L</span><span class="s">&quot;/path/to/stdlib&quot;</span><span class="p">);</span>
<span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">PyStatus_Exception</span><span class="p">(</span><span class="n">status</span><span class="p">))</span><span class="w"> </span><span class="p">{</span>
<span class="w">        </span><span class="k">goto</span><span class="w"> </span><span class="n">done</span><span class="p">;</span>
<span class="w">    </span><span class="p">}</span>
<span class="w">    </span><span class="n">status</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">PyWideStringList_Append</span><span class="p">(</span><span class="o">&amp;</span><span class="n">config</span><span class="p">.</span><span class="n">module_search_paths</span><span class="p">,</span>
<span class="w">                                     </span><span class="sa">L</span><span class="s">&quot;/path/to/more/modules&quot;</span><span class="p">);</span>
<span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">PyStatus_Exception</span><span class="p">(</span><span class="n">status</span><span class="p">))</span><span class="w"> </span><span class="p">{</span>
<span class="w">        </span><span class="k">goto</span><span class="w"> </span><span class="n">done</span><span class="p">;</span>
<span class="w">    </span><span class="p">}</span>

<span class="w">    </span><span class="cm">/* Override executable computed by PyConfig_Read() */</span>
<span class="w">    </span><span class="n">status</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">PyConfig_SetString</span><span class="p">(</span><span class="o">&amp;</span><span class="n">config</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">config</span><span class="p">.</span><span class="n">executable</span><span class="p">,</span>
<span class="w">                                </span><span class="sa">L</span><span class="s">&quot;/path/to/my_executable&quot;</span><span class="p">);</span>
<span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">PyStatus_Exception</span><span class="p">(</span><span class="n">status</span><span class="p">))</span><span class="w"> </span><span class="p">{</span>
<span class="w">        </span><span class="k">goto</span><span class="w"> </span><span class="n">done</span><span class="p">;</span>
<span class="w">    </span><span class="p">}</span>

<span class="w">    </span><span class="n">status</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Py_InitializeFromConfig</span><span class="p">(</span><span class="o">&amp;</span><span class="n">config</span><span class="p">);</span>

<span class="nl">done</span><span class="p">:</span>
<span class="w">    </span><span class="n">PyConfig_Clear</span><span class="p">(</span><span class="o">&amp;</span><span class="n">config</span><span class="p">);</span>
<span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">status</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</div>
</section>
<section id="isolated-configuration">
<span id="init-isolated-conf"></span><h2>隔离配置</h2>
<p><a class="reference internal" href="#c.PyPreConfig_InitIsolatedConfig" title="PyPreConfig_InitIsolatedConfig"><code class="xref c c-func docutils literal notranslate"><span class="pre">PyPreConfig_InitIsolatedConfig()</span></code></a> 和 <a class="reference internal" href="#c.PyConfig_InitIsolatedConfig" title="PyConfig_InitIsolatedConfig"><code class="xref c c-func docutils literal notranslate"><span class="pre">PyConfig_InitIsolatedConfig()</span></code></a> 函数会创建一个配置来将 Python 与系统隔离开来。 例如，将 Python 嵌入到某个应用程序。</p>
<p>该配置将忽略全局配置变量、环境变量、命令行参数 (<a class="reference internal" href="#c.PyConfig.argv" title="PyConfig.argv"><code class="xref c c-member docutils literal notranslate"><span class="pre">PyConfig.argv</span></code></a> 将不会被解析) 和用户站点目录。 C 标准流 (例如 <code class="docutils literal notranslate"><span class="pre">stdout</span></code>) 和 LC_CTYPE 语言区域将保持不变。 信号处理器将不会被安装。</p>
<p>该配置仍然会使用配置文件来确定未被指明的路径。 请确保指定了 <a class="reference internal" href="#c.PyConfig.home" title="PyConfig.home"><code class="xref c c-member docutils literal notranslate"><span class="pre">PyConfig.home</span></code></a> 以避免计算默认的路径配置。</p>
</section>
<section id="python-configuration">
<span id="init-python-config"></span><h2>Python 配置</h2>
<p><a class="reference internal" href="#c.PyPreConfig_InitPythonConfig" title="PyPreConfig_InitPythonConfig"><code class="xref c c-func docutils literal notranslate"><span class="pre">PyPreConfig_InitPythonConfig()</span></code></a> 和 <a class="reference internal" href="#c.PyConfig_InitPythonConfig" title="PyConfig_InitPythonConfig"><code class="xref c c-func docutils literal notranslate"><span class="pre">PyConfig_InitPythonConfig()</span></code></a> 函数会创建一个配置来构建一个行为与常规 Python 相同的自定义 Python。</p>
<p>环境变量和命令行参数将被用于配置 Python，而全局配置变量将被忽略。</p>
<p>此函数将根据 LC_CTYPE 语言区域、<span class="target" id="index-107"></span><a class="reference internal" href="../using/cmdline.xhtml#envvar-PYTHONUTF8"><code class="xref std std-envvar docutils literal notranslate"><span class="pre">PYTHONUTF8</span></code></a> 和 <span class="target" id="index-108"></span><a class="reference internal" href="../using/cmdline.xhtml#envvar-PYTHONCOERCECLOCALE"><code class="xref std std-envvar docutils literal notranslate"><span class="pre">PYTHONCOERCECLOCALE</span></code></a> 环境变量启用 C 语言区域强制转换 (<span class="target" id="index-109"></span><a class="pep reference external" href="https://peps.python.org/pep-0538/"><strong>PEP 538</strong></a><span class="link-target"> [https://peps.python.org/pep-0538/]</span>) 和 <a class="reference internal" href="../library/os.xhtml#utf8-mode"><span class="std std-ref">Python UTF-8 模式</span></a> (<span class="target" id="index-110"></span><a class="pep reference external" href="https://peps.python.org/pep-0540/"><strong>PEP 540</strong></a><span class="link-target"> [https://peps.python.org/pep-0540/]</span>)。</p>
</section>
<section id="python-path-configuration">
<span id="init-path-config"></span><h2>Python 路径配置</h2>
<p><a class="reference internal" href="#c.PyConfig" title="PyConfig"><code class="xref c c-type docutils literal notranslate"><span class="pre">PyConfig</span></code></a> 包含多个用于路径配置的字段：</p>
<ul class="simple">
<li><p>路径配置输入：</p>
<ul>
<li><p><a class="reference internal" href="#c.PyConfig.home" title="PyConfig.home"><code class="xref c c-member docutils literal notranslate"><span class="pre">PyConfig.home</span></code></a></p></li>
<li><p><a class="reference internal" href="#c.PyConfig.platlibdir" title="PyConfig.platlibdir"><code class="xref c c-member docutils literal notranslate"><span class="pre">PyConfig.platlibdir</span></code></a></p></li>
<li><p><a class="reference internal" href="#c.PyConfig.pathconfig_warnings" title="PyConfig.pathconfig_warnings"><code class="xref c c-member docutils literal notranslate"><span class="pre">PyConfig.pathconfig_warnings</span></code></a></p></li>
<li><p><a class="reference internal" href="#c.PyConfig.program_name" title="PyConfig.program_name"><code class="xref c c-member docutils literal notranslate"><span class="pre">PyConfig.program_name</span></code></a></p></li>
<li><p><a class="reference internal" href="#c.PyConfig.pythonpath_env" title="PyConfig.pythonpath_env"><code class="xref c c-member docutils literal notranslate"><span class="pre">PyConfig.pythonpath_env</span></code></a></p></li>
<li><p>当前工作目录：用于获取绝对路径</p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">PATH</span></code> 环境变量用于获取程序的完整路径 (来自 <a class="reference internal" href="#c.PyConfig.program_name" title="PyConfig.program_name"><code class="xref c c-member docutils literal notranslate"><span class="pre">PyConfig.program_name</span></code></a>)</p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">__PYVENV_LAUNCHER__</span></code> 环境变量</p></li>
<li><p>（仅限 Windows only） 注册表 HKEY_CURRENT_USER 和 HKEY_LOCAL_MACHINE 的 &quot;SoftwarePythonPythonCoreX.YPythonPath&quot; 项下的应用程序目录（其中 X.Y 为 Python 版本）。</p></li>
</ul>
</li>
<li><p>路径配置输出字段：</p>
<ul>
<li><p><a class="reference internal" href="#c.PyConfig.base_exec_prefix" title="PyConfig.base_exec_prefix"><code class="xref c c-member docutils literal notranslate"><span class="pre">PyConfig.base_exec_prefix</span></code></a></p></li>
<li><p><a class="reference internal" href="#c.PyConfig.base_executable" title="PyConfig.base_executable"><code class="xref c c-member docutils literal notranslate"><span class="pre">PyConfig.base_executable</span></code></a></p></li>
<li><p><a class="reference internal" href="#c.PyConfig.base_prefix" title="PyConfig.base_prefix"><code class="xref c c-member docutils literal notranslate"><span class="pre">PyConfig.base_prefix</span></code></a></p></li>
<li><p><a class="reference internal" href="#c.PyConfig.exec_prefix" title="PyConfig.exec_prefix"><code class="xref c c-member docutils literal notranslate"><span class="pre">PyConfig.exec_prefix</span></code></a></p></li>
<li><p><a class="reference internal" href="#c.PyConfig.executable" title="PyConfig.executable"><code class="xref c c-member docutils literal notranslate"><span class="pre">PyConfig.executable</span></code></a></p></li>
<li><p><a class="reference internal" href="#c.PyConfig.module_search_paths_set" title="PyConfig.module_search_paths_set"><code class="xref c c-member docutils literal notranslate"><span class="pre">PyConfig.module_search_paths_set</span></code></a>,
<a class="reference internal" href="#c.PyConfig.module_search_paths" title="PyConfig.module_search_paths"><code class="xref c c-member docutils literal notranslate"><span class="pre">PyConfig.module_search_paths</span></code></a></p></li>
<li><p><a class="reference internal" href="#c.PyConfig.prefix" title="PyConfig.prefix"><code class="xref c c-member docutils literal notranslate"><span class="pre">PyConfig.prefix</span></code></a></p></li>
</ul>
</li>
</ul>
<p>如果至少有一个“输出字段”未被设置，Python 就会计算路径配置来填充未设置的字段。 如果 <a class="reference internal" href="#c.PyConfig.module_search_paths_set" title="PyConfig.module_search_paths_set"><code class="xref c c-member docutils literal notranslate"><span class="pre">module_search_paths_set</span></code></a> 等于 <code class="docutils literal notranslate"><span class="pre">0</span></code>，则 <a class="reference internal" href="#c.PyConfig.module_search_paths" title="PyConfig.module_search_paths"><code class="xref c c-member docutils literal notranslate"><span class="pre">module_search_paths</span></code></a> 将被覆盖并且 <a class="reference internal" href="#c.PyConfig.module_search_paths_set" title="PyConfig.module_search_paths_set"><code class="xref c c-member docutils literal notranslate"><span class="pre">module_search_paths_set</span></code></a> 将被设置为 <code class="docutils literal notranslate"><span class="pre">1</span></code>。</p>
<p>通过显式地设置上述所有路径配置输出字段可以完全忽略计算默认路径配置的函数。 即使字符串不为空也会被视为已设置。 如果 <code class="docutils literal notranslate"><span class="pre">module_search_paths_set</span></code> 被设为 <code class="docutils literal notranslate"><span class="pre">1</span></code> 则 <code class="docutils literal notranslate"><span class="pre">module_search_paths</span></code> 会被视为已设置。 在这种情况下，<code class="docutils literal notranslate"><span class="pre">module_search_paths</span></code> 将不加修改地被使用。</p>
<p>将 <a class="reference internal" href="#c.PyConfig.pathconfig_warnings" title="PyConfig.pathconfig_warnings"><code class="xref c c-member docutils literal notranslate"><span class="pre">pathconfig_warnings</span></code></a> 设为 <code class="docutils literal notranslate"><span class="pre">0</span></code> 以便在计算路径配置时抑制警告（仅限 Unix，Windows 不会记录任何警告）。</p>
<p>如果 <a class="reference internal" href="#c.PyConfig.base_prefix" title="PyConfig.base_prefix"><code class="xref c c-member docutils literal notranslate"><span class="pre">base_prefix</span></code></a> 或 <a class="reference internal" href="#c.PyConfig.base_exec_prefix" title="PyConfig.base_exec_prefix"><code class="xref c c-member docutils literal notranslate"><span class="pre">base_exec_prefix</span></code></a> 字段未设置，它们将分别从 <a class="reference internal" href="#c.PyConfig.prefix" title="PyConfig.prefix"><code class="xref c c-member docutils literal notranslate"><span class="pre">prefix</span></code></a> 和 <a class="reference internal" href="#c.PyConfig.exec_prefix" title="PyConfig.exec_prefix"><code class="xref c c-member docutils literal notranslate"><span class="pre">exec_prefix</span></code></a> 继承其值。</p>
<p><a class="reference internal" href="#c.Py_RunMain" title="Py_RunMain"><code class="xref c c-func docutils literal notranslate"><span class="pre">Py_RunMain()</span></code></a> 和 <a class="reference internal" href="veryhigh.xhtml#c.Py_Main" title="Py_Main"><code class="xref c c-func docutils literal notranslate"><span class="pre">Py_Main()</span></code></a> 将修改 <a class="reference internal" href="../library/sys.xhtml#sys.path" title="sys.path"><code class="xref py py-data docutils literal notranslate"><span class="pre">sys.path</span></code></a>:</p>
<ul class="simple">
<li><p>如果 <a class="reference internal" href="#c.PyConfig.run_filename" title="PyConfig.run_filename"><code class="xref c c-member docutils literal notranslate"><span class="pre">run_filename</span></code></a> 已设置并且是一个包含 <code class="docutils literal notranslate"><span class="pre">__main__.py</span></code> 脚本的目录，则会将 <a class="reference internal" href="#c.PyConfig.run_filename" title="PyConfig.run_filename"><code class="xref c c-member docutils literal notranslate"><span class="pre">run_filename</span></code></a> 添加到 <a class="reference internal" href="../library/sys.xhtml#sys.path" title="sys.path"><code class="xref py py-data docutils literal notranslate"><span class="pre">sys.path</span></code></a> 的开头。</p></li>
<li><p>如果 <a class="reference internal" href="#c.PyConfig.isolated" title="PyConfig.isolated"><code class="xref c c-member docutils literal notranslate"><span class="pre">isolated</span></code></a> 为零：</p>
<ul>
<li><p>如果设置了 <a class="reference internal" href="#c.PyConfig.run_module" title="PyConfig.run_module"><code class="xref c c-member docutils literal notranslate"><span class="pre">run_module</span></code></a>，则将当前目录添加到 <a class="reference internal" href="../library/sys.xhtml#sys.path" title="sys.path"><code class="xref py py-data docutils literal notranslate"><span class="pre">sys.path</span></code></a> 的开头。 如果无法读取当前目录则不执行任何操作。</p></li>
<li><p>如果设置了 <a class="reference internal" href="#c.PyConfig.run_filename" title="PyConfig.run_filename"><code class="xref c c-member docutils literal notranslate"><span class="pre">run_filename</span></code></a>，则将文件名的目录添加到 <a class="reference internal" href="../library/sys.xhtml#sys.path" title="sys.path"><code class="xref py py-data docutils literal notranslate"><span class="pre">sys.path</span></code></a> 的开头。</p></li>
<li><p>在其他情况下，则将一个空字符串添加到 <a class="reference internal" href="../library/sys.xhtml#sys.path" title="sys.path"><code class="xref py py-data docutils literal notranslate"><span class="pre">sys.path</span></code></a> 的开头。</p></li>
</ul>
</li>
</ul>
<p>如果 <a class="reference internal" href="#c.PyConfig.site_import" title="PyConfig.site_import"><code class="xref c c-member docutils literal notranslate"><span class="pre">site_import</span></code></a> 为非零值，则 <a class="reference internal" href="../library/sys.xhtml#sys.path" title="sys.path"><code class="xref py py-data docutils literal notranslate"><span class="pre">sys.path</span></code></a> 可通过 <a class="reference internal" href="../library/site.xhtml#module-site" title="site: Module responsible for site-specific configuration."><code class="xref py py-mod docutils literal notranslate"><span class="pre">site</span></code></a> 模块修改。 如果 <a class="reference internal" href="#c.PyConfig.user_site_directory" title="PyConfig.user_site_directory"><code class="xref c c-member docutils literal notranslate"><span class="pre">user_site_directory</span></code></a> 为非零值且用户的 site-package 目录存在，则 <a class="reference internal" href="../library/site.xhtml#module-site" title="site: Module responsible for site-specific configuration."><code class="xref py py-mod docutils literal notranslate"><span class="pre">site</span></code></a> 模块会将用户的 site-package 目录附加到 <a class="reference internal" href="../library/sys.xhtml#sys.path" title="sys.path"><code class="xref py py-data docutils literal notranslate"><span class="pre">sys.path</span></code></a>。</p>
<p>路径配置会使用以下配置文件：</p>
<ul class="simple">
<li><p><code class="docutils literal notranslate"><span class="pre">pyvenv.cfg</span></code></p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">._pth</span></code> 文件 (例如: <code class="docutils literal notranslate"><span class="pre">python._pth</span></code>)</p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">pybuilddir.txt</span></code> (仅Unix)</p></li>
</ul>
<p>如果存在 <code class="docutils literal notranslate"><span class="pre">._pth</span></code> 文件:</p>
<ul class="simple">
<li><p>将 <a class="reference internal" href="#c.PyConfig.isolated" title="PyConfig.isolated"><code class="xref c c-member docutils literal notranslate"><span class="pre">isolated</span></code></a> 设为 <code class="docutils literal notranslate"><span class="pre">1</span></code>。</p></li>
<li><p>将 <a class="reference internal" href="#c.PyConfig.use_environment" title="PyConfig.use_environment"><code class="xref c c-member docutils literal notranslate"><span class="pre">use_environment</span></code></a> 设为 <code class="docutils literal notranslate"><span class="pre">0</span></code>。</p></li>
<li><p>将 <a class="reference internal" href="#c.PyConfig.site_import" title="PyConfig.site_import"><code class="xref c c-member docutils literal notranslate"><span class="pre">site_import</span></code></a> 设为 <code class="docutils literal notranslate"><span class="pre">0</span></code>。</p></li>
<li><p>将 <a class="reference internal" href="#c.PyConfig.safe_path" title="PyConfig.safe_path"><code class="xref c c-member docutils literal notranslate"><span class="pre">safe_path</span></code></a> 设为 <code class="docutils literal notranslate"><span class="pre">1</span></code>。</p></li>
</ul>
<p>The <code class="docutils literal notranslate"><span class="pre">__PYVENV_LAUNCHER__</span></code> environment variable is used to set
<a class="reference internal" href="#c.PyConfig.base_executable" title="PyConfig.base_executable"><code class="xref c c-member docutils literal notranslate"><span class="pre">PyConfig.base_executable</span></code></a></p>
</section>
<section id="py-runmain">
<h2>Py_RunMain()</h2>
<dl class="c function">
<dt class="sig sig-object c" id="c.Py_RunMain">
<span class="kt"><span class="pre">int</span></span><span class="w"> </span><span class="sig-name descname"><span class="n"><span class="pre">Py_RunMain</span></span></span><span class="sig-paren">(</span><span class="kt"><span class="pre">void</span></span><span class="sig-paren">)</span><br /></dt>
<dd><p>执行在命令行或配置中指定的命令 (<a class="reference internal" href="#c.PyConfig.run_command" title="PyConfig.run_command"><code class="xref c c-member docutils literal notranslate"><span class="pre">PyConfig.run_command</span></code></a>)、脚本 (<a class="reference internal" href="#c.PyConfig.run_filename" title="PyConfig.run_filename"><code class="xref c c-member docutils literal notranslate"><span class="pre">PyConfig.run_filename</span></code></a>) 或模块 (<a class="reference internal" href="#c.PyConfig.run_module" title="PyConfig.run_module"><code class="xref c c-member docutils literal notranslate"><span class="pre">PyConfig.run_module</span></code></a>)。</p>
<p>在默认情况下如果使用了 <a class="reference internal" href="../using/cmdline.xhtml#cmdoption-i"><code class="xref std std-option docutils literal notranslate"><span class="pre">-i</span></code></a> 选项，则运行 REPL。</p>
<p>最后，终结化 Python 并返回一个可传递给 <code class="docutils literal notranslate"><span class="pre">exit()</span></code> 函数的退出状态。</p>
</dd></dl>

<p>请参阅 <a class="reference internal" href="#init-python-config"><span class="std std-ref">Python 配置</span></a> 查看一个使用 <a class="reference internal" href="#c.Py_RunMain" title="Py_RunMain"><code class="xref c c-func docutils literal notranslate"><span class="pre">Py_RunMain()</span></code></a> 在隔离模式下始终运行自定义 Python 的示例。</p>
</section>
<section id="py-getargcargv">
<h2>Py_GetArgcArgv()</h2>
<dl class="c function">
<dt class="sig sig-object c" id="c.Py_GetArgcArgv">
<span class="kt"><span class="pre">void</span></span><span class="w"> </span><span class="sig-name descname"><span class="n"><span class="pre">Py_GetArgcArgv</span></span></span><span class="sig-paren">(</span><span class="kt"><span class="pre">int</span></span><span class="w"> </span><span class="p"><span class="pre">*</span></span><span class="n"><span class="pre">argc</span></span>, <span class="n"><span class="pre">wchar_t</span></span><span class="w"> </span><span class="p"><span class="pre">*</span></span><span class="p"><span class="pre">*</span></span><span class="p"><span class="pre">*</span></span><span class="n"><span class="pre">argv</span></span><span class="sig-paren">)</span><br /></dt>
<dd><p>在 Python 修改原始命令行参数之前，获取这些参数。</p>
<p>另请参阅 <a class="reference internal" href="#c.PyConfig.orig_argv" title="PyConfig.orig_argv"><code class="xref c c-member docutils literal notranslate"><span class="pre">PyConfig.orig_argv</span></code></a> 成员。</p>
</dd></dl>

</section>
<section id="multi-phase-initialization-private-provisional-api">
<h2>多阶段初始化私有暂定 API</h2>
<p>本节介绍的私有暂定 API 引入了多阶段初始化，它是 <span class="target" id="index-111"></span><a class="pep reference external" href="https://peps.python.org/pep-0432/"><strong>PEP 432</strong></a><span class="link-target"> [https://peps.python.org/pep-0432/]</span> 的核心特性：</p>
<ul class="simple">
<li><p>“核心”初始化阶段，“最小化的基本 Python”：</p>
<ul>
<li><p>内置类型；</p></li>
<li><p>内置异常；</p></li>
<li><p>内置和已冻结模块；</p></li>
<li><p><a class="reference internal" href="../library/sys.xhtml#module-sys" title="sys: Access system-specific parameters and functions."><code class="xref py py-mod docutils literal notranslate"><span class="pre">sys</span></code></a> 模块仅部分初始化（例如: <a class="reference internal" href="../library/sys.xhtml#sys.path" title="sys.path"><code class="xref py py-data docutils literal notranslate"><span class="pre">sys.path</span></code></a> 尚不存在）。</p></li>
</ul>
</li>
<li><p>&quot;主要&quot;初始化阶段，Python 被完全初始化：</p>
<ul>
<li><p>安装并配置 <a class="reference internal" href="../library/importlib.xhtml#module-importlib" title="importlib: The implementation of the import machinery."><code class="xref py py-mod docutils literal notranslate"><span class="pre">importlib</span></code></a>；</p></li>
<li><p>应用 <a class="reference internal" href="#init-path-config"><span class="std std-ref">路径配置</span></a>；</p></li>
<li><p>安装信号处理器；</p></li>
<li><p>完成 <a class="reference internal" href="../library/sys.xhtml#module-sys" title="sys: Access system-specific parameters and functions."><code class="xref py py-mod docutils literal notranslate"><span class="pre">sys</span></code></a> 模块初始化 (例如：创建 <a class="reference internal" href="../library/sys.xhtml#sys.stdout" title="sys.stdout"><code class="xref py py-data docutils literal notranslate"><span class="pre">sys.stdout</span></code></a> 和 <a class="reference internal" href="../library/sys.xhtml#sys.path" title="sys.path"><code class="xref py py-data docutils literal notranslate"><span class="pre">sys.path</span></code></a>)；</p></li>
<li><p>启用 <a class="reference internal" href="../library/faulthandler.xhtml#module-faulthandler" title="faulthandler: Dump the Python traceback."><code class="xref py py-mod docutils literal notranslate"><span class="pre">faulthandler</span></code></a> 和 <a class="reference internal" href="../library/tracemalloc.xhtml#module-tracemalloc" title="tracemalloc: Trace memory allocations."><code class="xref py py-mod docutils literal notranslate"><span class="pre">tracemalloc</span></code></a> 等可选功能；</p></li>
<li><p>导入 <a class="reference internal" href="../library/site.xhtml#module-site" title="site: Module responsible for site-specific configuration."><code class="xref py py-mod docutils literal notranslate"><span class="pre">site</span></code></a> 模块；</p></li>
<li><p>等等.</p></li>
</ul>
</li>
</ul>
<p>私有临时API：</p>
<ul class="simple">
<li><p><code class="xref c c-member docutils literal notranslate"><span class="pre">PyConfig._init_main</span></code>: 如果设为 <code class="docutils literal notranslate"><span class="pre">0</span></code>，<a class="reference internal" href="#c.Py_InitializeFromConfig" title="Py_InitializeFromConfig"><code class="xref c c-func docutils literal notranslate"><span class="pre">Py_InitializeFromConfig()</span></code></a> 将在“核心”初始化阶段停止。</p></li>
</ul>
<dl class="c function">
<dt class="sig sig-object c" id="c._Py_InitializeMain">
<a class="reference internal" href="#c.PyStatus" title="PyStatus"><span class="n"><span class="pre">PyStatus</span></span></a><span class="w"> </span><span class="sig-name descname"><span class="n"><span class="pre">_Py_InitializeMain</span></span></span><span class="sig-paren">(</span><span class="kt"><span class="pre">void</span></span><span class="sig-paren">)</span><br /></dt>
<dd><p>进入“主要”初始化阶段，完成 Python 初始化。</p>
</dd></dl>

<p>在“核心”阶段不会导入任何模块，也不会配置 <code class="docutils literal notranslate"><span class="pre">importlib</span></code> 模块: <a class="reference internal" href="#init-path-config"><span class="std std-ref">路径配置</span></a> 只会在“主要”阶段期间应用。 这可能允许在 Python 中定制 Python 以覆盖或微调 <a class="reference internal" href="#init-path-config"><span class="std std-ref">路径配置</span></a>，也可能会安装自定义的 <a class="reference internal" href="../library/sys.xhtml#sys.meta_path" title="sys.meta_path"><code class="xref py py-data docutils literal notranslate"><span class="pre">sys.meta_path</span></code></a> 导入器或导入钩子等等。</p>
<p>在核心阶段之后主要阶段之前，将有可能在 Python 中计算 <a class="reference internal" href="#init-path-config"><span class="std std-ref">路径配置</span></a>，这是 <span class="target" id="index-112"></span><a class="pep reference external" href="https://peps.python.org/pep-0432/"><strong>PEP 432</strong></a><span class="link-target"> [https://peps.python.org/pep-0432/]</span> 的动机之一。</p>
<p>“核心”阶段并没有完整的定义：在这一阶段什么应该可用什么不应该可用都尚未被指明。 该 API 被标记为私有和暂定的：也就是说该 API 可以随时被修改甚至被移除直到设计出适用的公共 API。</p>
<p>在“核心”和“主要”初始化阶段之间运行 Python 代码的示例:</p>
<div class="highlight-c notranslate"><div class="highlight"><pre><span></span><span class="kt">void</span><span class="w"> </span><span class="nf">init_python</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
<span class="w">    </span><span class="n">PyStatus</span><span class="w"> </span><span class="n">status</span><span class="p">;</span>

<span class="w">    </span><span class="n">PyConfig</span><span class="w"> </span><span class="n">config</span><span class="p">;</span>
<span class="w">    </span><span class="n">PyConfig_InitPythonConfig</span><span class="p">(</span><span class="o">&amp;</span><span class="n">config</span><span class="p">);</span>
<span class="w">    </span><span class="n">config</span><span class="p">.</span><span class="n">_init_main</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span>

<span class="w">    </span><span class="cm">/* ... customize &#39;config&#39; configuration ... */</span>

<span class="w">    </span><span class="n">status</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Py_InitializeFromConfig</span><span class="p">(</span><span class="o">&amp;</span><span class="n">config</span><span class="p">);</span>
<span class="w">    </span><span class="n">PyConfig_Clear</span><span class="p">(</span><span class="o">&amp;</span><span class="n">config</span><span class="p">);</span>
<span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">PyStatus_Exception</span><span class="p">(</span><span class="n">status</span><span class="p">))</span><span class="w"> </span><span class="p">{</span>
<span class="w">        </span><span class="n">Py_ExitStatusException</span><span class="p">(</span><span class="n">status</span><span class="p">);</span>
<span class="w">    </span><span class="p">}</span>

<span class="w">    </span><span class="cm">/* Use sys.stderr because sys.stdout is only created</span>
<span class="cm">       by _Py_InitializeMain() */</span>
<span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">res</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">PyRun_SimpleString</span><span class="p">(</span>
<span class="w">        </span><span class="s">&quot;import sys; &quot;</span>
<span class="w">        </span><span class="s">&quot;print(&#39;Run Python code before _Py_InitializeMain&#39;, &quot;</span>
<span class="w">               </span><span class="s">&quot;file=sys.stderr)&quot;</span><span class="p">);</span>
<span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">res</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="mi">0</span><span class="p">)</span><span class="w"> </span><span class="p">{</span>
<span class="w">        </span><span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
<span class="w">    </span><span class="p">}</span>

<span class="w">    </span><span class="cm">/* ... put more configuration code here ... */</span>

<span class="w">    </span><span class="n">status</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">_Py_InitializeMain</span><span class="p">();</span>
<span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">PyStatus_Exception</span><span class="p">(</span><span class="n">status</span><span class="p">))</span><span class="w"> </span><span class="p">{</span>
<span class="w">        </span><span class="n">Py_ExitStatusException</span><span class="p">(</span><span class="n">status</span><span class="p">);</span>
<span class="w">    </span><span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
</section>
</section>


            <div class="clearer"></div>
          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>