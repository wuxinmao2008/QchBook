<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" /><meta name="viewport" content="width=device-width, initial-scale=1" />
<meta property="og:title" content="类型注解对象" />
<meta property="og:type" content="website" />
<meta property="og:url" content="https://docs.python.org/3/c-api/typehints.xhtml" />
<meta property="og:site_name" content="Python documentation" />
<meta property="og:description" content="提供几种用于类型提示的内置类型。 目前存在两种类型 -- GenericAlias 和 Union 。 只有 GenericAlias 会向 C 开放。" />
<meta property="og:image" content="https://docs.python.org/3/_static/og-image.png" />
<meta property="og:image:alt" content="Python documentation" />
<meta name="description" content="提供几种用于类型提示的内置类型。 目前存在两种类型 -- GenericAlias 和 Union 。 只有 GenericAlias 会向 C 开放。" />
<meta property="og:image:width" content="200" />
<meta property="og:image:height" content="200" />
<meta name="theme-color" content="#3776ab" />

    <title>类型注解对象</title>
    <link rel="stylesheet" type="text/css" href="../_static/pygments.css" />
    <link rel="stylesheet" type="text/css" href="../_static/epub.css" />
    <link rel="canonical" href="https://docs.python.org/3/c-api/typehints.html" />
    
      
    

    
    <style>
      @media only screen {
        table.full-width-table {
            width: 100%;
        }
      }
    </style>
 

  </head><body>


    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <section id="objects-for-type-hinting">
<span id="typehintobjects"></span><h1>类型注解对象</h1>
<p>提供几种用于类型提示的内置类型。 目前存在两种类型 -- <a class="reference internal" href="../library/stdtypes.xhtml#types-genericalias"><span class="std std-ref">GenericAlias</span></a> 和 <a class="reference internal" href="../library/stdtypes.xhtml#types-union"><span class="std std-ref">Union</span></a>。 只有 <code class="docutils literal notranslate"><span class="pre">GenericAlias</span></code> 会向 C 开放。</p>
<dl class="c function">
<dt class="sig sig-object c" id="c.Py_GenericAlias">
<a class="reference internal" href="structures.xhtml#c.PyObject" title="PyObject"><span class="n"><span class="pre">PyObject</span></span></a><span class="w"> </span><span class="p"><span class="pre">*</span></span><span class="sig-name descname"><span class="n"><span class="pre">Py_GenericAlias</span></span></span><span class="sig-paren">(</span><a class="reference internal" href="structures.xhtml#c.PyObject" title="PyObject"><span class="n"><span class="pre">PyObject</span></span></a><span class="w"> </span><span class="p"><span class="pre">*</span></span><span class="n"><span class="pre">origin</span></span>, <a class="reference internal" href="structures.xhtml#c.PyObject" title="PyObject"><span class="n"><span class="pre">PyObject</span></span></a><span class="w"> </span><span class="p"><span class="pre">*</span></span><span class="n"><span class="pre">args</span></span><span class="sig-paren">)</span><br /></dt>
<dd><em class="stableabi"> 属于 <a class="reference internal" href="stable.xhtml#stable"><span class="std std-ref">稳定 ABI</span></a> 自 3.9 版起.</em><p>创建一个 <a class="reference internal" href="../library/stdtypes.xhtml#types-genericalias"><span class="std std-ref">GenericAlias</span></a> 对象。 相当于调用 Python 类 <a class="reference internal" href="../library/types.xhtml#types.GenericAlias" title="types.GenericAlias"><code class="xref py py-class docutils literal notranslate"><span class="pre">types.GenericAlias</span></code></a>。 参数 <em>origin</em> 和 <em>args</em> 分别设置 <code class="docutils literal notranslate"><span class="pre">GenericAlias</span></code> 的 <code class="docutils literal notranslate"><span class="pre">__origin__</span></code> 和 <code class="docutils literal notranslate"><span class="pre">__args__</span></code> 属性。 <em>origin</em> 应该是一个 <span class="c-expr sig sig-inline c"><a class="reference internal" href="type.xhtml#c.PyTypeObject" title="PyTypeObject"><span class="n">PyTypeObject</span></a><span class="p">*</span></span>，而 <em>args</em> 可以是一个 <span class="c-expr sig sig-inline c"><a class="reference internal" href="tuple.xhtml#c.PyTupleObject" title="PyTupleObject"><span class="n">PyTupleObject</span></a><span class="p">*</span></span> 或者任意 <code class="docutils literal notranslate"><span class="pre">PyObject*</span></code>。 如果传递的 <em>args</em> 不是一个元组，则会自动构造一个单元组并将 <code class="docutils literal notranslate"><span class="pre">__args__</span></code> 设置为 <code class="docutils literal notranslate"><span class="pre">(args,)</span></code>。 对参数进行了最小限度的检查，因此即使 <em>origin</em> 不是类型函数也会成功。 <code class="docutils literal notranslate"><span class="pre">GenericAlias</span></code> 的 <code class="docutils literal notranslate"><span class="pre">__parameters__</span></code> 属性是从 <code class="docutils literal notranslate"><span class="pre">__args__</span></code> 懒加载的。 如果失败，则会引发一个异常并返回 <code class="docutils literal notranslate"><span class="pre">NULL</span></code>。</p>
<p>下面是一个如何创建一个扩展类型泛型的例子:</p>
<div class="highlight-c notranslate"><div class="highlight"><pre><span></span><span class="p">...</span>
<span class="k">static</span><span class="w"> </span><span class="n">PyMethodDef</span><span class="w"> </span><span class="n">my_obj_methods</span><span class="p">[]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span>
<span class="w">    </span><span class="c1">// Other methods.</span>
<span class="w">    </span><span class="p">...</span>
<span class="w">    </span><span class="p">{</span><span class="s">&quot;__class_getitem__&quot;</span><span class="p">,</span><span class="w"> </span><span class="n">Py_GenericAlias</span><span class="p">,</span><span class="w"> </span><span class="n">METH_O</span><span class="o">|</span><span class="n">METH_CLASS</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;See PEP 585&quot;</span><span class="p">}</span>
<span class="w">    </span><span class="p">...</span>
<span class="p">}</span>
</pre></div>
</div>
<div class="admonition seealso">
<p class="admonition-title">参见</p>
<p>数据模型方法 <a class="reference internal" href="../reference/datamodel.xhtml#object.__class_getitem__" title="object.__class_getitem__"><code class="xref py py-meth docutils literal notranslate"><span class="pre">__class_getitem__()</span></code></a>。</p>
</div>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.9.</span></p>
</div>
</dd></dl>

<dl class="c var">
<dt class="sig sig-object c" id="c.Py_GenericAliasType">
<a class="reference internal" href="type.xhtml#c.PyTypeObject" title="PyTypeObject"><span class="n"><span class="pre">PyTypeObject</span></span></a><span class="w"> </span><span class="sig-name descname"><span class="n"><span class="pre">Py_GenericAliasType</span></span></span><br /></dt>
<dd><em class="stableabi"> 属于 <a class="reference internal" href="stable.xhtml#stable"><span class="std std-ref">稳定 ABI</span></a> 自 3.9 版起.</em><p>由 <a class="reference internal" href="#c.Py_GenericAlias" title="Py_GenericAlias"><code class="xref c c-func docutils literal notranslate"><span class="pre">Py_GenericAlias()</span></code></a> 所返回的对象的 C 类型。等价于 Python 中的 <a class="reference internal" href="../library/types.xhtml#types.GenericAlias" title="types.GenericAlias"><code class="xref py py-class docutils literal notranslate"><span class="pre">types.GenericAlias</span></code></a> 。</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.9.</span></p>
</div>
</dd></dl>

</section>


            <div class="clearer"></div>
          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>