<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" /><meta name="viewport" content="width=device-width, initial-scale=1" />
<meta property="og:title" content="Capsule 对象" />
<meta property="og:type" content="website" />
<meta property="og:url" content="https://docs.python.org/3/c-api/capsule.xhtml" />
<meta property="og:site_name" content="Python documentation" />
<meta property="og:description" content="有关使用这些对象的更多信息请参阅 给扩展模块提供C API 。" />
<meta property="og:image" content="https://docs.python.org/3/_static/og-image.png" />
<meta property="og:image:alt" content="Python documentation" />
<meta name="description" content="有关使用这些对象的更多信息请参阅 给扩展模块提供C API 。" />
<meta property="og:image:width" content="200" />
<meta property="og:image:height" content="200" />
<meta name="theme-color" content="#3776ab" />

    <title>Capsule 对象</title>
    <link rel="stylesheet" type="text/css" href="../_static/pygments.css" />
    <link rel="stylesheet" type="text/css" href="../_static/epub.css" />
    <link rel="canonical" href="https://docs.python.org/3/c-api/capsule.html" />
    
      
    

    
    <style>
      @media only screen {
        table.full-width-table {
            width: 100%;
        }
      }
    </style>
 

  </head><body>


    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <section id="capsules">
<span id="id1"></span><h1>Capsule 对象</h1>
<p id="index-0">有关使用这些对象的更多信息请参阅 <a class="reference internal" href="../extending/extending.xhtml#using-capsules"><span class="std std-ref">给扩展模块提供C API</span></a>。</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.1.</span></p>
</div>
<dl class="c type">
<dt class="sig sig-object c" id="c.PyCapsule">
<span class="k"><span class="pre">type</span></span><span class="w"> </span><span class="sig-name descname"><span class="n"><span class="pre">PyCapsule</span></span></span><br /></dt>
<dd><p>这个 <a class="reference internal" href="structures.xhtml#c.PyObject" title="PyObject"><code class="xref c c-type docutils literal notranslate"><span class="pre">PyObject</span></code></a> 的子类型代表一个隐藏的值，适用于需要将隐藏值（作为 <span class="c-expr sig sig-inline c"><span class="kt">void</span><span class="p">*</span></span> 指针）通过 Python 代码传递到其他 C 代码的 C 扩展模块。 它常常被用来让在一个模块中定义的 C 函数指针在其他模块中可用，这样就可以使用常规导入机制来访问在动态加载的模块中定义的 C API。</p>
</dd></dl>

<dl class="c type">
<dt class="sig sig-object c" id="c.PyCapsule_Destructor">
<span class="k"><span class="pre">type</span></span><span class="w"> </span><span class="sig-name descname"><span class="n"><span class="pre">PyCapsule_Destructor</span></span></span><br /></dt>
<dd><em class="stableabi"> 属于 <a class="reference internal" href="stable.xhtml#stable"><span class="std std-ref">稳定 ABI</span></a>.</em><p>Capsule 的析构器回调的类型。 定义如下：</p>
<div class="highlight-c notranslate"><div class="highlight"><pre><span></span><span class="k">typedef</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="p">(</span><span class="o">*</span><span class="n">PyCapsule_Destructor</span><span class="p">)(</span><span class="n">PyObject</span><span class="w"> </span><span class="o">*</span><span class="p">);</span>
</pre></div>
</div>
<p>参阅 <a class="reference internal" href="#c.PyCapsule_New" title="PyCapsule_New"><code class="xref c c-func docutils literal notranslate"><span class="pre">PyCapsule_New()</span></code></a> 来获取 PyCapsule_Destructor 返回值的语义。</p>
</dd></dl>

<dl class="c function">
<dt class="sig sig-object c" id="c.PyCapsule_CheckExact">
<span class="kt"><span class="pre">int</span></span><span class="w"> </span><span class="sig-name descname"><span class="n"><span class="pre">PyCapsule_CheckExact</span></span></span><span class="sig-paren">(</span><a class="reference internal" href="structures.xhtml#c.PyObject" title="PyObject"><span class="n"><span class="pre">PyObject</span></span></a><span class="w"> </span><span class="p"><span class="pre">*</span></span><span class="n"><span class="pre">p</span></span><span class="sig-paren">)</span><br /></dt>
<dd><p>如果参数是一个 <a class="reference internal" href="#c.PyCapsule" title="PyCapsule"><code class="xref c c-type docutils literal notranslate"><span class="pre">PyCapsule</span></code></a> 则返回真值。 此函数总是会成功执行。</p>
</dd></dl>

<dl class="c function">
<dt class="sig sig-object c" id="c.PyCapsule_New">
<a class="reference internal" href="structures.xhtml#c.PyObject" title="PyObject"><span class="n"><span class="pre">PyObject</span></span></a><span class="w"> </span><span class="p"><span class="pre">*</span></span><span class="sig-name descname"><span class="n"><span class="pre">PyCapsule_New</span></span></span><span class="sig-paren">(</span><span class="kt"><span class="pre">void</span></span><span class="w"> </span><span class="p"><span class="pre">*</span></span><span class="n"><span class="pre">pointer</span></span>, <span class="k"><span class="pre">const</span></span><span class="w"> </span><span class="kt"><span class="pre">char</span></span><span class="w"> </span><span class="p"><span class="pre">*</span></span><span class="n"><span class="pre">name</span></span>, <a class="reference internal" href="#c.PyCapsule_Destructor" title="PyCapsule_Destructor"><span class="n"><span class="pre">PyCapsule_Destructor</span></span></a><span class="w"> </span><span class="n"><span class="pre">destructor</span></span><span class="sig-paren">)</span><br /></dt>
<dd><em class="refcount return_new_ref">返回值：新的引用。</em><em class="stableabi"> 属于 <a class="reference internal" href="stable.xhtml#stable"><span class="std std-ref">稳定 ABI</span></a>.</em><p>创建一个封装了 <em>pointer</em> 的 <a class="reference internal" href="#c.PyCapsule" title="PyCapsule"><code class="xref c c-type docutils literal notranslate"><span class="pre">PyCapsule</span></code></a>。 <em>pointer</em> 参考可以不为 <code class="docutils literal notranslate"><span class="pre">NULL</span></code>。</p>
<p>在失败时设置一个异常并返回 <code class="docutils literal notranslate"><span class="pre">NULL</span></code>。</p>
<p>字符串 <em>name</em> 可以是 <code class="docutils literal notranslate"><span class="pre">NULL</span></code> 或是一个指向有效的 C 字符串的指针。 如果不为 <code class="docutils literal notranslate"><span class="pre">NULL</span></code>，则此字符串必须比 capsule 长（虽然也允许在 <em>destructor</em> 中释放它。）</p>
<p>如果 <em>destructor</em> 参数不为 <code class="docutils literal notranslate"><span class="pre">NULL</span></code>，则当它被销毁时将附带 capsule 作为参数来调用。</p>
<p>如果此 capsule 将被保存为一个模块的属性，则 <em>name</em> 应当被指定为 <code class="docutils literal notranslate"><span class="pre">modulename.attributename</span></code>。 这将允许其他模块使用 <a class="reference internal" href="#c.PyCapsule_Import" title="PyCapsule_Import"><code class="xref c c-func docutils literal notranslate"><span class="pre">PyCapsule_Import()</span></code></a> 来导入此 capsule。</p>
</dd></dl>

<dl class="c function">
<dt class="sig sig-object c" id="c.PyCapsule_GetPointer">
<span class="kt"><span class="pre">void</span></span><span class="w"> </span><span class="p"><span class="pre">*</span></span><span class="sig-name descname"><span class="n"><span class="pre">PyCapsule_GetPointer</span></span></span><span class="sig-paren">(</span><a class="reference internal" href="structures.xhtml#c.PyObject" title="PyObject"><span class="n"><span class="pre">PyObject</span></span></a><span class="w"> </span><span class="p"><span class="pre">*</span></span><span class="n"><span class="pre">capsule</span></span>, <span class="k"><span class="pre">const</span></span><span class="w"> </span><span class="kt"><span class="pre">char</span></span><span class="w"> </span><span class="p"><span class="pre">*</span></span><span class="n"><span class="pre">name</span></span><span class="sig-paren">)</span><br /></dt>
<dd><em class="stableabi"> 属于 <a class="reference internal" href="stable.xhtml#stable"><span class="std std-ref">稳定 ABI</span></a>.</em><p>提取保存在 capsule 中的 <em>pointer</em>。 在失败时设置一个异常并返回 <code class="docutils literal notranslate"><span class="pre">NULL</span></code>。</p>
<p><em>name</em> 参数必须与 capsule 中存储的名称完全一致。 如果存储在 capsule 中的名称是 <code class="docutils literal notranslate"><span class="pre">NULL</span></code> ，传入的 <em>name</em> 也必须是 <code class="docutils literal notranslate"><span class="pre">NULL</span></code>。 Python 使用 C 函数 <code class="xref c c-func docutils literal notranslate"><span class="pre">strcmp()</span></code> 来比较 capsule 名称。</p>
</dd></dl>

<dl class="c function">
<dt class="sig sig-object c" id="c.PyCapsule_GetDestructor">
<a class="reference internal" href="#c.PyCapsule_Destructor" title="PyCapsule_Destructor"><span class="n"><span class="pre">PyCapsule_Destructor</span></span></a><span class="w"> </span><span class="sig-name descname"><span class="n"><span class="pre">PyCapsule_GetDestructor</span></span></span><span class="sig-paren">(</span><a class="reference internal" href="structures.xhtml#c.PyObject" title="PyObject"><span class="n"><span class="pre">PyObject</span></span></a><span class="w"> </span><span class="p"><span class="pre">*</span></span><span class="n"><span class="pre">capsule</span></span><span class="sig-paren">)</span><br /></dt>
<dd><em class="stableabi"> 属于 <a class="reference internal" href="stable.xhtml#stable"><span class="std std-ref">稳定 ABI</span></a>.</em><p>返回保存在 capsule 中的当前析构器。 在失败时设置一个异常并返回 <code class="docutils literal notranslate"><span class="pre">NULL</span></code>。</p>
<p>capsule 具有 <code class="docutils literal notranslate"><span class="pre">NULL</span></code> 析构器是合法的。 这会使得 <code class="docutils literal notranslate"><span class="pre">NULL</span></code> 返回码有些歧义；请使用 <a class="reference internal" href="#c.PyCapsule_IsValid" title="PyCapsule_IsValid"><code class="xref c c-func docutils literal notranslate"><span class="pre">PyCapsule_IsValid()</span></code></a> 或 <a class="reference internal" href="exceptions.xhtml#c.PyErr_Occurred" title="PyErr_Occurred"><code class="xref c c-func docutils literal notranslate"><span class="pre">PyErr_Occurred()</span></code></a> 来消除歧义。</p>
</dd></dl>

<dl class="c function">
<dt class="sig sig-object c" id="c.PyCapsule_GetContext">
<span class="kt"><span class="pre">void</span></span><span class="w"> </span><span class="p"><span class="pre">*</span></span><span class="sig-name descname"><span class="n"><span class="pre">PyCapsule_GetContext</span></span></span><span class="sig-paren">(</span><a class="reference internal" href="structures.xhtml#c.PyObject" title="PyObject"><span class="n"><span class="pre">PyObject</span></span></a><span class="w"> </span><span class="p"><span class="pre">*</span></span><span class="n"><span class="pre">capsule</span></span><span class="sig-paren">)</span><br /></dt>
<dd><em class="stableabi"> 属于 <a class="reference internal" href="stable.xhtml#stable"><span class="std std-ref">稳定 ABI</span></a>.</em><p>返回保存在 capsule 中的当前上下文。 在失败时设置一个异常并返回 <code class="docutils literal notranslate"><span class="pre">NULL</span></code>。</p>
<p>capsule 具有 <code class="docutils literal notranslate"><span class="pre">NULL</span></code> 上下文是全法的。 这会使得 <code class="docutils literal notranslate"><span class="pre">NULL</span></code> 返回码有些歧义；请使用 <a class="reference internal" href="#c.PyCapsule_IsValid" title="PyCapsule_IsValid"><code class="xref c c-func docutils literal notranslate"><span class="pre">PyCapsule_IsValid()</span></code></a> 或 <a class="reference internal" href="exceptions.xhtml#c.PyErr_Occurred" title="PyErr_Occurred"><code class="xref c c-func docutils literal notranslate"><span class="pre">PyErr_Occurred()</span></code></a> 来消除歧义。</p>
</dd></dl>

<dl class="c function">
<dt class="sig sig-object c" id="c.PyCapsule_GetName">
<span class="k"><span class="pre">const</span></span><span class="w"> </span><span class="kt"><span class="pre">char</span></span><span class="w"> </span><span class="p"><span class="pre">*</span></span><span class="sig-name descname"><span class="n"><span class="pre">PyCapsule_GetName</span></span></span><span class="sig-paren">(</span><a class="reference internal" href="structures.xhtml#c.PyObject" title="PyObject"><span class="n"><span class="pre">PyObject</span></span></a><span class="w"> </span><span class="p"><span class="pre">*</span></span><span class="n"><span class="pre">capsule</span></span><span class="sig-paren">)</span><br /></dt>
<dd><em class="stableabi"> 属于 <a class="reference internal" href="stable.xhtml#stable"><span class="std std-ref">稳定 ABI</span></a>.</em><p>返回保存在 capsule 中的当前名称。 在失败时设置一个异常并返回 <code class="docutils literal notranslate"><span class="pre">NULL</span></code>。</p>
<p>capsule 具有 <code class="docutils literal notranslate"><span class="pre">NULL</span></code> 名称是合法的。 这会使得 <code class="docutils literal notranslate"><span class="pre">NULL</span></code> 返回码有些歧义；请使用 <a class="reference internal" href="#c.PyCapsule_IsValid" title="PyCapsule_IsValid"><code class="xref c c-func docutils literal notranslate"><span class="pre">PyCapsule_IsValid()</span></code></a> 或 <a class="reference internal" href="exceptions.xhtml#c.PyErr_Occurred" title="PyErr_Occurred"><code class="xref c c-func docutils literal notranslate"><span class="pre">PyErr_Occurred()</span></code></a> 来消除歧义。</p>
</dd></dl>

<dl class="c function">
<dt class="sig sig-object c" id="c.PyCapsule_Import">
<span class="kt"><span class="pre">void</span></span><span class="w"> </span><span class="p"><span class="pre">*</span></span><span class="sig-name descname"><span class="n"><span class="pre">PyCapsule_Import</span></span></span><span class="sig-paren">(</span><span class="k"><span class="pre">const</span></span><span class="w"> </span><span class="kt"><span class="pre">char</span></span><span class="w"> </span><span class="p"><span class="pre">*</span></span><span class="n"><span class="pre">name</span></span>, <span class="kt"><span class="pre">int</span></span><span class="w"> </span><span class="n"><span class="pre">no_block</span></span><span class="sig-paren">)</span><br /></dt>
<dd><em class="stableabi"> 属于 <a class="reference internal" href="stable.xhtml#stable"><span class="std std-ref">稳定 ABI</span></a>.</em><p>从一个模块内的包装属性导入一个指向 C 对象的指针。 <em>name</em> 形参应当指定该属性的完整名称，就像 <code class="docutils literal notranslate"><span class="pre">module.attribute</span></code> 这样。 储存在包装中的 <em>name</em> 必须与此字符串完全匹配。</p>
<p>成功时返回 capsule 的内部 <em>指针</em>。  在失败时设置一个异常并返回 <code class="docutils literal notranslate"><span class="pre">NULL</span></code>。</p>
<div class="versionchanged">
<p><span class="versionmodified changed">在 3.3 版本发生变更: </span><em>no_block</em> 不再有任何影响。</p>
</div>
</dd></dl>

<dl class="c function">
<dt class="sig sig-object c" id="c.PyCapsule_IsValid">
<span class="kt"><span class="pre">int</span></span><span class="w"> </span><span class="sig-name descname"><span class="n"><span class="pre">PyCapsule_IsValid</span></span></span><span class="sig-paren">(</span><a class="reference internal" href="structures.xhtml#c.PyObject" title="PyObject"><span class="n"><span class="pre">PyObject</span></span></a><span class="w"> </span><span class="p"><span class="pre">*</span></span><span class="n"><span class="pre">capsule</span></span>, <span class="k"><span class="pre">const</span></span><span class="w"> </span><span class="kt"><span class="pre">char</span></span><span class="w"> </span><span class="p"><span class="pre">*</span></span><span class="n"><span class="pre">name</span></span><span class="sig-paren">)</span><br /></dt>
<dd><em class="stableabi"> 属于 <a class="reference internal" href="stable.xhtml#stable"><span class="std std-ref">稳定 ABI</span></a>.</em><p>确定 <em>capsule</em> 是否是一个有效的。 有效的 capsule 必须不为 <code class="docutils literal notranslate"><span class="pre">NULL</span></code>，传递 <a class="reference internal" href="#c.PyCapsule_CheckExact" title="PyCapsule_CheckExact"><code class="xref c c-func docutils literal notranslate"><span class="pre">PyCapsule_CheckExact()</span></code></a>，在其中存储一个不为 <code class="docutils literal notranslate"><span class="pre">NULL</span></code> 的指针，并且其内部名称与 <em>name</em> 形参相匹配。 （请参阅 <a class="reference internal" href="#c.PyCapsule_GetPointer" title="PyCapsule_GetPointer"><code class="xref c c-func docutils literal notranslate"><span class="pre">PyCapsule_GetPointer()</span></code></a> 了解如何对 capsule 名称进行比较的有关信息。）</p>
<p>换句话说，如果 <a class="reference internal" href="#c.PyCapsule_IsValid" title="PyCapsule_IsValid"><code class="xref c c-func docutils literal notranslate"><span class="pre">PyCapsule_IsValid()</span></code></a> 返回真值，则对任何访问器（以 <code class="docutils literal notranslate"><span class="pre">PyCapsule_Get</span></code> 开头的任何函数）的调用都保证会成功。</p>
<p>如果对象有效并且匹配传入的名称则返回非零值。 否则返回 <code class="docutils literal notranslate"><span class="pre">0</span></code>。 此函数一定不会失败。</p>
</dd></dl>

<dl class="c function">
<dt class="sig sig-object c" id="c.PyCapsule_SetContext">
<span class="kt"><span class="pre">int</span></span><span class="w"> </span><span class="sig-name descname"><span class="n"><span class="pre">PyCapsule_SetContext</span></span></span><span class="sig-paren">(</span><a class="reference internal" href="structures.xhtml#c.PyObject" title="PyObject"><span class="n"><span class="pre">PyObject</span></span></a><span class="w"> </span><span class="p"><span class="pre">*</span></span><span class="n"><span class="pre">capsule</span></span>, <span class="kt"><span class="pre">void</span></span><span class="w"> </span><span class="p"><span class="pre">*</span></span><span class="n"><span class="pre">context</span></span><span class="sig-paren">)</span><br /></dt>
<dd><em class="stableabi"> 属于 <a class="reference internal" href="stable.xhtml#stable"><span class="std std-ref">稳定 ABI</span></a>.</em><p>将 <em>capsule</em> 内部的上下文指针设为 <em>context</em>。</p>
<p>成功时返回 <code class="docutils literal notranslate"><span class="pre">0</span></code>。 失败时返回非零值并设置一个异常。</p>
</dd></dl>

<dl class="c function">
<dt class="sig sig-object c" id="c.PyCapsule_SetDestructor">
<span class="kt"><span class="pre">int</span></span><span class="w"> </span><span class="sig-name descname"><span class="n"><span class="pre">PyCapsule_SetDestructor</span></span></span><span class="sig-paren">(</span><a class="reference internal" href="structures.xhtml#c.PyObject" title="PyObject"><span class="n"><span class="pre">PyObject</span></span></a><span class="w"> </span><span class="p"><span class="pre">*</span></span><span class="n"><span class="pre">capsule</span></span>, <a class="reference internal" href="#c.PyCapsule_Destructor" title="PyCapsule_Destructor"><span class="n"><span class="pre">PyCapsule_Destructor</span></span></a><span class="w"> </span><span class="n"><span class="pre">destructor</span></span><span class="sig-paren">)</span><br /></dt>
<dd><em class="stableabi"> 属于 <a class="reference internal" href="stable.xhtml#stable"><span class="std std-ref">稳定 ABI</span></a>.</em><p>将 <em>capsule</em> 内部的析构器设为 <em>destructor</em>。</p>
<p>成功时返回 <code class="docutils literal notranslate"><span class="pre">0</span></code>。 失败时返回非零值并设置一个异常。</p>
</dd></dl>

<dl class="c function">
<dt class="sig sig-object c" id="c.PyCapsule_SetName">
<span class="kt"><span class="pre">int</span></span><span class="w"> </span><span class="sig-name descname"><span class="n"><span class="pre">PyCapsule_SetName</span></span></span><span class="sig-paren">(</span><a class="reference internal" href="structures.xhtml#c.PyObject" title="PyObject"><span class="n"><span class="pre">PyObject</span></span></a><span class="w"> </span><span class="p"><span class="pre">*</span></span><span class="n"><span class="pre">capsule</span></span>, <span class="k"><span class="pre">const</span></span><span class="w"> </span><span class="kt"><span class="pre">char</span></span><span class="w"> </span><span class="p"><span class="pre">*</span></span><span class="n"><span class="pre">name</span></span><span class="sig-paren">)</span><br /></dt>
<dd><em class="stableabi"> 属于 <a class="reference internal" href="stable.xhtml#stable"><span class="std std-ref">稳定 ABI</span></a>.</em><p>将 <em>capsule</em> 内部的名称设为 <em>name</em>。 如果不为 <code class="docutils literal notranslate"><span class="pre">NULL</span></code>，则名称的存在期必须比 capsule 更长。 如果之前保存在 capsule 中的 <em>name</em> 不为 <code class="docutils literal notranslate"><span class="pre">NULL</span></code>，则不会尝试释放它。</p>
<p>成功时返回 <code class="docutils literal notranslate"><span class="pre">0</span></code>。 失败时返回非零值并设置一个异常。</p>
</dd></dl>

<dl class="c function">
<dt class="sig sig-object c" id="c.PyCapsule_SetPointer">
<span class="kt"><span class="pre">int</span></span><span class="w"> </span><span class="sig-name descname"><span class="n"><span class="pre">PyCapsule_SetPointer</span></span></span><span class="sig-paren">(</span><a class="reference internal" href="structures.xhtml#c.PyObject" title="PyObject"><span class="n"><span class="pre">PyObject</span></span></a><span class="w"> </span><span class="p"><span class="pre">*</span></span><span class="n"><span class="pre">capsule</span></span>, <span class="kt"><span class="pre">void</span></span><span class="w"> </span><span class="p"><span class="pre">*</span></span><span class="n"><span class="pre">pointer</span></span><span class="sig-paren">)</span><br /></dt>
<dd><em class="stableabi"> 属于 <a class="reference internal" href="stable.xhtml#stable"><span class="std std-ref">稳定 ABI</span></a>.</em><p>将 <em>capsule</em> 内部的空指针设为 <em>pointer</em>。 指针不可为 <code class="docutils literal notranslate"><span class="pre">NULL</span></code>。</p>
<p>成功时返回 <code class="docutils literal notranslate"><span class="pre">0</span></code>。 失败时返回非零值并设置一个异常。</p>
</dd></dl>

</section>


            <div class="clearer"></div>
          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>