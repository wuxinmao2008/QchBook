<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" /><meta name="viewport" content="width=device-width, initial-scale=1" />
<meta property="og:title" content="旧缓冲协议" />
<meta property="og:type" content="website" />
<meta property="og:url" content="https://docs.python.org/3/c-api/objbuffer.xhtml" />
<meta property="og:site_name" content="Python documentation" />
<meta property="og:description" content="这些函数是 Python 2 中“旧缓冲协议”API 的组成部分。 在 Python 3 中，此协议已不复存在，但这些函数仍然被公开以便移植 2.x 的代码。 它们被用作 新缓冲协议 的兼容性包装器，但它们并不会在缓冲被导出时向你提供对所获资源的生命周期控制。 因此，推荐你调用 PyObject_GetBuffer()(或者配合 PyArg_ParseTuple() 函数族使用 y* 或 w..." />
<meta property="og:image" content="https://docs.python.org/3/_static/og-image.png" />
<meta property="og:image:alt" content="Python documentation" />
<meta name="description" content="这些函数是 Python 2 中“旧缓冲协议”API 的组成部分。 在 Python 3 中，此协议已不复存在，但这些函数仍然被公开以便移植 2.x 的代码。 它们被用作 新缓冲协议 的兼容性包装器，但它们并不会在缓冲被导出时向你提供对所获资源的生命周期控制。 因此，推荐你调用 PyObject_GetBuffer()(或者配合 PyArg_ParseTuple() 函数族使用 y* 或 w..." />
<meta property="og:image:width" content="200" />
<meta property="og:image:height" content="200" />
<meta name="theme-color" content="#3776ab" />

    <title>旧缓冲协议</title>
    <link rel="stylesheet" type="text/css" href="../_static/pygments.css" />
    <link rel="stylesheet" type="text/css" href="../_static/epub.css" />
    <link rel="canonical" href="https://docs.python.org/3/c-api/objbuffer.html" />
    
      
    

    
    <style>
      @media only screen {
        table.full-width-table {
            width: 100%;
        }
      }
    </style>
 

  </head><body>


    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <section id="old-buffer-protocol">
<h1>旧缓冲协议</h1>
<div class="deprecated">
<p><span class="versionmodified deprecated">自 3.0 版本弃用.</span></p>
</div>
<p>这些函数是 Python 2 中“旧缓冲协议”API 的组成部分。 在 Python 3 中，此协议已不复存在，但这些函数仍然被公开以便移植 2.x 的代码。 它们被用作 <a class="reference internal" href="buffer.xhtml#bufferobjects"><span class="std std-ref">新缓冲协议</span></a> 的兼容性包装器，但它们并不会在缓冲被导出时向你提供对所获资源的生命周期控制。</p>
<p>因此，推荐你调用 <a class="reference internal" href="buffer.xhtml#c.PyObject_GetBuffer" title="PyObject_GetBuffer"><code class="xref c c-func docutils literal notranslate"><span class="pre">PyObject_GetBuffer()</span></code></a> (或者配合 <a class="reference internal" href="arg.xhtml#c.PyArg_ParseTuple" title="PyArg_ParseTuple"><code class="xref c c-func docutils literal notranslate"><span class="pre">PyArg_ParseTuple()</span></code></a> 函数族使用 <code class="docutils literal notranslate"><span class="pre">y*</span></code> 或 <code class="docutils literal notranslate"><span class="pre">w*</span></code> <a class="reference internal" href="arg.xhtml#arg-parsing"><span class="std std-ref">格式码</span></a>) 来获取一个对象的缓冲视图，并在缓冲视图可被释放时调用 <a class="reference internal" href="buffer.xhtml#c.PyBuffer_Release" title="PyBuffer_Release"><code class="xref c c-func docutils literal notranslate"><span class="pre">PyBuffer_Release()</span></code></a>。</p>
<dl class="c function">
<dt class="sig sig-object c" id="c.PyObject_AsCharBuffer">
<span class="kt"><span class="pre">int</span></span><span class="w"> </span><span class="sig-name descname"><span class="n"><span class="pre">PyObject_AsCharBuffer</span></span></span><span class="sig-paren">(</span><a class="reference internal" href="structures.xhtml#c.PyObject" title="PyObject"><span class="n"><span class="pre">PyObject</span></span></a><span class="w"> </span><span class="p"><span class="pre">*</span></span><span class="n"><span class="pre">obj</span></span>, <span class="k"><span class="pre">const</span></span><span class="w"> </span><span class="kt"><span class="pre">char</span></span><span class="w"> </span><span class="p"><span class="pre">*</span></span><span class="p"><span class="pre">*</span></span><span class="n"><span class="pre">buffer</span></span>, <a class="reference internal" href="intro.xhtml#c.Py_ssize_t" title="Py_ssize_t"><span class="n"><span class="pre">Py_ssize_t</span></span></a><span class="w"> </span><span class="p"><span class="pre">*</span></span><span class="n"><span class="pre">buffer_len</span></span><span class="sig-paren">)</span><br /></dt>
<dd><em class="stableabi"> 属于 <a class="reference internal" href="stable.xhtml#stable"><span class="std std-ref">稳定 ABI</span></a>.</em><p>返回一个指向可用作基于字符的输入的只读内存地址的指针。 <em>obj</em> 参数必须支持单段字符缓冲接口。 成功时返回 <code class="docutils literal notranslate"><span class="pre">0</span></code>，将 <em>buffer</em> 设为内存地址并将 <em>buffer_len</em> 设为缓冲区长度。 出错时返回 <code class="docutils literal notranslate"><span class="pre">-1</span></code> 并设置一个 <a class="reference internal" href="../library/exceptions.xhtml#TypeError" title="TypeError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">TypeError</span></code></a>。</p>
</dd></dl>

<dl class="c function">
<dt class="sig sig-object c" id="c.PyObject_AsReadBuffer">
<span class="kt"><span class="pre">int</span></span><span class="w"> </span><span class="sig-name descname"><span class="n"><span class="pre">PyObject_AsReadBuffer</span></span></span><span class="sig-paren">(</span><a class="reference internal" href="structures.xhtml#c.PyObject" title="PyObject"><span class="n"><span class="pre">PyObject</span></span></a><span class="w"> </span><span class="p"><span class="pre">*</span></span><span class="n"><span class="pre">obj</span></span>, <span class="k"><span class="pre">const</span></span><span class="w"> </span><span class="kt"><span class="pre">void</span></span><span class="w"> </span><span class="p"><span class="pre">*</span></span><span class="p"><span class="pre">*</span></span><span class="n"><span class="pre">buffer</span></span>, <a class="reference internal" href="intro.xhtml#c.Py_ssize_t" title="Py_ssize_t"><span class="n"><span class="pre">Py_ssize_t</span></span></a><span class="w"> </span><span class="p"><span class="pre">*</span></span><span class="n"><span class="pre">buffer_len</span></span><span class="sig-paren">)</span><br /></dt>
<dd><em class="stableabi"> 属于 <a class="reference internal" href="stable.xhtml#stable"><span class="std std-ref">稳定 ABI</span></a>.</em><p>返回一个指向包含任意数据的只读内存地址的指针。 <em>obj</em> 参数必须支持单段可读缓冲接口。 成功时返回 <code class="docutils literal notranslate"><span class="pre">0</span></code>，将 <em>buffer</em> 设为内存地址并将 <em>buffer_len</em> 设为缓冲区长度。 出错时返回 <code class="docutils literal notranslate"><span class="pre">-1</span></code> 并设置一个 <a class="reference internal" href="../library/exceptions.xhtml#TypeError" title="TypeError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">TypeError</span></code></a>。</p>
</dd></dl>

<dl class="c function">
<dt class="sig sig-object c" id="c.PyObject_CheckReadBuffer">
<span class="kt"><span class="pre">int</span></span><span class="w"> </span><span class="sig-name descname"><span class="n"><span class="pre">PyObject_CheckReadBuffer</span></span></span><span class="sig-paren">(</span><a class="reference internal" href="structures.xhtml#c.PyObject" title="PyObject"><span class="n"><span class="pre">PyObject</span></span></a><span class="w"> </span><span class="p"><span class="pre">*</span></span><span class="n"><span class="pre">o</span></span><span class="sig-paren">)</span><br /></dt>
<dd><em class="stableabi"> 属于 <a class="reference internal" href="stable.xhtml#stable"><span class="std std-ref">稳定 ABI</span></a>.</em><p>如果 <em>o</em> 支持单段可读缓冲接口则返回 <code class="docutils literal notranslate"><span class="pre">1</span></code>。 否则返回 <code class="docutils literal notranslate"><span class="pre">0</span></code>。 此函数总是会成功执行。</p>
<p>请注意此函数会尝试获取并释放一个缓冲区，并且在调用对应函数期间发生的异常会被屏蔽。 要获取错误报告则应改用 <a class="reference internal" href="buffer.xhtml#c.PyObject_GetBuffer" title="PyObject_GetBuffer"><code class="xref c c-func docutils literal notranslate"><span class="pre">PyObject_GetBuffer()</span></code></a>。</p>
</dd></dl>

<dl class="c function">
<dt class="sig sig-object c" id="c.PyObject_AsWriteBuffer">
<span class="kt"><span class="pre">int</span></span><span class="w"> </span><span class="sig-name descname"><span class="n"><span class="pre">PyObject_AsWriteBuffer</span></span></span><span class="sig-paren">(</span><a class="reference internal" href="structures.xhtml#c.PyObject" title="PyObject"><span class="n"><span class="pre">PyObject</span></span></a><span class="w"> </span><span class="p"><span class="pre">*</span></span><span class="n"><span class="pre">obj</span></span>, <span class="kt"><span class="pre">void</span></span><span class="w"> </span><span class="p"><span class="pre">*</span></span><span class="p"><span class="pre">*</span></span><span class="n"><span class="pre">buffer</span></span>, <a class="reference internal" href="intro.xhtml#c.Py_ssize_t" title="Py_ssize_t"><span class="n"><span class="pre">Py_ssize_t</span></span></a><span class="w"> </span><span class="p"><span class="pre">*</span></span><span class="n"><span class="pre">buffer_len</span></span><span class="sig-paren">)</span><br /></dt>
<dd><em class="stableabi"> 属于 <a class="reference internal" href="stable.xhtml#stable"><span class="std std-ref">稳定 ABI</span></a>.</em><p>返回一个指向可写内存地址的指针。 <em>obj</em> 必须支持单段字符缓冲接口。 成功时返回 <code class="docutils literal notranslate"><span class="pre">0</span></code>，将 <em>buffer</em> 设为内存地址并将 <em>buffer_len</em> 设为缓冲区长度。 出错时返回 <code class="docutils literal notranslate"><span class="pre">-1</span></code> 并设置一个 <a class="reference internal" href="../library/exceptions.xhtml#TypeError" title="TypeError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">TypeError</span></code></a>。</p>
</dd></dl>

</section>


            <div class="clearer"></div>
          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>